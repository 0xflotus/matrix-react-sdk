[{"filePath":"/home/rav/work/matrix-react-sdk/src/AddThreepid.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");","fix":{"range":[562,565],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 41 exceeds the maximum line length of 90.","line":41,"column":1,"nodeType":"Program","source":"        return MatrixClientPeg.get().requestAdd3pidEmailToken(emailAddress, this.clientSecret, 1).then((res) => {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":61,"column":9,"nodeType":"VariableDeclaration","source":"        var identityServerDomain = MatrixClientPeg.get().idBaseUrl.split(\"://\")[1];","fix":{"range":[2418,2421],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":65,"column":44,"nodeType":"Property","source":"            id_server: identityServerDomain","fix":{"range":[2667,2667],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 68 exceeds the maximum line length of 90.","line":68,"column":1,"nodeType":"Program","source":"                err.message = \"Failed to verify email address: make sure you clicked the link in the email\";"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":69,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[2876,2889],"text":"            "}}],"errorCount":1,"warningCount":5,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar MatrixClientPeg = require(\"./MatrixClientPeg\");\n\n/**\n * Allows a user to add a third party identifier to their Home Server and,\n * optionally, the identity servers.\n *\n * This involves getting an email token from the identity server to \"prove\" that\n * the client owns the given email address, which is then passed to the\n * add threepid API on the homeserver.\n */\nclass AddThreepid {\n    constructor() {\n        this.clientSecret = MatrixClientPeg.get().generateClientSecret();\n    }\n\n    /**\n     * Attempt to add an email threepid. This will trigger a side-effect of\n     * sending an email to the provided email address.\n     * @param {string} emailAddress The email address to add\n     * @param {boolean} bind If True, bind this email to this mxid on the Identity Server\n     * @return {Promise} Resolves when the email has been sent. Then call checkEmailLinkClicked().\n     */\n    addEmailAddress(emailAddress, bind) {\n        this.bind = bind;\n        return MatrixClientPeg.get().requestAdd3pidEmailToken(emailAddress, this.clientSecret, 1).then((res) => {\n            this.sessionId = res.sid;\n            return res;\n        }, function(err) {\n            if (err.errcode == 'M_THREEPID_IN_USE') {\n                err.message = \"This email address is already in use\";\n            } else if (err.httpStatus) {\n                err.message = err.message + ` (Status ${err.httpStatus})`;\n            }\n            throw err;\n        });\n    }\n\n    /**\n     * Checks if the email link has been clicked by attempting to add the threepid\n     * @return {Promise} Resolves if the password was reset. Rejects with an object\n     * with a \"message\" property which contains a human-readable message detailing why\n     * the reset failed, e.g. \"There is no mapped matrix user ID for the given email address\".\n     */\n    checkEmailLinkClicked() {\n        var identityServerDomain = MatrixClientPeg.get().idBaseUrl.split(\"://\")[1];\n        return MatrixClientPeg.get().addThreePid({\n            sid: this.sessionId,\n            client_secret: this.clientSecret,\n            id_server: identityServerDomain\n        }, this.bind).catch(function(err) {\n            if (err.httpStatus === 401) {\n                err.message = \"Failed to verify email address: make sure you clicked the link in the email\";\n            }\n            else if (err.httpStatus) {\n                err.message += ` (Status ${err.httpStatus})`;\n            }\n            throw err;\n        });\n    }\n}\n\nmodule.exports = AddThreepid;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/async-components/views/dialogs/EncryptedEventDialog.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require(\"react\");","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[598,601],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[635,638],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":35,"column":9,"nodeType":"VariableDeclaration","source":"        var client = MatrixClientPeg.get();","fix":{"range":[1071,1074],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":9,"nodeType":"VariableDeclaration","source":"        var client = MatrixClientPeg.get();","fix":{"range":[1710,1713],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 56 exceeds the maximum line length of 90.","line":56,"column":1,"nodeType":"Program","source":"            client.removeListener(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":79,"column":9,"nodeType":"VariableDeclaration","source":"        var device = this.state.device;","fix":{"range":[2438,2441],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":84,"column":9,"nodeType":"VariableDeclaration","source":"        var verificationStatus = (<b>NOT verified</b>);","fix":{"range":[2556,2559],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":116,"column":9,"nodeType":"VariableDeclaration","source":"        var event = this.props.event;","fix":{"range":[3599,3602],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 131 exceeds the maximum line length of 90.","line":131,"column":1,"nodeType":"Program","source":"                        <td><code>{ event.getKeysClaimed().ed25519 || <i>none</i> }</code></td>"},{"ruleId":"max-len","severity":1,"message":"Line 135 exceeds the maximum line length of 90.","line":135,"column":1,"nodeType":"Program","source":"                        <td>{ event.getWireContent().algorithm || <i>unencrypted</i> }</td>"},{"ruleId":"max-len","severity":1,"message":"Line 147 exceeds the maximum line length of 90.","line":147,"column":1,"nodeType":"Program","source":"                        <td><code>{ event.getWireContent().session_id || <i>none</i> }</code></td>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":155,"column":9,"nodeType":"VariableDeclaration","source":"        var DeviceVerifyButtons = sdk.getComponent('elements.DeviceVerifyButtons');","fix":{"range":[5022,5025],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":157,"column":9,"nodeType":"VariableDeclaration","source":"        var buttons = null;","fix":{"range":[5107,5110],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 179 exceeds the maximum line length of 90.","line":179,"column":1,"nodeType":"Program","source":"                    <button className=\"mx_Dialog_primary\" onClick={ this.props.onFinished } autoFocus={ true }>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":186,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[6162,6162],"text":","}}],"errorCount":1,"warningCount":15,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require(\"react\");\nvar sdk = require('../../../index');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\n\nmodule.exports = React.createClass({\n    displayName: 'EncryptedEventDialog',\n\n    propTypes: {\n        event: React.PropTypes.object.isRequired,\n        onFinished: React.PropTypes.func.isRequired,\n    },\n\n    getInitialState: function() {\n        return { device: this.refreshDevice() };\n    },\n\n    componentWillMount: function() {\n        this._unmounted = false;\n        var client = MatrixClientPeg.get();\n        client.on(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);\n\n        // no need to redownload keys if we already have the device\n        if (this.state.device) {\n            return;\n        }\n        client.downloadKeys([this.props.event.getSender()], true).done(()=>{\n            if (this._unmounted) {\n                return;\n            }\n            this.setState({ device: this.refreshDevice() });\n        }, (err)=>{\n            console.log(\"Error downloading devices\", err);\n        });\n    },\n\n    componentWillUnmount: function() {\n        this._unmounted = true;\n        var client = MatrixClientPeg.get();\n        if (client) {\n            client.removeListener(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);\n        }\n    },\n\n    refreshDevice: function() {\n        return MatrixClientPeg.get().getEventSenderDeviceInfo(this.props.event);\n    },\n\n    onDeviceVerificationChanged: function(userId, device) {\n        if (userId == this.props.event.getSender()) {\n            this.setState({ device: this.refreshDevice() });\n        }\n    },\n\n    onKeyDown: function(e) {\n        if (e.keyCode === 27) { // escape\n            e.stopPropagation();\n            e.preventDefault();\n            this.props.onFinished(false);\n        }\n    },\n\n    _renderDeviceInfo: function() {\n        var device = this.state.device;\n        if (!device) {\n            return (<i>unknown device</i>);\n        }\n\n        var verificationStatus = (<b>NOT verified</b>);\n        if (device.isBlocked()) {\n            verificationStatus = (<b>Blacklisted</b>);\n        } else if (device.isVerified()) {\n            verificationStatus = \"verified\";\n        }\n\n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>Name</td>\n                        <td>{ device.getDisplayName() }</td>\n                    </tr>\n                    <tr>\n                        <td>Device ID</td>\n                        <td><code>{ device.deviceId }</code></td>\n                    </tr>\n                    <tr>\n                        <td>Verification</td>\n                        <td>{ verificationStatus }</td>\n                    </tr>\n                    <tr>\n                        <td>Ed25519 fingerprint</td>\n                        <td><code>{device.getFingerprint()}</code></td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    },\n\n    _renderEventInfo: function() {\n        var event = this.props.event;\n\n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>User ID</td>\n                        <td>{ event.getSender() }</td>\n                    </tr>\n                    <tr>\n                        <td>Curve25519 identity key</td>\n                        <td><code>{ event.getSenderKey() || <i>none</i> }</code></td>\n                    </tr>\n                    <tr>\n                        <td>Claimed Ed25519 fingerprint key</td>\n                        <td><code>{ event.getKeysClaimed().ed25519 || <i>none</i> }</code></td>\n                    </tr>\n                    <tr>\n                        <td>Algorithm</td>\n                        <td>{ event.getWireContent().algorithm || <i>unencrypted</i> }</td>\n                    </tr>\n                {\n                    event.getContent().msgtype === 'm.bad.encrypted' ? (\n                    <tr>\n                        <td>Decryption error</td>\n                        <td>{ event.getContent().body }</td>\n                    </tr>\n                    ) : null\n                }\n                    <tr>\n                        <td>Session ID</td>\n                        <td><code>{ event.getWireContent().session_id || <i>none</i> }</code></td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    },\n\n    render: function() {\n        var DeviceVerifyButtons = sdk.getComponent('elements.DeviceVerifyButtons');\n\n        var buttons = null;\n        if (this.state.device) {\n            buttons = (\n                <DeviceVerifyButtons device={ this.state.device }\n                    userId={ this.props.event.getSender() }\n                />\n            );\n        }\n\n        return (\n            <div className=\"mx_EncryptedEventDialog\" onKeyDown={ this.onKeyDown }>\n                <div className=\"mx_Dialog_title\">\n                    End-to-end encryption information\n                </div>\n                <div className=\"mx_Dialog_content\">\n                    <h4>Event information</h4>\n                    {this._renderEventInfo()}\n\n                    <h4>Sender device information</h4>\n                    {this._renderDeviceInfo()}\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button className=\"mx_Dialog_primary\" onClick={ this.props.onFinished } autoFocus={ true }>\n                        OK\n                    </button>\n                    {buttons}\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/async-components/views/dialogs/ExportE2eKeysDialog.js","messages":[],"errorCount":0,"warningCount":0},{"filePath":"/home/rav/work/matrix-react-sdk/src/async-components/views/dialogs/ImportE2eKeysDialog.js","messages":[],"errorCount":0,"warningCount":0},{"filePath":"/home/rav/work/matrix-react-sdk/src/autocomplete/AutocompleteProvider.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":14,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'query'.","line":14,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'selection'.","line":14,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'force'.","line":14,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"max-len","severity":1,"message":"Line 17 exceeds the maximum line length of 90.","line":17,"column":1,"nodeType":"Program","source":"    getCurrentCommand(query: string, selection: {start: number, end: number}, force: boolean = false): ?string {"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":32,"column":13,"nodeType":"VariableDeclaration","source":"            let matchStart = match.index,"},{"ruleId":"prefer-const","severity":1,"message":"'matchStart' is never reassigned. Use 'const' instead.","line":32,"column":17,"nodeType":"Identifier","source":"            let matchStart = match.index,"},{"ruleId":"prefer-const","severity":1,"message":"'matchEnd' is never reassigned. Use 'const' instead.","line":33,"column":17,"nodeType":"Identifier","source":"                matchEnd = matchStart + match[0].length;"},{"ruleId":"max-len","severity":1,"message":"Line 53 exceeds the maximum line length of 90.","line":53,"column":1,"nodeType":"Program","source":"    async getCompletions(query: string, selection: SelectionRange, force: boolean = false): Array<Completion> {"}],"errorCount":0,"warningCount":9,"source":"import React from 'react';\nimport type {Completion, SelectionRange} from './Autocompleter';\n\nexport default class AutocompleteProvider {\n    constructor(commandRegex?: RegExp, fuseOpts?: any) {\n        if (commandRegex) {\n            if (!commandRegex.global) {\n                throw new Error('commandRegex must have global flag set');\n            }\n            this.commandRegex = commandRegex;\n        }\n    }\n\n    /**\n     * Of the matched commands in the query, returns the first that contains or is contained by the selection, or null.\n     */\n    getCurrentCommand(query: string, selection: {start: number, end: number}, force: boolean = false): ?string {\n        let commandRegex = this.commandRegex;\n\n        if (force && this.shouldForceComplete()) {\n            commandRegex = /\\S+/g;\n        }\n\n        if (commandRegex == null) {\n            return null;\n        }\n\n        commandRegex.lastIndex = 0;\n\n        let match;\n        while ((match = commandRegex.exec(query)) != null) {\n            let matchStart = match.index,\n                matchEnd = matchStart + match[0].length;\n            if (selection.start <= matchEnd && selection.end >= matchStart) {\n                return {\n                    command: match,\n                    range: {\n                        start: matchStart,\n                        end: matchEnd,\n                    },\n                };\n            }\n        }\n        return {\n            command: null,\n            range: {\n                start: -1,\n                end: -1,\n            },\n        };\n    }\n\n    async getCompletions(query: string, selection: SelectionRange, force: boolean = false): Array<Completion> {\n        return [];\n    }\n\n    getName(): string {\n        return 'Default Provider';\n    }\n\n    renderCompletions(completions: [React.Component]): ?React.Component {\n        console.error('stub; should be implemented in subclasses');\n        return null;\n    }\n\n    // Whether we should provide completions even if triggered forcefully, without a sigil.\n    shouldForceComplete(): boolean {\n        return false;\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/autocomplete/Autocompleter.js","messages":[{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":29,"column":7,"nodeType":"ArrowFunctionExpression","source":"].map(completer => completer.getInstance());","fix":{"range":[630,639],"text":"(completer)"}},{"ruleId":"max-len","severity":1,"message":"Line 34 exceeds the maximum line length of 90.","line":34,"column":1,"nodeType":"Program","source":"export async function getCompletions(query: string, selection: SelectionRange, force: boolean = false): Array<Completion> {"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":43,"column":23,"nodeType":"ArrowFunctionExpression","source":"        PROVIDERS.map(provider => {","fix":{"range":[1397,1405],"text":"(provider)"}},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":44,"column":20,"nodeType":"CallExpression","source":"            return Q(provider.getCompletions(query, selection, force))"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":46,"column":11,"nodeType":"CallExpression","source":"        })","fix":{"range":[1547,1547],"text":","}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":50,"column":17,"nodeType":"ArrowFunctionExpression","source":"        .filter(completion => completion.state === \"fulfilled\")","fix":{"range":[1599,1609],"text":"(completion)"}}],"errorCount":1,"warningCount":5,"source":"// @flow\n\nimport type {Component} from 'react';\nimport CommandProvider from './CommandProvider';\nimport DuckDuckGoProvider from './DuckDuckGoProvider';\nimport RoomProvider from './RoomProvider';\nimport UserProvider from './UserProvider';\nimport EmojiProvider from './EmojiProvider';\nimport Q from 'q';\n\nexport type SelectionRange = {\n    start: number,\n    end: number\n};\n\nexport type Completion = {\n    completion: string,\n    component: ?Component,\n    range: SelectionRange,\n    command: ?string,\n};\n\nconst PROVIDERS = [\n    UserProvider,\n    RoomProvider,\n    EmojiProvider,\n    CommandProvider,\n    DuckDuckGoProvider,\n].map(completer => completer.getInstance());\n\n// Providers will get rejected if they take longer than this.\nconst PROVIDER_COMPLETION_TIMEOUT = 3000;\n\nexport async function getCompletions(query: string, selection: SelectionRange, force: boolean = false): Array<Completion> {\n    /* Note: That this waits for all providers to return is *intentional*\n     otherwise, we run into a condition where new completions are displayed\n     while the user is interacting with the list, which makes it difficult\n     to predict whether an action will actually do what is intended\n\n     It ends up containing a list of Q promise states, which are objects with\n     state (== \"fulfilled\" || \"rejected\") and value. */\n    const completionsList = await Q.allSettled(\n        PROVIDERS.map(provider => {\n            return Q(provider.getCompletions(query, selection, force))\n                .timeout(PROVIDER_COMPLETION_TIMEOUT);\n        })\n    );\n\n    return completionsList\n        .filter(completion => completion.state === \"fulfilled\")\n        .map((completionsState, i) => {\n            return {\n                completions: completionsState.value,\n                provider: PROVIDERS[i],\n\n                /* the currently matched \"command\" the completer tried to complete\n                 * we pass this through so that Autocomplete can figure out when to\n                 * re-show itself once hidden.\n                 */\n                command: PROVIDERS[i].getCurrentCommand(query, selection, force),\n            };\n        });\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/autocomplete/CommandProvider.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":46,"column":6,"nodeType":"ObjectExpression","source":"    }","fix":{"range":[1145,1145],"text":","}},{"ruleId":"prefer-const","severity":1,"message":"'COMMAND_RE' is never reassigned. Use 'const' instead.","line":49,"column":5,"nodeType":"Identifier","source":"let COMMAND_RE = /(^\\/\\w*)/g;","fix":{"range":[1150,1153],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'command' is never reassigned. Use 'const' instead.","line":63,"column":14,"nodeType":"Identifier","source":"        let {command, range} = this.getCurrentCommand(query, selection);","fix":{"range":[1552,1555],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'range' is never reassigned. Use 'const' instead.","line":63,"column":23,"nodeType":"Identifier","source":"        let {command, range} = this.getCurrentCommand(query, selection);","fix":{"range":[1552,1555],"text":"const"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":65,"column":60,"nodeType":"ArrowFunctionExpression","source":"            completions = this.fuse.search(command[0]).map(result => {","fix":{"range":[1699,1705],"text":"(result)"}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":86,"column":13,"nodeType":"Punctuator","source":"            {instance = new CommandProvider();}","fix":{"range":[2255,2268],"text":"            "}}],"errorCount":1,"warningCount":5,"source":"import React from 'react';\nimport AutocompleteProvider from './AutocompleteProvider';\nimport Fuse from 'fuse.js';\nimport {TextualCompletion} from './Components';\n\nconst COMMANDS = [\n    {\n        command: '/me',\n        args: '<message>',\n        description: 'Displays action',\n    },\n    {\n        command: '/ban',\n        args: '<user-id> [reason]',\n        description: 'Bans user with given id',\n    },\n    {\n        command: '/deop',\n        args: '<user-id>',\n        description: 'Deops user with given id',\n    },\n    {\n        command: '/invite',\n        args: '<user-id>',\n        description: 'Invites user with given id to current room',\n    },\n    {\n        command: '/join',\n        args: '<room-alias>',\n        description: 'Joins room with given alias',\n    },\n    {\n        command: '/kick',\n        args: '<user-id> [reason]',\n        description: 'Kicks user with given id',\n    },\n    {\n        command: '/nick',\n        args: '<display-name>',\n        description: 'Changes your display nickname',\n    },\n    {\n        command: '/ddg',\n        args: '<query>',\n        description: 'Searches DuckDuckGo for results',\n    }\n];\n\nlet COMMAND_RE = /(^\\/\\w*)/g;\n\nlet instance = null;\n\nexport default class CommandProvider extends AutocompleteProvider {\n    constructor() {\n        super(COMMAND_RE);\n        this.fuse = new Fuse(COMMANDS, {\n           keys: ['command', 'args', 'description'],\n        });\n    }\n\n    async getCompletions(query: string, selection: {start: number, end: number}) {\n        let completions = [];\n        let {command, range} = this.getCurrentCommand(query, selection);\n        if (command) {\n            completions = this.fuse.search(command[0]).map(result => {\n                return {\n                    completion: result.command + ' ',\n                    component: (<TextualCompletion\n                        title={result.command}\n                        subtitle={result.args}\n                        description={result.description}\n                        />),\n                    range,\n                };\n            });\n        }\n        return completions;\n    }\n\n    getName() {\n        return '*️⃣ Commands';\n    }\n\n    static getInstance(): CommandProvider {\n        if (instance == null)\n            {instance = new CommandProvider();}\n\n        return instance;\n    }\n\n    renderCompletions(completions: [React.Component]): ?React.Component {\n        return <div className=\"mx_Autocomplete_Completion_container_block\">\n            {completions}\n        </div>;\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/autocomplete/Components.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ReactDOM' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","source":"import ReactDOM from 'react-dom';"},{"ruleId":"comma-dangle","severity":2,"message":"Unexpected trailing comma.","line":18,"column":25,"nodeType":"ExperimentalRestProperty","source":"            ...restProps,","fix":{"range":[670,671],"text":""}},{"ruleId":"max-len","severity":1,"message":"Line 21 exceeds the maximum line length of 90.","line":21,"column":1,"nodeType":"Program","source":"            <div className={classNames('mx_Autocomplete_Completion_block', className)} {...restProps}>"},{"ruleId":"max-len","severity":1,"message":"Line 24 exceeds the maximum line length of 90.","line":24,"column":1,"nodeType":"Program","source":"                <span className=\"mx_Autocomplete_Completion_description\">{description}</span>"},{"ruleId":"comma-dangle","severity":2,"message":"Unexpected trailing comma.","line":44,"column":25,"nodeType":"ExperimentalRestProperty","source":"            ...restProps,","fix":{"range":[1535,1536],"text":""}},{"ruleId":"max-len","severity":1,"message":"Line 47 exceeds the maximum line length of 90.","line":47,"column":1,"nodeType":"Program","source":"            <div className={classNames('mx_Autocomplete_Completion_pill', className)} {...restProps}>"},{"ruleId":"max-len","severity":1,"message":"Line 51 exceeds the maximum line length of 90.","line":51,"column":1,"nodeType":"Program","source":"                <span className=\"mx_Autocomplete_Completion_description\">{description}</span>"}],"errorCount":3,"warningCount":4,"source":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\n\n/* These were earlier stateless functional components but had to be converted\nsince we need to use refs/findDOMNode to access the underlying DOM node to focus the correct completion,\nsomething that is not entirely possible with stateless functional components. One could\npresumably wrap them in a <div> before rendering but I think this is the better way to do it.\n */\n\nexport class TextualCompletion extends React.Component {\n    render() {\n        const {\n            title,\n            subtitle,\n            description,\n            className,\n            ...restProps,\n        } = this.props;\n        return (\n            <div className={classNames('mx_Autocomplete_Completion_block', className)} {...restProps}>\n                <span className=\"mx_Autocomplete_Completion_title\">{title}</span>\n                <span className=\"mx_Autocomplete_Completion_subtitle\">{subtitle}</span>\n                <span className=\"mx_Autocomplete_Completion_description\">{description}</span>\n            </div>\n        );\n    }\n}\nTextualCompletion.propTypes = {\n    title: React.PropTypes.string,\n    subtitle: React.PropTypes.string,\n    description: React.PropTypes.string,\n    className: React.PropTypes.string,\n};\n\nexport class PillCompletion extends React.Component {\n    render() {\n        const {\n            title,\n            subtitle,\n            description,\n            initialComponent,\n            className,\n            ...restProps,\n        } = this.props;\n        return (\n            <div className={classNames('mx_Autocomplete_Completion_pill', className)} {...restProps}>\n                {initialComponent}\n                <span className=\"mx_Autocomplete_Completion_title\">{title}</span>\n                <span className=\"mx_Autocomplete_Completion_subtitle\">{subtitle}</span>\n                <span className=\"mx_Autocomplete_Completion_description\">{description}</span>\n            </div>\n        );\n    }\n}\nPillCompletion.propTypes = {\n    title: React.PropTypes.string,\n    subtitle: React.PropTypes.string,\n    description: React.PropTypes.string,\n    initialComponent: React.PropTypes.element,\n    className: React.PropTypes.string,\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/autocomplete/DuckDuckGoProvider.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'command' is never reassigned. Use 'const' instead.","line":23,"column":14,"nodeType":"Identifier","source":"        let {command, range} = this.getCurrentCommand(query, selection);","fix":{"range":[668,671],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'range' is never reassigned. Use 'const' instead.","line":23,"column":23,"nodeType":"Identifier","source":"        let {command, range} = this.getCurrentCommand(query, selection);","fix":{"range":[668,671],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'results' is never reassigned. Use 'const' instead.","line":32,"column":13,"nodeType":"Identifier","source":"        let results = json.Results.map(result => {","fix":{"range":[975,978],"text":"const"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":32,"column":40,"nodeType":"ArrowFunctionExpression","source":"        let results = json.Results.map(result => {","fix":{"range":[1006,1012],"text":"(result)"}}],"errorCount":0,"warningCount":4,"source":"import React from 'react';\nimport AutocompleteProvider from './AutocompleteProvider';\nimport 'whatwg-fetch';\n\nimport {TextualCompletion} from './Components';\n\nconst DDG_REGEX = /\\/ddg\\s+(.+)$/g;\nconst REFERRER = 'vector';\n\nlet instance = null;\n\nexport default class DuckDuckGoProvider extends AutocompleteProvider {\n    constructor() {\n        super(DDG_REGEX);\n    }\n\n    static getQueryUri(query: String) {\n        return `https://api.duckduckgo.com/?q=${encodeURIComponent(query)}`\n         + `&format=json&no_redirect=1&no_html=1&t=${encodeURIComponent(REFERRER)}`;\n    }\n\n    async getCompletions(query: string, selection: {start: number, end: number}) {\n        let {command, range} = this.getCurrentCommand(query, selection);\n        if (!query || !command) {\n            return [];\n        }\n\n        const response = await fetch(DuckDuckGoProvider.getQueryUri(command[1]), {\n            method: 'GET',\n        });\n        const json = await response.json();\n        let results = json.Results.map(result => {\n            return {\n                completion: result.Text,\n                component: (\n                    <TextualCompletion\n                        title={result.Text}\n                        description={result.Result} />\n                ),\n                range,\n            };\n        });\n        if (json.Answer) {\n            results.unshift({\n                completion: json.Answer,\n                component: (\n                    <TextualCompletion\n                        title={json.Answer}\n                        description={json.AnswerType} />\n                ),\n                range,\n            });\n        }\n        if (json.RelatedTopics && json.RelatedTopics.length > 0) {\n            results.unshift({\n                completion: json.RelatedTopics[0].Text,\n                component: (\n                    <TextualCompletion\n                        title={json.RelatedTopics[0].Text} />\n                ),\n                range,\n            });\n        }\n        if (json.AbstractText) {\n            results.unshift({\n                completion: json.AbstractText,\n                component: (\n                    <TextualCompletion\n                        title={json.AbstractText} />\n                ),\n                range,\n            });\n        }\n        return results;\n    }\n\n    getName() {\n        return '🔍 Results from DuckDuckGo';\n    }\n\n    static getInstance(): DuckDuckGoProvider {\n        if (instance == null) {\n            instance = new DuckDuckGoProvider();\n        }\n        return instance;\n    }\n\n    renderCompletions(completions: [React.Component]): ?React.Component {\n        return <div className=\"mx_Autocomplete_Completion_container_block\">\n            {completions}\n        </div>;\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/autocomplete/EmojiProvider.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'shortnameToImage' is defined but never used.","line":3,"column":23,"nodeType":"Identifier","source":"import {emojioneList, shortnameToImage, shortnameToUnicode} from 'emojione';"},{"ruleId":"no-unused-vars","severity":2,"message":"'Completion' is defined but never used.","line":7,"column":30,"nodeType":"Identifier","source":"import type {SelectionRange, Completion} from './Autocompleter';"},{"ruleId":"prefer-const","severity":1,"message":"'command' is never reassigned. Use 'const' instead.","line":24,"column":14,"nodeType":"Identifier","source":"        let {command, range} = this.getCurrentCommand(query, selection);","fix":{"range":[785,788],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'range' is never reassigned. Use 'const' instead.","line":24,"column":23,"nodeType":"Identifier","source":"        let {command, range} = this.getCurrentCommand(query, selection);","fix":{"range":[785,788],"text":"const"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":26,"column":60,"nodeType":"ArrowFunctionExpression","source":"            completions = this.fuse.search(command[0]).map(result => {","fix":{"range":[932,938],"text":"(result)"}},{"ruleId":"max-len","severity":1,"message":"Line 32 exceeds the maximum line length of 90.","line":32,"column":1,"nodeType":"Program","source":"                        <PillCompletion title={shortname} initialComponent={<EmojiText style={{maxWidth: '1em'}}>{unicode}</EmojiText>} />"},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":47,"column":13,"nodeType":"Punctuator","source":"            {instance = new EmojiProvider();}","fix":{"range":[1553,1566],"text":"            "}}],"errorCount":2,"warningCount":5,"source":"import React from 'react';\nimport AutocompleteProvider from './AutocompleteProvider';\nimport {emojioneList, shortnameToImage, shortnameToUnicode} from 'emojione';\nimport Fuse from 'fuse.js';\nimport sdk from '../index';\nimport {PillCompletion} from './Components';\nimport type {SelectionRange, Completion} from './Autocompleter';\n\nconst EMOJI_REGEX = /:\\w*:?/g;\nconst EMOJI_SHORTNAMES = Object.keys(emojioneList);\n\nlet instance = null;\n\nexport default class EmojiProvider extends AutocompleteProvider {\n    constructor() {\n        super(EMOJI_REGEX);\n        this.fuse = new Fuse(EMOJI_SHORTNAMES);\n    }\n\n    async getCompletions(query: string, selection: SelectionRange) {\n        const EmojiText = sdk.getComponent('views.elements.EmojiText');\n\n        let completions = [];\n        let {command, range} = this.getCurrentCommand(query, selection);\n        if (command) {\n            completions = this.fuse.search(command[0]).map(result => {\n                const shortname = EMOJI_SHORTNAMES[result];\n                const unicode = shortnameToUnicode(shortname);\n                return {\n                    completion: unicode,\n                    component: (\n                        <PillCompletion title={shortname} initialComponent={<EmojiText style={{maxWidth: '1em'}}>{unicode}</EmojiText>} />\n                    ),\n                    range,\n                };\n            }).slice(0, 8);\n        }\n        return completions;\n    }\n\n    getName() {\n        return '😃 Emoji';\n    }\n\n    static getInstance() {\n        if (instance == null)\n            {instance = new EmojiProvider();}\n        return instance;\n    }\n\n    renderCompletions(completions: [React.Component]): ?React.Component {\n        return <div className=\"mx_Autocomplete_Completion_container_pill\">\n            {completions}\n        </div>;\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/autocomplete/RoomProvider.js","messages":[{"ruleId":"max-len","severity":1,"message":"Line 23 exceeds the maximum line length of 90.","line":23,"column":1,"nodeType":"Program","source":"    async getCompletions(query: string, selection: {start: number, end: number}, force = false) {"},{"ruleId":"prefer-const","severity":1,"message":"'client' is never reassigned. Use 'const' instead.","line":26,"column":13,"nodeType":"Identifier","source":"        let client = MatrixClientPeg.get();","fix":{"range":[796,799],"text":"const"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":31,"column":52,"nodeType":"ArrowFunctionExpression","source":"            this.fuse.set(client.getRooms().filter(room => !!room).map(room => {","fix":{"range":[1111,1115],"text":"(room)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":31,"column":72,"nodeType":"ArrowFunctionExpression","source":"            this.fuse.set(client.getRooms().filter(room => !!room).map(room => {","fix":{"range":[1131,1135],"text":"(room)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":38,"column":60,"nodeType":"ArrowFunctionExpression","source":"            completions = this.fuse.search(command[0]).map(room => {","fix":{"range":[1378,1382],"text":"(room)"}},{"ruleId":"prefer-const","severity":1,"message":"'displayAlias' is never reassigned. Use 'const' instead.","line":39,"column":21,"nodeType":"Identifier","source":"                let displayAlias = getDisplayAliasForRoom(room.room) || room.roomId;","fix":{"range":[1404,1407],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 43 exceeds the maximum line length of 90.","line":43,"column":1,"nodeType":"Program","source":"                        <PillCompletion initialComponent={<RoomAvatar width={24} height={24} room={room.room} />} title={room.name} description={displayAlias} />"},{"ruleId":"max-len","severity":1,"message":"Line 47 exceeds the maximum line length of 90.","line":47,"column":1,"nodeType":"Program","source":"            }).filter(completion => !!completion.completion && completion.completion.length > 0).slice(0, 4);"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":47,"column":23,"nodeType":"ArrowFunctionExpression","source":"            }).filter(completion => !!completion.completion && completion.completion.length > 0).slice(0, 4);","fix":{"range":[1830,1840],"text":"(completion)"}}],"errorCount":0,"warningCount":9,"source":"import React from 'react';\nimport AutocompleteProvider from './AutocompleteProvider';\nimport MatrixClientPeg from '../MatrixClientPeg';\nimport Fuse from 'fuse.js';\nimport {PillCompletion} from './Components';\nimport {getDisplayAliasForRoom} from '../Rooms';\nimport sdk from '../index';\n\nconst ROOM_REGEX = /(?=#)(\\S*)/g;\n\nlet instance = null;\n\nexport default class RoomProvider extends AutocompleteProvider {\n    constructor() {\n        super(ROOM_REGEX, {\n            keys: ['displayName', 'userId'],\n        });\n        this.fuse = new Fuse([], {\n           keys: ['name', 'roomId', 'aliases'],\n        });\n    }\n\n    async getCompletions(query: string, selection: {start: number, end: number}, force = false) {\n        const RoomAvatar = sdk.getComponent('views.avatars.RoomAvatar');\n\n        let client = MatrixClientPeg.get();\n        let completions = [];\n        const {command, range} = this.getCurrentCommand(query, selection, force);\n        if (command) {\n            // the only reason we need to do this is because Fuse only matches on properties\n            this.fuse.set(client.getRooms().filter(room => !!room).map(room => {\n                return {\n                    room: room,\n                    name: room.name,\n                    aliases: room.getAliases(),\n                };\n            }));\n            completions = this.fuse.search(command[0]).map(room => {\n                let displayAlias = getDisplayAliasForRoom(room.room) || room.roomId;\n                return {\n                    completion: displayAlias,\n                    component: (\n                        <PillCompletion initialComponent={<RoomAvatar width={24} height={24} room={room.room} />} title={room.name} description={displayAlias} />\n                    ),\n                    range,\n                };\n            }).filter(completion => !!completion.completion && completion.completion.length > 0).slice(0, 4);\n        }\n        return completions;\n    }\n\n    getName() {\n        return '💬 Rooms';\n    }\n\n    static getInstance() {\n        if (instance == null) {\n            instance = new RoomProvider();\n        }\n\n        return instance;\n    }\n\n    renderCompletions(completions: [React.Component]): ?React.Component {\n        return <div className=\"mx_Autocomplete_Completion_container_pill\">\n            {completions}\n        </div>;\n    }\n\n    shouldForceComplete(): boolean {\n        return true;\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/autocomplete/UserProvider.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Q' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","source":"import Q from 'q';"},{"ruleId":"max-len","severity":1,"message":"Line 23 exceeds the maximum line length of 90.","line":23,"column":1,"nodeType":"Program","source":"    async getCompletions(query: string, selection: {start: number, end: number}, force = false) {"},{"ruleId":"prefer-const","severity":1,"message":"'command' is never reassigned. Use 'const' instead.","line":27,"column":14,"nodeType":"Identifier","source":"        let {command, range} = this.getCurrentCommand(query, selection, force);","fix":{"range":[752,755],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'range' is never reassigned. Use 'const' instead.","line":27,"column":23,"nodeType":"Identifier","source":"        let {command, range} = this.getCurrentCommand(query, selection, force);","fix":{"range":[752,755],"text":"const"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":30,"column":60,"nodeType":"ArrowFunctionExpression","source":"            completions = this.fuse.search(command[0]).map(user => {","fix":{"range":[945,949],"text":"(user)"}},{"ruleId":"prefer-const","severity":1,"message":"'displayName' is never reassigned. Use 'const' instead.","line":31,"column":21,"nodeType":"Identifier","source":"                let displayName = (user.name || user.userId || '').replace(' (IRC)', ''); // FIXME when groups are done","fix":{"range":[971,974],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 42 exceeds the maximum line length of 90.","line":42,"column":1,"nodeType":"Program","source":"                            initialComponent={<MemberAvatar member={user} width={24} height={24}/>}"}],"errorCount":1,"warningCount":6,"source":"import React from 'react';\nimport AutocompleteProvider from './AutocompleteProvider';\nimport Q from 'q';\nimport Fuse from 'fuse.js';\nimport {PillCompletion} from './Components';\nimport sdk from '../index';\n\nconst USER_REGEX = /@\\S*/g;\n\nlet instance = null;\n\nexport default class UserProvider extends AutocompleteProvider {\n    constructor() {\n        super(USER_REGEX, {\n            keys: ['name', 'userId'],\n        });\n        this.users = [];\n        this.fuse = new Fuse([], {\n            keys: ['name', 'userId'],\n        });\n    }\n\n    async getCompletions(query: string, selection: {start: number, end: number}, force = false) {\n        const MemberAvatar = sdk.getComponent('views.avatars.MemberAvatar');\n\n        let completions = [];\n        let {command, range} = this.getCurrentCommand(query, selection, force);\n        if (command) {\n            this.fuse.set(this.users);\n            completions = this.fuse.search(command[0]).map(user => {\n                let displayName = (user.name || user.userId || '').replace(' (IRC)', ''); // FIXME when groups are done\n                let completion = displayName;\n                if (range.start === 0) {\n                    completion += ': ';\n                } else {\n                    completion += ' ';\n                }\n                return {\n                    completion,\n                    component: (\n                        <PillCompletion\n                            initialComponent={<MemberAvatar member={user} width={24} height={24}/>}\n                            title={displayName}\n                            description={user.userId} />\n                    ),\n                    range,\n                };\n            }).slice(0, 4);\n        }\n        return completions;\n    }\n\n    getName() {\n        return '👥 Users';\n    }\n\n    setUserList(users) {\n        this.users = users;\n    }\n\n    static getInstance(): UserProvider {\n        if (instance == null) {\n            instance = new UserProvider();\n        }\n        return instance;\n    }\n\n    renderCompletions(completions: [React.Component]): ?React.Component {\n        return <div className=\"mx_Autocomplete_Completion_container_pill\">\n            {completions}\n        </div>;\n    }\n\n    shouldForceComplete(): boolean {\n        return true;\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Avatar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ContentRepo = require(\"matrix-js-sdk\").ContentRepo;","fix":{"range":[582,585],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('./MatrixClientPeg');","fix":{"range":[638,641],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":9,"nodeType":"VariableDeclaration","source":"        var url = member.getAvatarUrl(","fix":{"range":[790,793],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":29,"column":18,"nodeType":"Literal","source":"            false","fix":{"range":[976,976],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":41,"column":9,"nodeType":"VariableDeclaration","source":"        var url = ContentRepo.getHttpUriForMxc(","fix":{"range":[1381,1384],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":43,"column":40,"nodeType":"Identifier","source":"            width, height, resizeMethod","fix":{"range":[1530,1530],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":52,"column":9,"nodeType":"VariableDeclaration","source":"        var images = ['76cfa6', '50e2c2', 'f4c371'];","fix":{"range":[1698,1701],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":53,"column":9,"nodeType":"VariableDeclaration","source":"        var total = 0;","fix":{"range":[1751,1754],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < s.length; ++i) {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":58,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[1928,1928],"text":","}}],"errorCount":3,"warningCount":7,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nvar ContentRepo = require(\"matrix-js-sdk\").ContentRepo;\nvar MatrixClientPeg = require('./MatrixClientPeg');\n\nmodule.exports = {\n    avatarUrlForMember: function(member, width, height, resizeMethod) {\n        var url = member.getAvatarUrl(\n            MatrixClientPeg.get().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            false,\n            false\n        );\n        if (!url) {\n            // member can be null here currently since on invites, the JS SDK\n            // does not have enough info to build a RoomMember object for\n            // the inviter.\n            url = this.defaultAvatarUrlForString(member ? member.userId : '');\n        }\n        return url;\n    },\n\n    avatarUrlForUser: function(user, width, height, resizeMethod) {\n        var url = ContentRepo.getHttpUriForMxc(\n            MatrixClientPeg.get().getHomeserverUrl(), user.avatarUrl,\n            width, height, resizeMethod\n        );\n        if (!url || url.length === 0) {\n            return null;\n        }\n        return url;\n    },\n\n    defaultAvatarUrlForString: function(s) {\n        var images = ['76cfa6', '50e2c2', 'f4c371'];\n        var total = 0;\n        for (var i = 0; i < s.length; ++i) {\n            total += s.charCodeAt(i);\n        }\n        return 'img/' + images[total % images.length] + '.png';\n    }\n};\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/BasePlatform.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":40,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":48,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"flowtype/require-return-type","severity":1,"message":"Missing return type annotation.","line":82,"column":29,"nodeType":"FunctionExpression","source":"    screenCaptureErrorString() {"}],"errorCount":0,"warningCount":3,"source":"// @flow\n\n/*\nCopyright 2016 Aviral Dasgupta\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Base class for classes that provide platform-specific functionality\n * eg. Setting an application badge or displaying notifications\n *\n * Instances of this class are provided by the application.\n */\nexport default class BasePlatform {\n    constructor() {\n        this.notificationCount = 0;\n        this.errorDidOccur = false;\n    }\n\n    setNotificationCount(count: number) {\n        this.notificationCount = count;\n    }\n\n    setErrorStatus(errorDidOccur: boolean) {\n        this.errorDidOccur = errorDidOccur;\n    }\n\n    /**\n     * Returns true if the platform supports displaying\n     * notifications, otherwise false.\n     */\n    supportsNotifications(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if the application currently has permission\n     * to display notifications. Otherwise false.\n     */\n    maySendNotifications(): boolean {\n        return false;\n    }\n\n    /**\n     * Requests permission to send notifications. Returns\n     * a promise that is resolved when the user has responded\n     * to the request. The promise has a single string argument\n     * that is 'granted' if the user allowed the request or\n     * 'denied' otherwise.\n     */\n    requestNotificationPermission(): Promise<string> {\n    }\n\n    displayNotification(title: string, msg: string, avatarUrl: string, room: Object) {\n    }\n\n    /**\n     * Returns a promise that resolves to a string representing\n     * the current version of the application.\n     */\n    getAppVersion() {\n        throw new Error(\"getAppVersion not implemented!\");\n    }\n\n    /*\n     * If it's not expected that capturing the screen will work\n     * with getUserMedia, return a string explaining why not.\n     * Otherwise, return null.\n     */\n    screenCaptureErrorString() {\n        return \"Not implemented\";\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/CallHandler.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('./MatrixClientPeg');","fix":{"range":[1480,1483],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":55,"column":1,"nodeType":"VariableDeclaration","source":"var PlatformPeg = require(\"./PlatformPeg\");","fix":{"range":[1532,1535],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":56,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require('./Modal');","fix":{"range":[1576,1579],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":57,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('./index');","fix":{"range":[1608,1611],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":58,"column":1,"nodeType":"VariableDeclaration","source":"var Matrix = require(\"matrix-js-sdk\");","fix":{"range":[1638,1641],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":59,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"./dispatcher\");","fix":{"range":[1677,1680],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":64,"column":1,"nodeType":"VariableDeclaration","source":"var calls = global.mxCalls;","fix":{"range":[1761,1764],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":65,"column":1,"nodeType":"VariableDeclaration","source":"var ConferenceHandler = null;","fix":{"range":[1789,1792],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":67,"column":1,"nodeType":"VariableDeclaration","source":"var audioPromises = {};","fix":{"range":[1820,1823],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":72,"column":5,"nodeType":"VariableDeclaration","source":"    var audio = document.getElementById(audioId);","fix":{"range":[1954,1957],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":79,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2218,2227],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":89,"column":5,"nodeType":"VariableDeclaration","source":"    var audio = document.getElementById(audioId);","fix":{"range":[2414,2417],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":93,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2609,2618],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":117,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[3450,3459],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":121,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[3600,3609],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":126,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[3809,3818],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":134,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[4174,4177],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":137,"column":66,"nodeType":"Property","source":"                description: \"The remote side failed to pick up.\"","fix":{"range":[4383,4383],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":139,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4409,4418],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":143,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4565,4574],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":147,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4716,4725],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 157 exceeds the maximum line length of 90.","line":157,"column":1,"nodeType":"Program","source":"        \"Call state in %s changed to %s (%s)\", roomId, status, (call ? call.call_state : \"-\")"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":157,"column":94,"nodeType":"ConditionalExpression","source":"        \"Call state in %s changed to %s (%s)\", roomId, status, (call ? call.call_state : \"-\")","fix":{"range":[5035,5035],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":163,"column":5,"nodeType":"Punctuator","source":"    }","fix":{"range":[5134,5139],"text":"    "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":173,"column":24,"nodeType":"Property","source":"        room_id: roomId","fix":{"range":[5352,5352],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":183,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[5611,5620],"text":"        "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":187,"column":38,"nodeType":"MemberExpression","source":"                payload.local_element","fix":{"range":[5770,5770],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":189,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[5795,5804],"text":"        "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":198,"column":54,"nodeType":"Property","source":"                    description: screenCapErrorString","fix":{"range":[6356,6356],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":204,"column":38,"nodeType":"MemberExpression","source":"                payload.local_element","fix":{"range":[6536,6536],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":206,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[6561,6570],"text":"        "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":218,"column":62,"nodeType":"Property","source":"                    description: \"You are already in a call.\"","fix":{"range":[7007,7007],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":228,"column":80,"nodeType":"Property","source":"                    description: \"You cannot place VoIP calls in this browser.\"","fix":{"range":[7475,7475],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":233,"column":13,"nodeType":"VariableDeclaration","source":"            var room = MatrixClientPeg.get().getRoom(payload.room_id);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":239,"column":13,"nodeType":"VariableDeclaration","source":"            var members = room.getJoinedMembers();"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":243,"column":74,"nodeType":"Property","source":"                    description: \"You cannot place a call with yourself.\"","fix":{"range":[8035,8035],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":246,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[8093,8106],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":249,"column":17,"nodeType":"VariableDeclaration","source":"                var call = Matrix.createNewMatrixCall("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":250,"column":59,"nodeType":"MemberExpression","source":"                    MatrixClientPeg.get(), payload.room_id","fix":{"range":[8335,8335],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":253,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[8401,8414],"text":"            "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":260,"column":57,"nodeType":"Property","source":"                    local_element: payload.local_element","fix":{"range":[8714,8714],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":269,"column":85,"nodeType":"Property","source":"                    description: \"Conference calls are not supported in this client\"","fix":{"range":[9128,9128],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":271,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[9162,9175],"text":"            "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":276,"column":80,"nodeType":"Property","source":"                    description: \"You cannot place VoIP calls in this browser.\"","fix":{"range":[9481,9481],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":278,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[9515,9528],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":290,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[10292,10305],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":292,"column":17,"nodeType":"VariableDeclaration","source":"                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[10328,10331],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 295 exceeds the maximum line length of 90.","line":295,"column":1,"nodeType":"Program","source":"                    description: \"Conference calling is in development and may not be reliable.\","},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":296,"column":33,"nodeType":"ArrowFunctionExpression","source":"                    onFinished: confirm=>{","fix":{"range":[10615,10622],"text":"(confirm)"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":299,"column":71,"nodeType":"MemberExpression","source":"                                MatrixClientPeg.get(), payload.room_id","fix":{"range":[10802,10802],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 303 exceeds the maximum line length of 90.","line":303,"column":1,"nodeType":"Program","source":"                                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":328,"column":13,"nodeType":"VariableDeclaration","source":"            var call = payload.call;"},{"ruleId":"no-redeclare","severity":2,"message":"'call' is already defined.","line":328,"column":17,"nodeType":"Identifier","source":"            var call = payload.call;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":347,"column":41,"nodeType":"Property","source":"                room_id: payload.room_id","fix":{"range":[12844,12844],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":358,"column":1,"nodeType":"VariableDeclaration","source":"var callHandler = {","fix":{"range":[13029,13032],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":360,"column":9,"nodeType":"VariableDeclaration","source":"        var call = module.exports.getCall(roomId);","fix":{"range":[13096,13099],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":376,"column":9,"nodeType":"VariableDeclaration","source":"        var roomsWithCalls = Object.keys(calls);","fix":{"range":[13467,13470],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":377,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < roomsWithCalls.length; i++) {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":392,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[13960,13960],"text":","}}],"errorCount":17,"warningCount":42,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\n * Manages a list of all the currently active calls.\n *\n * This handler dispatches when voip calls are added/updated/removed from this list:\n * {\n *   action: 'call_state'\n *   room_id: <room ID of the call>\n * }\n *\n * To know the state of the call, this handler exposes a getter to\n * obtain the call for a room:\n *   var call = CallHandler.getCall(roomId)\n *   var state = call.call_state; // ringing|ringback|connected|ended|busy|stop_ringback|stop_ringing\n *\n * This handler listens for and handles the following actions:\n * {\n *   action: 'place_call',\n *   type: 'voice|video',\n *   room_id: <room that the place call button was pressed in>\n * }\n *\n * {\n *   action: 'incoming_call'\n *   call: MatrixCall\n * }\n *\n * {\n *   action: 'hangup'\n *   room_id: <room that the hangup button was pressed in>\n * }\n *\n * {\n *   action: 'answer'\n *   room_id: <room that the answer button was pressed in>\n * }\n */\n\nvar MatrixClientPeg = require('./MatrixClientPeg');\nvar PlatformPeg = require(\"./PlatformPeg\");\nvar Modal = require('./Modal');\nvar sdk = require('./index');\nvar Matrix = require(\"matrix-js-sdk\");\nvar dis = require(\"./dispatcher\");\n\nglobal.mxCalls = {\n    //room_id: MatrixCall\n};\nvar calls = global.mxCalls;\nvar ConferenceHandler = null;\n\nvar audioPromises = {};\n\nfunction play(audioId) {\n    // TODO: Attach an invisible element for this instead\n    // which listens?\n    var audio = document.getElementById(audioId);\n    if (audio) {\n        if (audioPromises[audioId]) {\n            audioPromises[audioId] = audioPromises[audioId].then(()=>{\n                audio.load();\n                return audio.play();\n            });\n        }\n        else {\n            audioPromises[audioId] = audio.play();\n        }\n    }\n}\n\nfunction pause(audioId) {\n    // TODO: Attach an invisible element for this instead\n    // which listens?\n    var audio = document.getElementById(audioId);\n    if (audio) {\n        if (audioPromises[audioId]) {\n            audioPromises[audioId] = audioPromises[audioId].then(()=>audio.pause());\n        }\n        else {\n            // pause doesn't actually return a promise, but might as well do this for symmetry with play();\n            audioPromises[audioId] = audio.pause();\n        }\n    }\n}\n\nfunction _setCallListeners(call) {\n    call.on(\"error\", function(err) {\n        console.error(\"Call error: %s\", err);\n        console.error(err.stack);\n        call.hangup();\n        _setCallState(undefined, call.roomId, \"ended\");\n    });\n    call.on(\"hangup\", function() {\n        _setCallState(undefined, call.roomId, \"ended\");\n    });\n    // map web rtc states to dummy UI state\n    // ringing|ringback|connected|ended|busy|stop_ringback|stop_ringing\n    call.on(\"state\", function(newState, oldState) {\n        if (newState === \"ringing\") {\n            _setCallState(call, call.roomId, \"ringing\");\n            pause(\"ringbackAudio\");\n        }\n        else if (newState === \"invite_sent\") {\n            _setCallState(call, call.roomId, \"ringback\");\n            play(\"ringbackAudio\");\n        }\n        else if (newState === \"ended\" && oldState === \"connected\") {\n            _setCallState(undefined, call.roomId, \"ended\");\n            pause(\"ringbackAudio\");\n            play(\"callendAudio\");\n        }\n        else if (newState === \"ended\" && oldState === \"invite_sent\" &&\n                (call.hangupParty === \"remote\" ||\n                (call.hangupParty === \"local\" && call.hangupReason === \"invite_timeout\")\n                )) {\n            _setCallState(call, call.roomId, \"busy\");\n            pause(\"ringbackAudio\");\n            play(\"busyAudio\");\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Call Timeout\",\n                description: \"The remote side failed to pick up.\"\n            });\n        }\n        else if (oldState === \"invite_sent\") {\n            _setCallState(call, call.roomId, \"stop_ringback\");\n            pause(\"ringbackAudio\");\n        }\n        else if (oldState === \"ringing\") {\n            _setCallState(call, call.roomId, \"stop_ringing\");\n            pause(\"ringbackAudio\");\n        }\n        else if (newState === \"connected\") {\n            _setCallState(call, call.roomId, \"connected\");\n            pause(\"ringbackAudio\");\n        }\n    });\n}\n\nfunction _setCallState(call, roomId, status) {\n    console.log(\n        \"Call state in %s changed to %s (%s)\", roomId, status, (call ? call.call_state : \"-\")\n    );\n    calls[roomId] = call;\n\n    if (status === \"ringing\") {\n        play(\"ringAudio\");\n    }\n    else if (call && call.call_state === \"ringing\") {\n        pause(\"ringAudio\");\n    }\n\n    if (call) {\n        call.call_state = status;\n    }\n    dis.dispatch({\n        action: 'call_state',\n        room_id: roomId\n    });\n}\n\nfunction _onAction(payload) {\n    function placeCall(newCall) {\n        _setCallListeners(newCall);\n        _setCallState(newCall, newCall.roomId, \"ringback\");\n        if (payload.type === 'voice') {\n            newCall.placeVoiceCall();\n        }\n        else if (payload.type === 'video') {\n            newCall.placeVideoCall(\n                payload.remote_element,\n                payload.local_element\n            );\n        }\n        else if (payload.type === 'screensharing') {\n            const screenCapErrorString = PlatformPeg.get().screenCaptureErrorString();\n            if (screenCapErrorString) {\n                _setCallState(undefined, newCall.roomId, \"ended\");\n                console.log(\"Can't capture screen: \" + screenCapErrorString);\n                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Unable to capture screen\",\n                    description: screenCapErrorString\n                });\n                return;\n            }\n            newCall.placeScreenSharingCall(\n                payload.remote_element,\n                payload.local_element\n            );\n        }\n        else {\n            console.error(\"Unknown conf call type: %s\", payload.type);\n        }\n    }\n\n    switch (payload.action) {\n        case 'place_call':\n            if (module.exports.getAnyActiveCall()) {\n                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Existing Call\",\n                    description: \"You are already in a call.\"\n                });\n                return; // don't allow >1 call to be placed.\n            }\n\n            // if the runtime env doesn't do VoIP, whine.\n            if (!MatrixClientPeg.get().supportsVoip()) {\n                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"VoIP is unsupported\",\n                    description: \"You cannot place VoIP calls in this browser.\"\n                });\n                return;\n            }\n\n            var room = MatrixClientPeg.get().getRoom(payload.room_id);\n            if (!room) {\n                console.error(\"Room %s does not exist.\", payload.room_id);\n                return;\n            }\n\n            var members = room.getJoinedMembers();\n            if (members.length <= 1) {\n                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    description: \"You cannot place a call with yourself.\"\n                });\n                return;\n            }\n            else if (members.length === 2) {\n                console.log(\"Place %s call in %s\", payload.type, payload.room_id);\n                var call = Matrix.createNewMatrixCall(\n                    MatrixClientPeg.get(), payload.room_id\n                );\n                placeCall(call);\n            }\n            else { // > 2\n                dis.dispatch({\n                    action: \"place_conference_call\",\n                    room_id: payload.room_id,\n                    type: payload.type,\n                    remote_element: payload.remote_element,\n                    local_element: payload.local_element\n                });\n            }\n            break;\n        case 'place_conference_call':\n            console.log(\"Place conference call in %s\", payload.room_id);\n            if (!ConferenceHandler) {\n                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    description: \"Conference calls are not supported in this client\"\n                });\n            }\n            else if (!MatrixClientPeg.get().supportsVoip()) {\n                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"VoIP is unsupported\",\n                    description: \"You cannot place VoIP calls in this browser.\"\n                });\n            }\n            else if (MatrixClientPeg.get().isRoomEncrypted(payload.room_id)) {\n                // Conference calls are implemented by sending the media to central\n                // server which combines the audio from all the participants together\n                // into a single stream. This is incompatible with end-to-end encryption\n                // because a central server would be decrypting the audio for each\n                // participant.\n                // Therefore we disable conference calling in E2E rooms.\n                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    description: \"Conference calls are not supported in encrypted rooms\",\n                });\n            }\n            else {\n                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n                Modal.createDialog(QuestionDialog, {\n                    title: \"Warning!\",\n                    description: \"Conference calling is in development and may not be reliable.\",\n                    onFinished: confirm=>{\n                        if (confirm) {\n                            ConferenceHandler.createNewMatrixCall(\n                                MatrixClientPeg.get(), payload.room_id\n                            ).done(function(call) {\n                                placeCall(call);\n                            }, function(err) {\n                                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                                Modal.createDialog(ErrorDialog, {\n                                    title: \"Failed to set up conference call\",\n                                    description: \"Conference call failed: \" + err,\n                                });\n                            });\n                        }\n                    },\n                });\n            }\n            break;\n        case 'incoming_call':\n            if (module.exports.getAnyActiveCall()) {\n                // ignore multiple incoming calls. in future, we may want a line-1/line-2 setup.\n                // we avoid rejecting with \"busy\" in case the user wants to answer it on a different device.\n                // in future we could signal a \"local busy\" as a warning to the caller.\n                // see https://github.com/vector-im/vector-web/issues/1964\n                return;\n            }\n\n            // if the runtime env doesn't do VoIP, stop here.\n            if (!MatrixClientPeg.get().supportsVoip()) {\n                return;\n            }\n\n            var call = payload.call;\n            _setCallListeners(call);\n            _setCallState(call, call.roomId, \"ringing\");\n            break;\n        case 'hangup':\n            if (!calls[payload.room_id]) {\n                return; // no call to hangup\n            }\n            calls[payload.room_id].hangup();\n            _setCallState(null, payload.room_id, \"ended\");\n            break;\n        case 'answer':\n            if (!calls[payload.room_id]) {\n                return; // no call to answer\n            }\n            calls[payload.room_id].answer();\n            _setCallState(calls[payload.room_id], payload.room_id, \"connected\");\n            dis.dispatch({\n                action: \"view_room\",\n                room_id: payload.room_id\n            });\n            break;\n    }\n}\n// FIXME: Nasty way of making sure we only register\n// with the dispatcher once\nif (!global.mxCallHandler) {\n    dis.register(_onAction);\n}\n\nvar callHandler = {\n    getCallForRoom: function(roomId) {\n        var call = module.exports.getCall(roomId);\n        if (call) return call;\n\n        if (ConferenceHandler) {\n            call = ConferenceHandler.getConferenceCallForRoom(roomId);\n        }\n        if (call) return call;\n\n        return null;\n    },\n\n    getCall: function(roomId) {\n        return calls[roomId] || null;\n    },\n\n    getAnyActiveCall: function() {\n        var roomsWithCalls = Object.keys(calls);\n        for (var i = 0; i < roomsWithCalls.length; i++) {\n            if (calls[roomsWithCalls[i]] &&\n                    calls[roomsWithCalls[i]].call_state !== \"ended\") {\n                return calls[roomsWithCalls[i]];\n            }\n        }\n        return null;\n    },\n\n    setConferenceHandler: function(confHandler) {\n        ConferenceHandler = confHandler;\n    },\n\n    getConferenceHandler: function() {\n        return ConferenceHandler;\n    }\n};\n// Only things in here which actually need to be global are the\n// calls list (done separately) and making sure we only register\n// with the dispatcher once (which uses this mechanism but checks\n// separately). This could be tidied up.\nif (global.mxCallHandler === undefined) {\n    global.mxCallHandler = callHandler;\n}\n\nmodule.exports = global.mxCallHandler;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/ContextualMenu.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var classNames = require('classnames');","fix":{"range":[584,587],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[624,627],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require('react-dom');","fix":{"range":[654,657],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":39,"column":9,"nodeType":"VariableDeclaration","source":"        var container = document.getElementById(this.ContextualMenuContainerId);","fix":{"range":[1211,1214],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":51,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[1571,1574],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":53,"column":9,"nodeType":"VariableDeclaration","source":"        var closeMenu = function() {","fix":{"range":[1597,1600],"text":"let"}},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":57,"column":46,"nodeType":"Identifier","source":"                props.onFinished.apply(null, arguments);","endLine":57,"endColumn":55},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":61,"column":9,"nodeType":"VariableDeclaration","source":"        var position = {","fix":{"range":[1837,1840],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":65,"column":9,"nodeType":"VariableDeclaration","source":"        var chevronOffset = {};","fix":{"range":[1902,1905],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":71,"column":9,"nodeType":"VariableDeclaration","source":"        var chevronCSS = \"\";","fix":{"range":[2101,2104],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":84,"column":9,"nodeType":"VariableDeclaration","source":"        var chevron = null;","fix":{"range":[2486,2489],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 86 exceeds the maximum line length of 90.","line":86,"column":1,"nodeType":"Program","source":"            chevron = <div style={chevronOffset} className=\"mx_ContextualMenu_chevron_left\"></div>;"},{"ruleId":"max-len","severity":1,"message":"Line 89 exceeds the maximum line length of 90.","line":89,"column":1,"nodeType":"Program","source":"            chevron = <div style={chevronOffset} className=\"mx_ContextualMenu_chevron_right\"></div>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":93,"column":9,"nodeType":"VariableDeclaration","source":"        var className = 'mx_ContextualMenu_wrapper';","fix":{"range":[2851,2854],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":95,"column":9,"nodeType":"VariableDeclaration","source":"        var menuClasses = classNames({","fix":{"range":[2905,2908],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":101,"column":9,"nodeType":"VariableDeclaration","source":"        var menuStyle = {};","fix":{"range":[3098,3101],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":116,"column":9,"nodeType":"VariableDeclaration","source":"        var menu = (","fix":{"range":[3565,3568],"text":"let"}}],"errorCount":0,"warningCount":17,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n\n'use strict';\n\nvar classNames = require('classnames');\nvar React = require('react');\nvar ReactDOM = require('react-dom');\n\n// Shamelessly ripped off Modal.js.  There's probably a better way\n// of doing reusable widgets like dialog boxes & menus where we go and\n// pass in a custom control as the actual body.\n\nmodule.exports = {\n    ContextualMenuContainerId: \"mx_ContextualMenu_Container\",\n\n    propTypes: {\n        menuWidth: React.PropTypes.number,\n        menuHeight: React.PropTypes.number,\n        chevronOffset: React.PropTypes.number,\n        menuColour: React.PropTypes.string,\n    },\n\n    getOrCreateContainer: function() {\n        var container = document.getElementById(this.ContextualMenuContainerId);\n\n        if (!container) {\n            container = document.createElement(\"div\");\n            container.id = this.ContextualMenuContainerId;\n            document.body.appendChild(container);\n        }\n\n        return container;\n    },\n\n    createMenu: function(Element, props) {\n        var self = this;\n\n        var closeMenu = function() {\n            ReactDOM.unmountComponentAtNode(self.getOrCreateContainer());\n\n            if (props && props.onFinished) {\n                props.onFinished.apply(null, arguments);\n            }\n        };\n\n        var position = {\n            top: props.top,\n        };\n\n        var chevronOffset = {};\n        if (props.chevronOffset) {\n            chevronOffset.top = props.chevronOffset;\n        }\n\n        // To override the default chevron colour, if it's been set\n        var chevronCSS = \"\";\n        if (props.menuColour) {\n            chevronCSS = `\n                .mx_ContextualMenu_chevron_left:after {\n                    border-right-color: ${props.menuColour};\n                }\n\n                .mx_ContextualMenu_chevron_right:after {\n                    border-left-color: ${props.menuColour};\n                }\n            `;\n        }\n\n        var chevron = null;\n        if (props.left) {\n            chevron = <div style={chevronOffset} className=\"mx_ContextualMenu_chevron_left\"></div>;\n            position.left = props.left;\n        } else {\n            chevron = <div style={chevronOffset} className=\"mx_ContextualMenu_chevron_right\"></div>;\n            position.right = props.right;\n        }\n\n        var className = 'mx_ContextualMenu_wrapper';\n\n        var menuClasses = classNames({\n            'mx_ContextualMenu': true,\n            'mx_ContextualMenu_left': props.left,\n            'mx_ContextualMenu_right': !props.left,\n        });\n\n        var menuStyle = {};\n        if (props.menuWidth) {\n            menuStyle.width = props.menuWidth;\n        }\n\n        if (props.menuHeight) {\n            menuStyle.height = props.menuHeight;\n        }\n\n        if (props.menuColour) {\n            menuStyle[\"backgroundColor\"] = props.menuColour;\n        }\n\n        // FIXME: If a menu uses getDefaultProps it clobbers the onFinished\n        // property set here so you can't close the menu from a button click!\n        var menu = (\n            <div className={className} style={position}>\n                <div className={menuClasses} style={menuStyle}>\n                    {chevron}\n                    <Element {...props} onFinished={closeMenu}/>\n                </div>\n                <div className=\"mx_ContextualMenu_background\" onClick={closeMenu}></div>\n                <style>{chevronCSS}</style>\n            </div>\n        );\n\n        ReactDOM.render(menu, this.getOrCreateContainer());\n\n        return {close: closeMenu};\n    },\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/CreateRoom.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require(\"react\");","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../MatrixClientPeg\");","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var PresetValues = {","fix":{"range":[669,672],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var q = require('q');","fix":{"range":[779,782],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'q' is assigned a value but never used.","line":26,"column":5,"nodeType":"Identifier","source":"var q = require('q');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../index');","fix":{"range":[801,804],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":64,"column":9,"nodeType":"VariableDeclaration","source":"        var options = {};","fix":{"range":[1815,1818],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":82,"column":85,"nodeType":"Property","source":"                            \"join_rule\": this.state.is_private ? \"invite\" : \"public\"","fix":{"range":[2419,2419],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":83,"column":26,"nodeType":"Property","source":"                        }","fix":{"range":[2445,2445],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 88 exceeds the maximum line length of 90.","line":88,"column":1,"nodeType":"Program","source":"                            \"history_visibility\": this.state.share_history ? \"shared\" : \"invited\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":88,"column":98,"nodeType":"Property","source":"                            \"history_visibility\": this.state.share_history ? \"shared\" : \"invited\"","fix":{"range":[2682,2682],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":89,"column":26,"nodeType":"Property","source":"                        }","fix":{"range":[2708,2708],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":97,"column":9,"nodeType":"VariableDeclaration","source":"        var alias = this.getAliasLocalpart();","fix":{"range":[2836,2839],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":102,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[2959,2962],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":109,"column":9,"nodeType":"VariableDeclaration","source":"        var deferred = cli.createRoom(options);","fix":{"range":[3147,3150],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":119,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[3339,3342],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'invited_users' is not in camel case.","line":204,"column":31,"nodeType":"Identifier","source":"    onInviteChanged: function(invited_users) {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":212,"column":25,"nodeType":"Property","source":"            alias: alias","fix":{"range":[5637,5637],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":223,"column":9,"nodeType":"VariableDeclaration","source":"        var curr_phase = this.state.phase;","fix":{"range":[5812,5815],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'curr_phase' is not in camel case.","line":223,"column":13,"nodeType":"Identifier","source":"        var curr_phase = this.state.phase;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'curr_phase' is not in camel case.","line":224,"column":13,"nodeType":"Identifier","source":"        if (curr_phase == this.phases.CREATING) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":225,"column":13,"nodeType":"VariableDeclaration","source":"            var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[5909,5912],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":230,"column":13,"nodeType":"VariableDeclaration","source":"            var error_box = \"\";","fix":{"range":[6051,6054],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'error_box' is not in camel case.","line":230,"column":17,"nodeType":"Identifier","source":"            var error_box = \"\";"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'curr_phase' is not in camel case.","line":231,"column":17,"nodeType":"Identifier","source":"            if (curr_phase == this.phases.ERROR) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'error_box' is not in camel case.","line":232,"column":17,"nodeType":"Identifier","source":"                error_box = ("},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":239,"column":13,"nodeType":"VariableDeclaration","source":"            var CreateRoomButton = sdk.getComponent(\"create_room.CreateRoomButton\");","fix":{"range":[6340,6343],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":240,"column":13,"nodeType":"VariableDeclaration","source":"            var RoomAlias = sdk.getComponent(\"create_room.RoomAlias\");","fix":{"range":[6425,6428],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":241,"column":13,"nodeType":"VariableDeclaration","source":"            var Presets = sdk.getComponent(\"create_room.Presets\");","fix":{"range":[6496,6499],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":242,"column":13,"nodeType":"VariableDeclaration","source":"            var UserSelector = sdk.getComponent(\"elements.UserSelector\");","fix":{"range":[6563,6566],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":243,"column":13,"nodeType":"VariableDeclaration","source":"            var SimpleRoomHeader = sdk.getComponent(\"rooms.SimpleRoomHeader\");","fix":{"range":[6637,6640],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":245,"column":13,"nodeType":"VariableDeclaration","source":"            var domain = MatrixClientPeg.get().getDomain();","fix":{"range":[6717,6720],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 249 exceeds the maximum line length of 90.","line":249,"column":1,"nodeType":"Program","source":"                <SimpleRoomHeader title=\"CreateRoom\" collapsedRhs={ this.props.collapsedRhs }/>"},{"ruleId":"max-len","severity":1,"message":"Line 251 exceeds the maximum line length of 90.","line":251,"column":1,"nodeType":"Program","source":"                    <input type=\"text\" ref=\"room_name\" value={this.state.room_name} onChange={this.onNameChange} placeholder=\"Name\"/> <br />"},{"ruleId":"max-len","severity":1,"message":"Line 252 exceeds the maximum line length of 90.","line":252,"column":1,"nodeType":"Program","source":"                    <textarea className=\"mx_CreateRoom_description\" ref=\"topic\" value={this.state.topic} onChange={this.onTopicChange} placeholder=\"Topic\"/> <br />"},{"ruleId":"max-len","severity":1,"message":"Line 253 exceeds the maximum line length of 90.","line":253,"column":1,"nodeType":"Program","source":"                    <RoomAlias ref=\"alias\" alias={this.state.alias} homeserver={ domain } onChange={this.onAliasChanged}/> <br />"},{"ruleId":"max-len","severity":1,"message":"Line 254 exceeds the maximum line length of 90.","line":254,"column":1,"nodeType":"Program","source":"                    <UserSelector ref=\"user_selector\" selected_users={this.state.invited_users} onChange={this.onInviteChanged}/> <br />"},{"ruleId":"max-len","severity":1,"message":"Line 255 exceeds the maximum line length of 90.","line":255,"column":1,"nodeType":"Program","source":"                    <Presets ref=\"presets\" onChange={this.onPresetChanged} preset={this.state.preset}/> <br />"},{"ruleId":"max-len","severity":1,"message":"Line 258 exceeds the maximum line length of 90.","line":258,"column":1,"nodeType":"Program","source":"                            <input type=\"checkbox\" ref=\"is_private\" checked={this.state.is_private} onChange={this.onPrivateChanged}/>"},{"ruleId":"max-len","severity":1,"message":"Line 264 exceeds the maximum line length of 90.","line":264,"column":1,"nodeType":"Program","source":"                            <input type=\"checkbox\" ref=\"share_history\" checked={this.state.share_history} onChange={this.onShareHistoryChanged}/>"},{"ruleId":"max-len","severity":1,"message":"Line 270 exceeds the maximum line length of 90.","line":270,"column":1,"nodeType":"Program","source":"                            <input type=\"checkbox\" ref=\"encrypt\" checked={this.state.encrypt} onChange={this.onEncryptChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'error_box' is not in camel case.","line":277,"column":22,"nodeType":"Identifier","source":"                    {error_box}"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":282,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[8860,8860],"text":","}}],"errorCount":7,"warningCount":36,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require(\"react\");\nvar MatrixClientPeg = require(\"../../MatrixClientPeg\");\nvar PresetValues = {\n    PrivateChat: \"private_chat\",\n    PublicChat: \"public_chat\",\n    Custom: \"custom\",\n};\nvar q = require('q');\nvar sdk = require('../../index');\n\nmodule.exports = React.createClass({\n    displayName: 'CreateRoom',\n\n    propTypes: {\n        onRoomCreated: React.PropTypes.func,\n        collapsedRhs: React.PropTypes.bool,\n    },\n\n    phases: {\n        CONFIG: \"CONFIG\",  // We're waiting for user to configure and hit create.\n        CREATING: \"CREATING\",  // We're sending the request.\n        CREATED: \"CREATED\",  // We successfully created the room.\n        ERROR: \"ERROR\",  // There was an error while trying to create room.\n    },\n\n    getDefaultProps: function() {\n        return {\n            onRoomCreated: function() {},\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            phase: this.phases.CONFIG,\n            error_string: \"\",\n            is_private: true,\n            share_history: false,\n            default_preset: PresetValues.PrivateChat,\n            topic: '',\n            room_name: '',\n            invited_users: [],\n        };\n    },\n\n    onCreateRoom: function() {\n        var options = {};\n\n        if (this.state.room_name) {\n            options.name = this.state.room_name;\n        }\n\n        if (this.state.topic) {\n            options.topic = this.state.topic;\n        }\n\n        if (this.state.preset) {\n            if (this.state.preset != PresetValues.Custom) {\n                options.preset = this.state.preset;\n            } else {\n                options.initial_state = [\n                    {\n                        type: \"m.room.join_rules\",\n                        content: {\n                            \"join_rule\": this.state.is_private ? \"invite\" : \"public\"\n                        }\n                    },\n                    {\n                        type: \"m.room.history_visibility\",\n                        content: {\n                            \"history_visibility\": this.state.share_history ? \"shared\" : \"invited\"\n                        }\n                    },\n                ];\n            }\n        }\n\n        options.invite = this.state.invited_users;\n\n        var alias = this.getAliasLocalpart();\n        if (alias) {\n            options.room_alias_name = alias;\n        }\n\n        var cli = MatrixClientPeg.get();\n        if (!cli) {\n            // TODO: Error.\n            console.error(\"Cannot create room: No matrix client.\");\n            return;\n        }\n\n        var deferred = cli.createRoom(options);\n\n        if (this.state.encrypt) {\n            // TODO\n        }\n\n        this.setState({\n            phase: this.phases.CREATING,\n        });\n\n        var self = this;\n\n        deferred.then(function(resp) {\n            self.setState({\n                phase: self.phases.CREATED,\n            });\n            self.props.onRoomCreated(resp.room_id);\n        }, function(err) {\n            self.setState({\n                phase: self.phases.ERROR,\n                error_string: err.toString(),\n            });\n        });\n    },\n\n    getPreset: function() {\n        return this.refs.presets.getPreset();\n    },\n\n    getName: function() {\n        return this.refs.name_textbox.getName();\n    },\n\n    getTopic: function() {\n        return this.refs.topic.getTopic();\n    },\n\n    getAliasLocalpart: function() {\n        return this.refs.alias.getAliasLocalpart();\n    },\n\n    getInvitedUsers: function() {\n        return this.refs.user_selector.getUserIds();\n    },\n\n    onPresetChanged: function(preset) {\n        switch (preset) {\n            case PresetValues.PrivateChat:\n                this.setState({\n                    preset: preset,\n                    is_private: true,\n                    share_history: false,\n                });\n                break;\n            case PresetValues.PublicChat:\n                this.setState({\n                    preset: preset,\n                    is_private: false,\n                    share_history: true,\n                });\n                break;\n            case PresetValues.Custom:\n                this.setState({\n                    preset: preset,\n                });\n                break;\n        }\n    },\n\n    onPrivateChanged: function(ev) {\n        this.setState({\n            preset: PresetValues.Custom,\n            is_private: ev.target.checked,\n        });\n    },\n\n    onShareHistoryChanged: function(ev) {\n        this.setState({\n            preset: PresetValues.Custom,\n            share_history: ev.target.checked,\n        });\n    },\n\n    onTopicChange: function(ev) {\n        this.setState({\n            topic: ev.target.value,\n        });\n    },\n\n    onNameChange: function(ev) {\n        this.setState({\n            room_name: ev.target.value,\n        });\n    },\n\n    onInviteChanged: function(invited_users) {\n        this.setState({\n            invited_users: invited_users,\n        });\n    },\n\n    onAliasChanged: function(alias) {\n        this.setState({\n            alias: alias\n        });\n    },\n\n    onEncryptChanged: function(ev) {\n        this.setState({\n            encrypt: ev.target.checked,\n        });\n    },\n\n    render: function() {\n        var curr_phase = this.state.phase;\n        if (curr_phase == this.phases.CREATING) {\n            var Loader = sdk.getComponent(\"elements.Spinner\");\n            return (\n                <Loader/>\n            );\n        } else {\n            var error_box = \"\";\n            if (curr_phase == this.phases.ERROR) {\n                error_box = (\n                    <div className=\"mx_Error\">\n                        An error occured: {this.state.error_string}\n                    </div>\n                );\n            }\n\n            var CreateRoomButton = sdk.getComponent(\"create_room.CreateRoomButton\");\n            var RoomAlias = sdk.getComponent(\"create_room.RoomAlias\");\n            var Presets = sdk.getComponent(\"create_room.Presets\");\n            var UserSelector = sdk.getComponent(\"elements.UserSelector\");\n            var SimpleRoomHeader = sdk.getComponent(\"rooms.SimpleRoomHeader\");\n\n            var domain = MatrixClientPeg.get().getDomain();\n\n            return (\n            <div className=\"mx_CreateRoom\">\n                <SimpleRoomHeader title=\"CreateRoom\" collapsedRhs={ this.props.collapsedRhs }/>\n                <div className=\"mx_CreateRoom_body\">\n                    <input type=\"text\" ref=\"room_name\" value={this.state.room_name} onChange={this.onNameChange} placeholder=\"Name\"/> <br />\n                    <textarea className=\"mx_CreateRoom_description\" ref=\"topic\" value={this.state.topic} onChange={this.onTopicChange} placeholder=\"Topic\"/> <br />\n                    <RoomAlias ref=\"alias\" alias={this.state.alias} homeserver={ domain } onChange={this.onAliasChanged}/> <br />\n                    <UserSelector ref=\"user_selector\" selected_users={this.state.invited_users} onChange={this.onInviteChanged}/> <br />\n                    <Presets ref=\"presets\" onChange={this.onPresetChanged} preset={this.state.preset}/> <br />\n                    <div>\n                        <label>\n                            <input type=\"checkbox\" ref=\"is_private\" checked={this.state.is_private} onChange={this.onPrivateChanged}/>\n                            Make this room private\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            <input type=\"checkbox\" ref=\"share_history\" checked={this.state.share_history} onChange={this.onShareHistoryChanged}/>\n                            Share message history with new users\n                        </label>\n                    </div>\n                    <div className=\"mx_CreateRoom_encrypt\">\n                        <label>\n                            <input type=\"checkbox\" ref=\"encrypt\" checked={this.state.encrypt} onChange={this.onEncryptChanged}/>\n                            Encrypt room\n                        </label>\n                    </div>\n                    <div>\n                        <CreateRoomButton onCreateRoom={this.onCreateRoom} /> <br />\n                    </div>\n                    {error_box}\n                </div>\n            </div>\n            );\n        }\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/FilePanel.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[592,595],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'ReactDOM' is assigned a value but never used.","line":18,"column":5,"nodeType":"Identifier","source":"var ReactDOM = require(\"react-dom\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var Matrix = require(\"matrix-js-sdk\");","fix":{"range":[630,633],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../index');","fix":{"range":[669,672],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../MatrixClientPeg\");","fix":{"range":[703,706],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../dispatcher\");","fix":{"range":[759,762],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'dis' is assigned a value but never used.","line":23,"column":5,"nodeType":"Identifier","source":"var dis = require(\"../../dispatcher\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var FilePanel = React.createClass({","fix":{"range":[871,874],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":59,"column":9,"nodeType":"VariableDeclaration","source":"        var client = MatrixClientPeg.get();","fix":{"range":[1994,1997],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":60,"column":9,"nodeType":"VariableDeclaration","source":"        var room = client.getRoom(roomId);","fix":{"range":[2038,2041],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":63,"column":13,"nodeType":"VariableDeclaration","source":"            var filter = new Matrix.Filter(client.credentials.userId);","fix":{"range":[2106,2109],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":68,"column":49,"nodeType":"Property","source":"                            \"contains_url\": true","fix":{"range":[2333,2333],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":70,"column":22,"nodeType":"Property","source":"                    }","fix":{"range":[2382,2382],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":71,"column":18,"nodeType":"ObjectExpression","source":"                }","fix":{"range":[2400,2400],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 75 exceeds the maximum line length of 90.","line":75,"column":1,"nodeType":"Program","source":"            client.getOrCreateFilter(\"FILTER_FILES_\" + client.credentials.userId, filter).then("},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":78,"column":21,"nodeType":"VariableDeclaration","source":"                    var timelineSet = room.getOrCreateFilteredTimelineSet(filter);","fix":{"range":[2707,2710],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":83,"column":18,"nodeType":"ArrowFunctionExpression","source":"                }","fix":{"range":[2985,2985],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":85,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[3010,3019],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":93,"column":9,"nodeType":"VariableDeclaration","source":"        var TimelinePanel = sdk.getComponent(\"structures.TimelinePanel\");","fix":{"range":[3240,3243],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":94,"column":9,"nodeType":"VariableDeclaration","source":"        var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[3314,3317],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":110,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4109,4118],"text":"        "}}],"errorCount":6,"warningCount":16,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar ReactDOM = require(\"react-dom\");\n\nvar Matrix = require(\"matrix-js-sdk\");\nvar sdk = require('../../index');\nvar MatrixClientPeg = require(\"../../MatrixClientPeg\");\nvar dis = require(\"../../dispatcher\");\n\n/*\n * Component which shows the filtered file using a TimelinePanel\n */\nvar FilePanel = React.createClass({\n    displayName: 'FilePanel',\n\n    propTypes: {\n        roomId: React.PropTypes.string.isRequired,\n    },\n\n    getInitialState: function() {\n        return {\n            timelineSet: null,\n        };\n    },\n\n    componentWillMount: function() {\n        this.updateTimelineSet(this.props.roomId);\n    },\n\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.roomId !== this.props.roomId) {\n            // otherwise we race between re-rendering the TimelinePanel and setting the new timelineSet.\n            //\n            // FIXME: this race only happens because of the promise returned by getOrCreateFilter().\n            // We should only need to create the containsUrl filter once per login session, so in practice\n            // it shouldn't be being done here at all.  Then we could just update the timelineSet directly\n            // without resetting it first, and speed up room-change.\n            this.setState({ timelineSet: null });\n            this.updateTimelineSet(nextProps.roomId);\n        }\n    },\n\n    updateTimelineSet: function(roomId) {\n        var client = MatrixClientPeg.get();\n        var room = client.getRoom(roomId);\n\n        if (room) {\n            var filter = new Matrix.Filter(client.credentials.userId);\n            filter.setDefinition(\n                {\n                    \"room\": {\n                        \"timeline\": {\n                            \"contains_url\": true\n                        },\n                    }\n                }\n            );\n\n            // FIXME: we shouldn't be doing this every time we change room - see comment above.\n            client.getOrCreateFilter(\"FILTER_FILES_\" + client.credentials.userId, filter).then(\n                (filterId)=>{\n                    filter.filterId = filterId;\n                    var timelineSet = room.getOrCreateFilteredTimelineSet(filter);\n                    this.setState({ timelineSet: timelineSet });\n                },\n                (error)=>{\n                    console.error(\"Failed to get or create file panel filter\", error);\n                }\n            );\n        }\n        else {\n            console.error(\"Failed to add filtered timelineSet for FilePanel as no room!\");\n        }\n    },\n\n    render: function() {\n        // wrap a TimelinePanel with the jump-to-event bits turned off.\n        var TimelinePanel = sdk.getComponent(\"structures.TimelinePanel\");\n        var Loader = sdk.getComponent(\"elements.Spinner\");\n\n        if (this.state.timelineSet) {\n            // console.log(\"rendering TimelinePanel for timelineSet \" + this.state.timelineSet.room.roomId + \" \" +\n            //             \"(\" + this.state.timelineSet._timelines.join(\", \") + \")\" + \" with key \" + this.props.roomId);\n            return (\n                <TimelinePanel key={\"filepanel_\" + this.props.roomId}\n                    className=\"mx_FilePanel\"\n                    manageReadReceipts={false}\n                    manageReadMarkers={false}\n                    timelineSet={this.state.timelineSet}\n                    showUrlPreview = { false }\n                    tileShape=\"file_grid\"\n                    opacity={ this.props.opacity }\n                />\n            );\n        }\n        else {\n            return (\n                <div className=\"mx_FilePanel\">\n                    <Loader/>\n                </div>\n            );\n        }\n    },\n});\n\nmodule.exports = FilePanel;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/LoggedInView.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":92,"column":9,"nodeType":"VariableDeclaration","source":"        var handled = false;","fix":{"range":[3007,3010],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":98,"column":21,"nodeType":"VariableDeclaration","source":"                    var action = ev.keyCode == KeyCode.UP ?","fix":{"range":[3172,3175],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'ev'.","line":126,"column":5,"nodeType":"Block","source":"    /** dispatch a page-up/page-down/etc to the appropriate component */"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":134,"column":9,"nodeType":"VariableDeclaration","source":"        var LeftPanel = sdk.getComponent('structures.LeftPanel');","fix":{"range":[4166,4169],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":135,"column":9,"nodeType":"VariableDeclaration","source":"        var RightPanel = sdk.getComponent('structures.RightPanel');","fix":{"range":[4232,4235],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":136,"column":9,"nodeType":"VariableDeclaration","source":"        var RoomView = sdk.getComponent('structures.RoomView');","fix":{"range":[4300,4303],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":137,"column":9,"nodeType":"VariableDeclaration","source":"        var UserSettings = sdk.getComponent('structures.UserSettings');","fix":{"range":[4364,4367],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":138,"column":9,"nodeType":"VariableDeclaration","source":"        var CreateRoom = sdk.getComponent('structures.CreateRoom');","fix":{"range":[4436,4439],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":139,"column":9,"nodeType":"VariableDeclaration","source":"        var RoomDirectory = sdk.getComponent('structures.RoomDirectory');","fix":{"range":[4504,4507],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":140,"column":9,"nodeType":"VariableDeclaration","source":"        var MatrixToolbar = sdk.getComponent('globals.MatrixToolbar');","fix":{"range":[4578,4581],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":141,"column":9,"nodeType":"VariableDeclaration","source":"        var GuestWarningBar = sdk.getComponent('globals.GuestWarningBar');","fix":{"range":[4649,4652],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":142,"column":9,"nodeType":"VariableDeclaration","source":"        var NewVersionBar = sdk.getComponent('globals.NewVersionBar');","fix":{"range":[4724,4727],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":144,"column":9,"nodeType":"VariableDeclaration","source":"        var page_element;","fix":{"range":[4796,4799],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'page_element' is not in camel case.","line":144,"column":13,"nodeType":"Identifier","source":"        var page_element;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":145,"column":9,"nodeType":"VariableDeclaration","source":"        var right_panel = '';","fix":{"range":[4822,4825],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_panel' is not in camel case.","line":145,"column":13,"nodeType":"Identifier","source":"        var right_panel = '';"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'page_element' is not in camel case.","line":149,"column":17,"nodeType":"Identifier","source":"                page_element = <RoomView"},{"ruleId":"max-len","severity":1,"message":"Line 151 exceeds the maximum line length of 90.","line":151,"column":1,"nodeType":"Program","source":"                        roomAddress={this.props.currentRoomAlias || this.props.currentRoomId}"},{"ruleId":"max-len","severity":1,"message":"Line 165 exceeds the maximum line length of 90.","line":165,"column":1,"nodeType":"Program","source":"                if (!this.props.collapse_rhs) right_panel = <RightPanel roomId={this.props.currentRoomId} opacity={this.props.sideOpacity} />;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_panel' is not in camel case.","line":165,"column":47,"nodeType":"Identifier","source":"                if (!this.props.collapse_rhs) right_panel = <RightPanel roomId={this.props.currentRoomId} opacity={this.props.sideOpacity} />;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'page_element' is not in camel case.","line":169,"column":17,"nodeType":"Identifier","source":"                page_element = <UserSettings"},{"ruleId":"max-len","severity":1,"message":"Line 175 exceeds the maximum line length of 90.","line":175,"column":1,"nodeType":"Program","source":"                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_panel' is not in camel case.","line":175,"column":47,"nodeType":"Identifier","source":"                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'page_element' is not in camel case.","line":179,"column":17,"nodeType":"Identifier","source":"                page_element = <CreateRoom"},{"ruleId":"max-len","severity":1,"message":"Line 183 exceeds the maximum line length of 90.","line":183,"column":1,"nodeType":"Program","source":"                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_panel' is not in camel case.","line":183,"column":47,"nodeType":"Identifier","source":"                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'page_element' is not in camel case.","line":187,"column":17,"nodeType":"Identifier","source":"                page_element = <RoomDirectory"},{"ruleId":"max-len","severity":1,"message":"Line 191 exceeds the maximum line length of 90.","line":191,"column":1,"nodeType":"Program","source":"                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_panel' is not in camel case.","line":191,"column":47,"nodeType":"Identifier","source":"                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'page_element' is not in camel case.","line":194,"column":17,"nodeType":"Identifier","source":"                page_element = null; // deliberately null for now"},{"ruleId":"max-len","severity":1,"message":"Line 195 exceeds the maximum line length of 90.","line":195,"column":1,"nodeType":"Program","source":"                right_panel = <RightPanel userId={this.props.viewUserId} opacity={this.props.sideOpacity} />;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_panel' is not in camel case.","line":195,"column":17,"nodeType":"Identifier","source":"                right_panel = <RightPanel userId={this.props.viewUserId} opacity={this.props.sideOpacity} />;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":199,"column":9,"nodeType":"VariableDeclaration","source":"        var topBar;","fix":{"range":[7537,7540],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 201 exceeds the maximum line length of 90.","line":201,"column":1,"nodeType":"Program","source":"            topBar = <NewVersionBar version={this.props.version} newVersion={this.props.newVersion}"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":204,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[7779,7788],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":207,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[7885,7894],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 208 exceeds the maximum line length of 90.","line":208,"column":1,"nodeType":"Program","source":"        else if (Notifier.supportsDesktopNotifications() && !Notifier.isEnabled() && !Notifier.isToolbarHidden()) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":212,"column":9,"nodeType":"VariableDeclaration","source":"        var bodyClasses = 'mx_MatrixChat';","fix":{"range":[8061,8064],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 221 exceeds the maximum line length of 90.","line":221,"column":1,"nodeType":"Program","source":"                    <LeftPanel selectedRoom={this.props.currentRoomId} collapsed={this.props.collapse_lhs || false} opacity={this.props.sideOpacity}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'page_element' is not in camel case.","line":223,"column":26,"nodeType":"Identifier","source":"                        {page_element}"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_panel' is not in camel case.","line":225,"column":22,"nodeType":"Identifier","source":"                    {right_panel}"}],"errorCount":0,"warningCount":41,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Matrix from 'matrix-js-sdk';\nimport React from 'react';\n\nimport KeyCode from '../../KeyCode';\nimport Notifier from '../../Notifier';\nimport PageTypes from '../../PageTypes';\nimport sdk from '../../index';\nimport dis from '../../dispatcher';\n\n/**\n * This is what our MatrixChat shows when we are logged in. The precise view is\n * determined by the page_type property.\n *\n * Currently it's very tightly coupled with MatrixChat. We should try to do\n * something about that.\n *\n * Components mounted below us can access the matrix client via the react context.\n */\nexport default React.createClass({\n    displayName: 'LoggedInView',\n\n    propTypes: {\n        matrixClient: React.PropTypes.instanceOf(Matrix.MatrixClient).isRequired,\n        page_type: React.PropTypes.string.isRequired,\n        onRoomIdResolved: React.PropTypes.func,\n        onRoomCreated: React.PropTypes.func,\n        onUserSettingsClose: React.PropTypes.func,\n\n        // and lots and lots of other stuff.\n    },\n\n    childContextTypes: {\n        matrixClient: React.PropTypes.instanceOf(Matrix.MatrixClient),\n    },\n\n    getChildContext: function() {\n        return {\n            matrixClient: this._matrixClient,\n        };\n    },\n\n    componentWillMount: function() {\n        // stash the MatrixClient in case we log out before we are unmounted\n        this._matrixClient = this.props.matrixClient;\n\n        // _scrollStateMap is a map from room id to the scroll state returned by\n        // RoomView.getScrollState()\n        this._scrollStateMap = {};\n\n        document.addEventListener('keydown', this._onKeyDown);\n    },\n\n    componentWillUnmount: function() {\n        document.removeEventListener('keydown', this._onKeyDown);\n    },\n\n    getScrollStateForRoom: function(roomId) {\n        return this._scrollStateMap[roomId];\n    },\n\n    _onKeyDown: function(ev) {\n            /*\n            // Remove this for now as ctrl+alt = alt-gr so this breaks keyboards which rely on alt-gr for numbers\n            // Will need to find a better meta key if anyone actually cares about using this.\n            if (ev.altKey && ev.ctrlKey && ev.keyCode > 48 && ev.keyCode < 58) {\n                dis.dispatch({\n                    action: 'view_indexed_room',\n                    roomIndex: ev.keyCode - 49,\n                });\n                ev.stopPropagation();\n                ev.preventDefault();\n                return;\n            }\n            */\n\n        var handled = false;\n\n        switch (ev.keyCode) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (ev.altKey) {\n                    var action = ev.keyCode == KeyCode.UP ?\n                        'view_prev_room' : 'view_next_room';\n                    dis.dispatch({action: action});\n                    handled = true;\n                }\n                break;\n\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_DOWN:\n                this._onScrollKeyPressed(ev);\n                handled = true;\n                break;\n\n            case KeyCode.HOME:\n            case KeyCode.END:\n                if (ev.ctrlKey) {\n                    this._onScrollKeyPressed(ev);\n                    handled = true;\n                }\n                break;\n        }\n\n        if (handled) {\n            ev.stopPropagation();\n            ev.preventDefault();\n        }\n    },\n\n    /** dispatch a page-up/page-down/etc to the appropriate component */\n    _onScrollKeyPressed: function(ev) {\n        if (this.refs.roomView) {\n            this.refs.roomView.handleScrollKey(ev);\n        }\n    },\n\n    render: function() {\n        var LeftPanel = sdk.getComponent('structures.LeftPanel');\n        var RightPanel = sdk.getComponent('structures.RightPanel');\n        var RoomView = sdk.getComponent('structures.RoomView');\n        var UserSettings = sdk.getComponent('structures.UserSettings');\n        var CreateRoom = sdk.getComponent('structures.CreateRoom');\n        var RoomDirectory = sdk.getComponent('structures.RoomDirectory');\n        var MatrixToolbar = sdk.getComponent('globals.MatrixToolbar');\n        var GuestWarningBar = sdk.getComponent('globals.GuestWarningBar');\n        var NewVersionBar = sdk.getComponent('globals.NewVersionBar');\n\n        var page_element;\n        var right_panel = '';\n\n        switch (this.props.page_type) {\n            case PageTypes.RoomView:\n                page_element = <RoomView\n                        ref='roomView'\n                        roomAddress={this.props.currentRoomAlias || this.props.currentRoomId}\n                        autoJoin={this.props.autoJoin}\n                        onRoomIdResolved={this.props.onRoomIdResolved}\n                        eventId={this.props.initialEventId}\n                        thirdPartyInvite={this.props.thirdPartyInvite}\n                        oobData={this.props.roomOobData}\n                        highlightedEventId={this.props.highlightedEventId}\n                        eventPixelOffset={this.props.initialEventPixelOffset}\n                        key={this.props.currentRoomAlias || this.props.currentRoomId}\n                        opacity={this.props.middleOpacity}\n                        collapsedRhs={this.props.collapse_rhs}\n                        ConferenceHandler={this.props.ConferenceHandler}\n                        scrollStateMap={this._scrollStateMap}\n                    />;\n                if (!this.props.collapse_rhs) right_panel = <RightPanel roomId={this.props.currentRoomId} opacity={this.props.sideOpacity} />;\n                break;\n\n            case PageTypes.UserSettings:\n                page_element = <UserSettings\n                    onClose={this.props.onUserSettingsClose}\n                    brand={this.props.config.brand}\n                    collapsedRhs={this.props.collapse_rhs}\n                    enableLabs={this.props.config.enableLabs}\n                />;\n                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;\n                break;\n\n            case PageTypes.CreateRoom:\n                page_element = <CreateRoom\n                    onRoomCreated={this.props.onRoomCreated}\n                    collapsedRhs={this.props.collapse_rhs}\n                />;\n                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;\n                break;\n\n            case PageTypes.RoomDirectory:\n                page_element = <RoomDirectory\n                    collapsedRhs={this.props.collapse_rhs}\n                    config={this.props.config.roomDirectory}\n                />;\n                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;\n                break;\n            case PageTypes.UserView:\n                page_element = null; // deliberately null for now\n                right_panel = <RightPanel userId={this.props.viewUserId} opacity={this.props.sideOpacity} />;\n                break;\n        }\n\n        var topBar;\n        if (this.props.hasNewVersion) {\n            topBar = <NewVersionBar version={this.props.version} newVersion={this.props.newVersion}\n                releaseNotes={this.props.newVersionReleaseNotes}\n            />;\n        }\n        else if (this.props.matrixClient.isGuest()) {\n            topBar = <GuestWarningBar />;\n        }\n        else if (Notifier.supportsDesktopNotifications() && !Notifier.isEnabled() && !Notifier.isToolbarHidden()) {\n            topBar = <MatrixToolbar />;\n        }\n\n        var bodyClasses = 'mx_MatrixChat';\n        if (topBar) {\n            bodyClasses += ' mx_MatrixChat_toolbarShowing';\n        }\n\n        return (\n            <div className='mx_MatrixChat_wrapper'>\n                {topBar}\n                <div className={bodyClasses}>\n                    <LeftPanel selectedRoom={this.props.currentRoomId} collapsed={this.props.collapse_lhs || false} opacity={this.props.sideOpacity}/>\n                    <main className='mx_MatrixChat_middlePanel'>\n                        {page_element}\n                    </main>\n                    {right_panel}\n                </div>\n            </div>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/login/ForgotPassword.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[650,653],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[689,692],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MatrixClientPeg' is assigned a value but never used.","line":22,"column":5,"nodeType":"Identifier","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var PasswordReset = require(\"../../../PasswordReset\");","fix":{"range":[749,752],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":36,"column":52,"nodeType":"Property","source":"        onComplete: React.PropTypes.func.isRequired","fix":{"range":[1219,1219],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":43,"column":27,"nodeType":"Property","source":"            progress: null","fix":{"range":[1479,1479],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":49,"column":38,"nodeType":"Property","source":"            progress: \"sending_email\"","fix":{"range":[1633,1633],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":54,"column":39,"nodeType":"Property","source":"                progress: \"sent_email\"","fix":{"range":[1835,1835],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":59,"column":31,"nodeType":"Property","source":"                progress: null","fix":{"range":[2006,2006],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 81 exceeds the maximum line length of 90.","line":81,"column":1,"nodeType":"Program","source":"            this.showErrorDialog(\"The email address linked to your account must be entered.\");"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":82,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2633,2642],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":85,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2778,2787],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":88,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2927,2936],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":90,"column":13,"nodeType":"VariableDeclaration","source":"            var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[2955,2958],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 95 exceeds the maximum line length of 90.","line":95,"column":1,"nodeType":"Program","source":"                        Resetting password will currently reset any end-to-end encryption keys on all devices,"},{"ruleId":"max-len","severity":1,"message":"Line 97 exceeds the maximum line length of 90.","line":97,"column":1,"nodeType":"Program","source":"                        In future this <a href=\"https://github.com/vector-im/riot-web/issues/2671\">may be improved</a>,"},{"ruleId":"max-len","severity":1,"message":"Line 104 exceeds the maximum line length of 90.","line":104,"column":1,"nodeType":"Program","source":"                            this.state.enteredHomeserverUrl, this.state.enteredIdentityServerUrl,"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":105,"column":66,"nodeType":"MemberExpression","source":"                            this.state.email, this.state.password","fix":{"range":[3861,3861],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":115,"column":40,"nodeType":"Property","source":"            [stateKey]: ev.target.value","fix":{"range":[4072,4072],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":121,"column":43,"nodeType":"Property","source":"            enteredHomeserverUrl: newHsUrl","fix":{"range":[4200,4200],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":127,"column":47,"nodeType":"Property","source":"            enteredIdentityServerUrl: newIsUrl","fix":{"range":[4332,4332],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":132,"column":9,"nodeType":"VariableDeclaration","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[4406,4409],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":135,"column":30,"nodeType":"Property","source":"            description: body","fix":{"range":[4562,4562],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":140,"column":9,"nodeType":"VariableDeclaration","source":"        var LoginHeader = sdk.getComponent(\"login.LoginHeader\");","fix":{"range":[4616,4619],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":141,"column":9,"nodeType":"VariableDeclaration","source":"        var LoginFooter = sdk.getComponent(\"login.LoginFooter\");","fix":{"range":[4681,4684],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":142,"column":9,"nodeType":"VariableDeclaration","source":"        var ServerConfig = sdk.getComponent(\"login.ServerConfig\");","fix":{"range":[4746,4749],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":143,"column":9,"nodeType":"VariableDeclaration","source":"        var Spinner = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[4813,4816],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":145,"column":9,"nodeType":"VariableDeclaration","source":"        var resetPasswordJsx;","fix":{"range":[4874,4877],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":149,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[5005,5014],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 156 exceeds the maximum line length of 90.","line":156,"column":1,"nodeType":"Program","source":"                    <input className=\"mx_Login_submit\" type=\"button\" onClick={this.onVerify}"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":160,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[5499,5508],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 165 exceeds the maximum line length of 90.","line":165,"column":1,"nodeType":"Program","source":"                    <p>You have been logged out of all devices and will no longer receive push notifications."},{"ruleId":"max-len","severity":1,"message":"Line 167 exceeds the maximum line length of 90.","line":167,"column":1,"nodeType":"Program","source":"                    <input className=\"mx_Login_submit\" type=\"button\" onClick={this.props.onComplete}"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":171,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[6065,6074],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 176 exceeds the maximum line length of 90.","line":176,"column":1,"nodeType":"Program","source":"                    To reset your password, enter the email address linked to your account:"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":183,"column":29,"nodeType":"JSXAttribute","source":"                            onChange={this.onInputChanged.bind(this, \"email\")}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":183,"column":39,"nodeType":"MemberExpression","source":"                            onChange={this.onInputChanged.bind(this, \"email\")}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":189,"column":29,"nodeType":"JSXAttribute","source":"                            onChange={this.onInputChanged.bind(this, \"password\")}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":189,"column":39,"nodeType":"MemberExpression","source":"                            onChange={this.onInputChanged.bind(this, \"password\")}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":195,"column":29,"nodeType":"JSXAttribute","source":"                            onChange={this.onInputChanged.bind(this, \"password2\")}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":195,"column":39,"nodeType":"MemberExpression","source":"                            onChange={this.onInputChanged.bind(this, \"password2\")}"},{"ruleId":"max-len","severity":1,"message":"Line 198 exceeds the maximum line length of 90.","line":198,"column":1,"nodeType":"Program","source":"                        <input className=\"mx_Login_submit\" type=\"submit\" value=\"Send Reset Email\" />"},{"ruleId":"max-len","severity":1,"message":"Line 211 exceeds the maximum line length of 90.","line":211,"column":1,"nodeType":"Program","source":"                    <a className=\"mx_Login_create\" onClick={this.props.onLoginClick} href=\"#\">"},{"ruleId":"max-len","severity":1,"message":"Line 214 exceeds the maximum line length of 90.","line":214,"column":1,"nodeType":"Program","source":"                    <a className=\"mx_Login_create\" onClick={this.props.onRegisterClick} href=\"#\">"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":232,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[8940,8940],"text":","}}],"errorCount":18,"warningCount":29,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sdk = require('../../../index');\nvar Modal = require(\"../../../Modal\");\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\n\nvar PasswordReset = require(\"../../../PasswordReset\");\n\nmodule.exports = React.createClass({\n    displayName: 'ForgotPassword',\n\n    propTypes: {\n        defaultHsUrl: React.PropTypes.string,\n        defaultIsUrl: React.PropTypes.string,\n        customHsUrl: React.PropTypes.string,\n        customIsUrl: React.PropTypes.string,\n        onLoginClick: React.PropTypes.func,\n        onRegisterClick: React.PropTypes.func,\n        onComplete: React.PropTypes.func.isRequired\n    },\n\n    getInitialState: function() {\n        return {\n            enteredHomeserverUrl: this.props.customHsUrl || this.props.defaultHsUrl,\n            enteredIdentityServerUrl: this.props.customIsUrl || this.props.defaultIsUrl,\n            progress: null\n        };\n    },\n\n    submitPasswordReset: function(hsUrl, identityUrl, email, password) {\n        this.setState({\n            progress: \"sending_email\"\n        });\n        this.reset = new PasswordReset(hsUrl, identityUrl);\n        this.reset.resetPassword(email, password).done(() => {\n            this.setState({\n                progress: \"sent_email\"\n            });\n        }, (err) => {\n            this.showErrorDialog(\"Failed to send email: \" + err.message);\n            this.setState({\n                progress: null\n            });\n        });\n    },\n\n    onVerify: function(ev) {\n        ev.preventDefault();\n        if (!this.reset) {\n            console.error(\"onVerify called before submitPasswordReset!\");\n            return;\n        }\n        this.reset.checkEmailLinkClicked().done((res) => {\n            this.setState({ progress: \"complete\" });\n        }, (err) => {\n            this.showErrorDialog(err.message);\n        });\n    },\n\n    onSubmitForm: function(ev) {\n        ev.preventDefault();\n\n        if (!this.state.email) {\n            this.showErrorDialog(\"The email address linked to your account must be entered.\");\n        }\n        else if (!this.state.password || !this.state.password2) {\n            this.showErrorDialog(\"A new password must be entered.\");\n        }\n        else if (this.state.password !== this.state.password2) {\n            this.showErrorDialog(\"New passwords must match each other.\");\n        }\n        else {\n            var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n            Modal.createDialog(QuestionDialog, {\n                title: \"Warning\",\n                description:\n                    <div>\n                        Resetting password will currently reset any end-to-end encryption keys on all devices,\n                        making encrypted chat history unreadable.\n                        In future this <a href=\"https://github.com/vector-im/riot-web/issues/2671\">may be improved</a>,\n                        but for now be warned.\n                    </div>,\n                button: \"Continue\",\n                onFinished: (confirmed) => {\n                    if (confirmed) {\n                        this.submitPasswordReset(\n                            this.state.enteredHomeserverUrl, this.state.enteredIdentityServerUrl,\n                            this.state.email, this.state.password\n                        );\n                    }\n                },\n            });\n        }\n    },\n\n    onInputChanged: function(stateKey, ev) {\n        this.setState({\n            [stateKey]: ev.target.value\n        });\n    },\n\n    onHsUrlChanged: function(newHsUrl) {\n        this.setState({\n            enteredHomeserverUrl: newHsUrl\n        });\n    },\n\n    onIsUrlChanged: function(newIsUrl) {\n        this.setState({\n            enteredIdentityServerUrl: newIsUrl\n        });\n    },\n\n    showErrorDialog: function(body, title) {\n        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n        Modal.createDialog(ErrorDialog, {\n            title: title,\n            description: body\n        });\n    },\n\n    render: function() {\n        var LoginHeader = sdk.getComponent(\"login.LoginHeader\");\n        var LoginFooter = sdk.getComponent(\"login.LoginFooter\");\n        var ServerConfig = sdk.getComponent(\"login.ServerConfig\");\n        var Spinner = sdk.getComponent(\"elements.Spinner\");\n\n        var resetPasswordJsx;\n\n        if (this.state.progress === \"sending_email\") {\n            resetPasswordJsx = <Spinner />;\n        }\n        else if (this.state.progress === \"sent_email\") {\n            resetPasswordJsx = (\n                <div>\n                    An email has been sent to {this.state.email}. Once you&#39;ve followed\n                    the link it contains, click below.\n                    <br />\n                    <input className=\"mx_Login_submit\" type=\"button\" onClick={this.onVerify}\n                        value=\"I have verified my email address\" />\n                </div>\n            );\n        }\n        else if (this.state.progress === \"complete\") {\n            resetPasswordJsx = (\n                <div>\n                    <p>Your password has been reset.</p>\n                    <p>You have been logged out of all devices and will no longer receive push notifications.\n                    To re-enable notifications, sign in again on each device.</p>\n                    <input className=\"mx_Login_submit\" type=\"button\" onClick={this.props.onComplete}\n                        value=\"Return to login screen\" />\n                </div>\n            );\n        }\n        else {\n            resetPasswordJsx = (\n            <div>\n                <div className=\"mx_Login_prompt\">\n                    To reset your password, enter the email address linked to your account:\n                </div>\n                <div>\n                    <form onSubmit={this.onSubmitForm}>\n                        <input className=\"mx_Login_field\" ref=\"user\" type=\"text\"\n                            name=\"reset_email\" // define a name so browser's password autofill gets less confused\n                            value={this.state.email}\n                            onChange={this.onInputChanged.bind(this, \"email\")}\n                            placeholder=\"Email address\" autoFocus />\n                        <br />\n                        <input className=\"mx_Login_field\" ref=\"pass\" type=\"password\"\n                            name=\"reset_password\"\n                            value={this.state.password}\n                            onChange={this.onInputChanged.bind(this, \"password\")}\n                            placeholder=\"New password\" />\n                        <br />\n                        <input className=\"mx_Login_field\" ref=\"pass\" type=\"password\"\n                            name=\"reset_password_confirm\"\n                            value={this.state.password2}\n                            onChange={this.onInputChanged.bind(this, \"password2\")}\n                            placeholder=\"Confirm your new password\" />\n                        <br />\n                        <input className=\"mx_Login_submit\" type=\"submit\" value=\"Send Reset Email\" />\n                    </form>\n                    <ServerConfig ref=\"serverConfig\"\n                        withToggleButton={true}\n                        defaultHsUrl={this.props.defaultHsUrl}\n                        defaultIsUrl={this.props.defaultIsUrl}\n                        customHsUrl={this.props.customHsUrl}\n                        customIsUrl={this.props.customIsUrl}\n                        onHsUrlChanged={this.onHsUrlChanged}\n                        onIsUrlChanged={this.onIsUrlChanged}\n                        delayTimeMs={0}/>\n                    <div className=\"mx_Login_error\">\n                    </div>\n                    <a className=\"mx_Login_create\" onClick={this.props.onLoginClick} href=\"#\">\n                        Return to login\n                    </a>\n                    <a className=\"mx_Login_create\" onClick={this.props.onRegisterClick} href=\"#\">\n                        Create a new account\n                    </a>\n                    <LoginFooter />\n                </div>\n            </div>\n            );\n        }\n\n\n        return (\n            <div className=\"mx_Login\">\n                <div className=\"mx_Login_box\">\n                    <LoginHeader />\n                    {resetPasswordJsx}\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/login/Login.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require('react-dom');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'ReactDOM' is assigned a value but never used.","line":20,"column":5,"nodeType":"Identifier","source":"var ReactDOM = require('react-dom');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[650,653],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var Signup = require(\"../../../Signup\");","fix":{"range":[687,690],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var PasswordLogin = require(\"../../views/login/PasswordLogin\");","fix":{"range":[728,731],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var CasLogin = require(\"../../views/login/CasLogin\");","fix":{"range":[792,795],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var ServerConfig = require(\"../../views/login/ServerConfig\");","fix":{"range":[846,849],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":77,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[2594,2597],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":90,"column":28,"nodeType":"Property","source":"                busy: false","fix":{"range":[3027,3027],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":100,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[3195,3198],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":113,"column":28,"nodeType":"Property","source":"                busy: false","fix":{"range":[3606,3606],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":123,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[3798,3801],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":133,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[4071,4074],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":143,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[4359,4362],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 147 exceeds the maximum line length of 90.","line":147,"column":1,"nodeType":"Program","source":"        var fallbackHsUrl = hsUrl == this.props.defaultHsUrl ? this.props.fallbackHsUrl : null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":147,"column":9,"nodeType":"VariableDeclaration","source":"        var fallbackHsUrl = hsUrl == this.props.defaultHsUrl ? this.props.fallbackHsUrl : null;","fix":{"range":[4505,4508],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":149,"column":9,"nodeType":"VariableDeclaration","source":"        var loginLogic = new Signup.Login(hsUrl, isUrl, fallbackHsUrl, {","fix":{"range":[4602,4605],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":163,"column":28,"nodeType":"Property","source":"                busy: false","fix":{"range":[5262,5262],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 183 exceeds the maximum line length of 90.","line":183,"column":1,"nodeType":"Program","source":"            loginIncorrect: isLoginAttempt && (err.httpStatus == 401 || err.httpStatus == 403)"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":183,"column":95,"nodeType":"Property","source":"            loginIncorrect: isLoginAttempt && (err.httpStatus == 401 || err.httpStatus == 403)","fix":{"range":[5889,5889],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":204,"column":13,"nodeType":"Punctuator","source":"            {","fix":{"range":[6534,6547],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 206 exceeds the maximum line length of 90.","line":206,"column":1,"nodeType":"Program","source":"                    Can't connect to homeserver via HTTP when an HTTPS URL is in your browser bar."},{"ruleId":"max-len","severity":1,"message":"Line 207 exceeds the maximum line length of 90.","line":207,"column":1,"nodeType":"Program","source":"                    Either use HTTPS or <a href='https://www.google.com/search?&q=enable%20unsafe%20scripts'>enable unsafe scripts</a>"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":209,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[6856,6869],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 212 exceeds the maximum line length of 90.","line":212,"column":1,"nodeType":"Program","source":"                    Can't connect to homeserver - please check your connectivity and ensure"},{"ruleId":"max-len","severity":1,"message":"Line 213 exceeds the maximum line length of 90.","line":213,"column":1,"nodeType":"Program","source":"                    your <a href={ this.state.enteredHomeserverUrl }>homeserver's SSL certificate</a> is trusted."},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":251,"column":9,"nodeType":"VariableDeclaration","source":"        var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[8229,8232],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":252,"column":9,"nodeType":"VariableDeclaration","source":"        var LoginHeader = sdk.getComponent(\"login.LoginHeader\");","fix":{"range":[8288,8291],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":253,"column":9,"nodeType":"VariableDeclaration","source":"        var LoginFooter = sdk.getComponent(\"login.LoginFooter\");","fix":{"range":[8353,8356],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 254 exceeds the maximum line length of 90.","line":254,"column":1,"nodeType":"Program","source":"        var loader = this.state.busy ? <div className=\"mx_Login_loader\"><Loader /></div> : null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":254,"column":9,"nodeType":"VariableDeclaration","source":"        var loader = this.state.busy ? <div className=\"mx_Login_loader\"><Loader /></div> : null;","fix":{"range":[8418,8421],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":256,"column":9,"nodeType":"VariableDeclaration","source":"        var loginAsGuestJsx;","fix":{"range":[8516,8519],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 259 exceeds the maximum line length of 90.","line":259,"column":1,"nodeType":"Program","source":"                <a className=\"mx_Login_create\" onClick={this._onLoginAsGuestClick} href=\"#\">"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":264,"column":9,"nodeType":"VariableDeclaration","source":"        var returnToAppJsx;","fix":{"range":[8774,8777],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 267 exceeds the maximum line length of 90.","line":267,"column":1,"nodeType":"Program","source":"                <a className=\"mx_Login_create\" onClick={this.props.onCancelClick} href=\"#\">"},{"ruleId":"max-len","severity":1,"message":"Line 293 exceeds the maximum line length of 90.","line":293,"column":1,"nodeType":"Program","source":"                        <a className=\"mx_Login_create\" onClick={this.props.onRegisterClick} href=\"#\">"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":303,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[10459,10459],"text":","}}],"errorCount":6,"warningCount":32,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar sdk = require('../../../index');\nvar Signup = require(\"../../../Signup\");\nvar PasswordLogin = require(\"../../views/login/PasswordLogin\");\nvar CasLogin = require(\"../../views/login/CasLogin\");\nvar ServerConfig = require(\"../../views/login/ServerConfig\");\n\n/**\n * A wire component which glues together login UI components and Signup logic\n */\nmodule.exports = React.createClass({\n    displayName: 'Login',\n\n    propTypes: {\n        onLoggedIn: React.PropTypes.func.isRequired,\n\n        enableGuest: React.PropTypes.bool,\n\n        customHsUrl: React.PropTypes.string,\n        customIsUrl: React.PropTypes.string,\n        defaultHsUrl: React.PropTypes.string,\n        defaultIsUrl: React.PropTypes.string,\n        // Secondary HS which we try to log into if the user is using\n        // the default HS but login fails. Useful for migrating to a\n        // different home server without confusing users.\n        fallbackHsUrl: React.PropTypes.string,\n\n        defaultDeviceDisplayName: React.PropTypes.string,\n\n        // login shouldn't know or care how registration is done.\n        onRegisterClick: React.PropTypes.func.isRequired,\n\n        // login shouldn't care how password recovery is done.\n        onForgotPasswordClick: React.PropTypes.func,\n        onCancelClick: React.PropTypes.func,\n\n        initialErrorText: React.PropTypes.string,\n    },\n\n    getInitialState: function() {\n        return {\n            busy: false,\n            errorText: this.props.initialErrorText,\n            loginIncorrect: false,\n            enteredHomeserverUrl: this.props.customHsUrl || this.props.defaultHsUrl,\n            enteredIdentityServerUrl: this.props.customIsUrl || this.props.defaultIsUrl,\n\n            // used for preserving username when changing homeserver\n            username: \"\",\n        };\n    },\n\n    componentWillMount: function() {\n        this._initLoginLogic();\n    },\n\n    onPasswordLogin: function(username, password) {\n        var self = this;\n        self.setState({\n            busy: true,\n            errorText: null,\n            loginIncorrect: false,\n        });\n\n        this._loginLogic.loginViaPassword(username, password).then(function(data) {\n            self.props.onLoggedIn(data);\n        }, function(error) {\n            self._setStateFromError(error, true);\n        }).finally(function() {\n            self.setState({\n                busy: false\n            });\n        }).done();\n    },\n\n    onCasLogin: function() {\n      this._loginLogic.redirectToCas();\n    },\n\n    _onLoginAsGuestClick: function() {\n        var self = this;\n        self.setState({\n            busy: true,\n            errorText: null,\n            loginIncorrect: false,\n        });\n\n        this._loginLogic.loginAsGuest().then(function(data) {\n            self.props.onLoggedIn(data);\n        }, function(error) {\n            self._setStateFromError(error, true);\n        }).finally(function() {\n            self.setState({\n                busy: false\n            });\n        }).done();\n    },\n\n    onUsernameChanged: function(username) {\n        this.setState({ username: username });\n    },\n\n    onHsUrlChanged: function(newHsUrl) {\n        var self = this;\n        this.setState({\n            enteredHomeserverUrl: newHsUrl,\n            errorText: null, // reset err messages\n        }, function() {\n            self._initLoginLogic(newHsUrl);\n        });\n    },\n\n    onIsUrlChanged: function(newIsUrl) {\n        var self = this;\n        this.setState({\n            enteredIdentityServerUrl: newIsUrl,\n            errorText: null, // reset err messages\n        }, function() {\n            self._initLoginLogic(null, newIsUrl);\n        });\n    },\n\n    _initLoginLogic: function(hsUrl, isUrl) {\n        var self = this;\n        hsUrl = hsUrl || this.state.enteredHomeserverUrl;\n        isUrl = isUrl || this.state.enteredIdentityServerUrl;\n\n        var fallbackHsUrl = hsUrl == this.props.defaultHsUrl ? this.props.fallbackHsUrl : null;\n\n        var loginLogic = new Signup.Login(hsUrl, isUrl, fallbackHsUrl, {\n            defaultDeviceDisplayName: this.props.defaultDeviceDisplayName,\n        });\n        this._loginLogic = loginLogic;\n\n        loginLogic.getFlows().then(function(flows) {\n            // old behaviour was to always use the first flow without presenting\n            // options. This works in most cases (we don't have a UI for multiple\n            // logins so let's skip that for now).\n            loginLogic.chooseFlow(0);\n        }, function(err) {\n            self._setStateFromError(err, false);\n        }).finally(function() {\n            self.setState({\n                busy: false\n            });\n        });\n\n        this.setState({\n            enteredHomeserverUrl: hsUrl,\n            enteredIdentityServerUrl: isUrl,\n            busy: true,\n            loginIncorrect: false,\n        });\n    },\n\n    _getCurrentFlowStep: function() {\n        return this._loginLogic ? this._loginLogic.getCurrentFlowStep() : null;\n    },\n\n    _setStateFromError: function(err, isLoginAttempt) {\n        this.setState({\n            errorText: this._errorTextFromError(err),\n            // https://matrix.org/jira/browse/SYN-744\n            loginIncorrect: isLoginAttempt && (err.httpStatus == 401 || err.httpStatus == 403)\n        });\n    },\n\n    _errorTextFromError(err) {\n        if (err.friendlyText) {\n            return err.friendlyText;\n        }\n\n        let errCode = err.errcode;\n        if (!errCode && err.httpStatus) {\n            errCode = \"HTTP \" + err.httpStatus;\n        }\n\n        let errorText = \"Error: Problem communicating with the given homeserver \" +\n                (errCode ? \"(\" + errCode + \")\" : \"\");\n\n        if (err.cors === 'rejected') {\n            if (window.location.protocol === 'https:' &&\n                (this.state.enteredHomeserverUrl.startsWith(\"http:\") ||\n                 !this.state.enteredHomeserverUrl.startsWith(\"http\")))\n            {\n                errorText = <span>\n                    Can't connect to homeserver via HTTP when an HTTPS URL is in your browser bar.\n                    Either use HTTPS or <a href='https://www.google.com/search?&q=enable%20unsafe%20scripts'>enable unsafe scripts</a>\n                </span>;\n            }\n            else {\n                errorText = <span>\n                    Can't connect to homeserver - please check your connectivity and ensure\n                    your <a href={ this.state.enteredHomeserverUrl }>homeserver's SSL certificate</a> is trusted.\n                </span>;\n            }\n        }\n\n        return errorText;\n    },\n\n    componentForStep: function(step) {\n        switch (step) {\n            case 'm.login.password':\n                return (\n                    <PasswordLogin\n                        onSubmit={this.onPasswordLogin}\n                        initialUsername={this.state.username}\n                        onUsernameChanged={this.onUsernameChanged}\n                        onForgotPasswordClick={this.props.onForgotPasswordClick}\n                        loginIncorrect={this.state.loginIncorrect}\n                    />\n                );\n            case 'm.login.cas':\n                return (\n                    <CasLogin onSubmit={this.onCasLogin} />\n                );\n            default:\n                if (!step) {\n                    return;\n                }\n                return (\n                    <div>\n                    Sorry, this homeserver is using a login which is not\n                    recognised ({step})\n                    </div>\n                );\n        }\n    },\n\n    render: function() {\n        var Loader = sdk.getComponent(\"elements.Spinner\");\n        var LoginHeader = sdk.getComponent(\"login.LoginHeader\");\n        var LoginFooter = sdk.getComponent(\"login.LoginFooter\");\n        var loader = this.state.busy ? <div className=\"mx_Login_loader\"><Loader /></div> : null;\n\n        var loginAsGuestJsx;\n        if (this.props.enableGuest) {\n            loginAsGuestJsx =\n                <a className=\"mx_Login_create\" onClick={this._onLoginAsGuestClick} href=\"#\">\n                    Login as guest\n                </a>;\n        }\n\n        var returnToAppJsx;\n        if (this.props.onCancelClick) {\n            returnToAppJsx =\n                <a className=\"mx_Login_create\" onClick={this.props.onCancelClick} href=\"#\">\n                    Return to app\n                </a>;\n        }\n\n        return (\n            <div className=\"mx_Login\">\n                <div className=\"mx_Login_box\">\n                    <LoginHeader />\n                    <div>\n                        <h2>Sign in\n                            { loader }\n                        </h2>\n                        { this.componentForStep(this._getCurrentFlowStep()) }\n                        <ServerConfig ref=\"serverConfig\"\n                            withToggleButton={true}\n                            customHsUrl={this.props.customHsUrl}\n                            customIsUrl={this.props.customIsUrl}\n                            defaultHsUrl={this.props.defaultHsUrl}\n                            defaultIsUrl={this.props.defaultIsUrl}\n                            onHsUrlChanged={this.onHsUrlChanged}\n                            onIsUrlChanged={this.onIsUrlChanged}\n                            delayTimeMs={1000}/>\n                        <div className=\"mx_Login_error\">\n                                { this.state.errorText }\n                        </div>\n                        <a className=\"mx_Login_create\" onClick={this.props.onRegisterClick} href=\"#\">\n                            Create a new account\n                        </a>\n                        { loginAsGuestJsx }\n                        { returnToAppJsx }\n                        <LoginFooter />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/login/PostRegistration.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[650,653],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":27,"column":52,"nodeType":"Property","source":"        onComplete: React.PropTypes.func.isRequired","fix":{"range":[853,853],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":34,"column":24,"nodeType":"Property","source":"            busy: false","fix":{"range":[996,996],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":42,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[1302,1305],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":44,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[1380,1383],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":48,"column":28,"nodeType":"Property","source":"                busy: false","fix":{"range":[1609,1609],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":53,"column":28,"nodeType":"Property","source":"                busy: false","fix":{"range":[1769,1769],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":59,"column":9,"nodeType":"VariableDeclaration","source":"        var ChangeDisplayName = sdk.getComponent('settings.ChangeDisplayName');","fix":{"range":[1839,1842],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":60,"column":9,"nodeType":"VariableDeclaration","source":"        var ChangeAvatar = sdk.getComponent('settings.ChangeAvatar');","fix":{"range":[1919,1922],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":61,"column":9,"nodeType":"VariableDeclaration","source":"        var LoginHeader = sdk.getComponent('login.LoginHeader');","fix":{"range":[1989,1992],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":78,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2697,2697],"text":","}}],"errorCount":5,"warningCount":8,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sdk = require('../../../index');\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\n\nmodule.exports = React.createClass({\n    displayName: 'PostRegistration',\n\n    propTypes: {\n        onComplete: React.PropTypes.func.isRequired\n    },\n\n    getInitialState: function() {\n        return {\n            avatarUrl: null,\n            errorString: null,\n            busy: false\n        };\n    },\n\n    componentWillMount: function() {\n        // There is some assymetry between ChangeDisplayName and ChangeAvatar,\n        // as ChangeDisplayName will auto-get the name but ChangeAvatar expects\n        // the URL to be passed to you (because it's also used for room avatars).\n        var cli = MatrixClientPeg.get();\n        this.setState({busy: true});\n        var self = this;\n        cli.getProfileInfo(cli.credentials.userId).done(function(result) {\n            self.setState({\n                avatarUrl: MatrixClientPeg.get().mxcUrlToHttp(result.avatar_url),\n                busy: false\n            });\n        }, function(error) {\n            self.setState({\n                errorString: \"Failed to fetch avatar URL\",\n                busy: false\n            });\n        });\n    },\n\n    render: function() {\n        var ChangeDisplayName = sdk.getComponent('settings.ChangeDisplayName');\n        var ChangeAvatar = sdk.getComponent('settings.ChangeAvatar');\n        var LoginHeader = sdk.getComponent('login.LoginHeader');\n        return (\n            <div className=\"mx_Login\">\n                <div className=\"mx_Login_box\">\n                    <LoginHeader />\n                    <div className=\"mx_Login_profile\">\n                        Set a display name:\n                        <ChangeDisplayName />\n                        Upload an avatar:\n                        <ChangeAvatar\n                            initialAvatarUrl={this.state.avatarUrl} />\n                        <button onClick={this.props.onComplete}>Continue</button>\n                        {this.state.errorString}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/login/Registration.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require('../../../dispatcher');","fix":{"range":[651,654],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var Signup = require(\"../../../Signup\");","fix":{"range":[693,696],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var ServerConfig = require(\"../../views/login/ServerConfig\");","fix":{"range":[734,737],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[796,799],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var RegistrationForm = require(\"../../views/login/RegistrationForm\");","fix":{"range":[855,858],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var CaptchaForm = require(\"../../views/login/CaptchaForm\");","fix":{"range":[925,928],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var RtsClient = require(\"../../../RtsClient\");","fix":{"range":[985,988],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","source":"var MIN_PASSWORD_LENGTH = 6;","fix":{"range":[1033,1036],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":66,"column":44,"nodeType":"Property","source":"        onCancelClick: React.PropTypes.func","fix":{"range":[2476,2476],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":94,"column":14,"nodeType":"ObjectExpression","source":"            }","fix":{"range":[3599,3599],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":142,"column":9,"nodeType":"VariableDeclaration","source":"        var promise = this.registerLogic.getPromise();","fix":{"range":[5389,5392],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":164,"column":24,"nodeType":"Property","source":"            busy: false","fix":{"range":[6099,6099],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":169,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[6167,6170],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'self' is assigned a value but never used.","line":169,"column":13,"nodeType":"Identifier","source":"        var self = this;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":186,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[6712,6715],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":189,"column":28,"nodeType":"Property","source":"                busy: false","fix":{"range":[6826,6826],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":194,"column":55,"nodeType":"BinaryExpression","source":"                    \"did you break the promise chain?\"","fix":{"range":[7059,7059],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":202,"column":63,"nodeType":"Property","source":"                    errorText: \"Registration failed on server\"","fix":{"range":[7444,7444],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":211,"column":51,"nodeType":"Property","source":"                accessToken: response.access_token","fix":{"range":[7825,7825],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":223,"column":46,"nodeType":"MemberExpression","source":"                    self.state.formVals.email","fix":{"range":[8244,8244],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":232,"column":82,"nodeType":"TemplateLiteral","source":"                            `User successfully registered with team ${team.name}`","fix":{"range":[8706,8706],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":254,"column":21,"nodeType":"VariableDeclaration","source":"                    var pushers = resp.pushers;","fix":{"range":[9601,9604],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":255,"column":26,"nodeType":"VariableDeclaration","source":"                    for (var i = 0; i < pushers.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":257,"column":29,"nodeType":"VariableDeclaration","source":"                            var emailPusher = pushers[i];","fix":{"range":[9778,9781],"text":"let"}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":271,"column":9,"nodeType":"BlockStatement","source":"        }, function(err) {","fix":{"range":[10406,10408],"text":"\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":274,"column":43,"nodeType":"Property","source":"                    errorText: err.message","fix":{"range":[10540,10540],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":278,"column":28,"nodeType":"Property","source":"                busy: false","fix":{"range":[10630,10630],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":285,"column":9,"nodeType":"VariableDeclaration","source":"        var errMsg;","fix":{"range":[10753,10756],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 300 exceeds the maximum line length of 90.","line":300,"column":1,"nodeType":"Program","source":"                errMsg = \"User names may only contain letters, numbers, dots, hyphens and underscores.\";"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":311,"column":30,"nodeType":"Property","source":"            errorText: errMsg","fix":{"range":[11911,11911],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":317,"column":31,"nodeType":"Property","source":"            response: response","fix":{"range":[12066,12066],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":330,"column":9,"nodeType":"VariableDeclaration","source":"        var currStep = this.registerLogic.getStep();","fix":{"range":[12339,12342],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":331,"column":9,"nodeType":"VariableDeclaration","source":"        var registerStep;","fix":{"range":[12392,12395],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":366,"column":17,"nodeType":"VariableDeclaration","source":"                var publicKey;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":367,"column":17,"nodeType":"VariableDeclaration","source":"                var serverParams = this.registerLogic.getServerData().params;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":382,"column":9,"nodeType":"VariableDeclaration","source":"        var busySpinner;","fix":{"range":[14538,14541],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":389,"column":9,"nodeType":"VariableDeclaration","source":"        var returnToAppJsx;","fix":{"range":[14676,14679],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 392 exceeds the maximum line length of 90.","line":392,"column":1,"nodeType":"Program","source":"                <a className=\"mx_Login_create\" onClick={this.props.onCancelClick} href=\"#\">"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":423,"column":9,"nodeType":"VariableDeclaration","source":"        var LoginHeader = sdk.getComponent('login.LoginHeader');","fix":{"range":[16004,16007],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":424,"column":9,"nodeType":"VariableDeclaration","source":"        var LoginFooter = sdk.getComponent('login.LoginFooter');","fix":{"range":[16069,16072],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 428 exceeds the maximum line length of 90.","line":428,"column":1,"nodeType":"Program","source":"                    <LoginHeader icon={this.state.teamSelected ? this.state.teamSelected.icon : null}/>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":434,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[16479,16479],"text":","}}],"errorCount":15,"warningCount":29,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nvar sdk = require('../../../index');\nvar dis = require('../../../dispatcher');\nvar Signup = require(\"../../../Signup\");\nvar ServerConfig = require(\"../../views/login/ServerConfig\");\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar RegistrationForm = require(\"../../views/login/RegistrationForm\");\nvar CaptchaForm = require(\"../../views/login/CaptchaForm\");\nvar RtsClient = require(\"../../../RtsClient\");\n\nvar MIN_PASSWORD_LENGTH = 6;\n\n/**\n * TODO: It would be nice to make use of the InteractiveAuthEntryComponents\n * here, rather than inventing our own.\n */\nmodule.exports = React.createClass({\n    displayName: 'Registration',\n\n    propTypes: {\n        onLoggedIn: React.PropTypes.func.isRequired,\n        clientSecret: React.PropTypes.string,\n        sessionId: React.PropTypes.string,\n        registrationUrl: React.PropTypes.string,\n        idSid: React.PropTypes.string,\n        customHsUrl: React.PropTypes.string,\n        customIsUrl: React.PropTypes.string,\n        defaultHsUrl: React.PropTypes.string,\n        defaultIsUrl: React.PropTypes.string,\n        brand: React.PropTypes.string,\n        email: React.PropTypes.string,\n        referrer: React.PropTypes.string,\n        username: React.PropTypes.string,\n        guestAccessToken: React.PropTypes.string,\n        teamServerConfig: React.PropTypes.shape({\n            // Email address to request new teams\n            supportEmail: React.PropTypes.string.isRequired,\n            // URL of the riot-team-server to get team configurations and track referrals\n            teamServerURL: React.PropTypes.string.isRequired,\n        }),\n        teamSelected: null,\n\n        defaultDeviceDisplayName: React.PropTypes.string,\n\n        // registration shouldn't know or care how login is done.\n        onLoginClick: React.PropTypes.func.isRequired,\n        onCancelClick: React.PropTypes.func\n    },\n\n    getInitialState: function() {\n        return {\n            busy: false,\n            teamServerBusy: false,\n            errorText: null,\n            // We remember the values entered by the user because\n            // the registration form will be unmounted during the\n            // course of registration, but if there's an error we\n            // want to bring back the registration form with the\n            // values the user entered still in it. We can keep\n            // them in this component's state since this component\n            // persist for the duration of the registration process.\n            formVals: {\n                email: this.props.email,\n            },\n        };\n    },\n\n    componentWillMount: function() {\n        this._unmounted = false;\n        this.dispatcherRef = dis.register(this.onAction);\n        // attach this to the instance rather than this.state since it isn't UI\n        this.registerLogic = new Signup.Register(\n            this.props.customHsUrl, this.props.customIsUrl, {\n                defaultDeviceDisplayName: this.props.defaultDeviceDisplayName,\n            }\n        );\n        this.registerLogic.setClientSecret(this.props.clientSecret);\n        this.registerLogic.setSessionId(this.props.sessionId);\n        this.registerLogic.setRegistrationUrl(this.props.registrationUrl);\n        this.registerLogic.setIdSid(this.props.idSid);\n        this.registerLogic.setGuestAccessToken(this.props.guestAccessToken);\n        this.registerLogic.recheckState();\n\n        if (\n            this.props.teamServerConfig &&\n            this.props.teamServerConfig.teamServerURL &&\n            !this._rtsClient\n        ) {\n            this._rtsClient = new RtsClient(this.props.teamServerConfig.teamServerURL);\n\n            this.setState({\n                teamServerBusy: true,\n            });\n            // GET team configurations including domains, names and icons\n            this._rtsClient.getTeamsConfig().then((args) => {\n                // args = [$request, $body]\n                const teamsConfig = {\n                    teams: args[1],\n                    supportEmail: this.props.teamServerConfig.supportEmail,\n                };\n                console.log('Setting teams config to ', teamsConfig);\n                this.setState({\n                    teamsConfig: teamsConfig,\n                });\n            }, (err) => {\n                console.error('Error retrieving config for teams', err);\n            }).finally(() => {\n                this.setState({\n                    teamServerBusy: false,\n                });\n            }).done();\n        }\n    },\n\n    componentWillUnmount: function() {\n        dis.unregister(this.dispatcherRef);\n        this._unmounted = true;\n    },\n\n    componentDidMount: function() {\n        // may have already done an HTTP hit (e.g. redirect from an email) so\n        // check for any pending response\n        var promise = this.registerLogic.getPromise();\n        if (promise) {\n            this.onProcessingRegistration(promise);\n        }\n    },\n\n    onHsUrlChanged: function(newHsUrl) {\n        this.registerLogic.setHomeserverUrl(newHsUrl);\n    },\n\n    onIsUrlChanged: function(newIsUrl) {\n        this.registerLogic.setIdentityServerUrl(newIsUrl);\n    },\n\n    onAction: function(payload) {\n        if (payload.action !== \"registration_step_update\") {\n            return;\n        }\n        // If the registration state has changed, this means the\n        // user now needs to do something. It would be better\n        // to expose the explicitly in the register logic.\n        this.setState({\n            busy: false\n        });\n    },\n\n    onFormSubmit: function(formVals) {\n        var self = this;\n        this.setState({\n            errorText: \"\",\n            busy: true,\n            formVals: formVals,\n        });\n\n        if (formVals.username !== this.props.username) {\n            // don't try to upgrade if we changed our username\n            this.registerLogic.setGuestAccessToken(null);\n        }\n\n        this.onProcessingRegistration(this.registerLogic.register(formVals));\n    },\n\n    // Promise is resolved when the registration process is FULLY COMPLETE\n    onProcessingRegistration: function(promise) {\n        var self = this;\n        promise.done(function(response) {\n            self.setState({\n                busy: false\n            });\n            if (!response || !response.access_token) {\n                console.warn(\n                    \"FIXME: Register fulfilled without a final response, \" +\n                    \"did you break the promise chain?\"\n                );\n                // no matter, we'll grab it direct\n                response = self.registerLogic.getCredentials();\n            }\n            if (!response || !response.user_id || !response.access_token) {\n                console.error(\"Final response is missing keys.\");\n                self.setState({\n                    errorText: \"Registration failed on server\"\n                });\n                return;\n            }\n            self.props.onLoggedIn({\n                userId: response.user_id,\n                deviceId: response.device_id,\n                homeserverUrl: self.registerLogic.getHomeserverUrl(),\n                identityServerUrl: self.registerLogic.getIdentityServerUrl(),\n                accessToken: response.access_token\n            });\n\n            if (\n                self._rtsClient &&\n                self.props.referrer &&\n                self.state.teamSelected\n            ) {\n                // Track referral, get team_token in order to retrieve team config\n                self._rtsClient.trackReferral(\n                    self.props.referrer,\n                    response.user_id,\n                    self.state.formVals.email\n                ).then((args) => {\n                    const teamToken = args[1].team_token;\n                    // Store for use /w welcome pages\n                    window.localStorage.setItem('mx_team_token', teamToken);\n\n                    self._rtsClient.getTeam(teamToken).then((args) => {\n                        const team = args[1];\n                        console.log(\n                            `User successfully registered with team ${team.name}`\n                        );\n                        if (!team.rooms) {\n                            return;\n                        }\n                        // Auto-join rooms\n                        team.rooms.forEach((room) => {\n                            if (room.auto_join && room.room_id) {\n                                console.log(`Auto-joining ${room.room_id}`);\n                                MatrixClientPeg.get().joinRoom(room.room_id);\n                            }\n                        });\n                    }, (err) => {\n                        console.error('Error getting team config', err);\n                    });\n                }, (err) => {\n                    console.error('Error tracking referral', err);\n                });\n            }\n\n            if (self.props.brand) {\n                MatrixClientPeg.get().getPushers().done((resp)=>{\n                    var pushers = resp.pushers;\n                    for (var i = 0; i < pushers.length; ++i) {\n                        if (pushers[i].kind == 'email') {\n                            var emailPusher = pushers[i];\n                            emailPusher.data = { brand: self.props.brand };\n                            MatrixClientPeg.get().setPusher(emailPusher).done(() => {\n                                console.log(\"Set email branding to \" + self.props.brand);\n                            }, (error) => {\n                                console.error(\"Couldn't set email branding: \" + error);\n                            });\n                        }\n                    }\n                }, (error) => {\n                    console.error(\"Couldn't get pushers: \" + error);\n                });\n            }\n\n        }, function(err) {\n            if (err.message) {\n                self.setState({\n                    errorText: err.message\n                });\n            }\n            self.setState({\n                busy: false\n            });\n            console.log(err);\n        });\n    },\n\n    onFormValidationFailed: function(errCode) {\n        var errMsg;\n        switch (errCode) {\n            case \"RegistrationForm.ERR_PASSWORD_MISSING\":\n                errMsg = \"Missing password.\";\n                break;\n            case \"RegistrationForm.ERR_PASSWORD_MISMATCH\":\n                errMsg = \"Passwords don't match.\";\n                break;\n            case \"RegistrationForm.ERR_PASSWORD_LENGTH\":\n                errMsg = `Password too short (min ${MIN_PASSWORD_LENGTH}).`;\n                break;\n            case \"RegistrationForm.ERR_EMAIL_INVALID\":\n                errMsg = \"This doesn't look like a valid email address\";\n                break;\n            case \"RegistrationForm.ERR_USERNAME_INVALID\":\n                errMsg = \"User names may only contain letters, numbers, dots, hyphens and underscores.\";\n                break;\n            case \"RegistrationForm.ERR_USERNAME_BLANK\":\n                errMsg = \"You need to enter a user name\";\n                break;\n            default:\n                console.error(\"Unknown error code: %s\", errCode);\n                errMsg = \"An unknown error occurred.\";\n                break;\n        }\n        this.setState({\n            errorText: errMsg\n        });\n    },\n\n    onCaptchaResponse: function(response) {\n        this.registerLogic.tellStage(\"m.login.recaptcha\", {\n            response: response\n        });\n    },\n\n    onTeamSelected: function(teamSelected) {\n        if (!this._unmounted) {\n            this.setState({ teamSelected });\n        }\n    },\n\n    _getRegisterContentJsx: function() {\n        const Spinner = sdk.getComponent(\"elements.Spinner\");\n\n        var currStep = this.registerLogic.getStep();\n        var registerStep;\n        switch (currStep) {\n            case \"Register.COMPLETE\":\n                break; // NOP\n            case \"Register.START\":\n            case \"Register.STEP_m.login.dummy\":\n                // NB. Our 'username' prop is specifically for upgrading\n                // a guest account\n                if (this.state.teamServerBusy) {\n                    registerStep = <Spinner />;\n                    break;\n                }\n                registerStep = (\n                    <RegistrationForm\n                        showEmail={true}\n                        defaultUsername={this.state.formVals.username}\n                        defaultEmail={this.state.formVals.email}\n                        defaultPassword={this.state.formVals.password}\n                        teamsConfig={this.state.teamsConfig}\n                        guestUsername={this.props.username}\n                        minPasswordLength={MIN_PASSWORD_LENGTH}\n                        onError={this.onFormValidationFailed}\n                        onRegisterClick={this.onFormSubmit}\n                        onTeamSelected={this.onTeamSelected}\n                    />\n                );\n                break;\n            case \"Register.STEP_m.login.email.identity\":\n                registerStep = (\n                    <div>\n                        Please check your email to continue registration.\n                    </div>\n                );\n                break;\n            case \"Register.STEP_m.login.recaptcha\":\n                var publicKey;\n                var serverParams = this.registerLogic.getServerData().params;\n                if (serverParams && serverParams[\"m.login.recaptcha\"]) {\n                    publicKey = serverParams[\"m.login.recaptcha\"].public_key;\n                }\n\n                registerStep = (\n                    <CaptchaForm sitePublicKey={publicKey}\n                        onCaptchaResponse={this.onCaptchaResponse}\n                    />\n                );\n                break;\n            default:\n                console.error(\"Unknown register state: %s\", currStep);\n                break;\n        }\n        var busySpinner;\n        if (this.state.busy) {\n            busySpinner = (\n                <Spinner />\n            );\n        }\n\n        var returnToAppJsx;\n        if (this.props.onCancelClick) {\n            returnToAppJsx =\n                <a className=\"mx_Login_create\" onClick={this.props.onCancelClick} href=\"#\">\n                    Return to app\n                </a>;\n        }\n\n        return (\n            <div>\n                <h2>Create an account</h2>\n                {registerStep}\n                <div className=\"mx_Login_error\">{this.state.errorText}</div>\n                {busySpinner}\n                <ServerConfig ref=\"serverConfig\"\n                    withToggleButton={ this.registerLogic.getStep() === \"Register.START\" }\n                    customHsUrl={this.props.customHsUrl}\n                    customIsUrl={this.props.customIsUrl}\n                    defaultHsUrl={this.props.defaultHsUrl}\n                    defaultIsUrl={this.props.defaultIsUrl}\n                    onHsUrlChanged={this.onHsUrlChanged}\n                    onIsUrlChanged={this.onIsUrlChanged}\n                    delayTimeMs={1000} />\n                <div className=\"mx_Login_error\">\n                </div>\n                <a className=\"mx_Login_create\" onClick={this.props.onLoginClick} href=\"#\">\n                    I already have an account\n                </a>\n                { returnToAppJsx }\n            </div>\n        );\n    },\n\n    render: function() {\n        var LoginHeader = sdk.getComponent('login.LoginHeader');\n        var LoginFooter = sdk.getComponent('login.LoginFooter');\n        return (\n            <div className=\"mx_Login\">\n                <div className=\"mx_Login_box\">\n                    <LoginHeader icon={this.state.teamSelected ? this.state.teamSelected.icon : null}/>\n                    {this._getRegisterContentJsx()}\n                    <LoginFooter />\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/MatrixChat.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[588,591],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var Matrix = require(\"matrix-js-sdk\");","fix":{"range":[618,621],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../MatrixClientPeg\");","fix":{"range":[658,661],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var PlatformPeg = require(\"../../PlatformPeg\");","fix":{"range":[714,717],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var SdkConfig = require(\"../../SdkConfig\");","fix":{"range":[762,765],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var ContextualMenu = require(\"./ContextualMenu\");","fix":{"range":[806,809],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'ContextualMenu' is assigned a value but never used.","line":25,"column":5,"nodeType":"Identifier","source":"var ContextualMenu = require(\"./ContextualMenu\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var RoomListSorter = require(\"../../RoomListSorter\");","fix":{"range":[856,859],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var UserActivity = require(\"../../UserActivity\");","fix":{"range":[910,913],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'UserActivity' is assigned a value but never used.","line":27,"column":5,"nodeType":"Identifier","source":"var UserActivity = require(\"../../UserActivity\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var Presence = require(\"../../Presence\");","fix":{"range":[960,963],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Presence' is assigned a value but never used.","line":28,"column":5,"nodeType":"Identifier","source":"var Presence = require(\"../../Presence\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../dispatcher\");","fix":{"range":[1002,1005],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":1,"nodeType":"VariableDeclaration","source":"var Login = require(\"./login/Login\");","fix":{"range":[1042,1045],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":32,"column":1,"nodeType":"VariableDeclaration","source":"var Registration = require(\"./login/Registration\");","fix":{"range":[1080,1083],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":1,"nodeType":"VariableDeclaration","source":"var PostRegistration = require(\"./login/PostRegistration\");","fix":{"range":[1132,1135],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":35,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../Modal\");","fix":{"range":[1193,1196],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":1,"nodeType":"VariableDeclaration","source":"var Tinter = require(\"../../Tinter\");","fix":{"range":[1229,1232],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../index');","fix":{"range":[1267,1270],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":38,"column":1,"nodeType":"VariableDeclaration","source":"var Rooms = require('../../Rooms');","fix":{"range":[1301,1304],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":39,"column":1,"nodeType":"VariableDeclaration","source":"var linkifyMatrix = require(\"../../linkify-matrix\");","fix":{"range":[1337,1340],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":40,"column":1,"nodeType":"VariableDeclaration","source":"var Lifecycle = require('../../Lifecycle');","fix":{"range":[1390,1393],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":41,"column":1,"nodeType":"VariableDeclaration","source":"var PageTypes = require('../../PageTypes');","fix":{"range":[1434,1437],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":43,"column":1,"nodeType":"VariableDeclaration","source":"var createRoom = require(\"../../createRoom\");","fix":{"range":[1479,1482],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":84,"column":9,"nodeType":"VariableDeclaration","source":"        var s = {","fix":{"range":[2654,2657],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":144,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4629,4638],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":147,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4784,4793],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":166,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[5300,5309],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":169,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[5455,5464],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":262,"column":9,"nodeType":"VariableDeclaration","source":"        var roomIndexDelta = 1;","fix":{"range":[8518,8521],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":264,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[8551,8554],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'self' is assigned a value but never used.","line":264,"column":13,"nodeType":"Identifier","source":"        var self = this;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":273,"column":17,"nodeType":"VariableDeclaration","source":"                var newState = payload.params || {};"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":301,"column":48,"nodeType":"Property","source":"                    screen: 'post_registration'","fix":{"range":[10203,10203],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":322,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":323,"column":17,"nodeType":"VariableDeclaration","source":"                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":325,"column":17,"nodeType":"VariableDeclaration","source":"                var roomId = payload.room_id;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'should_leave' is not in camel case.","line":329,"column":42,"nodeType":"Identifier","source":"                    onFinished: function(should_leave) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'should_leave' is not in camel case.","line":330,"column":29,"nodeType":"Identifier","source":"                        if (should_leave) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":331,"column":29,"nodeType":"VariableDeclaration","source":"                            var d = MatrixClientPeg.get().leave(roomId);","fix":{"range":[11586,11589],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":334,"column":29,"nodeType":"VariableDeclaration","source":"                            var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[11740,11743],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 335 exceeds the maximum line length of 90.","line":335,"column":1,"nodeType":"Program","source":"                            var modal = Modal.createDialog(Loader, null, 'mx_Dialog_spinner');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":335,"column":29,"nodeType":"VariableDeclaration","source":"                            var modal = Modal.createDialog(Loader, null, 'mx_Dialog_spinner');","fix":{"range":[11819,11822],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":344,"column":64,"nodeType":"Property","source":"                                    description: err.toString()","fix":{"range":[12346,12346],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":348,"column":22,"nodeType":"Property","source":"                    }","fix":{"range":[12462,12462],"text":","}},{"ruleId":"no-fallthrough","severity":2,"message":"Expected a 'break' statement before 'case'.","line":374,"column":13,"nodeType":"SwitchCase","source":"            case 'view_next_room':"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":375,"column":17,"nodeType":"VariableDeclaration","source":"                var allRooms = RoomListSorter.mostRecentActivityFirst("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":376,"column":53,"nodeType":"CallExpression","source":"                    MatrixClientPeg.get().getRooms()","fix":{"range":[13785,13785],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":378,"column":17,"nodeType":"VariableDeclaration","source":"                var roomIndex = -1;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":379,"column":22,"nodeType":"VariableDeclaration","source":"                for (var i = 0; i < allRooms.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":390,"column":17,"nodeType":"VariableDeclaration","source":"                var allRooms = RoomListSorter.mostRecentActivityFirst("},{"ruleId":"no-redeclare","severity":2,"message":"'allRooms' is already defined.","line":390,"column":21,"nodeType":"Identifier","source":"                var allRooms = RoomListSorter.mostRecentActivityFirst("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":391,"column":53,"nodeType":"CallExpression","source":"                    MatrixClientPeg.get().getRooms()","fix":{"range":[14486,14486],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":393,"column":17,"nodeType":"VariableDeclaration","source":"                var roomIndex = payload.roomIndex;"},{"ruleId":"no-redeclare","severity":2,"message":"'roomIndex' is already defined.","line":393,"column":21,"nodeType":"Identifier","source":"                var roomIndex = payload.roomIndex;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":406,"column":17,"nodeType":"VariableDeclaration","source":"                var TextInputDialog = sdk.getComponent(\"dialogs.TextInputDialog\");"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'should_create' is not in camel case.","line":411,"column":34,"nodeType":"Identifier","source":"                    onFinished: (should_create, name) => {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'should_create' is not in camel case.","line":412,"column":29,"nodeType":"Identifier","source":"                        if (should_create) {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":417,"column":22,"nodeType":"Property","source":"                    }","fix":{"range":[15629,15629],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":477,"column":41,"nodeType":"MemberExpression","source":"                    payload.releaseNotes","fix":{"range":[17621,17621],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_info' is not in camel case.","line":505,"column":25,"nodeType":"Identifier","source":"    _viewRoom: function(room_info) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":508,"column":9,"nodeType":"VariableDeclaration","source":"        var newState = {","fix":{"range":[19243,19246],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 528 exceeds the maximum line length of 90.","line":528,"column":1,"nodeType":"Program","source":"            var scrollState = this.refs.loggedInView.getScrollStateForRoom(room_info.room_id);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":528,"column":13,"nodeType":"VariableDeclaration","source":"            var scrollState = this.refs.loggedInView.getScrollStateForRoom(room_info.room_id);","fix":{"range":[20004,20007],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":541,"column":13,"nodeType":"VariableDeclaration","source":"            var presentedId = room_info.room_alias || room_info.room_id;","fix":{"range":[20637,20640],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":542,"column":13,"nodeType":"VariableDeclaration","source":"            var room = MatrixClientPeg.get().getRoom(room_info.room_id);","fix":{"range":[20710,20713],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":544,"column":17,"nodeType":"VariableDeclaration","source":"                var theAlias = Rooms.getDisplayAliasForRoom(room);","fix":{"range":[20811,20814],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":568,"column":9,"nodeType":"VariableDeclaration","source":"        var ChatInviteDialog = sdk.getComponent(\"dialogs.ChatInviteDialog\");","fix":{"range":[21781,21784],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":575,"column":9,"nodeType":"VariableDeclaration","source":"        var ChatInviteDialog = sdk.getComponent(\"dialogs.ChatInviteDialog\");","fix":{"range":[21996,21999],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'theme'.","line":592,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":602,"column":9,"nodeType":"VariableDeclaration","source":"        var styleElements = Object.create(null);","fix":{"range":[22783,22786],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":603,"column":9,"nodeType":"VariableDeclaration","source":"        var i, a;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":603,"column":9,"nodeType":"VariableDeclaration","source":"        var i, a;","fix":{"range":[22832,22835],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":605,"column":13,"nodeType":"VariableDeclaration","source":"            var href = a.getAttribute(\"href\");","fix":{"range":[22929,22932],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":607,"column":13,"nodeType":"VariableDeclaration","source":"            var match = href.match(/^bundles\\/.*\\/theme-(.*)\\.css$/);","fix":{"range":[23051,23054],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":630,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[23899,23908],"text":"        "}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'credentials'.","line":636,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":669,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[24829,24832],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":671,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[24871,24874],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":686,"column":21,"nodeType":"VariableDeclaration","source":"                    var firstRoom = null;","fix":{"range":[25542,25545],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":689,"column":43,"nodeType":"CallExpression","source":"                            cli.getRooms()","fix":{"range":[25749,25749],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 691 exceeds the maximum line length of 90.","line":691,"column":1,"nodeType":"Program","source":"                        self.setState({ready: true, currentRoomId: firstRoom, page_type: PageTypes.RoomView});"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":701,"column":17,"nodeType":"VariableDeclaration","source":"                var presentedId = self.state.currentRoomId;","fix":{"range":[26337,26340],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":702,"column":17,"nodeType":"VariableDeclaration","source":"                var room = MatrixClientPeg.get().getRoom(self.state.currentRoomId);","fix":{"range":[26397,26400],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":704,"column":21,"nodeType":"VariableDeclaration","source":"                    var theAlias = Rooms.getDisplayAliasForRoom(room);","fix":{"range":[26513,26516],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":724,"column":27,"nodeType":"Property","source":"                call: call","fix":{"range":[27272,27272],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":728,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[27367,27370],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 731 exceeds the maximum line length of 90.","line":731,"column":1,"nodeType":"Program","source":"                description: \"For security, this session has been signed out. Please sign in again.\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":731,"column":101,"nodeType":"Property","source":"                description: \"For security, this session has been signed out. Please sign in again.\"","fix":{"range":[27609,27609],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":734,"column":33,"nodeType":"Property","source":"                action: 'logout'","fix":{"range":[27685,27685],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":757,"column":31,"nodeType":"Property","source":"                params: params","fix":{"range":[28362,28362],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":762,"column":31,"nodeType":"Property","source":"                params: params","fix":{"range":[28515,28515],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":767,"column":31,"nodeType":"Property","source":"                params: params","fix":{"range":[28690,28690],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":786,"column":13,"nodeType":"VariableDeclaration","source":"            var segments = screen.substring(5).split('/');","fix":{"range":[29307,29310],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":787,"column":13,"nodeType":"VariableDeclaration","source":"            var roomString = segments[0];","fix":{"range":[29366,29369],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":788,"column":13,"nodeType":"VariableDeclaration","source":"            var eventId = segments[1]; // undefined if no event id given","fix":{"range":[29408,29411],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":791,"column":13,"nodeType":"VariableDeclaration","source":"            var third_party_invite = {","fix":{"range":[29529,29532],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'third_party_invite' is not in camel case.","line":791,"column":17,"nodeType":"Identifier","source":"            var third_party_invite = {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":795,"column":13,"nodeType":"VariableDeclaration","source":"            var oob_data = {","fix":{"range":[29674,29677],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'oob_data' is not in camel case.","line":795,"column":17,"nodeType":"Identifier","source":"            var oob_data = {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":801,"column":13,"nodeType":"VariableDeclaration","source":"            var payload = {","fix":{"range":[29860,29863],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":824,"column":13,"nodeType":"VariableDeclaration","source":"            var userId = screen.substring(5);","fix":{"range":[30802,30805],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":828,"column":13,"nodeType":"VariableDeclaration","source":"            var member = new Matrix.RoomMember(null, userId);","fix":{"range":[30998,31001],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":835,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[31225,31234],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":863,"column":9,"nodeType":"VariableDeclaration","source":"        var member = new Matrix.RoomMember(null, userId);","fix":{"range":[32008,32011],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":873,"column":29,"nodeType":"Property","source":"            action: 'logout'","fix":{"range":[32283,32283],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":880,"column":9,"nodeType":"VariableDeclaration","source":"        var hideLhsThreshold = 1000;","fix":{"range":[32409,32412],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":881,"column":9,"nodeType":"VariableDeclaration","source":"        var showLhsThreshold = 1000;","fix":{"range":[32446,32449],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":882,"column":9,"nodeType":"VariableDeclaration","source":"        var hideRhsThreshold = 820;","fix":{"range":[32483,32486],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":883,"column":9,"nodeType":"VariableDeclaration","source":"        var showRhsThreshold = 820;","fix":{"range":[32519,32522],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 885 exceeds the maximum line length of 90.","line":885,"column":1,"nodeType":"Program","source":"        if (this.state.width > hideLhsThreshold && window.innerWidth <= hideLhsThreshold) {"},{"ruleId":"max-len","severity":1,"message":"Line 888 exceeds the maximum line length of 90.","line":888,"column":1,"nodeType":"Program","source":"        if (this.state.width <= showLhsThreshold && window.innerWidth > showLhsThreshold) {"},{"ruleId":"max-len","severity":1,"message":"Line 891 exceeds the maximum line length of 90.","line":891,"column":1,"nodeType":"Program","source":"        if (this.state.width > hideRhsThreshold && window.innerWidth <= hideRhsThreshold) {"},{"ruleId":"max-len","severity":1,"message":"Line 894 exceeds the maximum line length of 90.","line":894,"column":1,"nodeType":"Program","source":"        if (this.state.width <= showRhsThreshold && window.innerWidth > showRhsThreshold) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":901,"column":29,"nodeType":"Identifier","source":"    onRoomCreated: function(room_id) {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":945,"column":30,"nodeType":"Property","source":"            screen: undefined","fix":{"range":[34624,34624],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":960,"column":9,"nodeType":"VariableDeclaration","source":"        var notifCount = 0;","fix":{"range":[35006,35009],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":962,"column":9,"nodeType":"VariableDeclaration","source":"        var rooms = MatrixClientPeg.get().getRooms();","fix":{"range":[35035,35038],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":963,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < rooms.length; ++i) {"},{"ruleId":"max-len","severity":1,"message":"Line 964 exceeds the maximum line length of 90.","line":964,"column":1,"nodeType":"Program","source":"            if (rooms[i].hasMembershipState(MatrixClientPeg.get().credentials.userId, 'invite')) {"},{"ruleId":"max-len","severity":1,"message":"Line 979 exceeds the maximum line length of 90.","line":979,"column":1,"nodeType":"Program","source":"        document.title = `Riot ${state === \"ERROR\" ? \" [offline]\" : \"\"}${notifCount > 0 ? ` [${notifCount}]` : \"\"}`;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":990,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[36228,36237],"text":"        "}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":998,"column":32,"nodeType":"Identifier","source":"    onRoomIdResolved: function(room_id) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1006,"column":9,"nodeType":"VariableDeclaration","source":"        var ForgotPassword = sdk.getComponent('structures.login.ForgotPassword');","fix":{"range":[36739,36742],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1007,"column":9,"nodeType":"VariableDeclaration","source":"        var LoggedInView = sdk.getComponent('structures.LoggedInView');","fix":{"range":[36821,36824],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1013,"column":13,"nodeType":"VariableDeclaration","source":"            var Spinner = sdk.getComponent('elements.Spinner');"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":1019,"column":9,"nodeType":"Punctuator","source":"        }"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1042,"column":13,"nodeType":"VariableDeclaration","source":"            var Spinner = sdk.getComponent('elements.Spinner');"},{"ruleId":"no-redeclare","severity":2,"message":"'Spinner' is already defined.","line":1042,"column":17,"nodeType":"Identifier","source":"            var Spinner = sdk.getComponent('elements.Spinner');"},{"ruleId":"max-len","severity":1,"message":"Line 1046 exceeds the maximum line length of 90.","line":1046,"column":1,"nodeType":"Program","source":"                    <a href=\"#\" className=\"mx_MatrixChat_splashButtons\" onClick={ this.onLogoutClick }>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1087,"column":13,"nodeType":"VariableDeclaration","source":"            var r = (","fix":{"range":[40779,40782],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1111,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[41896,41896],"text":","}}],"errorCount":25,"warningCount":107,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport q from 'q';\n\nvar React = require('react');\nvar Matrix = require(\"matrix-js-sdk\");\n\nvar MatrixClientPeg = require(\"../../MatrixClientPeg\");\nvar PlatformPeg = require(\"../../PlatformPeg\");\nvar SdkConfig = require(\"../../SdkConfig\");\nvar ContextualMenu = require(\"./ContextualMenu\");\nvar RoomListSorter = require(\"../../RoomListSorter\");\nvar UserActivity = require(\"../../UserActivity\");\nvar Presence = require(\"../../Presence\");\nvar dis = require(\"../../dispatcher\");\n\nvar Login = require(\"./login/Login\");\nvar Registration = require(\"./login/Registration\");\nvar PostRegistration = require(\"./login/PostRegistration\");\n\nvar Modal = require(\"../../Modal\");\nvar Tinter = require(\"../../Tinter\");\nvar sdk = require('../../index');\nvar Rooms = require('../../Rooms');\nvar linkifyMatrix = require(\"../../linkify-matrix\");\nvar Lifecycle = require('../../Lifecycle');\nvar PageTypes = require('../../PageTypes');\n\nvar createRoom = require(\"../../createRoom\");\n\nmodule.exports = React.createClass({\n    displayName: 'MatrixChat',\n\n    propTypes: {\n        config: React.PropTypes.object,\n        ConferenceHandler: React.PropTypes.any,\n        onNewScreen: React.PropTypes.func,\n        registrationUrl: React.PropTypes.string,\n        enableGuest: React.PropTypes.bool,\n\n        // the queryParams extracted from the [real] query-string of the URI\n        realQueryParams: React.PropTypes.object,\n\n        // the initial queryParams extracted from the hash-fragment of the URI\n        startingFragmentQueryParams: React.PropTypes.object,\n\n        // called when the session load completes\n        onLoadCompleted: React.PropTypes.func,\n\n        // displayname, if any, to set on the device when logging\n        // in/registering.\n        defaultDeviceDisplayName: React.PropTypes.string,\n    },\n\n    childContextTypes: {\n        appConfig: React.PropTypes.object,\n    },\n\n    AuxPanel: {\n        RoomSettings: \"room_settings\",\n    },\n\n    getChildContext: function() {\n        return {\n            appConfig: this.props.config,\n        };\n    },\n\n    getInitialState: function() {\n        var s = {\n            loading: true,\n            screen: undefined,\n\n            // What the LoggedInView would be showing if visible\n            page_type: null,\n\n            // If we are viewing a room by alias, this contains the alias\n            currentRoomAlias: null,\n\n            // The ID of the room we're viewing. This is either populated directly\n            // in the case where we view a room by ID or by RoomView when it resolves\n            // what ID an alias points at.\n            currentRoomId: null,\n\n            // If we're trying to just view a user ID (i.e. /user URL), this is it\n            viewUserId: null,\n\n            logged_in: false,\n            collapse_lhs: false,\n            collapse_rhs: false,\n            ready: false,\n            width: 10000,\n            sideOpacity: 1.0,\n            middleOpacity: 1.0,\n\n            version: null,\n            newVersion: null,\n            hasNewVersion: false,\n            newVersionReleaseNotes: null,\n\n            // The username to default to when upgrading an account from a guest\n            upgradeUsername: null,\n            // The access token we had for our guest account, used when upgrading to a normal account\n            guestAccessToken: null,\n\n            // Parameters used in the registration dance with the IS\n            register_client_secret: null,\n            register_session_id: null,\n            register_hs_url: null,\n            register_is_url: null,\n            register_id_sid: null,\n        };\n        return s;\n    },\n\n    getDefaultProps: function() {\n        return {\n            realQueryParams: {},\n            startingFragmentQueryParams: {},\n            config: {},\n            onLoadCompleted: () => {},\n        };\n    },\n\n    getCurrentHsUrl: function() {\n        if (this.state.register_hs_url) {\n            return this.state.register_hs_url;\n        } else if (MatrixClientPeg.get()) {\n            return MatrixClientPeg.get().getHomeserverUrl();\n        }\n        else if (window.localStorage && window.localStorage.getItem(\"mx_hs_url\")) {\n            return window.localStorage.getItem(\"mx_hs_url\");\n        }\n        else {\n            return this.getDefaultHsUrl();\n        }\n    },\n\n    getDefaultHsUrl() {\n        return this.props.config.default_hs_url || \"https://matrix.org\";\n    },\n\n    getFallbackHsUrl: function() {\n        return this.props.config.fallback_hs_url;\n    },\n\n    getCurrentIsUrl: function() {\n        if (this.state.register_is_url) {\n            return this.state.register_is_url;\n        } else if (MatrixClientPeg.get()) {\n            return MatrixClientPeg.get().getIdentityServerUrl();\n        }\n        else if (window.localStorage && window.localStorage.getItem(\"mx_is_url\")) {\n            return window.localStorage.getItem(\"mx_is_url\");\n        }\n        else {\n            return this.getDefaultIsUrl();\n        }\n    },\n\n    getDefaultIsUrl() {\n        return this.props.config.default_is_url || \"https://vector.im\";\n    },\n\n    componentWillMount: function() {\n        SdkConfig.put(this.props.config);\n\n        // Stashed guest credentials if the user logs out\n        // whilst logged in as a guest user (so they can change\n        // their mind & log back in)\n        this.guestCreds = null;\n\n        // if the automatic session load failed, the error\n        this.sessionLoadError = null;\n\n        if (this.props.config.sync_timeline_limit) {\n            MatrixClientPeg.opts.initialSyncLimit = this.props.config.sync_timeline_limit;\n        }\n    },\n\n    componentDidMount: function() {\n        this.dispatcherRef = dis.register(this.onAction);\n\n        this.focusComposer = false;\n        window.addEventListener(\"focus\", this.onFocus);\n\n        // this can technically be done anywhere but doing this here keeps all\n        // the routing url path logic together.\n        if (this.onAliasClick) {\n            linkifyMatrix.onAliasClick = this.onAliasClick;\n        }\n        if (this.onUserClick) {\n            linkifyMatrix.onUserClick = this.onUserClick;\n        }\n\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n\n        // the extra q() ensures that synchronous exceptions hit the same codepath as\n        // asynchronous ones.\n        q().then(() => {\n            return Lifecycle.loadSession({\n                realQueryParams: this.props.realQueryParams,\n                fragmentQueryParams: this.props.startingFragmentQueryParams,\n                enableGuest: this.props.enableGuest,\n                guestHsUrl: this.getCurrentHsUrl(),\n                guestIsUrl: this.getCurrentIsUrl(),\n                defaultDeviceDisplayName: this.props.defaultDeviceDisplayName,\n            });\n        }).catch((e) => {\n            console.error(\"Unable to load session\", e);\n            this.sessionLoadError = e.message;\n        }).done(()=>{\n            // stuff this through the dispatcher so that it happens\n            // after the on_logged_in action.\n            dis.dispatch({action: 'load_completed'});\n        });\n    },\n\n    componentWillUnmount: function() {\n        Lifecycle.stopMatrixClient();\n        dis.unregister(this.dispatcherRef);\n        window.removeEventListener(\"focus\", this.onFocus);\n        window.removeEventListener('resize', this.handleResize);\n    },\n\n    componentDidUpdate: function() {\n        if (this.focusComposer) {\n            dis.dispatch({action: 'focus_composer'});\n            this.focusComposer = false;\n        }\n    },\n\n    setStateForNewScreen: function(state) {\n        const newState = {\n            screen: undefined,\n            viewUserId: null,\n            logged_in: false,\n            ready: false,\n            upgradeUsername: null,\n            guestAccessToken: null,\n       };\n       Object.assign(newState, state);\n       this.setState(newState);\n    },\n\n    onAction: function(payload) {\n        var roomIndexDelta = 1;\n\n        var self = this;\n        switch (payload.action) {\n            case 'logout':\n                if (MatrixClientPeg.get().isGuest()) {\n                    this.guestCreds = MatrixClientPeg.getCredentials();\n                }\n                Lifecycle.logout();\n                break;\n            case 'start_registration':\n                var newState = payload.params || {};\n                newState.screen = 'register';\n                if (\n                    payload.params &&\n                    payload.params.client_secret &&\n                    payload.params.session_id &&\n                    payload.params.hs_url &&\n                    payload.params.is_url &&\n                    payload.params.sid\n                ) {\n                    newState.register_client_secret = payload.params.client_secret;\n                    newState.register_session_id = payload.params.session_id;\n                    newState.register_hs_url = payload.params.hs_url;\n                    newState.register_is_url = payload.params.is_url;\n                    newState.register_id_sid = payload.params.sid;\n                }\n                this.setStateForNewScreen(newState);\n                this.notifyNewScreen('register');\n                break;\n            case 'start_login':\n                if (this.state.logged_in) return;\n                this.setStateForNewScreen({\n                    screen: 'login',\n                });\n                this.notifyNewScreen('login');\n                break;\n            case 'start_post_registration':\n                this.setState({ // don't clobber logged_in status\n                    screen: 'post_registration'\n                });\n                break;\n            case 'start_upgrade_registration':\n                // stash our guest creds so we can backout if needed\n                this.guestCreds = MatrixClientPeg.getCredentials();\n                this.setStateForNewScreen({\n                    screen: \"register\",\n                    upgradeUsername: MatrixClientPeg.get().getUserIdLocalpart(),\n                    guestAccessToken: MatrixClientPeg.get().getAccessToken(),\n                });\n                this.notifyNewScreen('register');\n                break;\n            case 'start_password_recovery':\n                if (this.state.logged_in) return;\n                this.setStateForNewScreen({\n                    screen: 'forgot_password',\n                });\n                this.notifyNewScreen('forgot_password');\n                break;\n            case 'leave_room':\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n\n                var roomId = payload.room_id;\n                Modal.createDialog(QuestionDialog, {\n                    title: \"Leave room\",\n                    description: \"Are you sure you want to leave the room?\",\n                    onFinished: function(should_leave) {\n                        if (should_leave) {\n                            var d = MatrixClientPeg.get().leave(roomId);\n\n                            // FIXME: controller shouldn't be loading a view :(\n                            var Loader = sdk.getComponent(\"elements.Spinner\");\n                            var modal = Modal.createDialog(Loader, null, 'mx_Dialog_spinner');\n\n                            d.then(function() {\n                                modal.close();\n                                dis.dispatch({action: 'view_next_room'});\n                            }, function(err) {\n                                modal.close();\n                                Modal.createDialog(ErrorDialog, {\n                                    title: \"Failed to leave room\",\n                                    description: err.toString()\n                                });\n                            });\n                        }\n                    }\n                });\n                break;\n            case 'view_user':\n                // FIXME: ugly hack to expand the RightPanel and then re-dispatch.\n                if (this.state.collapse_rhs) {\n                    setTimeout(()=>{\n                        dis.dispatch({\n                            action: 'show_right_panel',\n                        });\n                        dis.dispatch({\n                            action: 'view_user',\n                            member: payload.member,\n                        });\n                    }, 0);\n                }\n                break;\n            case 'view_room':\n                // Takes either a room ID or room alias: if switching to a room the client is already\n                // known to be in (eg. user clicks on a room in the recents panel), supply the ID\n                // If the user is clicking on a room in the context of the alias being presented\n                // to them, supply the room alias. If both are supplied, the room ID will be ignored.\n                this._viewRoom(payload);\n                break;\n            case 'view_prev_room':\n                roomIndexDelta = -1;\n            case 'view_next_room':\n                var allRooms = RoomListSorter.mostRecentActivityFirst(\n                    MatrixClientPeg.get().getRooms()\n                );\n                var roomIndex = -1;\n                for (var i = 0; i < allRooms.length; ++i) {\n                    if (allRooms[i].roomId == this.state.currentRoomId) {\n                        roomIndex = i;\n                        break;\n                    }\n                }\n                roomIndex = (roomIndex + roomIndexDelta) % allRooms.length;\n                if (roomIndex < 0) roomIndex = allRooms.length - 1;\n                this._viewRoom({ room_id: allRooms[roomIndex].roomId });\n                break;\n            case 'view_indexed_room':\n                var allRooms = RoomListSorter.mostRecentActivityFirst(\n                    MatrixClientPeg.get().getRooms()\n                );\n                var roomIndex = payload.roomIndex;\n                if (allRooms[roomIndex]) {\n                    this._viewRoom({ room_id: allRooms[roomIndex].roomId });\n                }\n                break;\n            case 'view_user_settings':\n                this._setPage(PageTypes.UserSettings);\n                this.notifyNewScreen('settings');\n                break;\n            case 'view_create_room':\n                //this._setPage(PageTypes.CreateRoom);\n                //this.notifyNewScreen('new');\n\n                var TextInputDialog = sdk.getComponent(\"dialogs.TextInputDialog\");\n                Modal.createDialog(TextInputDialog, {\n                    title: \"Create Room\",\n                    description: \"Room name (optional)\",\n                    button: \"Create Room\",\n                    onFinished: (should_create, name) => {\n                        if (should_create) {\n                            const createOpts = {};\n                            if (name) createOpts.name = name;\n                            createRoom({createOpts}).done();\n                        }\n                    }\n                });\n                break;\n            case 'view_room_directory':\n                this._setPage(PageTypes.RoomDirectory);\n                this.notifyNewScreen('directory');\n                break;\n            case 'view_create_chat':\n                this._createChat();\n                break;\n            case 'view_invite':\n                this._invite(payload.roomId);\n                break;\n            case 'notifier_enabled':\n                this.forceUpdate();\n                break;\n            case 'hide_left_panel':\n                this.setState({\n                    collapse_lhs: true,\n                });\n                break;\n            case 'show_left_panel':\n                this.setState({\n                    collapse_lhs: false,\n                });\n                break;\n            case 'hide_right_panel':\n                this.setState({\n                    collapse_rhs: true,\n                });\n                break;\n            case 'show_right_panel':\n                this.setState({\n                    collapse_rhs: false,\n                });\n                break;\n            case 'ui_opacity':\n                this.setState({\n                    sideOpacity: payload.sideOpacity,\n                    middleOpacity: payload.middleOpacity,\n                });\n                break;\n            case 'set_theme':\n                this._onSetTheme(payload.value);\n                break;\n            case 'on_logged_in':\n                this._onLoggedIn();\n                break;\n            case 'on_logged_out':\n                this._onLoggedOut();\n                break;\n            case 'will_start_client':\n                this._onWillStartClient();\n                break;\n            case 'load_completed':\n                this._onLoadCompleted();\n                break;\n            case 'new_version':\n                this.onVersion(\n                    payload.currentVersion, payload.newVersion,\n                    payload.releaseNotes\n                );\n                break;\n        }\n    },\n\n    _setPage: function(pageType) {\n        this.setState({\n            page_type: pageType,\n        });\n    },\n\n    // switch view to the given room\n    //\n    // @param {Object} room_info Object containing data about the room to be joined\n    // @param {string=} room_info.room_id ID of the room to join. One of room_id or room_alias must be given.\n    // @param {string=} room_info.room_alias Alias of the room to join. One of room_id or room_alias must be given.\n    // @param {boolean=} room_info.auto_join If true, automatically attempt to join the room if not already a member.\n    // @param {boolean=} room_info.show_settings Makes RoomView show the room settings dialog.\n    // @param {string=} room_info.event_id ID of the event in this room to show: this will cause a switch to the\n    //                                    context of that particular event.\n    // @param {Object=} room_info.third_party_invite Object containing data about the third party\n    //                                    we received to join the room, if any.\n    // @param {string=} room_info.third_party_invite.inviteSignUrl 3pid invite sign URL\n    // @param {string=} room_info.third_party_invite.invitedEmail The email address the invite was sent to\n    // @param {Object=} room_info.oob_data Object of additional data about the room\n    //                               that has been passed out-of-band (eg.\n    //                               room name and avatar from an invite email)\n    _viewRoom: function(room_info) {\n        this.focusComposer = true;\n\n        var newState = {\n            initialEventId: room_info.event_id,\n            highlightedEventId: room_info.event_id,\n            initialEventPixelOffset: undefined,\n            page_type: PageTypes.RoomView,\n            thirdPartyInvite: room_info.third_party_invite,\n            roomOobData: room_info.oob_data,\n            currentRoomAlias: room_info.room_alias,\n            autoJoin: room_info.auto_join,\n        };\n\n        if (!room_info.room_alias) {\n            newState.currentRoomId = room_info.room_id;\n        }\n\n        // if we aren't given an explicit event id, look for one in the\n        // scrollStateMap.\n        //\n        // TODO: do this in RoomView rather than here\n        if (!room_info.event_id && this.refs.loggedInView) {\n            var scrollState = this.refs.loggedInView.getScrollStateForRoom(room_info.room_id);\n            if (scrollState) {\n                newState.initialEventId = scrollState.focussedEvent;\n                newState.initialEventPixelOffset = scrollState.pixelOffset;\n            }\n        }\n\n        if (this.sdkReady) {\n            // if the SDK is not ready yet, remember what room\n            // we're supposed to be on but don't notify about\n            // the new screen yet (we won't be showing it yet)\n            // The normal case where this happens is navigating\n            // to the room in the URL bar on page load.\n            var presentedId = room_info.room_alias || room_info.room_id;\n            var room = MatrixClientPeg.get().getRoom(room_info.room_id);\n            if (room) {\n                var theAlias = Rooms.getDisplayAliasForRoom(room);\n                if (theAlias) presentedId = theAlias;\n\n                // No need to do this given RoomView triggers it itself...\n                // var color_scheme_event = room.getAccountData(\"org.matrix.room.color_scheme\");\n                // var color_scheme = {};\n                // if (color_scheme_event) {\n                //     color_scheme = color_scheme_event.getContent();\n                //     // XXX: we should validate the event\n                // }\n                // console.log(\"Tinter.tint from _viewRoom\");\n                // Tinter.tint(color_scheme.primary_color, color_scheme.secondary_color);\n            }\n\n            if (room_info.event_id) {\n                presentedId += \"/\"+room_info.event_id;\n            }\n            this.notifyNewScreen('room/'+presentedId);\n            newState.ready = true;\n        }\n        this.setState(newState);\n    },\n\n    _createChat: function() {\n        var ChatInviteDialog = sdk.getComponent(\"dialogs.ChatInviteDialog\");\n        Modal.createDialog(ChatInviteDialog, {\n            title: \"Start a new chat\",\n        });\n    },\n\n    _invite: function(roomId) {\n        var ChatInviteDialog = sdk.getComponent(\"dialogs.ChatInviteDialog\");\n        Modal.createDialog(ChatInviteDialog, {\n            title: \"Invite new room members\",\n            button: \"Send Invites\",\n            description: \"Who would you like to add to this room?\",\n            roomId: roomId,\n        });\n    },\n\n    /**\n     * Called when the sessionloader has finished\n     */\n    _onLoadCompleted: function() {\n        this.props.onLoadCompleted();\n        this.setState({loading: false});\n    },\n\n    /**\n     * Called whenever someone changes the theme\n     */\n    _onSetTheme: function(theme) {\n        if (!theme) {\n            theme = 'light';\n        }\n\n        // look for the stylesheet elements.\n        // styleElements is a map from style name to HTMLLinkElement.\n        var styleElements = Object.create(null);\n        var i, a;\n        for (i = 0; (a = document.getElementsByTagName(\"link\")[i]); i++) {\n            var href = a.getAttribute(\"href\");\n            // shouldn't we be using the 'title' tag rather than the href?\n            var match = href.match(/^bundles\\/.*\\/theme-(.*)\\.css$/);\n            if (match) {\n                styleElements[match[1]] = a;\n            }\n        }\n\n        if (!(theme in styleElements)) {\n            throw new Error(\"Unknown theme \" + theme);\n        }\n\n        // disable all of them first, then enable the one we want. Chrome only\n        // bothers to do an update on a true->false transition, so this ensures\n        // that we get exactly one update, at the right time.\n\n        Object.values(styleElements).forEach((a) => {\n            a.disabled = true;\n        });\n        styleElements[theme].disabled = false;\n\n        if (theme === 'dark') {\n            // abuse the tinter to change all the SVG's #fff to #2d2d2d\n            // XXX: obviously this shouldn't be hardcoded here.\n            Tinter.tintSvgWhite('#2d2d2d');\n        }\n        else {\n            Tinter.tintSvgWhite('#ffffff');\n        }\n    },\n\n    /**\n     * Called when a new logged in session has started\n     */\n    _onLoggedIn: function(credentials) {\n        this.guestCreds = null;\n        this.notifyNewScreen('');\n        this.setState({\n            screen: undefined,\n            logged_in: true,\n        });\n    },\n\n    /**\n     * Called when the session is logged out\n     */\n    _onLoggedOut: function() {\n        this.notifyNewScreen('login');\n        this.setStateForNewScreen({\n            logged_in: false,\n            ready: false,\n            collapse_lhs: false,\n            collapse_rhs: false,\n            currentRoomAlias: null,\n            currentRoomId: null,\n            page_type: PageTypes.RoomDirectory,\n        });\n    },\n\n    /**\n     * Called just before the matrix client is started\n     * (useful for setting listeners)\n     */\n    _onWillStartClient() {\n        var cli = MatrixClientPeg.get();\n\n        var self = this;\n        cli.on('sync', function(state, prevState) {\n            self.updateStatusIndicator(state, prevState);\n            if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n                return;\n            }\n            console.log(\"MatrixClient sync state => %s\", state);\n            if (state !== \"PREPARED\") { return; }\n            self.sdkReady = true;\n\n            if (self.starting_room_alias_payload) {\n                dis.dispatch(self.starting_room_alias_payload);\n                delete self.starting_room_alias_payload;\n            } else if (!self.state.page_type) {\n                if (!self.state.currentRoomId) {\n                    var firstRoom = null;\n                    if (cli.getRooms() && cli.getRooms().length) {\n                        firstRoom = RoomListSorter.mostRecentActivityFirst(\n                            cli.getRooms()\n                        )[0].roomId;\n                        self.setState({ready: true, currentRoomId: firstRoom, page_type: PageTypes.RoomView});\n                    } else {\n                        self.setState({ready: true, page_type: PageTypes.RoomDirectory});\n                    }\n                } else {\n                    self.setState({ready: true, page_type: PageTypes.RoomView});\n                }\n\n                // we notifyNewScreen now because now the room will actually be displayed,\n                // and (mostly) now we can get the correct alias.\n                var presentedId = self.state.currentRoomId;\n                var room = MatrixClientPeg.get().getRoom(self.state.currentRoomId);\n                if (room) {\n                    var theAlias = Rooms.getDisplayAliasForRoom(room);\n                    if (theAlias) presentedId = theAlias;\n                }\n\n                if (presentedId != undefined) {\n                    self.notifyNewScreen('room/'+presentedId);\n                } else {\n                    // There is no information on presentedId\n                    // so point user to fallback like /directory\n                    self.notifyNewScreen('directory');\n                }\n\n                dis.dispatch({action: 'focus_composer'});\n            } else {\n                self.setState({ready: true});\n            }\n        });\n        cli.on('Call.incoming', function(call) {\n            dis.dispatch({\n                action: 'incoming_call',\n                call: call\n            });\n        });\n        cli.on('Session.logged_out', function(call) {\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Signed Out\",\n                description: \"For security, this session has been signed out. Please sign in again.\"\n            });\n            dis.dispatch({\n                action: 'logout'\n            });\n        });\n        cli.on(\"accountData\", function(ev) {\n            if (ev.getType() === 'im.vector.web.settings') {\n                if (ev.getContent() && ev.getContent().theme) {\n                    dis.dispatch({\n                        action: 'set_theme',\n                        value: ev.getContent().theme,\n                    });\n                }\n            }\n        });\n    },\n\n    onFocus: function(ev) {\n        dis.dispatch({action: 'focus_composer'});\n    },\n\n    showScreen: function(screen, params) {\n        if (screen == 'register') {\n            dis.dispatch({\n                action: 'start_registration',\n                params: params\n            });\n        } else if (screen == 'login') {\n            dis.dispatch({\n                action: 'start_login',\n                params: params\n            });\n        } else if (screen == 'forgot_password') {\n            dis.dispatch({\n                action: 'start_password_recovery',\n                params: params\n            });\n        } else if (screen == 'new') {\n            dis.dispatch({\n                action: 'view_create_room',\n            });\n        } else if (screen == 'settings') {\n            dis.dispatch({\n                action: 'view_user_settings',\n            });\n        } else if (screen == 'directory') {\n            dis.dispatch({\n                action: 'view_room_directory',\n            });\n        } else if (screen == 'post_registration') {\n            dis.dispatch({\n                action: 'start_post_registration',\n            });\n        } else if (screen.indexOf('room/') == 0) {\n            var segments = screen.substring(5).split('/');\n            var roomString = segments[0];\n            var eventId = segments[1]; // undefined if no event id given\n\n            // FIXME: sort_out caseConsistency\n            var third_party_invite = {\n                inviteSignUrl: params.signurl,\n                invitedEmail: params.email,\n            };\n            var oob_data = {\n                name: params.room_name,\n                avatarUrl: params.room_avatar_url,\n                inviterName: params.inviter_name,\n            };\n\n            var payload = {\n                action: 'view_room',\n                event_id: eventId,\n                third_party_invite: third_party_invite,\n                oob_data: oob_data,\n            };\n            if (roomString[0] == '#') {\n                payload.room_alias = roomString;\n            } else {\n                payload.room_id = roomString;\n            }\n\n            // we can't view a room unless we're logged in\n            // (a guest account is fine)\n            if (!this.state.logged_in) {\n                // we may still be loading (ie, trying to register a guest\n                // session); otherwise we're (probably) already showing a login\n                // screen. Either way, we'll show the room once the client starts.\n                this.starting_room_alias_payload = payload;\n            } else {\n                dis.dispatch(payload);\n            }\n        } else if (screen.indexOf('user/') == 0) {\n            var userId = screen.substring(5);\n            this.setState({ viewUserId: userId });\n            this._setPage(PageTypes.UserView);\n            this.notifyNewScreen('user/' + userId);\n            var member = new Matrix.RoomMember(null, userId);\n            if (member) {\n                dis.dispatch({\n                    action: 'view_user',\n                    member: member,\n                });\n            }\n        }\n        else {\n            console.info(\"Ignoring showScreen for '%s'\", screen);\n        }\n    },\n\n    notifyNewScreen: function(screen) {\n        if (this.props.onNewScreen) {\n            this.props.onNewScreen(screen);\n        }\n    },\n\n    onAliasClick: function(event, alias) {\n        event.preventDefault();\n        dis.dispatch({action: 'view_room', room_alias: alias});\n    },\n\n    onUserClick: function(event, userId) {\n        event.preventDefault();\n\n        // var MemberInfo = sdk.getComponent('rooms.MemberInfo');\n        // var member = new Matrix.RoomMember(null, userId);\n        // ContextualMenu.createMenu(MemberInfo, {\n        //     member: member,\n        //     right: window.innerWidth - event.pageX,\n        //     top: event.pageY\n        // });\n\n        var member = new Matrix.RoomMember(null, userId);\n        if (!member) { return; }\n        dis.dispatch({\n            action: 'view_user',\n            member: member,\n        });\n    },\n\n    onLogoutClick: function(event) {\n        dis.dispatch({\n            action: 'logout'\n        });\n        event.stopPropagation();\n        event.preventDefault();\n    },\n\n    handleResize: function(e) {\n        var hideLhsThreshold = 1000;\n        var showLhsThreshold = 1000;\n        var hideRhsThreshold = 820;\n        var showRhsThreshold = 820;\n\n        if (this.state.width > hideLhsThreshold && window.innerWidth <= hideLhsThreshold) {\n            dis.dispatch({ action: 'hide_left_panel' });\n        }\n        if (this.state.width <= showLhsThreshold && window.innerWidth > showLhsThreshold) {\n            dis.dispatch({ action: 'show_left_panel' });\n        }\n        if (this.state.width > hideRhsThreshold && window.innerWidth <= hideRhsThreshold) {\n            dis.dispatch({ action: 'hide_right_panel' });\n        }\n        if (this.state.width <= showRhsThreshold && window.innerWidth > showRhsThreshold) {\n            dis.dispatch({ action: 'show_right_panel' });\n        }\n\n        this.setState({width: window.innerWidth});\n    },\n\n    onRoomCreated: function(room_id) {\n        dis.dispatch({\n            action: \"view_room\",\n            room_id: room_id,\n        });\n    },\n\n    onRegisterClick: function() {\n        this.showScreen(\"register\");\n    },\n\n    onLoginClick: function() {\n        this.showScreen(\"login\");\n    },\n\n    onForgotPasswordClick: function() {\n        this.showScreen(\"forgot_password\");\n    },\n\n    onReturnToGuestClick: function() {\n        // reanimate our guest login\n        if (this.guestCreds) {\n            Lifecycle.setLoggedIn(this.guestCreds);\n            this.guestCreds = null;\n        }\n    },\n\n    onRegistered: function(credentials) {\n        Lifecycle.setLoggedIn(credentials);\n        // do post-registration stuff\n        // This now goes straight to user settings\n        // We use _setPage since if we wait for\n        // showScreen to do the dispatch loop,\n        // the showScreen dispatch will race with the\n        // sdk sync finishing and we'll probably see\n        // the page type still unset when the MatrixClient\n        // is started and show the Room Directory instead.\n        //this.showScreen(\"view_user_settings\");\n        this._setPage(PageTypes.UserSettings);\n    },\n\n    onFinishPostRegistration: function() {\n        // Don't confuse this with \"PageType\" which is the middle window to show\n        this.setState({\n            screen: undefined\n        });\n        this.showScreen(\"settings\");\n    },\n\n    onVersion: function(current, latest, releaseNotes) {\n        this.setState({\n            version: current,\n            newVersion: latest,\n            hasNewVersion: current !== latest,\n            newVersionReleaseNotes: releaseNotes,\n        });\n    },\n\n    updateStatusIndicator: function(state, prevState) {\n        var notifCount = 0;\n\n        var rooms = MatrixClientPeg.get().getRooms();\n        for (var i = 0; i < rooms.length; ++i) {\n            if (rooms[i].hasMembershipState(MatrixClientPeg.get().credentials.userId, 'invite')) {\n                notifCount++;\n            } else if (rooms[i].getUnreadNotificationCount()) {\n                // if we were summing unread notifs:\n                // notifCount += rooms[i].getUnreadNotificationCount();\n                // instead, we just count the number of rooms with notifs.\n                notifCount++;\n            }\n        }\n\n        if (PlatformPeg.get()) {\n            PlatformPeg.get().setErrorStatus(state === 'ERROR');\n            PlatformPeg.get().setNotificationCount(notifCount);\n        }\n\n        document.title = `Riot ${state === \"ERROR\" ? \" [offline]\" : \"\"}${notifCount > 0 ? ` [${notifCount}]` : \"\"}`;\n    },\n\n    onUserSettingsClose: function() {\n        // XXX: use browser history instead to find the previous room?\n        // or maintain a this.state.pageHistory in _setPage()?\n        if (this.state.currentRoomId) {\n            dis.dispatch({\n                action: 'view_room',\n                room_id: this.state.currentRoomId,\n            });\n        }\n        else {\n            dis.dispatch({\n                action: 'view_room_directory',\n            });\n        }\n    },\n\n    onRoomIdResolved: function(room_id) {\n        // It's the RoomView's resposibility to look up room aliases, but we need the\n        // ID to pass into things like the Member List, so the Room View tells us when\n        // its done that resolution so we can display things that take a room ID.\n        this.setState({currentRoomId: room_id});\n    },\n\n    render: function() {\n        var ForgotPassword = sdk.getComponent('structures.login.ForgotPassword');\n        var LoggedInView = sdk.getComponent('structures.LoggedInView');\n\n        // console.log(\"rendering; loading=\"+this.state.loading+\"; screen=\"+this.state.screen +\n        //             \"; logged_in=\"+this.state.logged_in+\"; ready=\"+this.state.ready);\n\n        if (this.state.loading) {\n            var Spinner = sdk.getComponent('elements.Spinner');\n            return (\n                <div className=\"mx_MatrixChat_splash\">\n                    <Spinner />\n                </div>\n            );\n        }\n        // needs to be before normal PageTypes as you are logged in technically\n        else if (this.state.screen == 'post_registration') {\n            return (\n                <PostRegistration\n                    onComplete={this.onFinishPostRegistration} />\n            );\n        } else if (this.state.logged_in && this.state.ready) {\n            /* for now, we stuff the entirety of our props and state into the LoggedInView.\n             * we should go through and figure out what we actually need to pass down, as well\n             * as using something like redux to avoid having a billion bits of state kicking around.\n             */\n            return (\n               <LoggedInView ref=\"loggedInView\" matrixClient={MatrixClientPeg.get()}\n                    onRoomIdResolved={this.onRoomIdResolved}\n                    onRoomCreated={this.onRoomCreated}\n                    onUserSettingsClose={this.onUserSettingsClose}\n                    {...this.props}\n                    {...this.state}\n                />\n            );\n        } else if (this.state.logged_in) {\n            // we think we are logged in, but are still waiting for the /sync to complete\n            var Spinner = sdk.getComponent('elements.Spinner');\n            return (\n                <div className=\"mx_MatrixChat_splash\">\n                    <Spinner />\n                    <a href=\"#\" className=\"mx_MatrixChat_splashButtons\" onClick={ this.onLogoutClick }>\n                    Logout\n                    </a>\n                </div>\n            );\n        } else if (this.state.screen == 'register') {\n            return (\n                <Registration\n                    clientSecret={this.state.register_client_secret}\n                    sessionId={this.state.register_session_id}\n                    idSid={this.state.register_id_sid}\n                    email={this.props.startingFragmentQueryParams.email}\n                    referrer={this.props.startingFragmentQueryParams.referrer}\n                    username={this.state.upgradeUsername}\n                    guestAccessToken={this.state.guestAccessToken}\n                    defaultHsUrl={this.getDefaultHsUrl()}\n                    defaultIsUrl={this.getDefaultIsUrl()}\n                    brand={this.props.config.brand}\n                    teamServerConfig={this.props.config.teamServerConfig}\n                    customHsUrl={this.getCurrentHsUrl()}\n                    customIsUrl={this.getCurrentIsUrl()}\n                    registrationUrl={this.props.registrationUrl}\n                    defaultDeviceDisplayName={this.props.defaultDeviceDisplayName}\n                    onLoggedIn={this.onRegistered}\n                    onLoginClick={this.onLoginClick}\n                    onRegisterClick={this.onRegisterClick}\n                    onCancelClick={this.guestCreds ? this.onReturnToGuestClick : null}\n                    />\n            );\n        } else if (this.state.screen == 'forgot_password') {\n            return (\n                <ForgotPassword\n                    defaultHsUrl={this.getDefaultHsUrl()}\n                    defaultIsUrl={this.getDefaultIsUrl()}\n                    customHsUrl={this.getCurrentHsUrl()}\n                    customIsUrl={this.getCurrentIsUrl()}\n                    onComplete={this.onLoginClick}\n                    onRegisterClick={this.onRegisterClick}\n                    onLoginClick={this.onLoginClick} />\n            );\n        } else {\n            var r = (\n                <Login\n                    onLoggedIn={Lifecycle.setLoggedIn}\n                    onRegisterClick={this.onRegisterClick}\n                    defaultHsUrl={this.getDefaultHsUrl()}\n                    defaultIsUrl={this.getDefaultIsUrl()}\n                    customHsUrl={this.getCurrentHsUrl()}\n                    customIsUrl={this.getCurrentIsUrl()}\n                    fallbackHsUrl={this.getFallbackHsUrl()}\n                    defaultDeviceDisplayName={this.props.defaultDeviceDisplayName}\n                    onForgotPasswordClick={this.onForgotPasswordClick}\n                    enableGuest={this.props.enableGuest}\n                    onCancelClick={this.guestCreds ? this.onReturnToGuestClick : null}\n                    initialErrorText={this.sessionLoadError}\n                />\n            );\n\n            // we only want to show the session load error the first time the\n            // Login component is rendered. This is pretty hacky but I can't\n            // think of another way to achieve it.\n            this.sessionLoadError = null;\n\n            return r;\n        }\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/MessagePanel.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[592,595],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../dispatcher\");","fix":{"range":[629,632],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../index');","fix":{"range":[668,671],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../MatrixClientPeg');","fix":{"range":[703,706],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":147,"column":9,"nodeType":"VariableDeclaration","source":"        var readMarker = this.refs.readMarkerNode;","fix":{"range":[4874,4877],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":148,"column":9,"nodeType":"VariableDeclaration","source":"        var messageWrapper = this.refs.scrollPanel;","fix":{"range":[4925,4928],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":154,"column":9,"nodeType":"VariableDeclaration","source":"        var wrapperRect = ReactDOM.findDOMNode(messageWrapper).getBoundingClientRect();","fix":{"range":[5060,5063],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":155,"column":9,"nodeType":"VariableDeclaration","source":"        var readMarkerRect = readMarker.getBoundingClientRect();","fix":{"range":[5148,5151],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'mult'.","line":184,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'ev'.","line":195,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":233,"column":9,"nodeType":"VariableDeclaration","source":"        var EventTile = sdk.getComponent('rooms.EventTile');","fix":{"range":[7374,7377],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":234,"column":9,"nodeType":"VariableDeclaration","source":"        var DateSeparator = sdk.getComponent('messages.DateSeparator');","fix":{"range":[7435,7438],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 235 exceeds the maximum line length of 90.","line":235,"column":1,"nodeType":"Program","source":"        const MemberEventListSummary = sdk.getComponent('views.elements.MemberEventListSummary');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":239,"column":9,"nodeType":"VariableDeclaration","source":"        var i;","fix":{"range":[7637,7640],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":247,"column":9,"nodeType":"VariableDeclaration","source":"        var lastShownEventIndex = -1;","fix":{"range":[7998,8001],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":248,"column":9,"nodeType":"VariableDeclaration","source":"        var lastShownNonLocalEchoIndex = -1;","fix":{"range":[8036,8039],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":250,"column":13,"nodeType":"VariableDeclaration","source":"            var mxEv = this.props.events[i];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":268,"column":9,"nodeType":"VariableDeclaration","source":"        var ret = [];","fix":{"range":[8565,8568],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":270,"column":9,"nodeType":"VariableDeclaration","source":"        var prevEvent = null; // the last event we showed","fix":{"range":[8588,8591],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":273,"column":9,"nodeType":"VariableDeclaration","source":"        var readMarkerVisible = false;","fix":{"range":[8712,8715],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":282,"column":9,"nodeType":"VariableDeclaration","source":"        var isMembershipChange = (e) =>","fix":{"range":[9079,9082],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 284 exceeds the maximum line length of 90.","line":284,"column":1,"nodeType":"Program","source":"            && (!e.getPrevContent() || e.getContent().membership !== e.getPrevContent().membership);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":287,"column":13,"nodeType":"VariableDeclaration","source":"            var mxEv = this.props.events[i];"},{"ruleId":"no-redeclare","severity":2,"message":"'mxEv' is already defined.","line":287,"column":17,"nodeType":"Identifier","source":"            var mxEv = this.props.events[i];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":288,"column":13,"nodeType":"VariableDeclaration","source":"            var wantTile = true;","fix":{"range":[9371,9374],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":289,"column":13,"nodeType":"VariableDeclaration","source":"            var eventId = mxEv.getId();","fix":{"range":[9404,9407],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":295,"column":13,"nodeType":"VariableDeclaration","source":"            var last = (i == lastShownEventIndex);","fix":{"range":[9547,9550],"text":"let"}},{"ruleId":"prefer-const","severity":1,"message":"'ts1' is never reassigned. Use 'const' instead.","line":299,"column":21,"nodeType":"Identifier","source":"                let ts1 = mxEv.getTs();","fix":{"range":[9766,9769],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 308 exceeds the maximum line length of 90.","line":308,"column":1,"nodeType":"Program","source":"                const key = \"membereventlistsummary-\" + (prevEvent ? mxEv.getId() : \"initial\");"},{"ruleId":"max-len","severity":1,"message":"Line 311 exceeds the maximum line length of 90.","line":311,"column":1,"nodeType":"Program","source":"                    let dateSeparator = <li key={ts1+'~'}><DateSeparator key={ts1+'~'} ts={ts1}/></li>;"},{"ruleId":"prefer-const","severity":1,"message":"'dateSeparator' is never reassigned. Use 'const' instead.","line":311,"column":25,"nodeType":"Identifier","source":"                    let dateSeparator = <li key={ts1+'~'}><DateSeparator key={ts1+'~'} ts={ts1}/></li>;","fix":{"range":[10663,10666],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'summarisedEvents' is never reassigned. Use 'const' instead.","line":315,"column":21,"nodeType":"Identifier","source":"                let summarisedEvents = [mxEv];","fix":{"range":[10827,10830],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'collapsedMxEv' is never reassigned. Use 'const' instead.","line":317,"column":25,"nodeType":"Identifier","source":"                    let collapsedMxEv = this.props.events[i + 1];","fix":{"range":[10941,10944],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 325 exceeds the maximum line length of 90.","line":325,"column":1,"nodeType":"Program","source":"                        this._wantsDateSeparator(this.props.events[i], collapsedMxEv.getDate())) {"},{"ruleId":"prefer-const","severity":1,"message":"'ret' is never reassigned. Use 'const' instead.","line":338,"column":29,"nodeType":"Identifier","source":"                        let ret = this._getTilesForEvent(e, e);","fix":{"range":[12043,12046],"text":"const"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":341,"column":22,"nodeType":"ArrowFunctionExpression","source":"                    }","fix":{"range":[12179,12179],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":354,"column":46,"nodeType":"JSXElement","source":"                    </MemberEventListSummary>","fix":{"range":[12628,12628],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":371,"column":13,"nodeType":"VariableDeclaration","source":"            var isVisibleReadMarker = false;","fix":{"range":[13351,13354],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":374,"column":17,"nodeType":"VariableDeclaration","source":"                var visible = this.props.readMarkerVisible;","fix":{"range":[13460,13463],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 402 exceeds the maximum line length of 90.","line":402,"column":1,"nodeType":"Program","source":"        this.currentReadMarkerEventId = readMarkerVisible ? this.props.readMarkerEventId : null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":407,"column":9,"nodeType":"VariableDeclaration","source":"        var EventTile = sdk.getComponent('rooms.EventTile');","fix":{"range":[14966,14969],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":408,"column":9,"nodeType":"VariableDeclaration","source":"        var DateSeparator = sdk.getComponent('messages.DateSeparator');","fix":{"range":[15027,15030],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":409,"column":9,"nodeType":"VariableDeclaration","source":"        var ret = [];","fix":{"range":[15099,15102],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":412,"column":9,"nodeType":"VariableDeclaration","source":"        var continuation = false;","fix":{"range":[15181,15184],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":435,"column":9,"nodeType":"VariableDeclaration","source":"        var ts1 = mxEv.getTs();","fix":{"range":[16249,16252],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":436,"column":9,"nodeType":"VariableDeclaration","source":"        var eventDate = mxEv.getDate();","fix":{"range":[16281,16284],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":444,"column":13,"nodeType":"VariableDeclaration","source":"            var dateSeparator = <li key={ts1}><DateSeparator key={ts1} ts={ts1}/></li>;","fix":{"range":[16561,16564],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":449,"column":9,"nodeType":"VariableDeclaration","source":"        var eventId = mxEv.getId();","fix":{"range":[16727,16730],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":450,"column":9,"nodeType":"VariableDeclaration","source":"        var highlight = (eventId == this.props.highlightedEventId);","fix":{"range":[16763,16766],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":454,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollToken = mxEv.status ? undefined : eventId;","fix":{"range":[16964,16967],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":456,"column":9,"nodeType":"VariableDeclaration","source":"        var readReceipts;","fix":{"range":[17026,17029],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":474,"column":22,"nodeType":"JSXElement","source":"                </li>","fix":{"range":[17918,17918],"text":","}},{"ruleId":"prefer-const","severity":1,"message":"'receipts' is never reassigned. Use 'const' instead.","line":505,"column":13,"nodeType":"Identifier","source":"        let receipts = [];","fix":{"range":[18962,18965],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'member' is never reassigned. Use 'const' instead.","line":510,"column":17,"nodeType":"Identifier","source":"            let member = room.getMember(r.userId);","fix":{"range":[19217,19220],"text":"const"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":526,"column":9,"nodeType":"VariableDeclaration","source":"        var hr;","fix":{"range":[19634,19637],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'Velocity' is not defined.","line":543,"column":13,"nodeType":"Identifier","source":"            Velocity.Utilities.removeData(this._readMarkerGhostNode);"},{"ruleId":"no-undef","severity":2,"message":"'Velocity' is not defined.","line":548,"column":13,"nodeType":"Identifier","source":"            Velocity(ghostNode, {opacity: '0', width: '10%'},"},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":548,"column":13,"nodeType":"CallExpression","source":"            Velocity(ghostNode, {opacity: '0', width: '10%'},"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":555,"column":9,"nodeType":"VariableDeclaration","source":"        var hr = <hr className=\"mx_RoomView_myReadMarker\"","fix":{"range":[20466,20469],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":578,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollPanel = this.refs.scrollPanel;","fix":{"range":[21269,21272],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":589,"column":9,"nodeType":"VariableDeclaration","source":"        var ScrollPanel = sdk.getComponent(\"structures.ScrollPanel\");","fix":{"range":[21521,21524],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":590,"column":9,"nodeType":"VariableDeclaration","source":"        var Spinner = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[21591,21594],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":591,"column":9,"nodeType":"VariableDeclaration","source":"        var topSpinner, bottomSpinner;","fix":{"range":[21651,21654],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":591,"column":9,"nodeType":"VariableDeclaration","source":"        var topSpinner, bottomSpinner;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":599,"column":9,"nodeType":"VariableDeclaration","source":"        var style = this.props.hidden ? { display: 'none' } : {};","fix":{"range":[21932,21935],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 603 exceeds the maximum line length of 90.","line":603,"column":1,"nodeType":"Program","source":"            <ScrollPanel ref=\"scrollPanel\" className={ this.props.className + \" mx_fadable\" }"}],"errorCount":6,"warningCount":61,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar ReactDOM = require(\"react-dom\");\nvar dis = require(\"../../dispatcher\");\nvar sdk = require('../../index');\n\nvar MatrixClientPeg = require('../../MatrixClientPeg');\n\nconst MILLIS_IN_DAY = 86400000;\n\n/* (almost) stateless UI component which builds the event tiles in the room timeline.\n */\nmodule.exports = React.createClass({\n    displayName: 'MessagePanel',\n\n    propTypes: {\n        // true to give the component a 'display: none' style.\n        hidden: React.PropTypes.bool,\n\n        // true to show a spinner at the top of the timeline to indicate\n        // back-pagination in progress\n        backPaginating: React.PropTypes.bool,\n\n        // true to show a spinner at the end of the timeline to indicate\n        // forward-pagination in progress\n        forwardPaginating: React.PropTypes.bool,\n\n        // the list of MatrixEvents to display\n        events: React.PropTypes.array.isRequired,\n\n        // ID of an event to highlight. If undefined, no event will be highlighted.\n        highlightedEventId: React.PropTypes.string,\n\n        // Should we show URL Previews\n        showUrlPreview: React.PropTypes.bool,\n\n        // event after which we should show a read marker\n        readMarkerEventId: React.PropTypes.string,\n\n        // whether the read marker should be visible\n        readMarkerVisible: React.PropTypes.bool,\n\n        // the userid of our user. This is used to suppress the read marker\n        // for pending messages.\n        ourUserId: React.PropTypes.string,\n\n        // true to suppress the date at the start of the timeline\n        suppressFirstDateSeparator: React.PropTypes.bool,\n\n        // whether to show read receipts\n        manageReadReceipts: React.PropTypes.bool,\n\n        // true if updates to the event list should cause the scroll panel to\n        // scroll down when we are at the bottom of the window. See ScrollPanel\n        // for more details.\n        stickyBottom: React.PropTypes.bool,\n\n        // callback which is called when the panel is scrolled.\n        onScroll: React.PropTypes.func,\n\n        // callback which is called when more content is needed.\n        onFillRequest: React.PropTypes.func,\n\n        // opacity for dynamic UI fading effects\n        opacity: React.PropTypes.number,\n\n        // className for the panel\n        className: React.PropTypes.string.isRequired,\n\n        // shape parameter to be passed to EventTiles\n        tileShape: React.PropTypes.string,\n    },\n\n    componentWillMount: function() {\n        // the event after which we put a visible unread marker on the last\n        // render cycle; null if readMarkerVisible was false or the RM was\n        // suppressed (eg because it was at the end of the timeline)\n        this.currentReadMarkerEventId = null;\n\n        // the event after which we are showing a disappearing read marker\n        // animation\n        this.currentGhostEventId = null;\n\n        // opaque readreceipt info for each userId; used by ReadReceiptMarker\n        // to manage its animations\n        this._readReceiptMap = {};\n\n        // Remember the read marker ghost node so we can do the cleanup that\n        // Velocity requires\n        this._readMarkerGhostNode = null;\n\n        this._isMounted = true;\n    },\n\n    componentWillUnmount: function() {\n        this._isMounted = false;\n    },\n\n    /* get the DOM node representing the given event */\n    getNodeForEventId: function(eventId) {\n        if (!this.eventNodes) {\n            return undefined;\n        }\n\n        return this.eventNodes[eventId];\n    },\n\n    /* return true if the content is fully scrolled down right now; else false.\n     */\n    isAtBottom: function() {\n        return this.refs.scrollPanel\n            && this.refs.scrollPanel.isAtBottom();\n    },\n\n    /* get the current scroll state. See ScrollPanel.getScrollState for\n     * details.\n     *\n     * returns null if we are not mounted.\n     */\n    getScrollState: function() {\n        if (!this.refs.scrollPanel) { return null; }\n        return this.refs.scrollPanel.getScrollState();\n    },\n\n    // returns one of:\n    //\n    //  null: there is no read marker\n    //  -1: read marker is above the window\n    //   0: read marker is within the window\n    //  +1: read marker is below the window\n    getReadMarkerPosition: function() {\n        var readMarker = this.refs.readMarkerNode;\n        var messageWrapper = this.refs.scrollPanel;\n\n        if (!readMarker || !messageWrapper) {\n            return null;\n        }\n\n        var wrapperRect = ReactDOM.findDOMNode(messageWrapper).getBoundingClientRect();\n        var readMarkerRect = readMarker.getBoundingClientRect();\n\n        // the read-marker pretends to have zero height when it is actually\n        // two pixels high; +2 here to account for that.\n        if (readMarkerRect.bottom + 2 < wrapperRect.top) {\n            return -1;\n        } else if (readMarkerRect.top < wrapperRect.bottom) {\n            return 0;\n        } else {\n            return 1;\n        }\n    },\n\n    /* jump to the top of the content.\n     */\n    scrollToTop: function() {\n        if (this.refs.scrollPanel) {\n            this.refs.scrollPanel.scrollToTop();\n        }\n    },\n\n    /* jump to the bottom of the content.\n     */\n    scrollToBottom: function() {\n        if (this.refs.scrollPanel) {\n            this.refs.scrollPanel.scrollToBottom();\n        }\n    },\n\n    /**\n     * Page up/down.\n     *\n     * mult: -1 to page up, +1 to page down\n     */\n    scrollRelative: function(mult) {\n        if (this.refs.scrollPanel) {\n            this.refs.scrollPanel.scrollRelative(mult);\n        }\n    },\n\n    /**\n     * Scroll up/down in response to a scroll key\n     */\n    handleScrollKey: function(ev) {\n        if (this.refs.scrollPanel) {\n            this.refs.scrollPanel.handleScrollKey(ev);\n        }\n    },\n\n    /* jump to the given event id.\n     *\n     * offsetBase gives the reference point for the pixelOffset. 0 means the\n     * top of the container, 1 means the bottom, and fractional values mean\n     * somewhere in the middle. If omitted, it defaults to 0.\n     *\n     * pixelOffset gives the number of pixels *above* the offsetBase that the\n     * node (specifically, the bottom of it) will be positioned. If omitted, it\n     * defaults to 0.\n     */\n    scrollToEvent: function(eventId, pixelOffset, offsetBase) {\n        if (this.refs.scrollPanel) {\n            this.refs.scrollPanel.scrollToToken(eventId, pixelOffset, offsetBase);\n        }\n    },\n\n    /* check the scroll state and send out pagination requests if necessary.\n     */\n    checkFillState: function() {\n        if (this.refs.scrollPanel) {\n            this.refs.scrollPanel.checkFillState();\n        }\n    },\n\n    _isUnmounting: function() {\n        return !this._isMounted;\n    },\n\n    _getEventTiles: function() {\n        var EventTile = sdk.getComponent('rooms.EventTile');\n        var DateSeparator = sdk.getComponent('messages.DateSeparator');\n        const MemberEventListSummary = sdk.getComponent('views.elements.MemberEventListSummary');\n\n        this.eventNodes = {};\n\n        var i;\n\n        // first figure out which is the last event in the list which we're\n        // actually going to show; this allows us to behave slightly\n        // differently for the last event in the list.\n        //\n        // we also need to figure out which is the last event we show which isn't\n        // a local echo, to manage the read-marker.\n        var lastShownEventIndex = -1;\n        var lastShownNonLocalEchoIndex = -1;\n        for (i = this.props.events.length-1; i >= 0; i--) {\n            var mxEv = this.props.events[i];\n            if (!EventTile.haveTileForEvent(mxEv)) {\n                continue;\n            }\n\n            if (lastShownEventIndex < 0) {\n                lastShownEventIndex = i;\n            }\n\n            if (mxEv.status) {\n                // this is a local echo\n                continue;\n            }\n\n            lastShownNonLocalEchoIndex = i;\n            break;\n        }\n\n        var ret = [];\n\n        var prevEvent = null; // the last event we showed\n\n        // assume there is no read marker until proven otherwise\n        var readMarkerVisible = false;\n\n        // if the readmarker has moved, cancel any active ghost.\n        if (this.currentReadMarkerEventId && this.props.readMarkerEventId &&\n                this.props.readMarkerVisible &&\n                this.currentReadMarkerEventId != this.props.readMarkerEventId) {\n            this.currentGhostEventId = null;\n        }\n\n        var isMembershipChange = (e) =>\n            e.getType() === 'm.room.member'\n            && (!e.getPrevContent() || e.getContent().membership !== e.getPrevContent().membership);\n\n        for (i = 0; i < this.props.events.length; i++) {\n            var mxEv = this.props.events[i];\n            var wantTile = true;\n            var eventId = mxEv.getId();\n\n            if (!EventTile.haveTileForEvent(mxEv)) {\n                wantTile = false;\n            }\n\n            var last = (i == lastShownEventIndex);\n\n            // Wrap consecutive member events in a ListSummary, ignore if redacted\n            if (isMembershipChange(mxEv) && EventTile.haveTileForEvent(mxEv)) {\n                let ts1 = mxEv.getTs();\n                // Ensure that the key of the MemberEventListSummary does not change with new\n                // member events. This will prevent it from being re-created unnecessarily, and\n                // instead will allow new props to be provided. In turn, the shouldComponentUpdate\n                // method on MELS can be used to prevent unnecessary renderings.\n                //\n                // Whilst back-paginating with a MELS at the top of the panel, prevEvent will be null,\n                // so use the key \"membereventlistsummary-initial\". Otherwise, use the ID of the first\n                // membership event, which will not change during forward pagination.\n                const key = \"membereventlistsummary-\" + (prevEvent ? mxEv.getId() : \"initial\");\n\n                if (this._wantsDateSeparator(prevEvent, mxEv.getDate())) {\n                    let dateSeparator = <li key={ts1+'~'}><DateSeparator key={ts1+'~'} ts={ts1}/></li>;\n                    ret.push(dateSeparator);\n                }\n\n                let summarisedEvents = [mxEv];\n                for (;i + 1 < this.props.events.length; i++) {\n                    let collapsedMxEv = this.props.events[i + 1];\n\n                    // Ignore redacted member events\n                    if (!EventTile.haveTileForEvent(collapsedMxEv)) {\n                        continue;\n                    }\n\n                    if (!isMembershipChange(collapsedMxEv) ||\n                        this._wantsDateSeparator(this.props.events[i], collapsedMxEv.getDate())) {\n                        break;\n                    }\n                    summarisedEvents.push(collapsedMxEv);\n                }\n                // At this point, i = the index of the last event in the summary sequence\n\n                let eventTiles = summarisedEvents.map(\n                    (e) => {\n                        // In order to prevent DateSeparators from appearing in the expanded form\n                        // of MemberEventListSummary, render each member event as if the previous\n                        // one was itself. This way, the timestamp of the previous event === the\n                        // timestamp of the current event, and no DateSeperator is inserted.\n                        let ret = this._getTilesForEvent(e, e);\n                        prevEvent = e;\n                        return ret;\n                    }\n                ).reduce((a, b) => a.concat(b));\n\n                if (eventTiles.length === 0) {\n                    eventTiles = null;\n                }\n\n                ret.push(\n                    <MemberEventListSummary\n                        key={key}\n                        events={summarisedEvents}\n                        data-scroll-token={eventId}>\n                            {eventTiles}\n                    </MemberEventListSummary>\n                );\n                continue;\n            }\n\n            if (wantTile) {\n                // make sure we unpack the array returned by _getTilesForEvent,\n                // otherwise react will auto-generate keys and we will end up\n                // replacing all of the DOM elements every time we paginate.\n                ret.push(...this._getTilesForEvent(prevEvent, mxEv, last));\n                prevEvent = mxEv;\n            } else if (!mxEv.status) {\n                // if we aren't showing the event, put in a dummy scroll token anyway, so\n                // that we can scroll to the right place.\n                ret.push(<li key={eventId} data-scroll-token={eventId}/>);\n            }\n\n            var isVisibleReadMarker = false;\n\n            if (eventId == this.props.readMarkerEventId) {\n                var visible = this.props.readMarkerVisible;\n\n                // if the read marker comes at the end of the timeline (except\n                // for local echoes, which are excluded from RMs, because they\n                // don't have useful event ids), we don't want to show it, but\n                // we still want to create the <li/> for it so that the\n                // algorithms which depend on its position on the screen aren't\n                // confused.\n                if (i >= lastShownNonLocalEchoIndex) {\n                    visible = false;\n                }\n                ret.push(this._getReadMarkerTile(visible));\n                readMarkerVisible = visible;\n                isVisibleReadMarker = visible;\n            }\n\n            if (eventId == this.currentGhostEventId) {\n                // if we're showing an animation, continue to show it.\n                ret.push(this._getReadMarkerGhostTile());\n            } else if (!isVisibleReadMarker &&\n                       eventId == this.currentReadMarkerEventId) {\n                // there is currently a read-up-to marker at this point, but no\n                // more. Show an animation of it disappearing.\n                ret.push(this._getReadMarkerGhostTile());\n                this.currentGhostEventId = eventId;\n            }\n        }\n\n        this.currentReadMarkerEventId = readMarkerVisible ? this.props.readMarkerEventId : null;\n        return ret;\n    },\n\n    _getTilesForEvent: function(prevEvent, mxEv, last) {\n        var EventTile = sdk.getComponent('rooms.EventTile');\n        var DateSeparator = sdk.getComponent('messages.DateSeparator');\n        var ret = [];\n\n        // is this a continuation of the previous message?\n        var continuation = false;\n        if (prevEvent !== null && prevEvent.sender && mxEv.sender\n                && mxEv.sender.userId === prevEvent.sender.userId\n                && mxEv.getType() == prevEvent.getType()) {\n            continuation = true;\n        }\n\n/*\n        // Work out if this is still a continuation, as we are now showing commands\n        // and /me messages with their own little avatar. The case of a change of\n        // event type (commands) is handled above, but we need to handle the /me\n        // messages seperately as they have a msgtype of 'm.emote' but are classed\n        // as normal messages\n        if (prevEvent !== null && prevEvent.sender && mxEv.sender\n                && mxEv.sender.userId === prevEvent.sender.userId\n                && mxEv.getType() == prevEvent.getType()\n                && prevEvent.getContent().msgtype === 'm.emote') {\n            continuation = false;\n        }\n*/\n\n        // local echoes have a fake date, which could even be yesterday. Treat them\n        // as 'today' for the date separators.\n        var ts1 = mxEv.getTs();\n        var eventDate = mxEv.getDate();\n        if (mxEv.status) {\n            eventDate = new Date();\n            ts1 = eventDate.getTime();\n        }\n\n        // do we need a date separator since the last event?\n        if (this._wantsDateSeparator(prevEvent, eventDate)) {\n            var dateSeparator = <li key={ts1}><DateSeparator key={ts1} ts={ts1}/></li>;\n            ret.push(dateSeparator);\n            continuation = false;\n        }\n\n        var eventId = mxEv.getId();\n        var highlight = (eventId == this.props.highlightedEventId);\n\n        // we can't use local echoes as scroll tokens, because their event IDs change.\n        // Local echos have a send \"status\".\n        var scrollToken = mxEv.status ? undefined : eventId;\n\n        var readReceipts;\n        if (this.props.manageReadReceipts) {\n            readReceipts = this._getReadReceiptsForEvent(mxEv);\n        }\n\n        ret.push(\n                <li key={eventId}\n                        ref={this._collectEventNode.bind(this, eventId)}\n                        data-scroll-token={scrollToken}>\n                    <EventTile mxEvent={mxEv} continuation={continuation}\n                        onWidgetLoad={this._onWidgetLoad}\n                        readReceipts={readReceipts}\n                        readReceiptMap={this._readReceiptMap}\n                        showUrlPreview={this.props.showUrlPreview}\n                        checkUnmounting={this._isUnmounting}\n                        eventSendStatus={mxEv.status}\n                        tileShape={this.props.tileShape}\n                        last={last} isSelectedEvent={highlight}/>\n                </li>\n        );\n\n        return ret;\n    },\n\n    _wantsDateSeparator: function(prevEvent, nextEventDate) {\n        if (prevEvent == null) {\n            // first event in the panel: depends if we could back-paginate from\n            // here.\n            return !this.props.suppressFirstDateSeparator;\n        }\n        // Return early for events that are > 24h apart\n        if (Math.abs(prevEvent.getTs() - nextEventDate.getTime()) > MILLIS_IN_DAY) {\n            return true;\n        }\n\n        // Compare weekdays\n        return prevEvent.getDate().getDay() !== nextEventDate.getDay();\n    },\n\n    // get a list of read receipts that should be shown next to this event\n    // Receipts are objects which have a 'roomMember' and 'ts'.\n    _getReadReceiptsForEvent: function(event) {\n        const myUserId = MatrixClientPeg.get().credentials.userId;\n\n        // get list of read receipts, sorted most recent first\n        const room = MatrixClientPeg.get().getRoom(event.getRoomId());\n        if (!room) {\n            return null;\n        }\n        let receipts = [];\n        room.getReceiptsForEvent(event).forEach((r) => {\n            if (!r.userId || r.type !== \"m.read\" || r.userId === myUserId) {\n                return; // ignore non-read receipts and receipts from self.\n            }\n            let member = room.getMember(r.userId);\n            if (!member) {\n                return; // ignore unknown user IDs\n            }\n            receipts.push({\n                roomMember: member,\n                ts: r.data ? r.data.ts : 0,\n            });\n        });\n\n        return receipts.sort((r1, r2) => {\n            return r2.ts - r1.ts;\n        });\n    },\n\n    _getReadMarkerTile: function(visible) {\n        var hr;\n        if (visible) {\n            hr = <hr className=\"mx_RoomView_myReadMarker\"\n                    style={{opacity: 1, width: '99%'}}\n                />;\n        }\n\n        return (\n            <li key=\"_readupto\" ref=\"readMarkerNode\"\n                  className=\"mx_RoomView_myReadMarker_container\">\n                {hr}\n            </li>\n        );\n    },\n\n    _startAnimation: function(ghostNode) {\n        if (this._readMarkerGhostNode) {\n            Velocity.Utilities.removeData(this._readMarkerGhostNode);\n        }\n        this._readMarkerGhostNode = ghostNode;\n\n        if (ghostNode) {\n            Velocity(ghostNode, {opacity: '0', width: '10%'},\n                     {duration: 400, easing: 'easeInSine',\n                      delay: 1000});\n        }\n    },\n\n    _getReadMarkerGhostTile: function() {\n        var hr = <hr className=\"mx_RoomView_myReadMarker\"\n                  style={{opacity: 1, width: '99%'}}\n                  ref={this._startAnimation}\n            />;\n\n        // give it a key which depends on the event id. That will ensure that\n        // we get a new DOM node (restarting the animation) when the ghost\n        // moves to a different event.\n        return (\n            <li key={\"_readuptoghost_\"+this.currentGhostEventId}\n                  className=\"mx_RoomView_myReadMarker_container\">\n                {hr}\n            </li>\n        );\n    },\n\n    _collectEventNode: function(eventId, node) {\n        this.eventNodes[eventId] = node;\n    },\n\n    // once dynamic content in the events load, make the scrollPanel check the\n    // scroll offsets.\n    _onWidgetLoad: function() {\n        var scrollPanel = this.refs.scrollPanel;\n        if (scrollPanel) {\n            scrollPanel.forceUpdate();\n        }\n    },\n\n    onResize: function() {\n        dis.dispatch({ action: 'timeline_resize' }, true);\n    },\n\n    render: function() {\n        var ScrollPanel = sdk.getComponent(\"structures.ScrollPanel\");\n        var Spinner = sdk.getComponent(\"elements.Spinner\");\n        var topSpinner, bottomSpinner;\n        if (this.props.backPaginating) {\n            topSpinner = <li key=\"_topSpinner\"><Spinner /></li>;\n        }\n        if (this.props.forwardPaginating) {\n            bottomSpinner = <li key=\"_bottomSpinner\"><Spinner /></li>;\n        }\n\n        var style = this.props.hidden ? { display: 'none' } : {};\n        style.opacity = this.props.opacity;\n\n        return (\n            <ScrollPanel ref=\"scrollPanel\" className={ this.props.className + \" mx_fadable\" }\n                    onScroll={ this.props.onScroll }\n                    onResize={ this.onResize }\n                    onFillRequest={ this.props.onFillRequest }\n                    onUnfillRequest={ this.props.onUnfillRequest }\n                    style={ style }\n                    stickyBottom={ this.props.stickyBottom }>\n                {topSpinner}\n                {this._getEventTiles()}\n                {bottomSpinner}\n            </ScrollPanel>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/NotificationPanel.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[592,595],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'ReactDOM' is assigned a value but never used.","line":18,"column":5,"nodeType":"Identifier","source":"var ReactDOM = require(\"react-dom\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var Matrix = require(\"matrix-js-sdk\");","fix":{"range":[630,633],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Matrix' is assigned a value but never used.","line":20,"column":5,"nodeType":"Identifier","source":"var Matrix = require(\"matrix-js-sdk\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../index');","fix":{"range":[669,672],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../MatrixClientPeg\");","fix":{"range":[703,706],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../dispatcher\");","fix":{"range":[759,762],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'dis' is assigned a value but never used.","line":23,"column":5,"nodeType":"Identifier","source":"var dis = require(\"../../dispatcher\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var NotificationPanel = React.createClass({","fix":{"range":[882,885],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":9,"nodeType":"VariableDeclaration","source":"        var TimelinePanel = sdk.getComponent(\"structures.TimelinePanel\");","fix":{"range":[1095,1098],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":9,"nodeType":"VariableDeclaration","source":"        var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[1169,1172],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":39,"column":9,"nodeType":"VariableDeclaration","source":"        var timelineSet = MatrixClientPeg.get().getNotifTimelineSet();","fix":{"range":[1229,1232],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":53,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[1790,1799],"text":"        "}}],"errorCount":3,"warningCount":11,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar ReactDOM = require(\"react-dom\");\n\nvar Matrix = require(\"matrix-js-sdk\");\nvar sdk = require('../../index');\nvar MatrixClientPeg = require(\"../../MatrixClientPeg\");\nvar dis = require(\"../../dispatcher\");\n\n/*\n * Component which shows the global notification list using a TimelinePanel\n */\nvar NotificationPanel = React.createClass({\n    displayName: 'NotificationPanel',\n\n    propTypes: {\n    },\n\n    render: function() {\n        // wrap a TimelinePanel with the jump-to-event bits turned off.\n        var TimelinePanel = sdk.getComponent(\"structures.TimelinePanel\");\n        var Loader = sdk.getComponent(\"elements.Spinner\");\n\n        var timelineSet = MatrixClientPeg.get().getNotifTimelineSet();\n\n        if (timelineSet) {\n            return (\n                <TimelinePanel key={\"NotificationPanel_\" + this.props.roomId}\n                    className=\"mx_NotificationPanel\"\n                    manageReadReceipts={false}\n                    manageReadMarkers={false}\n                    timelineSet={timelineSet}\n                    showUrlPreview = { false }\n                    opacity={ this.props.opacity }\n                    tileShape=\"notif\"\n                />\n            );\n        }\n        else {\n            console.error(\"No notifTimelineSet available!\");\n            return (\n                <div className=\"mx_NotificationPanel\">\n                    <Loader/>\n                </div>\n            );\n        }\n    },\n});\n\nmodule.exports = NotificationPanel;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/RoomStatusBar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../index');","fix":{"range":[598,601],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../dispatcher\");","fix":{"range":[632,635],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'dis' is assigned a value but never used.","line":19,"column":5,"nodeType":"Identifier","source":"var dis = require(\"../../dispatcher\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var WhoIsTyping = require(\"../../WhoIsTyping\");","fix":{"range":[671,674],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../MatrixClientPeg\");","fix":{"range":[719,722],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":93,"column":44,"nodeType":"MemberExpression","source":"                this.props.whoIsTypingLimit","fix":{"range":[3402,3402],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":123,"column":9,"nodeType":"VariableDeclaration","source":"        var client = MatrixClientPeg.get();","fix":{"range":[4351,4354],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":135,"column":29,"nodeType":"Property","source":"            syncState: state","fix":{"range":[4771,4771],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":143,"column":44,"nodeType":"MemberExpression","source":"                this.props.whoIsTypingLimit","fix":{"range":[5001,5001],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 169 exceeds the maximum line length of 90.","line":169,"column":1,"nodeType":"Program","source":"        return this._getSize(prevProps, prevState) !== this._getSize(this.props, this.state);"},{"ruleId":"prefer-const","severity":1,"message":"'othersCount' is never reassigned. Use 'const' instead.","line":222,"column":13,"nodeType":"Identifier","source":"        let othersCount = Math.max(users.length - limit, 0);","fix":{"range":[7717,7720],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'avatars' is never reassigned. Use 'const' instead.","line":225,"column":13,"nodeType":"Identifier","source":"        let avatars = users.map((u, index) => {","fix":{"range":[7818,7821],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'showInitial' is never reassigned. Use 'const' instead.","line":226,"column":17,"nodeType":"Identifier","source":"            let showInitial = othersCount === 0 && index === users.length - 1;","fix":{"range":[7870,7873],"text":"const"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":243,"column":24,"nodeType":"JSXElement","source":"                </span>","fix":{"range":[8453,8453],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":252,"column":9,"nodeType":"VariableDeclaration","source":"        var TabCompleteBar = sdk.getComponent('rooms.TabCompleteBar');","fix":{"range":[8625,8628],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":253,"column":9,"nodeType":"VariableDeclaration","source":"        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");","fix":{"range":[8696,8699],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 263 exceeds the maximum line length of 90.","line":263,"column":1,"nodeType":"Program","source":"                    <img src=\"img/warning.svg\" width=\"24\" height=\"23\" title=\"/!\\ \" alt=\"/!\\ \"/>"},{"ruleId":"max-len","severity":1,"message":"Line 291 exceeds the maximum line length of 90.","line":291,"column":1,"nodeType":"Program","source":"                    <img src=\"img/warning.svg\" width=\"24\" height=\"23\" title=\"/!\\ \" alt=\"/!\\ \"/>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":313,"column":13,"nodeType":"VariableDeclaration","source":"            var unreadMsgs = this.props.numUnreadMessages + \" new message\" +","fix":{"range":[11578,11581],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":324,"column":9,"nodeType":"VariableDeclaration","source":"        var typingString = this.state.whoisTypingString;","fix":{"range":[11956,11959],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":346,"column":9,"nodeType":"VariableDeclaration","source":"        var content = this._getContent();","fix":{"range":[12493,12496],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":347,"column":9,"nodeType":"VariableDeclaration","source":"        var indicator = this._getIndicator(this.state.whoisTypingString !== null);","fix":{"range":[12535,12538],"text":"let"}}],"errorCount":5,"warningCount":18,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar sdk = require('../../index');\nvar dis = require(\"../../dispatcher\");\nvar WhoIsTyping = require(\"../../WhoIsTyping\");\nvar MatrixClientPeg = require(\"../../MatrixClientPeg\");\nconst MemberAvatar = require(\"../views/avatars/MemberAvatar\");\n\nconst HIDE_DEBOUNCE_MS = 10000;\nconst STATUS_BAR_HIDDEN = 0;\nconst STATUS_BAR_EXPANDED = 1;\nconst STATUS_BAR_EXPANDED_LARGE = 2;\n\nmodule.exports = React.createClass({\n    displayName: 'RoomStatusBar',\n\n    propTypes: {\n        // the room this statusbar is representing.\n        room: React.PropTypes.object.isRequired,\n\n        // a TabComplete object\n        tabComplete: React.PropTypes.object.isRequired,\n\n        // the number of messages which have arrived since we've been scrolled up\n        numUnreadMessages: React.PropTypes.number,\n\n        // true if there are messages in the room which had errors on send\n        hasUnsentMessages: React.PropTypes.bool,\n\n        // this is true if we are fully scrolled-down, and are looking at\n        // the end of the live timeline.\n        atEndOfLiveTimeline: React.PropTypes.bool,\n\n        // true if there is an active call in this room (means we show\n        // the 'Active Call' text in the status bar if there is nothing\n        // more interesting)\n        hasActiveCall: React.PropTypes.bool,\n\n        // Number of names to display in typing indication. E.g. set to 3, will\n        // result in \"X, Y, Z and 100 others are typing.\"\n        whoIsTypingLimit: React.PropTypes.number,\n\n        // callback for when the user clicks on the 'resend all' button in the\n        // 'unsent messages' bar\n        onResendAllClick: React.PropTypes.func,\n\n        // callback for when the user clicks on the 'cancel all' button in the\n        // 'unsent messages' bar\n        onCancelAllClick: React.PropTypes.func,\n\n        // callback for when the user clicks on the 'scroll to bottom' button\n        onScrollToBottomClick: React.PropTypes.func,\n\n        // callback for when we do something that changes the size of the\n        // status bar. This is used to trigger a re-layout in the parent\n        // component.\n        onResize: React.PropTypes.func,\n\n        // callback for when the status bar can be hidden from view, as it is\n        // not displaying anything\n        onHidden: React.PropTypes.func,\n        // callback for when the status bar is displaying something and should\n        // be visible\n        onVisible: React.PropTypes.func,\n    },\n\n    getDefaultProps: function() {\n        return {\n            whoIsTypingLimit: 2,\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            syncState: MatrixClientPeg.get().getSyncState(),\n            whoisTypingString: WhoIsTyping.whoIsTypingString(\n                this.props.room,\n                this.props.whoIsTypingLimit\n            ),\n        };\n    },\n\n    componentWillMount: function() {\n        MatrixClientPeg.get().on(\"sync\", this.onSyncStateChange);\n        MatrixClientPeg.get().on(\"RoomMember.typing\", this.onRoomMemberTyping);\n    },\n\n    componentDidUpdate: function(prevProps, prevState) {\n        if(this.props.onResize && this._checkForResize(prevProps, prevState)) {\n            this.props.onResize();\n        }\n\n        const size = this._getSize(this.state, this.props);\n        if (size > 0) {\n            this.props.onVisible();\n        } else {\n            if (this.hideDebouncer) {\n                clearTimeout(this.hideDebouncer);\n            }\n            this.hideDebouncer = setTimeout(() => {\n                this.props.onHidden();\n            }, HIDE_DEBOUNCE_MS);\n        }\n    },\n\n    componentWillUnmount: function() {\n        // we may have entirely lost our client as we're logging out before clicking login on the guest bar...\n        var client = MatrixClientPeg.get();\n        if (client) {\n            client.removeListener(\"sync\", this.onSyncStateChange);\n            client.removeListener(\"RoomMember.typing\", this.onRoomMemberTyping);\n        }\n    },\n\n    onSyncStateChange: function(state, prevState) {\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            return;\n        }\n        this.setState({\n            syncState: state\n        });\n    },\n\n    onRoomMemberTyping: function(ev, member) {\n        this.setState({\n            whoisTypingString: WhoIsTyping.whoIsTypingString(\n                this.props.room,\n                this.props.whoIsTypingLimit\n            ),\n        });\n    },\n\n    // We don't need the actual height - just whether it is likely to have\n    // changed - so we use '0' to indicate normal size, and other values to\n    // indicate other sizes.\n    _getSize: function(state, props) {\n        if (state.syncState === \"ERROR\" ||\n            state.whoisTypingString ||\n            props.numUnreadMessages ||\n            !props.atEndOfLiveTimeline ||\n            props.hasActiveCall) {\n            return STATUS_BAR_EXPANDED;\n        } else if (props.tabCompleteEntries) {\n            return STATUS_BAR_HIDDEN;\n        } else if (props.hasUnsentMessages) {\n            return STATUS_BAR_EXPANDED_LARGE;\n        }\n        return STATUS_BAR_HIDDEN;\n    },\n\n    // determine if we need to call onResize\n    _checkForResize: function(prevProps, prevState) {\n        // figure out the old height and the new height of the status bar.\n        return this._getSize(prevProps, prevState) !== this._getSize(this.props, this.state);\n    },\n\n    // return suitable content for the image on the left of the status bar.\n    //\n    // if wantPlaceholder is true, we include a \"...\" placeholder if\n    // there is nothing better to put in.\n    _getIndicator: function(wantPlaceholder) {\n        if (this.props.numUnreadMessages) {\n            return (\n                <div className=\"mx_RoomStatusBar_scrollDownIndicator\"\n                        onClick={ this.props.onScrollToBottomClick }>\n                    <img src=\"img/newmessages.svg\" width=\"24\" height=\"24\"\n                        alt=\"\"/>\n                </div>\n            );\n        }\n\n        if (!this.props.atEndOfLiveTimeline) {\n            return (\n                <div className=\"mx_RoomStatusBar_scrollDownIndicator\"\n                        onClick={ this.props.onScrollToBottomClick }>\n                    <img src=\"img/scrolldown.svg\" width=\"24\" height=\"24\"\n                        alt=\"Scroll to bottom of page\"\n                        title=\"Scroll to bottom of page\"/>\n                </div>\n            );\n        }\n\n        if (this.props.hasActiveCall) {\n            return (\n                <img src=\"img/sound-indicator.svg\" width=\"23\" height=\"20\"/>\n            );\n        }\n\n        if (this.state.syncState === \"ERROR\") {\n            return null;\n        }\n\n        if (wantPlaceholder) {\n            return (\n                <div className=\"mx_RoomStatusBar_typingIndicatorAvatars\">\n                    {this._renderTypingIndicatorAvatars(this.props.whoIsTypingLimit)}\n                </div>\n            );\n        }\n\n        return null;\n    },\n\n    _renderTypingIndicatorAvatars: function(limit) {\n        let users = WhoIsTyping.usersTypingApartFromMe(this.props.room);\n\n        let othersCount = Math.max(users.length - limit, 0);\n        users = users.slice(0, limit);\n\n        let avatars = users.map((u, index) => {\n            let showInitial = othersCount === 0 && index === users.length - 1;\n            return (\n                <MemberAvatar\n                    key={u.userId}\n                    member={u}\n                    width={24}\n                    height={24}\n                    resizeMethod=\"crop\"\n                    defaultToInitialLetter={showInitial}\n                />\n            );\n        });\n\n        if (othersCount > 0) {\n            avatars.push(\n                <span className=\"mx_RoomStatusBar_typingIndicatorRemaining\">\n                    +{othersCount}\n                </span>\n            );\n        }\n\n        return avatars;\n    },\n\n    // return suitable content for the main (text) part of the status bar.\n    _getContent: function() {\n        var TabCompleteBar = sdk.getComponent('rooms.TabCompleteBar');\n        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");\n        const EmojiText = sdk.getComponent('elements.EmojiText');\n\n        // no conn bar trumps unread count since you can't get unread messages\n        // without a connection! (technically may already have some but meh)\n        // It also trumps the \"some not sent\" msg since you can't resend without\n        // a connection!\n        if (this.state.syncState === \"ERROR\") {\n            return (\n                <div className=\"mx_RoomStatusBar_connectionLostBar\">\n                    <img src=\"img/warning.svg\" width=\"24\" height=\"23\" title=\"/!\\ \" alt=\"/!\\ \"/>\n                    <div className=\"mx_RoomStatusBar_connectionLostBar_title\">\n                        Connectivity to the server has been lost.\n                    </div>\n                    <div className=\"mx_RoomStatusBar_connectionLostBar_desc\">\n                        Sent messages will be stored until your connection has returned.\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.props.tabComplete.isTabCompleting()) {\n            return (\n                <div className=\"mx_RoomStatusBar_tabCompleteBar\">\n                    <div className=\"mx_RoomStatusBar_tabCompleteWrapper\">\n                        <TabCompleteBar tabComplete={this.props.tabComplete} />\n                        <div className=\"mx_RoomStatusBar_tabCompleteEol\" title=\"->|\">\n                            <TintableSvg src=\"img/eol.svg\" width=\"22\" height=\"16\"/>\n                            Auto-complete\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.props.hasUnsentMessages) {\n            return (\n                <div className=\"mx_RoomStatusBar_connectionLostBar\">\n                    <img src=\"img/warning.svg\" width=\"24\" height=\"23\" title=\"/!\\ \" alt=\"/!\\ \"/>\n                    <div className=\"mx_RoomStatusBar_connectionLostBar_title\">\n                        Some of your messages have not been sent.\n                    </div>\n                    <div className=\"mx_RoomStatusBar_connectionLostBar_desc\">\n                        <a className=\"mx_RoomStatusBar_resend_link\"\n                          onClick={ this.props.onResendAllClick }>\n                            Resend all\n                        </a> or <a\n                          className=\"mx_RoomStatusBar_resend_link\"\n                          onClick={ this.props.onCancelAllClick }>\n                            cancel all\n                        </a> now. You can also select individual messages to\n                        resend or cancel.\n                    </div>\n                </div>\n            );\n        }\n\n        // unread count trumps who is typing since the unread count is only\n        // set when you've scrolled up\n        if (this.props.numUnreadMessages) {\n            var unreadMsgs = this.props.numUnreadMessages + \" new message\" +\n                (this.props.numUnreadMessages > 1 ? \"s\" : \"\");\n\n            return (\n                <div className=\"mx_RoomStatusBar_unreadMessagesBar\"\n                        onClick={ this.props.onScrollToBottomClick }>\n                    {unreadMsgs}\n                </div>\n            );\n        }\n\n        var typingString = this.state.whoisTypingString;\n        if (typingString) {\n            return (\n                <div className=\"mx_RoomStatusBar_typingBar\">\n                    <EmojiText>{typingString}</EmojiText>\n                </div>\n            );\n        }\n\n        if (this.props.hasActiveCall) {\n            return (\n                <div className=\"mx_RoomStatusBar_callBar\">\n                    <b>Active call</b>\n                </div>\n            );\n        }\n\n        return null;\n    },\n\n\n    render: function() {\n        var content = this._getContent();\n        var indicator = this._getIndicator(this.state.whoisTypingString !== null);\n\n        return (\n            <div className=\"mx_RoomStatusBar\">\n                <div className=\"mx_RoomStatusBar_indicator\">\n                    {indicator}\n                </div>\n                {content}\n            </div>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/RoomView.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var React = require(\"react\");","fix":{"range":[741,744],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[771,774],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[808,811],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var classNames = require(\"classnames\");","fix":{"range":[830,833],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var Matrix = require(\"matrix-js-sdk\");","fix":{"range":[870,873],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../MatrixClientPeg\");","fix":{"range":[910,913],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var ContentMessages = require(\"../../ContentMessages\");","fix":{"range":[966,969],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../Modal\");","fix":{"range":[1022,1025],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../index');","fix":{"range":[1058,1061],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":32,"column":1,"nodeType":"VariableDeclaration","source":"var CallHandler = require('../../CallHandler');","fix":{"range":[1092,1095],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":1,"nodeType":"VariableDeclaration","source":"var TabComplete = require(\"../../TabComplete\");","fix":{"range":[1140,1143],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":1,"nodeType":"VariableDeclaration","source":"var Resend = require(\"../../Resend\");","fix":{"range":[1188,1191],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":35,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../dispatcher\");","fix":{"range":[1226,1229],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":1,"nodeType":"VariableDeclaration","source":"var Tinter = require(\"../../Tinter\");","fix":{"range":[1265,1268],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":1,"nodeType":"VariableDeclaration","source":"var rate_limited_func = require('../../ratelimitedfunc');","fix":{"range":[1303,1306],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'rate_limited_func' is not in camel case.","line":37,"column":5,"nodeType":"Identifier","source":"var rate_limited_func = require('../../ratelimitedfunc');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":38,"column":1,"nodeType":"VariableDeclaration","source":"var ObjectUtils = require('../../ObjectUtils');","fix":{"range":[1361,1364],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":39,"column":1,"nodeType":"VariableDeclaration","source":"var Rooms = require('../../Rooms');","fix":{"range":[1409,1412],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":45,"column":1,"nodeType":"VariableDeclaration","source":"var DEBUG = false;","fix":{"range":[1545,1548],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":5,"nodeType":"VariableDeclaration","source":"    var debuglog = console.log.bind(console);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":51,"column":5,"nodeType":"VariableDeclaration","source":"    var debuglog = function() {};"},{"ruleId":"no-redeclare","severity":2,"message":"'debuglog' is already defined.","line":51,"column":9,"nodeType":"Identifier","source":"    var debuglog = function() {};"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":168,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[6643,6643],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 176 exceeds the maximum line length of 90.","line":176,"column":1,"nodeType":"Program","source":"            MatrixClientPeg.get().getRoomIdForAlias(this.props.roomAddress).done((result) => {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":180,"column":17,"nodeType":"VariableDeclaration","source":"                var room = MatrixClientPeg.get().getRoom(result.room_id);","fix":{"range":[7236,7239],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":194,"column":13,"nodeType":"VariableDeclaration","source":"            var room = MatrixClientPeg.get().getRoom(this.props.roomAddress);","fix":{"range":[7753,7756],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":219,"column":9,"nodeType":"VariableDeclaration","source":"        var user_is_in_room = null;","fix":{"range":[9132,9135],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_is_in_room' is not in camel case.","line":219,"column":13,"nodeType":"Identifier","source":"        var user_is_in_room = null;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_is_in_room' is not in camel case.","line":221,"column":13,"nodeType":"Identifier","source":"            user_is_in_room = this.state.room.hasMembershipState("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":222,"column":65,"nodeType":"Literal","source":"                MatrixClientPeg.get().credentials.userId, 'join'","fix":{"range":[9321,9321],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_is_in_room' is not in camel case.","line":229,"column":14,"nodeType":"Identifier","source":"        if (!user_is_in_room && this.state.roomId) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_is_in_room' is not in camel case.","line":255,"column":20,"nodeType":"Identifier","source":"        } else if (user_is_in_room) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":262,"column":9,"nodeType":"VariableDeclaration","source":"        var call = this._getCallForRoom();","fix":{"range":[10821,10824],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":263,"column":9,"nodeType":"VariableDeclaration","source":"        var callState = call ? call.call_state : \"ended\";","fix":{"range":[10864,10867],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":265,"column":33,"nodeType":"Property","source":"            callState: callState","fix":{"range":[10970,10970],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":282,"column":9,"nodeType":"Punctuator","source":"        {","fix":{"range":[11583,11592],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":283,"column":13,"nodeType":"VariableDeclaration","source":"            var inviteBox = document.getElementById(\"mx_SearchableEntityList_query\");","fix":{"range":[11606,11609],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":310,"column":13,"nodeType":"VariableDeclaration","source":"            var roomView = ReactDOM.findDOMNode(this.refs.roomView);","fix":{"range":[12528,12531],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":335,"column":13,"nodeType":"VariableDeclaration","source":"            var roomView = ReactDOM.findDOMNode(this.refs.roomView);","fix":{"range":[13614,13617],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 345 exceeds the maximum line length of 90.","line":345,"column":1,"nodeType":"Program","source":"            MatrixClientPeg.get().removeListener(\"Room.accountData\", this.onRoomAccountData);"},{"ruleId":"max-len","severity":1,"message":"Line 346 exceeds the maximum line length of 90.","line":346,"column":1,"nodeType":"Program","source":"            MatrixClientPeg.get().removeListener(\"RoomState.members\", this.onRoomStateMember);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":400,"column":80,"nodeType":"Property","source":"                    hasUnsentMessages: this._hasUnsentMessages(this.state.room)","fix":{"range":[16138,16138],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":417,"column":17,"nodeType":"VariableDeclaration","source":"                var call = this._getCallForRoom();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":418,"column":17,"nodeType":"VariableDeclaration","source":"                var callState;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":422,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[16828,16845],"text":"                "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":432,"column":41,"nodeType":"Property","source":"                    callState: callState","fix":{"range":[17143,17143],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":465,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[18362,18375],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 490 exceeds the maximum line length of 90.","line":490,"column":1,"nodeType":"Program","source":"        var guestAccessEvent = room.currentState.getStateEvents(\"m.room.guest_access\", \"\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":490,"column":9,"nodeType":"VariableDeclaration","source":"        var guestAccessEvent = room.currentState.getStateEvents(\"m.room.guest_access\", \"\");","fix":{"range":[19246,19249],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 491 exceeds the maximum line length of 90.","line":491,"column":1,"nodeType":"Program","source":"        if (guestAccessEvent && guestAccessEvent.getContent().guest_access === \"can_join\") {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":493,"column":36,"nodeType":"Property","source":"                guestsCanJoin: true","fix":{"range":[19486,19486],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 497 exceeds the maximum line length of 90.","line":497,"column":1,"nodeType":"Program","source":"        var historyVisibility = room.currentState.getStateEvents(\"m.room.history_visibility\", \"\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":497,"column":9,"nodeType":"VariableDeclaration","source":"        var historyVisibility = room.currentState.getStateEvents(\"m.room.history_visibility\", \"\");","fix":{"range":[19522,19525],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 498 exceeds the maximum line length of 90.","line":498,"column":1,"nodeType":"Program","source":"        if (historyVisibility && historyVisibility.getContent().history_visibility === \"world_readable\") {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":500,"column":30,"nodeType":"Property","source":"                canPeek: true","fix":{"range":[19777,19777],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":509,"column":9,"nodeType":"VariableDeclaration","source":"        var roomPreviewUrls = room.getAccountData(\"org.matrix.room.preview_urls\");","fix":{"range":[19966,19969],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":512,"column":70,"nodeType":"Property","source":"                showUrlPreview: !roomPreviewUrls.getContent().disable","fix":{"range":[20223,20223],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 518 exceeds the maximum line length of 90.","line":518,"column":1,"nodeType":"Program","source":"        var userRoomPreviewUrls = MatrixClientPeg.get().getAccountData(\"org.matrix.preview_urls\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":518,"column":9,"nodeType":"VariableDeclaration","source":"        var userRoomPreviewUrls = MatrixClientPeg.get().getAccountData(\"org.matrix.preview_urls\");","fix":{"range":[20324,20327],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":521,"column":38,"nodeType":"Property","source":"                showUrlPreview: false","fix":{"range":[20559,20559],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 527 exceeds the maximum line length of 90.","line":527,"column":1,"nodeType":"Program","source":"        var roomStatePreviewUrls = room.currentState.getStateEvents('org.matrix.room.preview_urls', '');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":527,"column":9,"nodeType":"VariableDeclaration","source":"        var roomStatePreviewUrls = room.currentState.getStateEvents('org.matrix.room.preview_urls', '');","fix":{"range":[20653,20656],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":530,"column":38,"nodeType":"Property","source":"                showUrlPreview: false","fix":{"range":[20896,20896],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":537,"column":33,"nodeType":"Property","source":"            showUrlPreview: true","fix":{"range":[21044,21044],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":559,"column":9,"nodeType":"VariableDeclaration","source":"        var room = this.state.room;","fix":{"range":[21776,21779],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":562,"column":9,"nodeType":"VariableDeclaration","source":"        var color_scheme_event = room.getAccountData(\"org.matrix.room.color_scheme\");","fix":{"range":[21840,21843],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'color_scheme_event' is not in camel case.","line":562,"column":13,"nodeType":"Identifier","source":"        var color_scheme_event = room.getAccountData(\"org.matrix.room.color_scheme\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":563,"column":9,"nodeType":"VariableDeclaration","source":"        var color_scheme = {};","fix":{"range":[21926,21929],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'color_scheme' is not in camel case.","line":563,"column":13,"nodeType":"Identifier","source":"        var color_scheme = {};"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'color_scheme_event' is not in camel case.","line":564,"column":13,"nodeType":"Identifier","source":"        if (color_scheme_event) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'color_scheme' is not in camel case.","line":565,"column":13,"nodeType":"Identifier","source":"            color_scheme = color_scheme_event.getContent();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":581,"column":17,"nodeType":"VariableDeclaration","source":"                var color_scheme = event.getContent();","fix":{"range":[22620,22623],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'color_scheme' is not in camel case.","line":581,"column":21,"nodeType":"Identifier","source":"                var color_scheme = event.getContent();"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":585,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[22879,22892],"text":"            "}},{"ruleId":"new-cap","severity":1,"message":"A constructor name should not start with a lowercase letter.","line":608,"column":29,"nodeType":"NewExpression","source":"    _updateRoomMembers: new rate_limited_func(function() {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":611,"column":9,"nodeType":"ThisExpression","source":"        this._updateConfCallNotification();"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":614,"column":9,"nodeType":"ThisExpression","source":"        this.tabComplete.loadEntries(this.state.room);"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":614,"column":38,"nodeType":"ThisExpression","source":"        this.tabComplete.loadEntries(this.state.room);"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":615,"column":9,"nodeType":"ThisExpression","source":"        this._updateAutoComplete();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":620,"column":9,"nodeType":"VariableDeclaration","source":"        var me = MatrixClientPeg.get().credentials.userId;","fix":{"range":[23996,23999],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":621,"column":13,"nodeType":"ThisExpression","source":"        if (this.state.joining && this.state.room.hasMembershipState(me, \"join\")) {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":621,"column":35,"nodeType":"ThisExpression","source":"        if (this.state.joining && this.state.room.hasMembershipState(me, \"join\")) {"},{"ruleId":"max-len","severity":1,"message":"Line 625 exceeds the maximum line length of 90.","line":625,"column":1,"nodeType":"Program","source":"            const me = this.state.room.getMember(MatrixClientPeg.get().credentials.userId);"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":625,"column":24,"nodeType":"ThisExpression","source":"            const me = this.state.room.getMember(MatrixClientPeg.get().credentials.userId);"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":626,"column":50,"nodeType":"ThisExpression","source":"            if (Rooms.looksLikeDirectMessageRoom(this.state.room, me)) {"},{"ruleId":"max-len","severity":1,"message":"Line 630 exceeds the maximum line length of 90.","line":630,"column":1,"nodeType":"Program","source":"                Rooms.setDMRoom(this.state.room.roomId, me.events.member.getSender()).done();"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":630,"column":33,"nodeType":"ThisExpression","source":"                Rooms.setDMRoom(this.state.room.roomId, me.events.member.getSender()).done();"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":633,"column":13,"nodeType":"ThisExpression","source":"            this.setState({"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":634,"column":31,"nodeType":"Property","source":"                joining: false","fix":{"range":[24953,24953],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":651,"column":9,"nodeType":"VariableDeclaration","source":"        var room = this.state.room;","fix":{"range":[25372,25375],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":655,"column":9,"nodeType":"VariableDeclaration","source":"        var confMember = room.getMember(","fix":{"range":[25492,25495],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":656,"column":81,"nodeType":"CallExpression","source":"            this.props.ConferenceHandler.getConferenceUserIdForRoom(room.roomId)","fix":{"range":[25605,25605],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 662 exceeds the maximum line length of 90.","line":662,"column":1,"nodeType":"Program","source":"        var confCall = this.props.ConferenceHandler.getConferenceCallForRoom(confMember.roomId);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":662,"column":9,"nodeType":"VariableDeclaration","source":"        var confCall = this.props.ConferenceHandler.getConferenceCallForRoom(confMember.roomId);","fix":{"range":[25683,25686],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":670,"column":14,"nodeType":"Property","source":"            )","fix":{"range":[26104,26104],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":685,"column":13,"nodeType":"VariableDeclaration","source":"            var searchPromise = MatrixClientPeg.get().backPaginateRoomEventsSearch(","fix":{"range":[26471,26474],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":695,"column":9,"nodeType":"VariableDeclaration","source":"        var eventsToResend = this._getUnsentMessages(this.state.room);","fix":{"range":[26801,26804],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":702,"column":9,"nodeType":"VariableDeclaration","source":"        var eventsToResend = this._getUnsentMessages(this.state.room);","fix":{"range":[27010,27013],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":709,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[27233,27236],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":711,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[27259,27262],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":712,"column":9,"nodeType":"VariableDeclaration","source":"        var display_name_promise = q();","fix":{"range":[27300,27303],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'display_name_promise' is not in camel case.","line":712,"column":13,"nodeType":"Identifier","source":"        var display_name_promise = q();"},{"ruleId":"max-len","severity":1,"message":"Line 721 exceeds the maximum line length of 90.","line":721,"column":1,"nodeType":"Program","source":"            display_name_promise = cli.getProfileInfo(cli.credentials.userId).then((result) => {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'display_name_promise' is not in camel case.","line":721,"column":13,"nodeType":"Identifier","source":"            display_name_promise = cli.getProfileInfo(cli.credentials.userId).then((result) => {"},{"ruleId":"max-len","severity":1,"message":"Line 723 exceeds the maximum line length of 90.","line":723,"column":1,"nodeType":"Program","source":"                    var SetDisplayNameDialog = sdk.getComponent('views.dialogs.SetDisplayNameDialog');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":723,"column":21,"nodeType":"VariableDeclaration","source":"                    var SetDisplayNameDialog = sdk.getComponent('views.dialogs.SetDisplayNameDialog');","fix":{"range":[27997,28000],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":724,"column":21,"nodeType":"VariableDeclaration","source":"                    var dialog_defer = q.defer();","fix":{"range":[28100,28103],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'dialog_defer' is not in camel case.","line":724,"column":25,"nodeType":"Identifier","source":"                    var dialog_defer = q.defer();"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":732,"column":29,"nodeType":"Punctuator","source":"                            }","fix":{"range":[28576,28605],"text":"                            "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":736,"column":26,"nodeType":"Property","source":"                        }","fix":{"range":[28722,28722],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 746 exceeds the maximum line length of 90.","line":746,"column":1,"nodeType":"Program","source":"                const me = this.state.room.getMember(MatrixClientPeg.get().credentials.userId);"},{"ruleId":"max-len","severity":1,"message":"Line 751 exceeds the maximum line length of 90.","line":751,"column":1,"nodeType":"Program","source":"                        return Rooms.setDMRoom(this.state.room.roomId, me.events.member.getSender());"},{"ruleId":"max-len","severity":1,"message":"Line 758 exceeds the maximum line length of 90.","line":758,"column":1,"nodeType":"Program","source":"            var sign_url = this.props.thirdPartyInvite ? this.props.thirdPartyInvite.inviteSignUrl : undefined;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":758,"column":13,"nodeType":"VariableDeclaration","source":"            var sign_url = this.props.thirdPartyInvite ? this.props.thirdPartyInvite.inviteSignUrl : undefined;","fix":{"range":[29586,29589],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'sign_url' is not in camel case.","line":758,"column":17,"nodeType":"Identifier","source":"            var sign_url = this.props.thirdPartyInvite ? this.props.thirdPartyInvite.inviteSignUrl : undefined;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":762,"column":13,"nodeType":"VariableDeclaration","source":"            var roomId = resp.roomId;","fix":{"range":[29886,29889],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":772,"column":13,"nodeType":"VariableDeclaration","source":"            var room = MatrixClientPeg.get().getRoom(roomId);","fix":{"range":[30432,30435],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":781,"column":17,"nodeType":"VariableDeclaration","source":"                var me = MatrixClientPeg.get().credentials.userId;","fix":{"range":[30935,30938],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":784,"column":31,"nodeType":"Property","source":"                    room: room","fix":{"range":[31115,31115],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":790,"column":33,"nodeType":"Property","source":"                joinError: error","fix":{"range":[31277,31277],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 804 exceeds the maximum line length of 90.","line":804,"column":1,"nodeType":"Program","source":"                var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":804,"column":17,"nodeType":"VariableDeclaration","source":"                var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");","fix":{"range":[31768,31771],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 807 exceeds the maximum line length of 90.","line":807,"column":1,"nodeType":"Program","source":"                    description: \"This room is private or inaccessible to guests. You may be able to join if you register.\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":807,"column":124,"nodeType":"Property","source":"                    description: \"This room is private or inaccessible to guests. You may be able to join if you register.\"","fix":{"range":[32081,32081],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":810,"column":17,"nodeType":"VariableDeclaration","source":"                var msg = error.message ? error.message : JSON.stringify(error);","fix":{"range":[32139,32142],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":811,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[32220,32223],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":814,"column":37,"nodeType":"Property","source":"                    description: msg","fix":{"range":[32415,32415],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":820,"column":26,"nodeType":"Property","source":"            joining: true","fix":{"range":[32519,32519],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":830,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[32776,32785],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":845,"column":9,"nodeType":"VariableDeclaration","source":"        var items = ev.dataTransfer.items;","fix":{"range":[33087,33090],"text":"let"}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'draggingFile'.","line":848,"column":33,"nodeType":"Identifier","source":"                this.setState({ draggingFile : true });","fix":{"range":[33242,33243],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'draggingFile'.","line":857,"column":25,"nodeType":"Identifier","source":"        this.setState({ draggingFile : false });","fix":{"range":[33461,33462],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":858,"column":9,"nodeType":"VariableDeclaration","source":"        var files = ev.dataTransfer.files;","fix":{"range":[33482,33485],"text":"let"}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'draggingFile'.","line":867,"column":25,"nodeType":"Identifier","source":"        this.setState({ draggingFile : false });","fix":{"range":[33739,33740],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":871,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[33801,33804],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'self' is assigned a value but never used.","line":871,"column":13,"nodeType":"Identifier","source":"        var self = this;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":874,"column":13,"nodeType":"VariableDeclaration","source":"            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");","fix":{"range":[33878,33881],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":877,"column":90,"nodeType":"Property","source":"                description: \"Guest users can't upload files. Please register to upload.\"","fix":{"range":[34141,34141],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":883,"column":64,"nodeType":"CallExpression","source":"            file, this.state.room.roomId, MatrixClientPeg.get()","fix":{"range":[34295,34295],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":885,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[34352,34355],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":888,"column":46,"nodeType":"Property","source":"                description: error.toString()","fix":{"range":[34550,34550],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":913,"column":9,"nodeType":"VariableDeclaration","source":"        var filter;","fix":{"range":[35258,35261],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":918,"column":43,"nodeType":"MemberExpression","source":"                    this.state.room.roomId","fix":{"range":[35515,35515],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":919,"column":18,"nodeType":"Property","source":"                ]","fix":{"range":[35533,35533],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":925,"column":9,"nodeType":"VariableDeclaration","source":"        var searchPromise = MatrixClientPeg.get().searchRoomEvents({","fix":{"range":[35613,35616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":933,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[35861,35864],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":937,"column":9,"nodeType":"VariableDeclaration","source":"        var localSearchId = this.searchId;","fix":{"range":[36037,36040],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 945 exceeds the maximum line length of 90.","line":945,"column":1,"nodeType":"Program","source":"            if (self.unmounted || !self.state.searching || self.searchId != localSearchId) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":956,"column":13,"nodeType":"VariableDeclaration","source":"            var highlights = results.highlights;","fix":{"range":[36744,36747],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.","line":964,"column":45,"nodeType":"Punctuator","source":"                return b.length - a.length; });","fix":{"range":[37134,37134],"text":"\n"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":971,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[37310,37313],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":974,"column":46,"nodeType":"Property","source":"                description: error.toString()","fix":{"range":[37500,37500],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":978,"column":40,"nodeType":"Property","source":"                searchInProgress: false","fix":{"range":[37616,37616],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":984,"column":9,"nodeType":"VariableDeclaration","source":"        var EventTile = sdk.getComponent('rooms.EventTile');","fix":{"range":[37700,37703],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":985,"column":9,"nodeType":"VariableDeclaration","source":"        var SearchResultTile = sdk.getComponent('rooms.SearchResultTile');","fix":{"range":[37761,37764],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":986,"column":9,"nodeType":"VariableDeclaration","source":"        var Spinner = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[37836,37839],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":988,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[37897,37900],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":998,"column":9,"nodeType":"VariableDeclaration","source":"        var ret = [];","fix":{"range":[38177,38180],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1010,"column":31,"nodeType":"JSXElement","source":"                         </li>","fix":{"range":[38638,38638],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1015,"column":31,"nodeType":"JSXElement","source":"                         </li>","fix":{"range":[38855,38855],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1022,"column":9,"nodeType":"VariableDeclaration","source":"        var onWidgetLoad = () => {","fix":{"range":[39034,39037],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1023,"column":13,"nodeType":"VariableDeclaration","source":"            var scrollPanel = this.refs.searchResultsPanel;","fix":{"range":[39073,39076],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1029,"column":9,"nodeType":"VariableDeclaration","source":"        var lastRoomId;","fix":{"range":[39229,39232],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1031,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = this.state.searchResults.results.length - 1; i >= 0; i--) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1032,"column":13,"nodeType":"VariableDeclaration","source":"            var result = this.state.searchResults.results[i];","fix":{"range":[39339,39342],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1034,"column":13,"nodeType":"VariableDeclaration","source":"            var mxEv = result.context.getEvent();","fix":{"range":[39402,39405],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1035,"column":13,"nodeType":"VariableDeclaration","source":"            var roomId = mxEv.getRoomId();","fix":{"range":[39452,39455],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1045,"column":21,"nodeType":"VariableDeclaration","source":"                    var room = cli.getRoom(roomId);","fix":{"range":[39819,39822],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1051,"column":21,"nodeType":"VariableDeclaration","source":"                    var roomName = room ? room.name : \"Unknown room \"+roomId;","fix":{"range":[40170,40173],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1060,"column":13,"nodeType":"VariableDeclaration","source":"            var resultLink = \"#/room/\"+roomId+\"/\"+mxEv.getId();","fix":{"range":[40476,40479],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1082,"column":9,"nodeType":"VariableDeclaration","source":"        var newName = this.refs.header.getEditedName();","fix":{"range":[41080,41083],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1086,"column":9,"nodeType":"VariableDeclaration","source":"        var newTopic = this.refs.header.getEditedTopic();","fix":{"range":[41237,41240],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 1092 exceeds the maximum line length of 90.","line":1092,"column":1,"nodeType":"Program","source":"            var fails = results.filter(function(result) { return result.state !== \"fulfilled\"; });"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1092,"column":13,"nodeType":"VariableDeclaration","source":"            var fails = results.filter(function(result) { return result.state !== \"fulfilled\"; });","fix":{"range":[41463,41466],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1098,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[41789,41792],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 1101 exceeds the maximum line length of 90.","line":1101,"column":1,"nodeType":"Program","source":"                    description: fails.map(function(result) { return result.reason; }).join(\"\\n\"),"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":1104,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[42131,42144],"text":"            "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1107,"column":47,"nodeType":"Property","source":"                    editingRoomSettings: false","fix":{"range":[42229,42229],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1113,"column":43,"nodeType":"Property","source":"                editingRoomSettings: false","fix":{"range":[42407,42407],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1135,"column":13,"nodeType":"VariableDeclaration","source":"            var errCode = err.errcode || \"unknown error code\";","fix":{"range":[42984,42987],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1136,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[43047,43050],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1139,"column":66,"nodeType":"Property","source":"                description: `Failed to forget room (${errCode})`","fix":{"range":[43249,43249],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1145,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[43336,43339],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1147,"column":28,"nodeType":"Property","source":"            rejecting: true","fix":{"range":[43404,43404],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1152,"column":33,"nodeType":"Property","source":"                rejecting: false","fix":{"range":[43606,43606],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1157,"column":13,"nodeType":"VariableDeclaration","source":"            var msg = error.message ? error.message : JSON.stringify(error);","fix":{"range":[43730,43733],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1158,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[43807,43810],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1161,"column":33,"nodeType":"Property","source":"                description: msg","fix":{"range":[43994,43994],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1166,"column":35,"nodeType":"Property","source":"                rejectError: error","fix":{"range":[44108,44108],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1214,"column":9,"nodeType":"VariableDeclaration","source":"        var pos = this.refs.messagePanel.getReadMarkerPosition();","fix":{"range":[45449,45452],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1218,"column":9,"nodeType":"VariableDeclaration","source":"        var showBar = (pos < 0);","fix":{"range":[45611,45614],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1234,"column":9,"nodeType":"VariableDeclaration","source":"        var roomId = this.state.room.roomId;","fix":{"range":[46106,46109],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1236,"column":9,"nodeType":"VariableDeclaration","source":"        var state = this._getScrollState();","fix":{"range":[46152,46155],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1245,"column":9,"nodeType":"VariableDeclaration","source":"        var messagePanel = this.refs.messagePanel;","fix":{"range":[46410,46413],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1260,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollState = messagePanel.getScrollState();","fix":{"range":[47018,47021],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1287,"column":9,"nodeType":"VariableDeclaration","source":"        var auxPanelMaxHeight = window.innerHeight -","fix":{"range":[48266,48269],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":1306,"column":29,"nodeType":"Property","source":"            fullscreen: true","fix":{"range":[49161,49161],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1311,"column":9,"nodeType":"VariableDeclaration","source":"        var call = this._getCallForRoom();","fix":{"range":[49231,49234],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1315,"column":9,"nodeType":"VariableDeclaration","source":"        var newState = !call.isMicrophoneMuted();","fix":{"range":[49325,49328],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1321,"column":9,"nodeType":"VariableDeclaration","source":"        var call = this._getCallForRoom();","fix":{"range":[49527,49530],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1325,"column":9,"nodeType":"VariableDeclaration","source":"        var newState = !call.isLocalVideoMuted();","fix":{"range":[49621,49624],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'ev'.","line":1355,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1361,"column":9,"nodeType":"VariableDeclaration","source":"        var panel;","fix":{"range":[50551,50554],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":1373,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1402,"column":9,"nodeType":"VariableDeclaration","source":"        var RoomHeader = sdk.getComponent('rooms.RoomHeader');","fix":{"range":[51772,51775],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1403,"column":9,"nodeType":"VariableDeclaration","source":"        var MessageComposer = sdk.getComponent('rooms.MessageComposer');","fix":{"range":[51835,51838],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1404,"column":9,"nodeType":"VariableDeclaration","source":"        var RoomSettings = sdk.getComponent(\"rooms.RoomSettings\");","fix":{"range":[51908,51911],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1405,"column":9,"nodeType":"VariableDeclaration","source":"        var AuxPanel = sdk.getComponent(\"rooms.AuxPanel\");","fix":{"range":[51975,51978],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1406,"column":9,"nodeType":"VariableDeclaration","source":"        var SearchBar = sdk.getComponent(\"rooms.SearchBar\");","fix":{"range":[52034,52037],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1407,"column":9,"nodeType":"VariableDeclaration","source":"        var ScrollPanel = sdk.getComponent(\"structures.ScrollPanel\");","fix":{"range":[52095,52098],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1408,"column":9,"nodeType":"VariableDeclaration","source":"        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");","fix":{"range":[52165,52168],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1409,"column":9,"nodeType":"VariableDeclaration","source":"        var RoomPreviewBar = sdk.getComponent(\"rooms.RoomPreviewBar\");","fix":{"range":[52233,52236],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1410,"column":9,"nodeType":"VariableDeclaration","source":"        var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[52304,52307],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1411,"column":9,"nodeType":"VariableDeclaration","source":"        var TimelinePanel = sdk.getComponent(\"structures.TimelinePanel\");","fix":{"range":[52363,52366],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":1420,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[52701,52718],"text":"                "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1422,"column":21,"nodeType":"VariableDeclaration","source":"                    var inviterName = undefined;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1426,"column":21,"nodeType":"VariableDeclaration","source":"                    var invitedEmail = undefined;"},{"ruleId":"max-len","severity":1,"message":"Line 1433 exceeds the maximum line length of 90.","line":1433,"column":1,"nodeType":"Program","source":"                    var room_alias = this.props.roomAddress[0] == '#' ? this.props.roomAddress : null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1433,"column":21,"nodeType":"VariableDeclaration","source":"                    var room_alias = this.props.roomAddress[0] == '#' ? this.props.roomAddress : null;","fix":{"range":[53313,53316],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":1433,"column":25,"nodeType":"Identifier","source":"                    var room_alias = this.props.roomAddress[0] == '#' ? this.props.roomAddress : null;"},{"ruleId":"max-len","severity":1,"message":"Line 1443 exceeds the maximum line length of 90.","line":1443,"column":1,"nodeType":"Program","source":"                                                onRejectClick={ this.onRejectThreepidInviteButtonClicked }"},{"ruleId":"max-len","severity":1,"message":"Line 1444 exceeds the maximum line length of 90.","line":1444,"column":1,"nodeType":"Program","source":"                                                canPreview={ false } error={ this.state.roomLoadError }"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":1445,"column":60,"nodeType":"Identifier","source":"                                                roomAlias={room_alias}"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1458,"column":9,"nodeType":"VariableDeclaration","source":"        var myUserId = MatrixClientPeg.get().credentials.userId;","fix":{"range":[54726,54729],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1459,"column":9,"nodeType":"VariableDeclaration","source":"        var myMember = this.state.room.getMember(myUserId);","fix":{"range":[54791,54794],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1468,"column":17,"nodeType":"VariableDeclaration","source":"                var inviteEvent = myMember.events.member;","fix":{"range":[55157,55160],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 1469 exceeds the maximum line length of 90.","line":1469,"column":1,"nodeType":"Program","source":"                var inviterName = inviteEvent.sender ? inviteEvent.sender.name : inviteEvent.getSender();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1469,"column":17,"nodeType":"VariableDeclaration","source":"                var inviterName = inviteEvent.sender ? inviteEvent.sender.name : inviteEvent.getSender();"},{"ruleId":"no-redeclare","severity":2,"message":"'inviterName' is already defined.","line":1469,"column":21,"nodeType":"Identifier","source":"                var inviterName = inviteEvent.sender ? inviteEvent.sender.name : inviteEvent.getSender();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1501,"column":9,"nodeType":"VariableDeclaration","source":"        var call = this._getCallForRoom();","fix":{"range":[56774,56777],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1502,"column":9,"nodeType":"VariableDeclaration","source":"        var inCall = false;","fix":{"range":[56817,56820],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 1503 exceeds the maximum line length of 90.","line":1503,"column":1,"nodeType":"Program","source":"        if (call && (this.state.callState !== 'ended' && this.state.callState !== 'ringing')) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1507,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollheader_classes = classNames({","fix":{"range":[56979,56982],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'scrollheader_classes' is not in camel case.","line":1507,"column":13,"nodeType":"Identifier","source":"        var scrollheader_classes = classNames({"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1511,"column":9,"nodeType":"VariableDeclaration","source":"        var statusBar;","fix":{"range":[57084,57087],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1515,"column":13,"nodeType":"VariableDeclaration","source":"            var UploadBar = sdk.getComponent('structures.UploadBar');","fix":{"range":[57215,57218],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1518,"column":13,"nodeType":"VariableDeclaration","source":"            var RoomStatusBar = sdk.getComponent('structures.RoomStatusBar');","fix":{"range":[57395,57398],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1537,"column":9,"nodeType":"VariableDeclaration","source":"        var aux = null;","fix":{"range":[58286,58289],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 1539 exceeds the maximum line length of 90.","line":1539,"column":1,"nodeType":"Program","source":"            aux = <RoomSettings ref=\"room_settings\" onSaveClick={this.onSettingsSaveClick} onCancelClick={this.onCancelClick} room={this.state.room} />;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":1540,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[58510,58519],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":1543,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[58602,58611],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 1545 exceeds the maximum line length of 90.","line":1545,"column":1,"nodeType":"Program","source":"            aux = <SearchBar ref=\"search_bar\" searchInProgress={this.state.searchInProgress } onCancelClick={this.onCancelSearchClick} onSearch={this.onSearch}/>;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":1546,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[58816,58825],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1550,"column":13,"nodeType":"VariableDeclaration","source":"            var inviterName = undefined;"},{"ruleId":"no-redeclare","severity":2,"message":"'inviterName' is already defined.","line":1550,"column":17,"nodeType":"Identifier","source":"            var inviterName = undefined;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1554,"column":13,"nodeType":"VariableDeclaration","source":"            var invitedEmail = undefined;"},{"ruleId":"no-redeclare","severity":2,"message":"'invitedEmail' is already defined.","line":1554,"column":17,"nodeType":"Identifier","source":"            var invitedEmail = undefined;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1570,"column":9,"nodeType":"VariableDeclaration","source":"        var auxPanel = (","fix":{"range":[59882,59885],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":1581,"column":9,"nodeType":"VariableDeclaration","source":"        var messageComposer, searchInfo;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1581,"column":9,"nodeType":"VariableDeclaration","source":"        var messageComposer, searchInfo;","fix":{"range":[60327,60330],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1582,"column":9,"nodeType":"VariableDeclaration","source":"        var canSpeak = (","fix":{"range":[60368,60371],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 1589 exceeds the maximum line length of 90.","line":1589,"column":1,"nodeType":"Program","source":"                    room={this.state.room} onResize={this.onChildResize} uploadFile={this.uploadFile}"},{"ruleId":"max-len","severity":1,"message":"Line 1590 exceeds the maximum line length of 90.","line":1590,"column":1,"nodeType":"Program","source":"                    callState={this.state.callState} tabComplete={this.tabComplete} opacity={ this.props.opacity }/>;"},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'searchTerm'.","line":1597,"column":17,"nodeType":"Identifier","source":"                searchTerm : this.state.searchTerm,","fix":{"range":[61081,61082],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'searchScope'.","line":1598,"column":17,"nodeType":"Identifier","source":"                searchScope : this.state.searchScope,","fix":{"range":[61134,61135],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'searchCount'.","line":1599,"column":17,"nodeType":"Identifier","source":"                searchCount : this.state.searchResults.count,","fix":{"range":[61188,61189],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1604,"column":13,"nodeType":"VariableDeclaration","source":"            var zoomButton, voiceMuteButton, videoMuteButton;","fix":{"range":[61283,61286],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":1604,"column":13,"nodeType":"VariableDeclaration","source":"            var zoomButton, voiceMuteButton, videoMuteButton;"},{"ruleId":"max-len","severity":1,"message":"Line 1608 exceeds the maximum line length of 90.","line":1608,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_RoomView_voipButton\" onClick={this.onFullscreenClick} title=\"Fill screen\">"},{"ruleId":"max-len","severity":1,"message":"Line 1609 exceeds the maximum line length of 90.","line":1609,"column":1,"nodeType":"Program","source":"                        <TintableSvg src=\"img/fullscreen.svg\" width=\"29\" height=\"22\" style={{ marginTop: 1, marginRight: 4 }}/>"},{"ruleId":"max-len","severity":1,"message":"Line 1614 exceeds the maximum line length of 90.","line":1614,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_RoomView_voipButton\" onClick={this.onMuteVideoClick}>"},{"ruleId":"max-len","severity":1,"message":"Line 1615 exceeds the maximum line length of 90.","line":1615,"column":1,"nodeType":"Program","source":"                        <img src={call.isLocalVideoMuted() ? \"img/video-unmute.svg\" : \"img/video-mute.svg\"}"},{"ruleId":"max-len","severity":1,"message":"Line 1616 exceeds the maximum line length of 90.","line":1616,"column":1,"nodeType":"Program","source":"                             alt={call.isLocalVideoMuted() ? \"Click to unmute video\" : \"Click to mute video\"}"},{"ruleId":"max-len","severity":1,"message":"Line 1622 exceeds the maximum line length of 90.","line":1622,"column":1,"nodeType":"Program","source":"                    <img src={call.isMicrophoneMuted() ? \"img/voice-unmute.svg\" : \"img/voice-mute.svg\"}"},{"ruleId":"max-len","severity":1,"message":"Line 1623 exceeds the maximum line length of 90.","line":1623,"column":1,"nodeType":"Program","source":"                         alt={call.isMicrophoneMuted() ? \"Click to unmute audio\" : \"Click to mute audio\"}"},{"ruleId":"max-len","severity":1,"message":"Line 1634 exceeds the maximum line length of 90.","line":1634,"column":1,"nodeType":"Program","source":"                    <TintableSvg className=\"mx_RoomView_voipChevron\" src=\"img/voip-chevron.svg\" width=\"22\" height=\"17\"/>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1640,"column":9,"nodeType":"VariableDeclaration","source":"        var searchResultsPanel;","fix":{"range":[63155,63158],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1641,"column":9,"nodeType":"VariableDeclaration","source":"        var hideMessagePanel = false;","fix":{"range":[63187,63190],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'scrollheader_classes' is not in camel case.","line":1651,"column":36,"nodeType":"Identifier","source":"                    <li className={scrollheader_classes}></li>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1660,"column":9,"nodeType":"VariableDeclaration","source":"        var messagePanel = (","fix":{"range":[63965,63968],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1676,"column":9,"nodeType":"VariableDeclaration","source":"        var topUnreadMessagesBar = null;","fix":{"range":[64737,64740],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1678,"column":13,"nodeType":"VariableDeclaration","source":"            var TopUnreadMessagesBar = sdk.getComponent('rooms.TopUnreadMessagesBar');","fix":{"range":[64833,64836],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 1680 exceeds the maximum line length of 90.","line":1680,"column":1,"nodeType":"Program","source":"                <div className=\"mx_RoomView_topUnreadMessagesBar mx_fadable\" style={{ opacity: this.props.opacity }}>"},{"ruleId":"max-len","severity":1,"message":"Line 1694 exceeds the maximum line length of 90.","line":1694,"column":1,"nodeType":"Program","source":"            <div className={ \"mx_RoomView\" + (inCall ? \" mx_RoomView_inCall\" : \"\") } ref=\"roomView\">"},{"ruleId":"max-len","severity":1,"message":"Line 1705 exceeds the maximum line length of 90.","line":1705,"column":1,"nodeType":"Program","source":"                        (myMember && myMember.membership === \"leave\") ? this.onForgetClick : null"},{"ruleId":"max-len","severity":1,"message":"Line 1708 exceeds the maximum line length of 90.","line":1708,"column":1,"nodeType":"Program","source":"                        (myMember && myMember.membership === \"join\") ? this.onLeaveClick : null"}],"errorCount":52,"warningCount":224,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// TODO: This component is enormous! There's several things which could stand-alone:\n//  - Search results component\n//  - Drag and drop\n//  - File uploading - uploadFile()\n\nvar React = require(\"react\");\nvar ReactDOM = require(\"react-dom\");\nvar q = require(\"q\");\nvar classNames = require(\"classnames\");\nvar Matrix = require(\"matrix-js-sdk\");\n\nvar MatrixClientPeg = require(\"../../MatrixClientPeg\");\nvar ContentMessages = require(\"../../ContentMessages\");\nvar Modal = require(\"../../Modal\");\nvar sdk = require('../../index');\nvar CallHandler = require('../../CallHandler');\nvar TabComplete = require(\"../../TabComplete\");\nvar Resend = require(\"../../Resend\");\nvar dis = require(\"../../dispatcher\");\nvar Tinter = require(\"../../Tinter\");\nvar rate_limited_func = require('../../ratelimitedfunc');\nvar ObjectUtils = require('../../ObjectUtils');\nvar Rooms = require('../../Rooms');\n\nimport KeyCode from '../../KeyCode';\n\nimport UserProvider from '../../autocomplete/UserProvider';\n\nvar DEBUG = false;\n\nif (DEBUG) {\n    // using bind means that we get to keep useful line numbers in the console\n    var debuglog = console.log.bind(console);\n} else {\n    var debuglog = function() {};\n}\n\nmodule.exports = React.createClass({\n    displayName: 'RoomView',\n    propTypes: {\n        ConferenceHandler: React.PropTypes.any,\n\n        // Either a room ID or room alias for the room to display.\n        // If the room is being displayed as a result of the user clicking\n        // on a room alias, the alias should be supplied. Otherwise, a room\n        // ID should be supplied.\n        roomAddress: React.PropTypes.string.isRequired,\n\n        // If a room alias is passed to roomAddress, a function can be\n        // provided here that will be called with the ID of the room\n        // once it has been resolved.\n        onRoomIdResolved: React.PropTypes.func,\n\n        // An object representing a third party invite to join this room\n        // Fields:\n        // * inviteSignUrl (string) The URL used to join this room from an email invite\n        //                          (given as part of the link in the invite email)\n        // * invitedEmail (string) The email address that was invited to this room\n        thirdPartyInvite: React.PropTypes.object,\n\n        // Any data about the room that would normally come from the Home Server\n        // but has been passed out-of-band, eg. the room name and avatar URL\n        // from an email invite (a workaround for the fact that we can't\n        // get this information from the HS using an email invite).\n        // Fields:\n        //  * name (string) The room's name\n        //  * avatarUrl (string) The mxc:// avatar URL for the room\n        //  * inviterName (string) The display name of the person who\n        //  *                      invited us tovthe room\n        oobData: React.PropTypes.object,\n\n        // id of an event to jump to. If not given, will go to the end of the\n        // live timeline.\n        eventId: React.PropTypes.string,\n\n        // where to position the event given by eventId, in pixels from the\n        // bottom of the viewport. If not given, will try to put the event\n        // 1/3 of the way down the viewport.\n        eventPixelOffset: React.PropTypes.number,\n\n        // ID of an event to highlight. If undefined, no event will be highlighted.\n        // Typically this will either be the same as 'eventId', or undefined.\n        highlightedEventId: React.PropTypes.string,\n\n        // is the RightPanel collapsed?\n        collapsedRhs: React.PropTypes.bool,\n\n        // a map from room id to scroll state, which will be updated on unmount.\n        //\n        // If there is no special scroll state (ie, we are following the live\n        // timeline), the scroll state is null. Otherwise, it is an object with\n        // the following properties:\n        //\n        //    focussedEvent: the ID of the 'focussed' event. Typically this is\n        //        the last event fully visible in the viewport, though if we\n        //        have done an explicit scroll to an explicit event, it will be\n        //        that event.\n        //\n        //    pixelOffset: the number of pixels the window is scrolled down\n        //        from the focussedEvent.\n        scrollStateMap: React.PropTypes.object,\n    },\n\n    getInitialState: function() {\n        return {\n            room: null,\n            roomId: null,\n            roomLoading: true,\n            editingRoomSettings: false,\n            uploadingRoomSettings: false,\n            numUnreadMessages: 0,\n            draggingFile: false,\n            searching: false,\n            searchResults: null,\n            hasUnsentMessages: false,\n            callState: null,\n            guestsCanJoin: false,\n            canPeek: false,\n\n            // error object, as from the matrix client/server API\n            // If we failed to load information about the room,\n            // store the error here.\n            roomLoadError: null,\n\n            // this is true if we are fully scrolled-down, and are looking at\n            // the end of the live timeline. It has the effect of hiding the\n            // 'scroll to bottom' knob, among a couple of other things.\n            atEndOfLiveTimeline: true,\n\n            showTopUnreadMessagesBar: false,\n\n            auxPanelMaxHeight: undefined,\n\n            statusBarVisible: false,\n        };\n    },\n\n    componentWillMount: function() {\n        this.dispatcherRef = dis.register(this.onAction);\n        MatrixClientPeg.get().on(\"Room\", this.onRoom);\n        MatrixClientPeg.get().on(\"Room.timeline\", this.onRoomTimeline);\n        MatrixClientPeg.get().on(\"Room.accountData\", this.onRoomAccountData);\n        MatrixClientPeg.get().on(\"RoomState.members\", this.onRoomStateMember);\n        MatrixClientPeg.get().on(\"accountData\", this.onAccountData);\n\n        this.tabComplete = new TabComplete({\n            allowLooping: false,\n            autoEnterTabComplete: true,\n            onClickCompletes: true,\n            onStateChange: (isCompleting) => {\n                this.forceUpdate();\n            }\n        });\n\n        if (this.props.roomAddress[0] == '#') {\n            // we always look up the alias from the directory server:\n            // we want the room that the given alias is pointing to\n            // right now. We may have joined that alias before but there's\n            // no guarantee the alias hasn't subsequently been remapped.\n            MatrixClientPeg.get().getRoomIdForAlias(this.props.roomAddress).done((result) => {\n                if (this.props.onRoomIdResolved) {\n                    this.props.onRoomIdResolved(result.room_id);\n                }\n                var room = MatrixClientPeg.get().getRoom(result.room_id);\n                this.setState({\n                    room: room,\n                    roomId: result.room_id,\n                    roomLoading: !room,\n                    hasUnsentMessages: this._hasUnsentMessages(room),\n                }, this._onHaveRoom);\n            }, (err) => {\n                this.setState({\n                    roomLoading: false,\n                    roomLoadError: err,\n                });\n            });\n        } else {\n            var room = MatrixClientPeg.get().getRoom(this.props.roomAddress);\n            this.setState({\n                roomId: this.props.roomAddress,\n                room: room,\n                roomLoading: !room,\n                hasUnsentMessages: this._hasUnsentMessages(room),\n            }, this._onHaveRoom);\n        }\n    },\n\n    _onHaveRoom: function() {\n        // if this is an unknown room then we're in one of three states:\n        // - This is a room we can peek into (search engine) (we can /peek)\n        // - This is a room we can publicly join or were invited to. (we can /join)\n        // - This is a room we cannot join at all. (no action can help us)\n        // We can't try to /join because this may implicitly accept invites (!)\n        // We can /peek though. If it fails then we present the join UI. If it\n        // succeeds then great, show the preview (but we still may be able to /join!).\n        // Note that peeking works by room ID and room ID only, as opposed to joining\n        // which must be by alias or invite wherever possible (peeking currently does\n        // not work over federation).\n\n        // NB. We peek if we are not in the room, although if we try to peek into\n        // a room in which we have a member event (ie. we've left) synapse will just\n        // send us the same data as we get in the sync (ie. the last events we saw).\n        var user_is_in_room = null;\n        if (this.state.room) {\n            user_is_in_room = this.state.room.hasMembershipState(\n                MatrixClientPeg.get().credentials.userId, 'join'\n            );\n\n            this._updateAutoComplete();\n            this.tabComplete.loadEntries(this.state.room);\n        }\n\n        if (!user_is_in_room && this.state.roomId) {\n            if (this.props.autoJoin) {\n                this.onJoinButtonClicked();\n            } else if (this.state.roomId) {\n                console.log(\"Attempting to peek into room %s\", this.state.roomId);\n\n                MatrixClientPeg.get().peekInRoom(this.state.roomId).then((room) => {\n                    this.setState({\n                        room: room,\n                        roomLoading: false,\n                    });\n                    this._onRoomLoaded(room);\n                }, (err) => {\n                    // This won't necessarily be a MatrixError, but we duck-type\n                    // here and say if it's got an 'errcode' key with the right value,\n                    // it means we can't peek.\n                    if (err.errcode == \"M_GUEST_ACCESS_FORBIDDEN\") {\n                        // This is fine: the room just isn't peekable (we assume).\n                        this.setState({\n                            roomLoading: false,\n                        });\n                    } else {\n                        throw err;\n                    }\n                }).done();\n            }\n        } else if (user_is_in_room) {\n            MatrixClientPeg.get().stopPeeking();\n            this._onRoomLoaded(this.state.room);\n        }\n    },\n\n    componentDidMount: function() {\n        var call = this._getCallForRoom();\n        var callState = call ? call.call_state : \"ended\";\n        this.setState({\n            callState: callState\n        });\n\n        this._updateConfCallNotification();\n\n        window.addEventListener('resize', this.onResize);\n        this.onResize();\n\n        document.addEventListener(\"keydown\", this.onKeyDown);\n\n        // XXX: EVIL HACK to autofocus inviting on empty rooms.\n        // We use the setTimeout to avoid racing with focus_composer.\n        if (this.state.room &&\n            this.state.room.getJoinedMembers().length == 1 &&\n            this.state.room.getLiveTimeline() &&\n            this.state.room.getLiveTimeline().getEvents() &&\n            this.state.room.getLiveTimeline().getEvents().length <= 6)\n        {\n            var inviteBox = document.getElementById(\"mx_SearchableEntityList_query\");\n            setTimeout(function() {\n                if (inviteBox) {\n                    inviteBox.focus();\n                }\n            }, 50);\n        }\n    },\n\n    componentWillReceiveProps: function(newProps) {\n        if (newProps.roomAddress != this.props.roomAddress) {\n            throw new Error(\"changing room on a RoomView is not supported\");\n        }\n\n        if (newProps.eventId != this.props.eventId) {\n            // when we change focussed event id, hide the search results.\n            this.setState({searchResults: null});\n        }\n    },\n\n    shouldComponentUpdate: function(nextProps, nextState) {\n        return (!ObjectUtils.shallowEqual(this.props, nextProps) ||\n                !ObjectUtils.shallowEqual(this.state, nextState));\n    },\n\n    componentDidUpdate: function() {\n        if (this.refs.roomView) {\n            var roomView = ReactDOM.findDOMNode(this.refs.roomView);\n            if (!roomView.ondrop) {\n                roomView.addEventListener('drop', this.onDrop);\n                roomView.addEventListener('dragover', this.onDragOver);\n                roomView.addEventListener('dragleave', this.onDragLeaveOrEnd);\n                roomView.addEventListener('dragend', this.onDragLeaveOrEnd);\n            }\n        }\n    },\n\n    componentWillUnmount: function() {\n        // set a boolean to say we've been unmounted, which any pending\n        // promises can use to throw away their results.\n        //\n        // (We could use isMounted, but facebook have deprecated that.)\n        this.unmounted = true;\n\n        // update the scroll map before we get unmounted\n        this._updateScrollMap();\n\n        if (this.refs.roomView) {\n            // disconnect the D&D event listeners from the room view. This\n            // is really just for hygiene - we're going to be\n            // deleted anyway, so it doesn't matter if the event listeners\n            // don't get cleaned up.\n            var roomView = ReactDOM.findDOMNode(this.refs.roomView);\n            roomView.removeEventListener('drop', this.onDrop);\n            roomView.removeEventListener('dragover', this.onDragOver);\n            roomView.removeEventListener('dragleave', this.onDragLeaveOrEnd);\n            roomView.removeEventListener('dragend', this.onDragLeaveOrEnd);\n        }\n        dis.unregister(this.dispatcherRef);\n        if (MatrixClientPeg.get()) {\n            MatrixClientPeg.get().removeListener(\"Room\", this.onRoom);\n            MatrixClientPeg.get().removeListener(\"Room.timeline\", this.onRoomTimeline);\n            MatrixClientPeg.get().removeListener(\"Room.accountData\", this.onRoomAccountData);\n            MatrixClientPeg.get().removeListener(\"RoomState.members\", this.onRoomStateMember);\n            MatrixClientPeg.get().removeListener(\"accountData\", this.onAccountData);\n        }\n\n        window.removeEventListener('resize', this.onResize);\n\n        document.removeEventListener(\"keydown\", this.onKeyDown);\n\n        // cancel any pending calls to the rate_limited_funcs\n        this._updateRoomMembers.cancelPendingCall();\n\n        // no need to do this as Dir & Settings are now overlays. It just burnt CPU.\n        // console.log(\"Tinter.tint from RoomView.unmount\");\n        // Tinter.tint(); // reset colourscheme\n    },\n\n    onKeyDown: function(ev) {\n        let handled = false;\n        const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n        let ctrlCmdOnly;\n        if (isMac) {\n            ctrlCmdOnly = ev.metaKey && !ev.altKey && !ev.ctrlKey && !ev.shiftKey;\n        } else {\n            ctrlCmdOnly = ev.ctrlKey && !ev.altKey && !ev.metaKey && !ev.shiftKey;\n        }\n\n        switch (ev.keyCode) {\n            case KeyCode.KEY_D:\n                if (ctrlCmdOnly) {\n                    this.onMuteAudioClick();\n                    handled = true;\n                }\n                break;\n\n            case KeyCode.KEY_E:\n                if (ctrlCmdOnly) {\n                    this.onMuteVideoClick();\n                    handled = true;\n                }\n                break;\n        }\n\n        if (handled) {\n            ev.stopPropagation();\n            ev.preventDefault();\n        }\n    },\n\n    onAction: function(payload) {\n        switch (payload.action) {\n            case 'message_send_failed':\n            case 'message_sent':\n            case 'message_send_cancelled':\n                this.setState({\n                    hasUnsentMessages: this._hasUnsentMessages(this.state.room)\n                });\n                break;\n            case 'notifier_enabled':\n            case 'upload_failed':\n            case 'upload_started':\n            case 'upload_finished':\n                this.forceUpdate();\n                break;\n            case 'call_state':\n                // don't filter out payloads for room IDs other than props.room because\n                // we may be interested in the conf 1:1 room\n\n                if (!payload.room_id) {\n                    return;\n                }\n\n                var call = this._getCallForRoom();\n                var callState;\n\n                if (call) {\n                    callState = call.call_state;\n                }\n                else {\n                    callState = \"ended\";\n                }\n\n                // possibly remove the conf call notification if we're now in\n                // the conf\n                this._updateConfCallNotification();\n\n                this.setState({\n                    callState: callState\n                });\n\n                break;\n        }\n    },\n\n    onRoomTimeline: function(ev, room, toStartOfTimeline, removed, data) {\n        if (this.unmounted) return;\n\n        // ignore events for other rooms\n        if (!room) return;\n        if (!this.state.room || room.roomId != this.state.room.roomId) return;\n\n        // ignore events from filtered timelines\n        if (data.timeline.getTimelineSet() !== room.getUnfilteredTimelineSet()) return;\n\n        if (ev.getType() === \"org.matrix.room.preview_urls\") {\n            this._updatePreviewUrlVisibility(room);\n        }\n\n        // ignore anything but real-time updates at the end of the room:\n        // updates from pagination will happen when the paginate completes.\n        if (toStartOfTimeline || !data || !data.liveEvent) return;\n\n        // no point handling anything while we're waiting for the join to finish:\n        // we'll only be showing a spinner.\n        if (this.state.joining) return;\n\n        if (ev.getSender() !== MatrixClientPeg.get().credentials.userId) {\n            // update unread count when scrolled up\n            if (!this.state.searchResults && this.state.atEndOfLiveTimeline) {\n                // no change\n            }\n            else {\n                this.setState((state, props) => {\n                    return {numUnreadMessages: state.numUnreadMessages + 1};\n                });\n            }\n        }\n\n        // update the tab complete list as it depends on who most recently spoke,\n        // and that has probably just changed\n        if (ev.sender) {\n            this.tabComplete.onMemberSpoke(ev.sender);\n            // nb. we don't need to update the new autocomplete here since\n            // its results are currently ordered purely by search score.\n        }\n    },\n\n    // called when state.room is first initialised (either at initial load,\n    // after a successful peek, or after we join the room).\n    _onRoomLoaded: function(room) {\n        this._calculatePeekRules(room);\n        this._updatePreviewUrlVisibility(room);\n    },\n\n    _calculatePeekRules: function(room) {\n        var guestAccessEvent = room.currentState.getStateEvents(\"m.room.guest_access\", \"\");\n        if (guestAccessEvent && guestAccessEvent.getContent().guest_access === \"can_join\") {\n            this.setState({\n                guestsCanJoin: true\n            });\n        }\n\n        var historyVisibility = room.currentState.getStateEvents(\"m.room.history_visibility\", \"\");\n        if (historyVisibility && historyVisibility.getContent().history_visibility === \"world_readable\") {\n            this.setState({\n                canPeek: true\n            });\n        }\n    },\n\n    _updatePreviewUrlVisibility: function(room) {\n        // console.log(\"_updatePreviewUrlVisibility\");\n\n        // check our per-room overrides\n        var roomPreviewUrls = room.getAccountData(\"org.matrix.room.preview_urls\");\n        if (roomPreviewUrls && roomPreviewUrls.getContent().disable !== undefined) {\n            this.setState({\n                showUrlPreview: !roomPreviewUrls.getContent().disable\n            });\n            return;\n        }\n\n        // check our global disable override\n        var userRoomPreviewUrls = MatrixClientPeg.get().getAccountData(\"org.matrix.preview_urls\");\n        if (userRoomPreviewUrls && userRoomPreviewUrls.getContent().disable) {\n            this.setState({\n                showUrlPreview: false\n            });\n            return;\n        }\n\n        // check the room state event\n        var roomStatePreviewUrls = room.currentState.getStateEvents('org.matrix.room.preview_urls', '');\n        if (roomStatePreviewUrls && roomStatePreviewUrls.getContent().disable) {\n            this.setState({\n                showUrlPreview: false\n            });\n            return;\n        }\n\n        // otherwise, we assume they're on.\n        this.setState({\n            showUrlPreview: true\n        });\n    },\n\n    onRoom: function(room) {\n        // This event is fired when the room is 'stored' by the JS SDK, which\n        // means it's now a fully-fledged room object ready to be used, so\n        // set it in our state and start using it (ie. init the timeline)\n        // This will happen if we start off viewing a room we're not joined,\n        // then join it whilst RoomView is looking at that room.\n        if (!this.state.room && room.roomId == this._joiningRoomId) {\n            this._joiningRoomId = undefined;\n            this.setState({\n                room: room,\n                joining: false,\n            });\n\n            this._onRoomLoaded(room);\n        }\n    },\n\n    updateTint: function() {\n        var room = this.state.room;\n        if (!room) return;\n\n        var color_scheme_event = room.getAccountData(\"org.matrix.room.color_scheme\");\n        var color_scheme = {};\n        if (color_scheme_event) {\n            color_scheme = color_scheme_event.getContent();\n            // XXX: we should validate the event\n        }\n        console.log(\"Tinter.tint from updateTint\");\n        Tinter.tint(color_scheme.primary_color, color_scheme.secondary_color);\n    },\n\n    onAccountData: function(event) {\n        if (event.getType() === \"org.matrix.preview_urls\" && this.state.room) {\n            this._updatePreviewUrlVisibility(this.state.room);\n        }\n    },\n\n    onRoomAccountData: function(event, room) {\n        if (room.roomId == this.state.roomId) {\n            if (event.getType() === \"org.matrix.room.color_scheme\") {\n                var color_scheme = event.getContent();\n                // XXX: we should validate the event\n                console.log(\"Tinter.tint from onRoomAccountData\");\n                Tinter.tint(color_scheme.primary_color, color_scheme.secondary_color);\n            }\n            else if (event.getType() === \"org.matrix.room.preview_urls\") {\n                this._updatePreviewUrlVisibility(room);\n            }\n        }\n    },\n\n    onRoomStateMember: function(ev, state, member) {\n        // ignore if we don't have a room yet\n        if (!this.state.room) {\n            return;\n        }\n\n        // ignore members in other rooms\n        if (member.roomId !== this.state.room.roomId) {\n            return;\n        }\n\n        this._updateRoomMembers();\n    },\n\n    // rate limited because a power level change will emit an event for every\n    // member in the room.\n    _updateRoomMembers: new rate_limited_func(function() {\n        // a member state changed in this room\n        // refresh the conf call notification state\n        this._updateConfCallNotification();\n\n        // refresh the tab complete list\n        this.tabComplete.loadEntries(this.state.room);\n        this._updateAutoComplete();\n\n        // if we are now a member of the room, where we were not before, that\n        // means we have finished joining a room we were previously peeking\n        // into.\n        var me = MatrixClientPeg.get().credentials.userId;\n        if (this.state.joining && this.state.room.hasMembershipState(me, \"join\")) {\n            // Having just joined a room, check to see if it looks like a DM room, and if so,\n            // mark it as one. This is to work around the fact that some clients don't support\n            // is_direct. We should remove this once they do.\n            const me = this.state.room.getMember(MatrixClientPeg.get().credentials.userId);\n            if (Rooms.looksLikeDirectMessageRoom(this.state.room, me)) {\n                // XXX: There's not a whole lot we can really do if this fails: at best\n                // perhaps we could try a couple more times, but since it's a temporary\n                // compatability workaround, let's not bother.\n                Rooms.setDMRoom(this.state.room.roomId, me.events.member.getSender()).done();\n            }\n\n            this.setState({\n                joining: false\n            });\n        }\n    }, 500),\n\n    _hasUnsentMessages: function(room) {\n        return this._getUnsentMessages(room).length > 0;\n    },\n\n    _getUnsentMessages: function(room) {\n        if (!room) { return []; }\n        return room.getPendingEvents().filter(function(ev) {\n            return ev.status === Matrix.EventStatus.NOT_SENT;\n        });\n    },\n\n    _updateConfCallNotification: function() {\n        var room = this.state.room;\n        if (!room || !this.props.ConferenceHandler) {\n            return;\n        }\n        var confMember = room.getMember(\n            this.props.ConferenceHandler.getConferenceUserIdForRoom(room.roomId)\n        );\n\n        if (!confMember) {\n            return;\n        }\n        var confCall = this.props.ConferenceHandler.getConferenceCallForRoom(confMember.roomId);\n\n        // A conf call notification should be displayed if there is an ongoing\n        // conf call but this cilent isn't a part of it.\n        this.setState({\n            displayConfCallNotification: (\n                (!confCall || confCall.call_state === \"ended\") &&\n                confMember.membership === \"join\"\n            )\n        });\n    },\n\n    onSearchResultsResize: function() {\n        dis.dispatch({ action: 'timeline_resize' }, true);\n    },\n\n    onSearchResultsFillRequest: function(backwards) {\n        if (!backwards) {\n            return q(false);\n        }\n\n        if (this.state.searchResults.next_batch) {\n            debuglog(\"requesting more search results\");\n            var searchPromise = MatrixClientPeg.get().backPaginateRoomEventsSearch(\n                this.state.searchResults);\n            return this._handleSearchResult(searchPromise);\n        } else {\n            debuglog(\"no more search results\");\n            return q(false);\n        }\n    },\n\n    onResendAllClick: function() {\n        var eventsToResend = this._getUnsentMessages(this.state.room);\n        eventsToResend.forEach(function(event) {\n            Resend.resend(event);\n        });\n    },\n\n    onCancelAllClick: function() {\n        var eventsToResend = this._getUnsentMessages(this.state.room);\n        eventsToResend.forEach(function(event) {\n            Resend.removeFromQueue(event);\n        });\n    },\n\n    onJoinButtonClicked: function(ev) {\n        var self = this;\n\n        var cli = MatrixClientPeg.get();\n        var display_name_promise = q();\n        // if this is the first room we're joining, check the user has a display name\n        // and if they don't, prompt them to set one.\n        // NB. This unfortunately does not re-use the ChangeDisplayName component because\n        // it doesn't behave quite as desired here (we want an input field here rather than\n        // content-editable, and we want a default).\n        if (cli.getRooms().filter((r) => {\n            return r.hasMembershipState(cli.credentials.userId, \"join\");\n        })) {\n            display_name_promise = cli.getProfileInfo(cli.credentials.userId).then((result) => {\n                if (!result.displayname) {\n                    var SetDisplayNameDialog = sdk.getComponent('views.dialogs.SetDisplayNameDialog');\n                    var dialog_defer = q.defer();\n                    Modal.createDialog(SetDisplayNameDialog, {\n                        currentDisplayName: result.displayname,\n                        onFinished: (submitted, newDisplayName) => {\n                            if (submitted) {\n                                cli.setDisplayName(newDisplayName).done(() => {\n                                    dialog_defer.resolve();\n                                });\n                            }\n                            else {\n                                dialog_defer.reject();\n                            }\n                        }\n                    });\n                    return dialog_defer.promise;\n                }\n            });\n        }\n\n        display_name_promise.then(() => {\n            // if this is an invite and has the 'direct' hint set, mark it as a DM room now.\n            if (this.state.room) {\n                const me = this.state.room.getMember(MatrixClientPeg.get().credentials.userId);\n                if (me && me.membership == 'invite') {\n                    if (me.events.member.getContent().is_direct) {\n                        // The 'direct' hint is there, so declare that this is a DM room for\n                        // whoever invited us.\n                        return Rooms.setDMRoom(this.state.room.roomId, me.events.member.getSender());\n                    }\n                }\n            }\n\n            return q();\n        }).then(() => {\n            var sign_url = this.props.thirdPartyInvite ? this.props.thirdPartyInvite.inviteSignUrl : undefined;\n            return MatrixClientPeg.get().joinRoom(this.props.roomAddress,\n                                                  { inviteSignUrl: sign_url } );\n        }).then(function(resp) {\n            var roomId = resp.roomId;\n\n            // It is possible that there is no Room yet if state hasn't come down\n            // from /sync - joinRoom will resolve when the HTTP request to join succeeds,\n            // NOT when it comes down /sync. If there is no room, we'll keep the\n            // joining flag set until we see it.\n\n            // We'll need to initialise the timeline when joining, but due to\n            // the above, we can't do it here: we do it in onRoom instead,\n            // once we have a useable room object.\n            var room = MatrixClientPeg.get().getRoom(roomId);\n            if (!room) {\n                // wait for the room to turn up in onRoom.\n                self._joiningRoomId = roomId;\n            } else {\n                // we've got a valid room, but that might also just mean that\n                // it was peekable (so we had one before anyway).  If we are\n                // not yet a member of the room, we will need to wait for that\n                // to happen, in onRoomStateMember.\n                var me = MatrixClientPeg.get().credentials.userId;\n                self.setState({\n                    joining: !room.hasMembershipState(me, \"join\"),\n                    room: room\n                });\n            }\n        }).catch(function(error) {\n            self.setState({\n                joining: false,\n                joinError: error\n            });\n\n            if (!error) return;\n\n            // https://matrix.org/jira/browse/SYN-659\n            // Need specific error message if joining a room is refused because the user is a guest and guest access is not allowed\n            if (\n                error.errcode == 'M_GUEST_ACCESS_FORBIDDEN' ||\n                (\n                    error.errcode == 'M_FORBIDDEN' &&\n                    MatrixClientPeg.get().isGuest()\n                )\n            ) {\n                var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");\n                Modal.createDialog(NeedToRegisterDialog, {\n                    title: \"Failed to join the room\",\n                    description: \"This room is private or inaccessible to guests. You may be able to join if you register.\"\n                });\n            } else {\n                var msg = error.message ? error.message : JSON.stringify(error);\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Failed to join room\",\n                    description: msg\n                });\n            }\n        }).done();\n\n        this.setState({\n            joining: true\n        });\n    },\n\n    onMessageListScroll: function(ev) {\n        if (this.refs.messagePanel.isAtEndOfLiveTimeline()) {\n            this.setState({\n                numUnreadMessages: 0,\n                atEndOfLiveTimeline: true,\n            });\n        }\n        else {\n            this.setState({\n                atEndOfLiveTimeline: false,\n            });\n        }\n        this._updateTopUnreadMessagesBar();\n    },\n\n    onDragOver: function(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        ev.dataTransfer.dropEffect = 'none';\n\n        var items = ev.dataTransfer.items;\n        if (items.length == 1) {\n            if (items[0].kind == 'file') {\n                this.setState({ draggingFile : true });\n                ev.dataTransfer.dropEffect = 'copy';\n            }\n        }\n    },\n\n    onDrop: function(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n        this.setState({ draggingFile : false });\n        var files = ev.dataTransfer.files;\n        if (files.length == 1) {\n            this.uploadFile(files[0]);\n        }\n    },\n\n    onDragLeaveOrEnd: function(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n        this.setState({ draggingFile : false });\n    },\n\n    uploadFile: function(file) {\n        var self = this;\n\n        if (MatrixClientPeg.get().isGuest()) {\n            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");\n            Modal.createDialog(NeedToRegisterDialog, {\n                title: \"Please Register\",\n                description: \"Guest users can't upload files. Please register to upload.\"\n            });\n            return;\n        }\n\n        ContentMessages.sendContentToRoom(\n            file, this.state.room.roomId, MatrixClientPeg.get()\n        ).done(undefined, function(error) {\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Failed to upload file\",\n                description: error.toString()\n            });\n        });\n    },\n\n    onSearch: function(term, scope) {\n        this.setState({\n            searchTerm: term,\n            searchScope: scope,\n            searchResults: {},\n            searchHighlights: [],\n        });\n\n        // if we already have a search panel, we need to tell it to forget\n        // about its scroll state.\n        if (this.refs.searchResultsPanel) {\n            this.refs.searchResultsPanel.resetScrollState();\n        }\n\n        // make sure that we don't end up showing results from\n        // an aborted search by keeping a unique id.\n        //\n        // todo: should cancel any previous search requests.\n        this.searchId = new Date().getTime();\n\n        var filter;\n        if (scope === \"Room\") {\n            filter = {\n                // XXX: it's unintuitive that the filter for searching doesn't have the same shape as the v2 filter API :(\n                rooms: [\n                    this.state.room.roomId\n                ]\n            };\n        }\n\n        debuglog(\"sending search request\");\n\n        var searchPromise = MatrixClientPeg.get().searchRoomEvents({\n            filter: filter,\n            term: term,\n        });\n        this._handleSearchResult(searchPromise).done();\n    },\n\n    _handleSearchResult: function(searchPromise) {\n        var self = this;\n\n        // keep a record of the current search id, so that if the search terms\n        // change before we get a response, we can ignore the results.\n        var localSearchId = this.searchId;\n\n        this.setState({\n            searchInProgress: true,\n        });\n\n        return searchPromise.then(function(results) {\n            debuglog(\"search complete\");\n            if (self.unmounted || !self.state.searching || self.searchId != localSearchId) {\n                console.error(\"Discarding stale search results\");\n                return;\n            }\n\n            // postgres on synapse returns us precise details of the strings\n            // which actually got matched for highlighting.\n            //\n            // In either case, we want to highlight the literal search term\n            // whether it was used by the search engine or not.\n\n            var highlights = results.highlights;\n            if (highlights.indexOf(self.state.searchTerm) < 0) {\n                highlights = highlights.concat(self.state.searchTerm);\n            }\n\n            // For overlapping highlights,\n            // favour longer (more specific) terms first\n            highlights = highlights.sort(function(a, b) {\n                return b.length - a.length; });\n\n            self.setState({\n                searchHighlights: highlights,\n                searchResults: results,\n            });\n        }, function(error) {\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Search failed\",\n                description: error.toString()\n            });\n        }).finally(function() {\n            self.setState({\n                searchInProgress: false\n            });\n        });\n    },\n\n    getSearchResultTiles: function() {\n        var EventTile = sdk.getComponent('rooms.EventTile');\n        var SearchResultTile = sdk.getComponent('rooms.SearchResultTile');\n        var Spinner = sdk.getComponent(\"elements.Spinner\");\n\n        var cli = MatrixClientPeg.get();\n\n        // XXX: todo: merge overlapping results somehow?\n        // XXX: why doesn't searching on name work?\n\n        if (this.state.searchResults.results === undefined) {\n            // awaiting results\n            return [];\n        }\n\n        var ret = [];\n\n        if (this.state.searchInProgress) {\n            ret.push(<li key=\"search-spinner\">\n                         <Spinner />\n                     </li>);\n        }\n\n        if (!this.state.searchResults.next_batch) {\n            if (this.state.searchResults.results.length == 0) {\n                ret.push(<li key=\"search-top-marker\">\n                         <h2 className=\"mx_RoomView_topMarker\">No results</h2>\n                         </li>\n                        );\n            } else {\n                ret.push(<li key=\"search-top-marker\">\n                         <h2 className=\"mx_RoomView_topMarker\">No more results</h2>\n                         </li>\n                        );\n            }\n        }\n\n        // once dynamic content in the search results load, make the scrollPanel check\n        // the scroll offsets.\n        var onWidgetLoad = () => {\n            var scrollPanel = this.refs.searchResultsPanel;\n            if (scrollPanel) {\n                scrollPanel.checkScroll();\n            }\n        };\n\n        var lastRoomId;\n\n        for (var i = this.state.searchResults.results.length - 1; i >= 0; i--) {\n            var result = this.state.searchResults.results[i];\n\n            var mxEv = result.context.getEvent();\n            var roomId = mxEv.getRoomId();\n\n            if (!EventTile.haveTileForEvent(mxEv)) {\n                // XXX: can this ever happen? It will make the result count\n                // not match the displayed count.\n                continue;\n            }\n\n            if (this.state.searchScope === 'All') {\n                if(roomId != lastRoomId) {\n                    var room = cli.getRoom(roomId);\n\n                    // XXX: if we've left the room, we might not know about\n                    // it. We should tell the js sdk to go and find out about\n                    // it. But that's not an issue currently, as synapse only\n                    // returns results for rooms we're joined to.\n                    var roomName = room ? room.name : \"Unknown room \"+roomId;\n\n                    ret.push(<li key={mxEv.getId() + \"-room\"}>\n                                 <h1>Room: { roomName }</h1>\n                             </li>);\n                    lastRoomId = roomId;\n                }\n            }\n\n            var resultLink = \"#/room/\"+roomId+\"/\"+mxEv.getId();\n\n            ret.push(<SearchResultTile key={mxEv.getId()}\n                     searchResult={result}\n                     searchHighlights={this.state.searchHighlights}\n                     resultLink={resultLink}\n                     onWidgetLoad={onWidgetLoad}/>);\n        }\n        return ret;\n    },\n\n    onSettingsClick: function() {\n        this.showSettings(true);\n    },\n\n    onSettingsSaveClick: function() {\n        if (!this.refs.room_settings) return;\n\n        this.setState({\n            uploadingRoomSettings: true,\n        });\n\n        var newName = this.refs.header.getEditedName();\n        if (newName !== undefined) {\n            this.refs.room_settings.setName(newName);\n        }\n        var newTopic = this.refs.header.getEditedTopic();\n        if (newTopic !== undefined) {\n            this.refs.room_settings.setTopic(newTopic);\n        }\n\n        this.refs.room_settings.save().then((results) => {\n            var fails = results.filter(function(result) { return result.state !== \"fulfilled\"; });\n            console.log(\"Settings saved with %s errors\", fails.length);\n            if (fails.length) {\n                fails.forEach(function(result) {\n                    console.error(result.reason);\n                });\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Failed to save settings\",\n                    description: fails.map(function(result) { return result.reason; }).join(\"\\n\"),\n                });\n                // still editing room settings\n            }\n            else {\n                this.setState({\n                    editingRoomSettings: false\n                });\n            }\n        }).finally(() => {\n            this.setState({\n                uploadingRoomSettings: false,\n                editingRoomSettings: false\n            });\n        }).done();\n    },\n\n    onCancelClick: function() {\n        console.log(\"updateTint from onCancelClick\");\n        this.updateTint();\n        this.setState({editingRoomSettings: false});\n    },\n\n    onLeaveClick: function() {\n        dis.dispatch({\n            action: 'leave_room',\n            room_id: this.state.room.roomId,\n        });\n    },\n\n    onForgetClick: function() {\n        MatrixClientPeg.get().forget(this.state.room.roomId).done(function() {\n            dis.dispatch({ action: 'view_next_room' });\n        }, function(err) {\n            var errCode = err.errcode || \"unknown error code\";\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Error\",\n                description: `Failed to forget room (${errCode})`\n            });\n        });\n    },\n\n    onRejectButtonClicked: function(ev) {\n        var self = this;\n        this.setState({\n            rejecting: true\n        });\n        MatrixClientPeg.get().leave(this.state.roomId).done(function() {\n            dis.dispatch({ action: 'view_next_room' });\n            self.setState({\n                rejecting: false\n            });\n        }, function(error) {\n            console.error(\"Failed to reject invite: %s\", error);\n\n            var msg = error.message ? error.message : JSON.stringify(error);\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Failed to reject invite\",\n                description: msg\n            });\n\n            self.setState({\n                rejecting: false,\n                rejectError: error\n            });\n        });\n    },\n\n    onRejectThreepidInviteButtonClicked: function(ev) {\n        // We can reject 3pid invites in the same way that we accept them,\n        // using /leave rather than /join. In the short term though, we\n        // just ignore them.\n        // https://github.com/vector-im/vector-web/issues/1134\n        dis.dispatch({\n            action: 'view_room_directory',\n        });\n    },\n\n    onSearchClick: function() {\n        this.setState({ searching: true });\n    },\n\n    onCancelSearchClick: function() {\n        this.setState({\n            searching: false,\n            searchResults: null,\n        });\n    },\n\n    // jump down to the bottom of this room, where new events are arriving\n    jumpToLiveTimeline: function() {\n        this.refs.messagePanel.jumpToLiveTimeline();\n    },\n\n    // jump up to wherever our read marker is\n    jumpToReadMarker: function() {\n        this.refs.messagePanel.jumpToReadMarker();\n    },\n\n    // update the read marker to match the read-receipt\n    forgetReadMarker: function(ev) {\n        ev.stopPropagation();\n        this.refs.messagePanel.forgetReadMarker();\n    },\n\n    // decide whether or not the top 'unread messages' bar should be shown\n    _updateTopUnreadMessagesBar: function() {\n        if (!this.refs.messagePanel) {\n            return;\n        }\n\n        var pos = this.refs.messagePanel.getReadMarkerPosition();\n\n        // we want to show the bar if the read-marker is off the top of the\n        // screen.\n        var showBar = (pos < 0);\n\n        if (this.state.showTopUnreadMessagesBar != showBar) {\n            this.setState({showTopUnreadMessagesBar: showBar},\n                          this.onChildResize);\n        }\n    },\n\n    // update scrollStateMap on unmount\n    _updateScrollMap: function() {\n        if (!this.state.room) {\n            // we were instantiated on a room alias and haven't yet joined the room.\n            return;\n        }\n        if (!this.props.scrollStateMap) return;\n\n        var roomId = this.state.room.roomId;\n\n        var state = this._getScrollState();\n        this.props.scrollStateMap[roomId] = state;\n    },\n\n\n    // get the current scroll position of the room, so that it can be\n    // restored when we switch back to it.\n    //\n    _getScrollState: function() {\n        var messagePanel = this.refs.messagePanel;\n        if (!messagePanel) return null;\n\n        // if we're following the live timeline, we want to return null; that\n        // means that, if we switch back, we will jump to the read-up-to mark.\n        //\n        // That should be more intuitive than slavishly preserving the current\n        // scroll state, in the case where the room advances in the meantime\n        // (particularly in the case that the user reads some stuff on another\n        // device).\n        //\n        if (this.state.atEndOfLiveTimeline) {\n            return null;\n        }\n\n        var scrollState = messagePanel.getScrollState();\n\n        if (scrollState.stuckAtBottom) {\n            // we don't really expect to be in this state, but it will\n            // occasionally happen when no scroll state has been set on the\n            // messagePanel (ie, we didn't have an initial event (so it's\n            // probably a new room), there has been no user-initiated scroll, and\n            // no read-receipts have arrived to update the scroll position).\n            //\n            // Return null, which will cause us to scroll to last unread on\n            // reload.\n            return null;\n        }\n\n        return {\n            focussedEvent: scrollState.trackedScrollToken,\n            pixelOffset: scrollState.pixelOffset,\n        };\n    },\n\n    onResize: function(e) {\n        // It seems flexbox doesn't give us a way to constrain the auxPanel height to have\n        // a minimum of the height of the video element, whilst also capping it from pushing out the page\n        // so we have to do it via JS instead.  In this implementation we cap the height by putting\n        // a maxHeight on the underlying remote video tag.\n\n        // header + footer + status + give us at least 120px of scrollback at all times.\n        var auxPanelMaxHeight = window.innerHeight -\n                (83 + // height of RoomHeader\n                 36 + // height of the status area\n                 72 + // minimum height of the message compmoser\n                 (this.state.editingRoomSettings ? (window.innerHeight * 0.3) : 120)); // amount of desired scrollback\n\n        // XXX: this is a bit of a hack and might possibly cause the video to push out the page anyway\n        // but it's better than the video going missing entirely\n        if (auxPanelMaxHeight < 50) auxPanelMaxHeight = 50;\n\n        this.setState({auxPanelMaxHeight: auxPanelMaxHeight});\n\n        // changing the maxHeight on the auxpanel will trigger a callback go\n        // onChildResize, so no need to worry about that here.\n    },\n\n    onFullscreenClick: function() {\n        dis.dispatch({\n            action: 'video_fullscreen',\n            fullscreen: true\n        }, true);\n    },\n\n    onMuteAudioClick: function() {\n        var call = this._getCallForRoom();\n        if (!call) {\n            return;\n        }\n        var newState = !call.isMicrophoneMuted();\n        call.setMicrophoneMuted(newState);\n        this.forceUpdate(); // TODO: just update the voip buttons\n    },\n\n    onMuteVideoClick: function() {\n        var call = this._getCallForRoom();\n        if (!call) {\n            return;\n        }\n        var newState = !call.isLocalVideoMuted();\n        call.setLocalVideoMuted(newState);\n        this.forceUpdate(); // TODO: just update the voip buttons\n    },\n\n    onChildResize: function() {\n        // no longer anything to do here\n    },\n\n    onStatusBarVisible: function() {\n        if (this.unmounted) return;\n        this.setState({\n            statusBarVisible: true,\n        });\n    },\n\n    onStatusBarHidden: function() {\n        if (this.unmounted) return;\n        this.setState({\n            statusBarVisible: false,\n        });\n    },\n\n    showSettings: function(show) {\n        // XXX: this is a bit naughty; we should be doing this via props\n        if (show) {\n            this.setState({editingRoomSettings: true});\n        }\n    },\n\n    /**\n     * called by the parent component when PageUp/Down/etc is pressed.\n     *\n     * We pass it down to the scroll panel.\n     */\n    handleScrollKey: function(ev) {\n        var panel;\n        if(this.refs.searchResultsPanel) {\n            panel = this.refs.searchResultsPanel;\n        } else if(this.refs.messagePanel) {\n            panel = this.refs.messagePanel;\n        }\n\n        if(panel) {\n            panel.handleScrollKey(ev);\n        }\n    },\n\n    /**\n     * get any current call for this room\n     */\n    _getCallForRoom: function() {\n        if (!this.state.room) {\n            return null;\n        }\n        return CallHandler.getCallForRoom(this.state.room.roomId);\n    },\n\n    // this has to be a proper method rather than an unnamed function,\n    // otherwise react calls it with null on each update.\n    _gatherTimelinePanelRef: function(r) {\n        this.refs.messagePanel = r;\n        if(r) {\n            console.log(\"updateTint from RoomView._gatherTimelinePanelRef\");\n            this.updateTint();\n        }\n    },\n\n    _updateAutoComplete: function() {\n        const myUserId = MatrixClientPeg.get().credentials.userId;\n        const members = this.state.room.getJoinedMembers().filter(function(member) {\n            if (member.userId !== myUserId) return true;\n        });\n        UserProvider.getInstance().setUserList(members);\n    },\n\n    render: function() {\n        var RoomHeader = sdk.getComponent('rooms.RoomHeader');\n        var MessageComposer = sdk.getComponent('rooms.MessageComposer');\n        var RoomSettings = sdk.getComponent(\"rooms.RoomSettings\");\n        var AuxPanel = sdk.getComponent(\"rooms.AuxPanel\");\n        var SearchBar = sdk.getComponent(\"rooms.SearchBar\");\n        var ScrollPanel = sdk.getComponent(\"structures.ScrollPanel\");\n        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");\n        var RoomPreviewBar = sdk.getComponent(\"rooms.RoomPreviewBar\");\n        var Loader = sdk.getComponent(\"elements.Spinner\");\n        var TimelinePanel = sdk.getComponent(\"structures.TimelinePanel\");\n\n        if (!this.state.room) {\n                if (this.state.roomLoading) {\n                    return (\n                        <div className=\"mx_RoomView\">\n                            <Loader />\n                        </div>\n                    );\n                }\n                else {\n                    var inviterName = undefined;\n                    if (this.props.oobData) {\n                        inviterName = this.props.oobData.inviterName;\n                    }\n                    var invitedEmail = undefined;\n                    if (this.props.thirdPartyInvite) {\n                        invitedEmail = this.props.thirdPartyInvite.invitedEmail;\n                    }\n\n                    // We have no room object for this room, only the ID.\n                    // We've got to this room by following a link, possibly a third party invite.\n                    var room_alias = this.props.roomAddress[0] == '#' ? this.props.roomAddress : null;\n                    return (\n                        <div className=\"mx_RoomView\">\n                            <RoomHeader ref=\"header\"\n                                room={this.state.room}\n                                oobData={this.props.oobData}\n                                collapsedRhs={ this.props.collapsedRhs }\n                            />\n                            <div className=\"mx_RoomView_auxPanel\">\n                                <RoomPreviewBar onJoinClick={ this.onJoinButtonClicked }\n                                                onRejectClick={ this.onRejectThreepidInviteButtonClicked }\n                                                canPreview={ false } error={ this.state.roomLoadError }\n                                                roomAlias={room_alias}\n                                                spinner={this.state.joining}\n                                                inviterName={inviterName}\n                                                invitedEmail={invitedEmail}\n                                                room={this.state.room}\n                                />\n                            </div>\n                            <div className=\"mx_RoomView_messagePanel\"></div>\n                        </div>\n                    );\n                }\n        }\n\n        var myUserId = MatrixClientPeg.get().credentials.userId;\n        var myMember = this.state.room.getMember(myUserId);\n        if (myMember && myMember.membership == 'invite') {\n            if (this.state.joining || this.state.rejecting) {\n                return (\n                    <div className=\"mx_RoomView\">\n                        <Loader />\n                    </div>\n                );\n            } else {\n                var inviteEvent = myMember.events.member;\n                var inviterName = inviteEvent.sender ? inviteEvent.sender.name : inviteEvent.getSender();\n\n                // We deliberately don't try to peek into invites, even if we have permission to peek\n                // as they could be a spam vector.\n                // XXX: in future we could give the option of a 'Preview' button which lets them view anyway.\n\n                // We have a regular invite for this room.\n                return (\n                    <div className=\"mx_RoomView\">\n                        <RoomHeader\n                            ref=\"header\"\n                            room={this.state.room}\n                            collapsedRhs={ this.props.collapsedRhs }\n                        />\n                        <div className=\"mx_RoomView_auxPanel\">\n                            <RoomPreviewBar onJoinClick={ this.onJoinButtonClicked }\n                                            onRejectClick={ this.onRejectButtonClicked }\n                                            inviterName={ inviterName }\n                                            canPreview={ false }\n                                            spinner={this.state.joining}\n                                            room={this.state.room}\n                            />\n                        </div>\n                        <div className=\"mx_RoomView_messagePanel\"></div>\n                    </div>\n                );\n            }\n        }\n\n        // We have successfully loaded this room, and are not previewing.\n        // Display the \"normal\" room view.\n\n        var call = this._getCallForRoom();\n        var inCall = false;\n        if (call && (this.state.callState !== 'ended' && this.state.callState !== 'ringing')) {\n            inCall = true;\n        }\n\n        var scrollheader_classes = classNames({\n            mx_RoomView_scrollheader: true,\n        });\n\n        var statusBar;\n        let isStatusAreaExpanded = true;\n\n        if (ContentMessages.getCurrentUploads().length > 0) {\n            var UploadBar = sdk.getComponent('structures.UploadBar');\n            statusBar = <UploadBar room={this.state.room} />;\n        } else if (!this.state.searchResults) {\n            var RoomStatusBar = sdk.getComponent('structures.RoomStatusBar');\n            isStatusAreaExpanded = this.state.statusBarVisible;\n            statusBar = <RoomStatusBar\n                room={this.state.room}\n                tabComplete={this.tabComplete}\n                numUnreadMessages={this.state.numUnreadMessages}\n                hasUnsentMessages={this.state.hasUnsentMessages}\n                atEndOfLiveTimeline={this.state.atEndOfLiveTimeline}\n                hasActiveCall={inCall}\n                onResendAllClick={this.onResendAllClick}\n                onCancelAllClick={this.onCancelAllClick}\n                onScrollToBottomClick={this.jumpToLiveTimeline}\n                onResize={this.onChildResize}\n                onVisible={this.onStatusBarVisible}\n                onHidden={this.onStatusBarHidden}\n                whoIsTypingLimit={2}\n            />;\n        }\n\n        var aux = null;\n        if (this.state.editingRoomSettings) {\n            aux = <RoomSettings ref=\"room_settings\" onSaveClick={this.onSettingsSaveClick} onCancelClick={this.onCancelClick} room={this.state.room} />;\n        }\n        else if (this.state.uploadingRoomSettings) {\n            aux = <Loader/>;\n        }\n        else if (this.state.searching) {\n            aux = <SearchBar ref=\"search_bar\" searchInProgress={this.state.searchInProgress } onCancelClick={this.onCancelSearchClick} onSearch={this.onSearch}/>;\n        }\n        else if (!myMember || myMember.membership !== \"join\") {\n            // We do have a room object for this room, but we're not currently in it.\n            // We may have a 3rd party invite to it.\n            var inviterName = undefined;\n            if (this.props.oobData) {\n                inviterName = this.props.oobData.inviterName;\n            }\n            var invitedEmail = undefined;\n            if (this.props.thirdPartyInvite) {\n                invitedEmail = this.props.thirdPartyInvite.invitedEmail;\n            }\n            aux = (\n                <RoomPreviewBar onJoinClick={this.onJoinButtonClicked}\n                                onRejectClick={this.onRejectThreepidInviteButtonClicked}\n                                spinner={this.state.joining}\n                                inviterName={inviterName}\n                                invitedEmail={invitedEmail}\n                                canPreview={this.state.canPeek}\n                                room={this.state.room}\n                />\n            );\n        }\n\n        var auxPanel = (\n            <AuxPanel ref=\"auxPanel\" room={this.state.room}\n              conferenceHandler={this.props.ConferenceHandler}\n              draggingFile={this.state.draggingFile}\n              displayConfCallNotification={this.state.displayConfCallNotification}\n              maxHeight={this.state.auxPanelMaxHeight}\n              onResize={this.onChildResize} >\n                { aux }\n            </AuxPanel>\n        );\n\n        var messageComposer, searchInfo;\n        var canSpeak = (\n            // joined and not showing search results\n            myMember && (myMember.membership == 'join') && !this.state.searchResults\n        );\n        if (canSpeak) {\n            messageComposer =\n                <MessageComposer\n                    room={this.state.room} onResize={this.onChildResize} uploadFile={this.uploadFile}\n                    callState={this.state.callState} tabComplete={this.tabComplete} opacity={ this.props.opacity }/>;\n        }\n\n        // TODO: Why aren't we storing the term/scope/count in this format\n        // in this.state if this is what RoomHeader desires?\n        if (this.state.searchResults) {\n            searchInfo = {\n                searchTerm : this.state.searchTerm,\n                searchScope : this.state.searchScope,\n                searchCount : this.state.searchResults.count,\n            };\n        }\n\n        if (inCall) {\n            var zoomButton, voiceMuteButton, videoMuteButton;\n\n            if (call.type === \"video\") {\n                zoomButton = (\n                    <div className=\"mx_RoomView_voipButton\" onClick={this.onFullscreenClick} title=\"Fill screen\">\n                        <TintableSvg src=\"img/fullscreen.svg\" width=\"29\" height=\"22\" style={{ marginTop: 1, marginRight: 4 }}/>\n                    </div>\n                );\n\n                videoMuteButton =\n                    <div className=\"mx_RoomView_voipButton\" onClick={this.onMuteVideoClick}>\n                        <img src={call.isLocalVideoMuted() ? \"img/video-unmute.svg\" : \"img/video-mute.svg\"}\n                             alt={call.isLocalVideoMuted() ? \"Click to unmute video\" : \"Click to mute video\"}\n                             width=\"31\" height=\"27\"/>\n                    </div>;\n            }\n            voiceMuteButton =\n                <div className=\"mx_RoomView_voipButton\" onClick={this.onMuteAudioClick}>\n                    <img src={call.isMicrophoneMuted() ? \"img/voice-unmute.svg\" : \"img/voice-mute.svg\"}\n                         alt={call.isMicrophoneMuted() ? \"Click to unmute audio\" : \"Click to mute audio\"}\n                         width=\"21\" height=\"26\"/>\n                </div>;\n\n            // wrap the existing status bar into a 'callStatusBar' which adds more knobs.\n            statusBar =\n                <div className=\"mx_RoomView_callStatusBar\">\n                    { voiceMuteButton }\n                    { videoMuteButton }\n                    { zoomButton }\n                    { statusBar }\n                    <TintableSvg className=\"mx_RoomView_voipChevron\" src=\"img/voip-chevron.svg\" width=\"22\" height=\"17\"/>\n                </div>;\n        }\n\n        // if we have search results, we keep the messagepanel (so that it preserves its\n        // scroll state), but hide it.\n        var searchResultsPanel;\n        var hideMessagePanel = false;\n\n        if (this.state.searchResults) {\n            searchResultsPanel = (\n                <ScrollPanel ref=\"searchResultsPanel\"\n                    className=\"mx_RoomView_messagePanel mx_RoomView_searchResultsPanel\"\n                    onFillRequest={ this.onSearchResultsFillRequest }\n                    onResize={ this.onSearchResultsResize }\n                    style={{ opacity: this.props.opacity }}\n                >\n                    <li className={scrollheader_classes}></li>\n                    {this.getSearchResultTiles()}\n                </ScrollPanel>\n            );\n            hideMessagePanel = true;\n        }\n\n        // console.log(\"ShowUrlPreview for %s is %s\", this.state.room.roomId, this.state.showUrlPreview);\n\n        var messagePanel = (\n            <TimelinePanel ref={this._gatherTimelinePanelRef}\n                timelineSet={this.state.room.getUnfilteredTimelineSet()}\n                manageReadReceipts={true}\n                manageReadMarkers={true}\n                hidden={hideMessagePanel}\n                highlightedEventId={this.props.highlightedEventId}\n                eventId={this.props.eventId}\n                eventPixelOffset={this.props.eventPixelOffset}\n                onScroll={ this.onMessageListScroll }\n                onReadMarkerUpdated={ this._updateTopUnreadMessagesBar }\n                showUrlPreview = { this.state.showUrlPreview }\n                opacity={ this.props.opacity }\n                className=\"mx_RoomView_messagePanel\"\n            />);\n\n        var topUnreadMessagesBar = null;\n        if (this.state.showTopUnreadMessagesBar) {\n            var TopUnreadMessagesBar = sdk.getComponent('rooms.TopUnreadMessagesBar');\n            topUnreadMessagesBar = (\n                <div className=\"mx_RoomView_topUnreadMessagesBar mx_fadable\" style={{ opacity: this.props.opacity }}>\n                    <TopUnreadMessagesBar\n                       onScrollUpClick={this.jumpToReadMarker}\n                       onCloseClick={this.forgetReadMarker}\n                    />\n                </div>\n            );\n        }\n        let statusBarAreaClass = \"mx_RoomView_statusArea mx_fadable\";\n        if (isStatusAreaExpanded) {\n            statusBarAreaClass += \" mx_RoomView_statusArea_expanded\";\n        }\n\n        return (\n            <div className={ \"mx_RoomView\" + (inCall ? \" mx_RoomView_inCall\" : \"\") } ref=\"roomView\">\n                <RoomHeader ref=\"header\" room={this.state.room} searchInfo={searchInfo}\n                    oobData={this.props.oobData}\n                    editing={this.state.editingRoomSettings}\n                    saving={this.state.uploadingRoomSettings}\n                    collapsedRhs={ this.props.collapsedRhs }\n                    onSearchClick={this.onSearchClick}\n                    onSettingsClick={this.onSettingsClick}\n                    onSaveClick={this.onSettingsSaveClick}\n                    onCancelClick={this.onCancelClick}\n                    onForgetClick={\n                        (myMember && myMember.membership === \"leave\") ? this.onForgetClick : null\n                    }\n                    onLeaveClick={\n                        (myMember && myMember.membership === \"join\") ? this.onLeaveClick : null\n                    } />\n                { auxPanel }\n                { topUnreadMessagesBar }\n                { messagePanel }\n                { searchResultsPanel }\n                <div className={statusBarAreaClass} style={{opacity: this.props.opacity}}>\n                    <div className=\"mx_RoomView_statusAreaBox\">\n                        <div className=\"mx_RoomView_statusAreaBox_line\"></div>\n                        { statusBar }\n                    </div>\n                </div>\n                { messageComposer }\n            </div>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/ScrollPanel.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require(\"react\");","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[598,601],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var GeminiScrollbar = require('react-gemini-scrollbar');","fix":{"range":[635,638],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[692,695],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var KeyCode = require('../../KeyCode');","fix":{"range":[714,717],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var DEBUG_SCROLL = false;","fix":{"range":[755,758],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":35,"column":5,"nodeType":"VariableDeclaration","source":"    var debuglog = console.log.bind(console);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":5,"nodeType":"VariableDeclaration","source":"    var debuglog = function() {};"},{"ruleId":"no-redeclare","severity":2,"message":"'debuglog' is already defined.","line":37,"column":9,"nodeType":"Identifier","source":"    var debuglog = function() {};"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":177,"column":9,"nodeType":"VariableDeclaration","source":"        var sn = this._getScrollNode();","fix":{"range":[6926,6929],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":237,"column":9,"nodeType":"VariableDeclaration","source":"        var sn = this._getScrollNode();","fix":{"range":[9475,9478],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":280,"column":9,"nodeType":"VariableDeclaration","source":"        var sn = this._getScrollNode();","fix":{"range":[11737,11740],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 284 exceeds the maximum line length of 90.","line":284,"column":1,"nodeType":"Program","source":"            return sn.scrollHeight - (sn.scrollTop + 2*sn.clientHeight) - UNPAGINATION_PADDING;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":294,"column":9,"nodeType":"VariableDeclaration","source":"        var sn = this._getScrollNode();","fix":{"range":[12176,12179],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":336,"column":9,"nodeType":"VariableDeclaration","source":"        var itemlist = this.refs.itemlist;","fix":{"range":[13785,13788],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":337,"column":9,"nodeType":"VariableDeclaration","source":"        var tiles = itemlist.children;","fix":{"range":[13828,13831],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":381,"column":9,"nodeType":"VariableDeclaration","source":"        var dir = backwards ? 'b' : 'f';","fix":{"range":[15641,15644],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 383 exceeds the maximum line length of 90.","line":383,"column":1,"nodeType":"Program","source":"            debuglog(\"ScrollPanel: Already a \"+dir+\" fill in progress - not starting another\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":394,"column":9,"nodeType":"VariableDeclaration","source":"        var fillPromise;","fix":{"range":[16239,16242],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 411 exceeds the maximum line length of 90.","line":411,"column":1,"nodeType":"Program","source":"            debuglog(\"ScrollPanel: \"+dir+\" fill complete; hasMoreResults:\"+hasMoreResults);"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'mult'.","line":474,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":480,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollNode = this._getScrollNode();","fix":{"range":[19270,19273],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":481,"column":9,"nodeType":"VariableDeclaration","source":"        var delta = mult * scrollNode.clientHeight * 0.5;","fix":{"range":[19318,19321],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'ev'.","line":486,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":541,"column":37,"nodeType":"Property","source":"            pixelOffset: pixelOffset","fix":{"range":[21545,21545],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":552,"column":9,"nodeType":"VariableDeclaration","source":"        var node;","fix":{"range":[21921,21924],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":553,"column":9,"nodeType":"VariableDeclaration","source":"        var messages = this.refs.itemlist.children;","fix":{"range":[21939,21942],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":554,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = messages.length-1; i >= 0; --i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":555,"column":13,"nodeType":"VariableDeclaration","source":"            var m = messages[i];","fix":{"range":[22050,22053],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":568,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollNode = this._getScrollNode();","fix":{"range":[22392,22395],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":569,"column":9,"nodeType":"VariableDeclaration","source":"        var wrapperRect = ReactDOM.findDOMNode(this).getBoundingClientRect();","fix":{"range":[22440,22443],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":570,"column":9,"nodeType":"VariableDeclaration","source":"        var boundingRect = node.getBoundingClientRect();","fix":{"range":[22518,22521],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":571,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollDelta = boundingRect.bottom + pixelOffset - wrapperRect.bottom;","fix":{"range":[22575,22578],"text":"let"}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":580,"column":5,"nodeType":"BlockStatement","source":"    },","fix":{"range":[22896,22898],"text":"\n"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":589,"column":9,"nodeType":"VariableDeclaration","source":"        var itemlist = this.refs.itemlist;","fix":{"range":[23158,23161],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":590,"column":9,"nodeType":"VariableDeclaration","source":"        var wrapperRect = ReactDOM.findDOMNode(this).getBoundingClientRect();","fix":{"range":[23201,23204],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":591,"column":9,"nodeType":"VariableDeclaration","source":"        var messages = itemlist.children;","fix":{"range":[23279,23282],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":593,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = messages.length-1; i >= 0; --i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":594,"column":13,"nodeType":"VariableDeclaration","source":"            var node = messages[i];","fix":{"range":[23381,23384],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":597,"column":13,"nodeType":"VariableDeclaration","source":"            var boundingRect = node.getBoundingClientRect();","fix":{"range":[23471,23474],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":613,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollState = this.scrollState;","fix":{"range":[24077,24080],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":614,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollNode = this._getScrollNode();","fix":{"range":[24121,24124],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'scrollNode' is assigned a value but never used.","line":614,"column":13,"nodeType":"Identifier","source":"        var scrollNode = this._getScrollNode();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":625,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollNode = this._getScrollNode();","fix":{"range":[24494,24497],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":627,"column":9,"nodeType":"VariableDeclaration","source":"        var prevScroll = scrollNode.scrollTop;","fix":{"range":[24543,24546],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 669 exceeds the maximum line length of 90.","line":669,"column":1,"nodeType":"Program","source":"                        <ol ref=\"itemlist\" className=\"mx_RoomView_MessageList\" aria-live=\"polite\">"}],"errorCount":3,"warningCount":43,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require(\"react\");\nvar ReactDOM = require(\"react-dom\");\nvar GeminiScrollbar = require('react-gemini-scrollbar');\nvar q = require(\"q\");\nvar KeyCode = require('../../KeyCode');\n\nvar DEBUG_SCROLL = false;\n// var DEBUG_SCROLL = true;\n\n// The amount of extra scroll distance to allow prior to unfilling.\n// See _getExcessHeight.\nconst UNPAGINATION_PADDING = 1500;\n// The number of milliseconds to debounce calls to onUnfillRequest, to prevent\n// many scroll events causing many unfilling requests.\nconst UNFILL_REQUEST_DEBOUNCE_MS = 200;\n\nif (DEBUG_SCROLL) {\n    // using bind means that we get to keep useful line numbers in the console\n    var debuglog = console.log.bind(console);\n} else {\n    var debuglog = function() {};\n}\n\n/* This component implements an intelligent scrolling list.\n *\n * It wraps a list of <li> children; when items are added to the start or end\n * of the list, the scroll position is updated so that the user still sees the\n * same position in the list.\n *\n * It also provides a hook which allows parents to provide more list elements\n * when we get close to the start or end of the list.\n *\n * Each child element should have a 'data-scroll-token'. This token is used to\n * serialise the scroll state, and returned as the 'trackedScrollToken'\n * attribute by getScrollState().\n *\n * Some notes about the implementation:\n *\n * The saved 'scrollState' can exist in one of two states:\n *\n *   - stuckAtBottom: (the default, and restored by resetScrollState): the\n *     viewport is scrolled down as far as it can be. When the children are\n *     updated, the scroll position will be updated to ensure it is still at\n *     the bottom.\n *\n *   - fixed, in which the viewport is conceptually tied at a specific scroll\n *     offset.  We don't save the absolute scroll offset, because that would be\n *     affected by window width, zoom level, amount of scrollback, etc. Instead\n *     we save an identifier for the last fully-visible message, and the number\n *     of pixels the window was scrolled below it - which is hopefully near\n *     enough.\n *\n * The 'stickyBottom' property controls the behaviour when we reach the bottom\n * of the window (either through a user-initiated scroll, or by calling\n * scrollToBottom). If stickyBottom is enabled, the scrollState will enter\n * 'stuckAtBottom' state - ensuring that new additions cause the window to\n * scroll down further. If stickyBottom is disabled, we just save the scroll\n * offset as normal.\n */\nmodule.exports = React.createClass({\n    displayName: 'ScrollPanel',\n\n    propTypes: {\n        /* stickyBottom: if set to true, then once the user hits the bottom of\n         * the list, any new children added to the list will cause the list to\n         * scroll down to show the new element, rather than preserving the\n         * existing view.\n         */\n        stickyBottom: React.PropTypes.bool,\n\n        /* startAtBottom: if set to true, the view is assumed to start\n         * scrolled to the bottom.\n         * XXX: It's likley this is unecessary and can be derived from\n         * stickyBottom, but I'm adding an extra parameter to ensure\n         * behaviour stays the same for other uses of ScrollPanel.\n         * If so, let's remove this parameter down the line.\n         */\n        startAtBottom: React.PropTypes.bool,\n\n        /* onFillRequest(backwards): a callback which is called on scroll when\n         * the user nears the start (backwards = true) or end (backwards =\n         * false) of the list.\n         *\n         * This should return a promise; no more calls will be made until the\n         * promise completes.\n         *\n         * The promise should resolve to true if there is more data to be\n         * retrieved in this direction (in which case onFillRequest may be\n         * called again immediately), or false if there is no more data in this\n         * directon (at this time) - which will stop the pagination cycle until\n         * the user scrolls again.\n         */\n        onFillRequest: React.PropTypes.func,\n\n        /* onUnfillRequest(backwards): a callback which is called on scroll when\n         * there are children elements that are far out of view and could be removed\n         * without causing pagination to occur.\n         *\n         * This function should accept a boolean, which is true to indicate the back/top\n         * of the panel and false otherwise, and a scroll token, which refers to the\n         * first element to remove if removing from the front/bottom, and last element\n         * to remove if removing from the back/top.\n         */\n        onUnfillRequest: React.PropTypes.func,\n\n        /* onScroll: a callback which is called whenever any scroll happens.\n         */\n        onScroll: React.PropTypes.func,\n\n        /* onResize: a callback which is called whenever the Gemini scroll\n         * panel is resized\n         */\n        onResize: React.PropTypes.func,\n\n        /* className: classnames to add to the top-level div\n         */\n        className: React.PropTypes.string,\n\n        /* style: styles to add to the top-level div\n         */\n        style: React.PropTypes.object,\n    },\n\n    getDefaultProps: function() {\n        return {\n            stickyBottom: true,\n            startAtBottom: true,\n            onFillRequest: function(backwards) { return q(false); },\n            onUnfillRequest: function(backwards, scrollToken) {},\n            onScroll: function() {},\n        };\n    },\n\n    componentWillMount: function() {\n        this._pendingFillRequests = {b: null, f: null};\n        this.resetScrollState();\n    },\n\n    componentDidMount: function() {\n        this.checkFillState();\n    },\n\n    componentDidUpdate: function() {\n        // after adding event tiles, we may need to tweak the scroll (either to\n        // keep at the bottom of the timeline, or to maintain the view after\n        // adding events to the top).\n        //\n        // This will also re-check the fill state, in case the paginate was inadequate\n        this.checkScroll();\n    },\n\n    componentWillUnmount: function() {\n        // set a boolean to say we've been unmounted, which any pending\n        // promises can use to throw away their results.\n        //\n        // (We could use isMounted(), but facebook have deprecated that.)\n        this.unmounted = true;\n    },\n\n    onScroll: function(ev) {\n        var sn = this._getScrollNode();\n        debuglog(\"Scroll event: offset now:\", sn.scrollTop,\n                 \"_lastSetScroll:\", this._lastSetScroll);\n\n        // Sometimes we see attempts to write to scrollTop essentially being\n        // ignored. (Or rather, it is successfully written, but on the next\n        // scroll event, it's been reset again).\n        //\n        // This was observed on Chrome 47, when scrolling using the trackpad in OS\n        // X Yosemite.  Can't reproduce on El Capitan. Our theory is that this is\n        // due to Chrome not being able to cope with the scroll offset being reset\n        // while a two-finger drag is in progress.\n        //\n        // By way of a workaround, we detect this situation and just keep\n        // resetting scrollTop until we see the scroll node have the right\n        // value.\n        if (this._lastSetScroll !== undefined && sn.scrollTop < this._lastSetScroll-200) {\n            console.log(\"Working around vector-im/vector-web#528\");\n            this._restoreSavedScrollState();\n            return;\n        }\n\n        // If there weren't enough children to fill the viewport, the scroll we\n        // got might be different to the scroll we wanted; we don't want to\n        // forget what we wanted, so don't overwrite the saved state unless\n        // this appears to be a user-initiated scroll.\n        if (sn.scrollTop != this._lastSetScroll) {\n            this._saveScrollState();\n        } else {\n            debuglog(\"Ignoring scroll echo\");\n\n            // only ignore the echo once, otherwise we'll get confused when the\n            // user scrolls away from, and back to, the autoscroll point.\n            this._lastSetScroll = undefined;\n        }\n\n        this.props.onScroll(ev);\n\n        this.checkFillState();\n    },\n\n    onResize: function() {\n        this.props.onResize();\n        this.checkScroll();\n        this.refs.geminiPanel.forceUpdate();\n    },\n\n    // after an update to the contents of the panel, check that the scroll is\n    // where it ought to be, and set off pagination requests if necessary.\n    checkScroll: function() {\n        this._restoreSavedScrollState();\n        this.checkFillState();\n    },\n\n    // return true if the content is fully scrolled down right now; else false.\n    //\n    // note that this is independent of the 'stuckAtBottom' state - it is simply\n    // about whether the the content is scrolled down right now, irrespective of\n    // whether it will stay that way when the children update.\n    isAtBottom: function() {\n        var sn = this._getScrollNode();\n\n        // there seems to be some bug with flexbox/gemini/chrome/richvdh's\n        // understanding of the box model, wherein the scrollNode ends up 2\n        // pixels higher than the available space, even when there are less\n        // than a screenful of messages. + 3 is a fudge factor to pretend\n        // that we're at the bottom when we're still a few pixels off.\n\n        return sn.scrollHeight - Math.ceil(sn.scrollTop) <= sn.clientHeight + 3;\n    },\n\n    // returns the vertical height in the given direction that can be removed from\n    // the content box (which has a height of scrollHeight, see checkFillState) without\n    // pagination occuring.\n    //\n    // padding* = UNPAGINATION_PADDING\n    //\n    // ### Region determined as excess.\n    //\n    //   .---------.                        -              -\n    //   |#########|                        |              |\n    //   |#########|   -                    |  scrollTop   |\n    //   |         |   | padding*           |              |\n    //   |         |   |                    |              |\n    // .-+---------+-. -  -                 |              |\n    // : |         | :    |                 |              |\n    // : |         | :    |  clientHeight   |              |\n    // : |         | :    |                 |              |\n    // .-+---------+-.    -                 -              |\n    // | |         | |    |                                |\n    // | |         | |    |  clientHeight                  | scrollHeight\n    // | |         | |    |                                |\n    // `-+---------+-'    -                                |\n    // : |         | :    |                                |\n    // : |         | :    |  clientHeight                  |\n    // : |         | :    |                                |\n    // `-+---------+-' -  -                                |\n    //   |         |   | padding*                          |\n    //   |         |   |                                   |\n    //   |#########|   -                                   |\n    //   |#########|                                       |\n    //   `---------'                                       -\n    _getExcessHeight: function(backwards) {\n        var sn = this._getScrollNode();\n        if (backwards) {\n            return sn.scrollTop - sn.clientHeight - UNPAGINATION_PADDING;\n        } else {\n            return sn.scrollHeight - (sn.scrollTop + 2*sn.clientHeight) - UNPAGINATION_PADDING;\n        }\n    },\n\n    // check the scroll state and send out backfill requests if necessary.\n    checkFillState: function() {\n        if (this.unmounted) {\n            return;\n        }\n\n        var sn = this._getScrollNode();\n\n        // if there is less than a screenful of messages above or below the\n        // viewport, try to get some more messages.\n        //\n        // scrollTop is the number of pixels between the top of the content and\n        //     the top of the viewport.\n        //\n        // scrollHeight is the total height of the content.\n        //\n        // clientHeight is the height of the viewport (excluding borders,\n        // margins, and scrollbars).\n        //\n        //\n        //   .---------.          -                 -\n        //   |         |          |  scrollTop      |\n        // .-+---------+-.    -   -                 |\n        // | |         | |    |                     |\n        // | |         | |    |  clientHeight       | scrollHeight\n        // | |         | |    |                     |\n        // `-+---------+-'    -                     |\n        //   |         |                            |\n        //   |         |                            |\n        //   `---------'                            -\n        //\n\n        if (sn.scrollTop < sn.clientHeight) {\n            // need to back-fill\n            this._maybeFill(true);\n        }\n        if (sn.scrollTop > sn.scrollHeight - sn.clientHeight * 2) {\n            // need to forward-fill\n            this._maybeFill(false);\n        }\n    },\n\n    // check if unfilling is possible and send an unfill request if necessary\n    _checkUnfillState: function(backwards) {\n        let excessHeight = this._getExcessHeight(backwards);\n        if (excessHeight <= 0) {\n            return;\n        }\n        var itemlist = this.refs.itemlist;\n        var tiles = itemlist.children;\n\n        // The scroll token of the first/last tile to be unpaginated\n        let markerScrollToken = null;\n\n        // Subtract clientHeights to simulate the events being unpaginated whilst counting\n        // the events to be unpaginated.\n        if (backwards) {\n            // Iterate forwards from start of tiles, subtracting event tile height\n            let i = 0;\n            while (i < tiles.length && excessHeight > tiles[i].clientHeight) {\n                excessHeight -= tiles[i].clientHeight;\n                if (tiles[i].dataset.scrollToken) {\n                    markerScrollToken = tiles[i].dataset.scrollToken;\n                }\n                i++;\n            }\n        } else {\n            // Iterate backwards from end of tiles, subtracting event tile height\n            let i = tiles.length - 1;\n            while (i > 0 && excessHeight > tiles[i].clientHeight) {\n                excessHeight -= tiles[i].clientHeight;\n                if (tiles[i].dataset.scrollToken) {\n                    markerScrollToken = tiles[i].dataset.scrollToken;\n                }\n                i--;\n            }\n        }\n\n        if (markerScrollToken) {\n            // Use a debouncer to prevent multiple unfill calls in quick succession\n            // This is to make the unfilling process less aggressive\n            if (this._unfillDebouncer) {\n                clearTimeout(this._unfillDebouncer);\n            }\n            this._unfillDebouncer = setTimeout(() => {\n                this._unfillDebouncer = null;\n                this.props.onUnfillRequest(backwards, markerScrollToken);\n            }, UNFILL_REQUEST_DEBOUNCE_MS);\n        }\n    },\n\n    // check if there is already a pending fill request. If not, set one off.\n    _maybeFill: function(backwards) {\n        var dir = backwards ? 'b' : 'f';\n        if (this._pendingFillRequests[dir]) {\n            debuglog(\"ScrollPanel: Already a \"+dir+\" fill in progress - not starting another\");\n            return;\n        }\n\n        debuglog(\"ScrollPanel: starting \"+dir+\" fill\");\n\n        // onFillRequest can end up calling us recursively (via onScroll\n        // events) so make sure we set this before firing off the call. That\n        // does present the risk that we might not ever actually fire off the\n        // fill request, so wrap it in a try/catch.\n        this._pendingFillRequests[dir] = true;\n        var fillPromise;\n        try {\n            fillPromise = this.props.onFillRequest(backwards);\n        } catch (e) {\n            this._pendingFillRequests[dir] = false;\n            throw e;\n        }\n\n        q.finally(fillPromise, () => {\n            this._pendingFillRequests[dir] = false;\n        }).then((hasMoreResults) => {\n            if (this.unmounted) {\n                return;\n            }\n            // Unpaginate once filling is complete\n            this._checkUnfillState(!backwards);\n\n            debuglog(\"ScrollPanel: \"+dir+\" fill complete; hasMoreResults:\"+hasMoreResults);\n            if (hasMoreResults) {\n                // further pagination requests have been disabled until now, so\n                // it's time to check the fill state again in case the pagination\n                // was insufficient.\n                this.checkFillState();\n            }\n        }).done();\n    },\n\n    /* get the current scroll state. This returns an object with the following\n     * properties:\n     *\n     * boolean stuckAtBottom: true if we are tracking the bottom of the\n     *   scroll. false if we are tracking a particular child.\n     *\n     * string trackedScrollToken: undefined if stuckAtBottom is true; if it is\n     *   false, the data-scroll-token of the child which we are tracking.\n     *\n     * number pixelOffset: undefined if stuckAtBottom is true; if it is false,\n     *   the number of pixels the bottom of the tracked child is above the\n     *   bottom of the scroll panel.\n     */\n    getScrollState: function() {\n        return this.scrollState;\n    },\n\n    /* reset the saved scroll state.\n     *\n     * This is useful if the list is being replaced, and you don't want to\n     * preserve scroll even if new children happen to have the same scroll\n     * tokens as old ones.\n     *\n     * This will cause the viewport to be scrolled down to the bottom on the\n     * next update of the child list. This is different to scrollToBottom(),\n     * which would save the current bottom-most child as the active one (so is\n     * no use if no children exist yet, or if you are about to replace the\n     * child list.)\n     */\n    resetScrollState: function() {\n        this.scrollState = {stuckAtBottom: this.props.startAtBottom};\n    },\n\n    /**\n     * jump to the top of the content.\n     */\n    scrollToTop: function() {\n        this._setScrollTop(0);\n        this._saveScrollState();\n    },\n\n    /**\n     * jump to the bottom of the content.\n     */\n    scrollToBottom: function() {\n        // the easiest way to make sure that the scroll state is correctly\n        // saved is to do the scroll, then save the updated state. (Calculating\n        // it ourselves is hard, and we can't rely on an onScroll callback\n        // happening, since there may be no user-visible change here).\n        this._setScrollTop(Number.MAX_VALUE);\n        this._saveScrollState();\n    },\n\n    /**\n     * Page up/down.\n     *\n     * mult: -1 to page up, +1 to page down\n     */\n    scrollRelative: function(mult) {\n        var scrollNode = this._getScrollNode();\n        var delta = mult * scrollNode.clientHeight * 0.5;\n        this._setScrollTop(scrollNode.scrollTop + delta);\n        this._saveScrollState();\n    },\n\n    /**\n     * Scroll up/down in response to a scroll key\n     */\n    handleScrollKey: function(ev) {\n        switch (ev.keyCode) {\n            case KeyCode.PAGE_UP:\n                this.scrollRelative(-1);\n                break;\n\n            case KeyCode.PAGE_DOWN:\n                this.scrollRelative(1);\n                break;\n\n            case KeyCode.HOME:\n                if (ev.ctrlKey) {\n                    this.scrollToTop();\n                }\n                break;\n\n            case KeyCode.END:\n                if (ev.ctrlKey) {\n                    this.scrollToBottom();\n                }\n                break;\n        }\n    },\n\n    /* Scroll the panel to bring the DOM node with the scroll token\n     * `scrollToken` into view.\n     *\n     * offsetBase gives the reference point for the pixelOffset. 0 means the\n     * top of the container, 1 means the bottom, and fractional values mean\n     * somewhere in the middle. If omitted, it defaults to 0.\n     *\n     * pixelOffset gives the number of pixels *above* the offsetBase that the\n     * node (specifically, the bottom of it) will be positioned. If omitted, it\n     * defaults to 0.\n     */\n    scrollToToken: function(scrollToken, pixelOffset, offsetBase) {\n        pixelOffset = pixelOffset || 0;\n        offsetBase = offsetBase || 0;\n\n        // convert pixelOffset so that it is based on the bottom of the\n        // container.\n        pixelOffset += this._getScrollNode().clientHeight * (1-offsetBase);\n\n        // save the desired scroll state. It's important we do this here rather\n        // than as a result of the scroll event, because (a) we might not *get*\n        // a scroll event, and (b) it might not currently be possible to set\n        // the requested scroll state (eg, because we hit the end of the\n        // timeline and need to do more pagination); we want to save the\n        // *desired* scroll state rather than what we end up achieving.\n        this.scrollState = {\n            stuckAtBottom: false,\n            trackedScrollToken: scrollToken,\n            pixelOffset: pixelOffset\n        };\n\n        // ... then make it so.\n        this._restoreSavedScrollState();\n    },\n\n    // set the scrollTop attribute appropriately to position the given child at the\n    // given offset in the window. A helper for _restoreSavedScrollState.\n    _scrollToToken: function(scrollToken, pixelOffset) {\n        /* find the dom node with the right scrolltoken */\n        var node;\n        var messages = this.refs.itemlist.children;\n        for (var i = messages.length-1; i >= 0; --i) {\n            var m = messages[i];\n            if (!m.dataset.scrollToken) continue;\n            if (m.dataset.scrollToken == scrollToken) {\n                node = m;\n                break;\n            }\n        }\n\n        if (!node) {\n            debuglog(\"ScrollPanel: No node with scrollToken '\"+scrollToken+\"'\");\n            return;\n        }\n\n        var scrollNode = this._getScrollNode();\n        var wrapperRect = ReactDOM.findDOMNode(this).getBoundingClientRect();\n        var boundingRect = node.getBoundingClientRect();\n        var scrollDelta = boundingRect.bottom + pixelOffset - wrapperRect.bottom;\n\n        debuglog(\"Scrolling to token '\" + node.dataset.scrollToken + \"'+\" +\n                 pixelOffset + \" (delta: \"+scrollDelta+\")\");\n\n        if(scrollDelta != 0) {\n            this._setScrollTop(scrollNode.scrollTop + scrollDelta);\n        }\n\n    },\n\n    _saveScrollState: function() {\n        if (this.props.stickyBottom && this.isAtBottom()) {\n            this.scrollState = { stuckAtBottom: true };\n            debuglog(\"Saved scroll state\", this.scrollState);\n            return;\n        }\n\n        var itemlist = this.refs.itemlist;\n        var wrapperRect = ReactDOM.findDOMNode(this).getBoundingClientRect();\n        var messages = itemlist.children;\n\n        for (var i = messages.length-1; i >= 0; --i) {\n            var node = messages[i];\n            if (!node.dataset.scrollToken) continue;\n\n            var boundingRect = node.getBoundingClientRect();\n            if (boundingRect.bottom < wrapperRect.bottom) {\n                this.scrollState = {\n                    stuckAtBottom: false,\n                    trackedScrollToken: node.dataset.scrollToken,\n                    pixelOffset: wrapperRect.bottom - boundingRect.bottom,\n                };\n                debuglog(\"Saved scroll state\", this.scrollState);\n                return;\n            }\n        }\n\n        debuglog(\"Unable to save scroll state: found no children in the viewport\");\n    },\n\n    _restoreSavedScrollState: function() {\n        var scrollState = this.scrollState;\n        var scrollNode = this._getScrollNode();\n\n        if (scrollState.stuckAtBottom) {\n            this._setScrollTop(Number.MAX_VALUE);\n        } else if (scrollState.trackedScrollToken) {\n            this._scrollToToken(scrollState.trackedScrollToken,\n                               scrollState.pixelOffset);\n        }\n    },\n\n    _setScrollTop: function(scrollTop) {\n        var scrollNode = this._getScrollNode();\n\n        var prevScroll = scrollNode.scrollTop;\n\n        // FF ignores attempts to set scrollTop to very large numbers\n        scrollNode.scrollTop = Math.min(scrollTop, scrollNode.scrollHeight);\n\n        // If this change generates a scroll event, we should not update the\n        // saved scroll state on it. See the comments in onScroll.\n        //\n        // If we *don't* expect a scroll event, we need to leave _lastSetScroll\n        // alone, otherwise we'll end up ignoring a future scroll event which is\n        // nothing to do with this change.\n\n        if (scrollNode.scrollTop != prevScroll) {\n            this._lastSetScroll = scrollNode.scrollTop;\n        }\n\n        debuglog(\"Set scrollTop:\", scrollNode.scrollTop,\n                 \"requested:\", scrollTop,\n                 \"_lastSetScroll:\", this._lastSetScroll);\n    },\n\n    /* get the DOM node which has the scrollTop property we care about for our\n     * message panel.\n     */\n    _getScrollNode: function() {\n        if (this.unmounted) {\n            // this shouldn't happen, but when it does, turn the NPE into\n            // something more meaningful.\n            throw new Error(\"ScrollPanel._getScrollNode called when unmounted\");\n        }\n\n        return this.refs.geminiPanel.scrollbar.getViewElement();\n    },\n\n    render: function() {\n        // TODO: the classnames on the div and ol could do with being updated to\n        // reflect the fact that we don't necessarily contain a list of messages.\n        // it's not obvious why we have a separate div and ol anyway.\n        return (<GeminiScrollbar autoshow={true} ref=\"geminiPanel\"\n                onScroll={this.onScroll} onResize={this.onResize}\n                className={this.props.className} style={this.props.style}>\n                    <div className=\"mx_RoomView_messageListWrapper\">\n                        <ol ref=\"itemlist\" className=\"mx_RoomView_MessageList\" aria-live=\"polite\">\n                            {this.props.children}\n                        </ol>\n                    </div>\n                </GeminiScrollbar>\n               );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/TimelinePanel.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[592,595],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[629,632],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Matrix = require(\"matrix-js-sdk\");","fix":{"range":[652,655],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var EventTimeline = Matrix.EventTimeline;","fix":{"range":[691,694],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../index');","fix":{"range":[734,737],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../MatrixClientPeg\");","fix":{"range":[768,771],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../dispatcher\");","fix":{"range":[824,827],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var ObjectUtils = require('../../ObjectUtils');","fix":{"range":[863,866],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../Modal\");","fix":{"range":[911,914],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var UserActivity = require(\"../../UserActivity\");","fix":{"range":[947,950],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","source":"var KeyCode = require('../../KeyCode');","fix":{"range":[997,1000],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":32,"column":1,"nodeType":"VariableDeclaration","source":"var PAGINATE_SIZE = 20;","fix":{"range":[1038,1041],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":1,"nodeType":"VariableDeclaration","source":"var INITIAL_SIZE = 20;","fix":{"range":[1062,1065],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":35,"column":1,"nodeType":"VariableDeclaration","source":"var DEBUG = false;","fix":{"range":[1086,1089],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":39,"column":5,"nodeType":"VariableDeclaration","source":"    var debuglog = console.log.bind(console);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":41,"column":5,"nodeType":"VariableDeclaration","source":"    var debuglog = function() {};"},{"ruleId":"no-redeclare","severity":2,"message":"'debuglog' is already defined.","line":41,"column":9,"nodeType":"Identifier","source":"    var debuglog = function() {};"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":1,"nodeType":"VariableDeclaration","source":"var TimelinePanel = React.createClass({"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":122,"column":13,"nodeType":"VariableDeclaration","source":"            var initialReadMarker ="},{"ruleId":"max-len","severity":1,"message":"Line 197 exceeds the maximum line length of 90.","line":197,"column":1,"nodeType":"Program","source":"            console.warn(\"Replacing timelineSet on a TimelinePanel - confusion may ensue\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":240,"column":9,"nodeType":"VariableDeclaration","source":"        var client = MatrixClientPeg.get();","fix":{"range":[8891,8894],"text":"let"}},{"ruleId":"prefer-const","severity":1,"message":"'dir' is never reassigned. Use 'const' instead.","line":251,"column":13,"nodeType":"Identifier","source":"        let dir = backwards ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS;","fix":{"range":[9429,9432],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'eventId' is never reassigned. Use 'const' instead.","line":255,"column":13,"nodeType":"Identifier","source":"        let eventId = scrollToken;","fix":{"range":[9668,9671],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'marker' is never reassigned. Use 'const' instead.","line":257,"column":13,"nodeType":"Identifier","source":"        let marker = this.state.events.findIndex(","fix":{"range":[9704,9707],"text":"const"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":260,"column":14,"nodeType":"ArrowFunctionExpression","source":"            }","fix":{"range":[9828,9828],"text":","}},{"ruleId":"prefer-const","severity":1,"message":"'count' is never reassigned. Use 'const' instead.","line":263,"column":13,"nodeType":"Identifier","source":"        let count = backwards ? marker + 1 : this.state.events.length - marker;","fix":{"range":[9849,9852],"text":"const"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":280,"column":9,"nodeType":"VariableDeclaration","source":"        var dir = backwards ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS;","fix":{"range":[10489,10492],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":281,"column":9,"nodeType":"VariableDeclaration","source":"        var canPaginateKey = backwards ? 'canBackPaginate' : 'canForwardPaginate';","fix":{"range":[10569,10572],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":282,"column":9,"nodeType":"VariableDeclaration","source":"        var paginatingKey = backwards ? 'backPaginating' : 'forwardPaginating';","fix":{"range":[10652,10655],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 301 exceeds the maximum line length of 90.","line":301,"column":1,"nodeType":"Program","source":"            debuglog(\"TimelinePanel: paginate complete backwards:\"+backwards+\"; success:\"+r);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":303,"column":13,"nodeType":"VariableDeclaration","source":"            var newState = {","fix":{"range":[11475,11478],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 311 exceeds the maximum line length of 90.","line":311,"column":1,"nodeType":"Program","source":"            var otherDirection = backwards ? EventTimeline.FORWARDS : EventTimeline.BACKWARDS;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":311,"column":13,"nodeType":"VariableDeclaration","source":"            var otherDirection = backwards ? EventTimeline.FORWARDS : EventTimeline.BACKWARDS;","fix":{"range":[11784,11787],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 312 exceeds the maximum line length of 90.","line":312,"column":1,"nodeType":"Program","source":"            var canPaginateOtherWayKey = backwards ? 'canForwardPaginate' : 'canBackPaginate';"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":312,"column":13,"nodeType":"VariableDeclaration","source":"            var canPaginateOtherWayKey = backwards ? 'canForwardPaginate' : 'canBackPaginate';","fix":{"range":[11879,11882],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":385,"column":13,"nodeType":"VariableDeclaration","source":"            var events = this._timelineWindow.getEvents();","fix":{"range":[14880,14883],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":386,"column":13,"nodeType":"VariableDeclaration","source":"            var lastEv = events[events.length-1];","fix":{"range":[14939,14942],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 389 exceeds the maximum line length of 90.","line":389,"column":1,"nodeType":"Program","source":"            if (this.props.timelineSet.room && !this._timelineWindow.canPaginate(EventTimeline.FORWARDS)) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":393,"column":13,"nodeType":"VariableDeclaration","source":"            var updatedState = {events: events};","fix":{"range":[15276,15279],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":404,"column":17,"nodeType":"VariableDeclaration","source":"                var myUserId = MatrixClientPeg.get().credentials.userId;","fix":{"range":[15857,15860],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":405,"column":17,"nodeType":"VariableDeclaration","source":"                var sender = ev.sender ? ev.sender.userId : null;","fix":{"range":[15930,15933],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":406,"column":17,"nodeType":"VariableDeclaration","source":"                var callback = null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":477,"column":9,"nodeType":"VariableDeclaration","source":"        var currentReadUpToEventId = this._getCurrentReadReceipt(true);","fix":{"range":[18637,18640],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":478,"column":9,"nodeType":"VariableDeclaration","source":"        var currentReadUpToEventIndex = this._indexForEventId(currentReadUpToEventId);","fix":{"range":[18709,18712],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":498,"column":9,"nodeType":"VariableDeclaration","source":"        var lastReadEventIndex = this._getLastDisplayedEventIndex({","fix":{"range":[19730,19733],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":499,"column":28,"nodeType":"Property","source":"            ignoreOwn: true","fix":{"range":[19817,19817],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":503,"column":9,"nodeType":"VariableDeclaration","source":"        var lastReadEvent = this.state.events[lastReadEventIndex];","fix":{"range":[19888,19891],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":533,"column":9,"nodeType":"VariableDeclaration","source":"        var lastDisplayedIndex = this._getLastDisplayedEventIndex({","fix":{"range":[21365,21368],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":542,"column":9,"nodeType":"VariableDeclaration","source":"        var lastDisplayedEvent = this.state.events[lastDisplayedIndex];","fix":{"range":[21584,21587],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":563,"column":9,"nodeType":"VariableDeclaration","source":"        var events = this._timelineWindow.getEvents();","fix":{"range":[22392,22395],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":566,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < events.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":576,"column":9,"nodeType":"VariableDeclaration","source":"        var myUserId = MatrixClientPeg.get().credentials.userId;","fix":{"range":[22765,22768],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":578,"column":13,"nodeType":"VariableDeclaration","source":"            var ev = events[i];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":586,"column":9,"nodeType":"VariableDeclaration","source":"        var ev = events[i];"},{"ruleId":"no-redeclare","severity":2,"message":"'ev' is already defined.","line":586,"column":13,"nodeType":"Identifier","source":"        var ev = events[i];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":621,"column":9,"nodeType":"VariableDeclaration","source":"        var ret = this.refs.messagePanel.getReadMarkerPosition();","fix":{"range":[24465,24468],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":642,"column":9,"nodeType":"VariableDeclaration","source":"        var rmId = this._getCurrentReadReceipt();","fix":{"range":[25261,25264],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":645,"column":9,"nodeType":"VariableDeclaration","source":"        var tl = this.props.timelineSet.getTimelineForEvent(rmId);","fix":{"range":[25369,25372],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":646,"column":9,"nodeType":"VariableDeclaration","source":"        var rmTs;","fix":{"range":[25436,25439],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":648,"column":13,"nodeType":"VariableDeclaration","source":"            var event = tl.getEvents().find((e) => { return e.getId() == rmId; });","fix":{"range":[25476,25479],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":688,"column":9,"nodeType":"VariableDeclaration","source":"        var ret = this.refs.messagePanel.getReadMarkerPosition();","fix":{"range":[26691,26694],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":695,"column":9,"nodeType":"VariableDeclaration","source":"        var rmTs = TimelinePanel.roomReadMarkerTsMap[this.props.timelineSet.roomId];","fix":{"range":[26971,26974],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'ev'.","line":707,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":725,"column":9,"nodeType":"VariableDeclaration","source":"        var initialEvent = props.eventId;","fix":{"range":[27842,27845],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":726,"column":9,"nodeType":"VariableDeclaration","source":"        var pixelOffset = props.eventPixelOffset;","fix":{"range":[27884,27887],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":730,"column":9,"nodeType":"VariableDeclaration","source":"        var offsetBase = 1;","fix":{"range":[28085,28088],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":759,"column":9,"nodeType":"VariableDeclaration","source":"        var onLoaded = () => {","fix":{"range":[29224,29227],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 768 exceeds the maximum line length of 90.","line":768,"column":1,"nodeType":"Program","source":"                canBackPaginate: this._timelineWindow.canPaginate(EventTimeline.BACKWARDS),"},{"ruleId":"max-len","severity":1,"message":"Line 769 exceeds the maximum line length of 90.","line":769,"column":1,"nodeType":"Program","source":"                canForwardPaginate: this._timelineWindow.canPaginate(EventTimeline.FORWARDS),"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":794,"column":9,"nodeType":"VariableDeclaration","source":"        var onError = (error) => {","fix":{"range":[30805,30808],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":796,"column":13,"nodeType":"VariableDeclaration","source":"            var msg = error.message ? error.message : JSON.stringify(error);","fix":{"range":[30897,30900],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'msg' is assigned a value but never used.","line":796,"column":17,"nodeType":"Identifier","source":"            var msg = error.message ? error.message : JSON.stringify(error);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":797,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[30974,30977],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":799,"column":13,"nodeType":"VariableDeclaration","source":"            var onFinished;","fix":{"range":[31046,31049],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":814,"column":13,"nodeType":"VariableDeclaration","source":"            var message = \"Tried to load a specific point in this room's timeline, but \";","fix":{"range":[31702,31705],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":827,"column":9,"nodeType":"VariableDeclaration","source":"        var prom = this._timelineWindow.load(eventId, INITIAL_SIZE);","fix":{"range":[32227,32230],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":868,"column":9,"nodeType":"VariableDeclaration","source":"        var events = this._timelineWindow.getEvents();","fix":{"range":[33605,33608],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":879,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < this.state.events.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":889,"column":9,"nodeType":"VariableDeclaration","source":"        var ignoreOwn = opts.ignoreOwn || false;","fix":{"range":[34238,34241],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":890,"column":9,"nodeType":"VariableDeclaration","source":"        var ignoreEchoes = opts.ignoreEchoes || false;","fix":{"range":[34287,34290],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":891,"column":9,"nodeType":"VariableDeclaration","source":"        var allowPartial = opts.allowPartial || false;","fix":{"range":[34342,34345],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":893,"column":9,"nodeType":"VariableDeclaration","source":"        var messagePanel = this.refs.messagePanel;","fix":{"range":[34398,34401],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":896,"column":9,"nodeType":"VariableDeclaration","source":"        var wrapperRect = ReactDOM.findDOMNode(messagePanel).getBoundingClientRect();","fix":{"range":[34503,34506],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":897,"column":9,"nodeType":"VariableDeclaration","source":"        var myUserId = MatrixClientPeg.get().credentials.userId;","fix":{"range":[34589,34592],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":899,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = this.state.events.length-1; i >= 0; --i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":900,"column":13,"nodeType":"VariableDeclaration","source":"            var ev = this.state.events[i];","fix":{"range":[34723,34726],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":911,"column":13,"nodeType":"VariableDeclaration","source":"            var node = messagePanel.getNodeForEventId(ev.getId());","fix":{"range":[35017,35020],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":914,"column":13,"nodeType":"VariableDeclaration","source":"            var boundingRect = node.getBoundingClientRect();","fix":{"range":[35118,35121],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":923,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":932,"column":9,"nodeType":"VariableDeclaration","source":"        var client = MatrixClientPeg.get();","fix":{"range":[35845,35848],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":938,"column":9,"nodeType":"VariableDeclaration","source":"        var myUserId = client.credentials.userId;","fix":{"range":[35999,36002],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":943,"column":9,"nodeType":"VariableDeclaration","source":"        var roomId = this.props.timelineSet.room.roomId;","fix":{"range":[36213,36216],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":971,"column":9,"nodeType":"VariableDeclaration","source":"        var MessagePanel = sdk.getComponent(\"structures.MessagePanel\");","fix":{"range":[37166,37169],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":972,"column":9,"nodeType":"VariableDeclaration","source":"        var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[37238,37241],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 987 exceeds the maximum line length of 90.","line":987,"column":1,"nodeType":"Program","source":"                    <div className={ this.props.className + \" mx_RoomView_messageListWrapper\" }>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1001,"column":9,"nodeType":"VariableDeclaration","source":"        var stickyBottom = !this._timelineWindow.canPaginate(EventTimeline.FORWARDS);","fix":{"range":[38578,38581],"text":"let"}}],"errorCount":5,"warningCount":92,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar ReactDOM = require(\"react-dom\");\nvar q = require(\"q\");\n\nvar Matrix = require(\"matrix-js-sdk\");\nvar EventTimeline = Matrix.EventTimeline;\n\nvar sdk = require('../../index');\nvar MatrixClientPeg = require(\"../../MatrixClientPeg\");\nvar dis = require(\"../../dispatcher\");\nvar ObjectUtils = require('../../ObjectUtils');\nvar Modal = require(\"../../Modal\");\nvar UserActivity = require(\"../../UserActivity\");\nvar KeyCode = require('../../KeyCode');\n\nvar PAGINATE_SIZE = 20;\nvar INITIAL_SIZE = 20;\n\nvar DEBUG = false;\n\nif (DEBUG) {\n    // using bind means that we get to keep useful line numbers in the console\n    var debuglog = console.log.bind(console);\n} else {\n    var debuglog = function() {};\n}\n\n/*\n * Component which shows the event timeline in a room view.\n *\n * Also responsible for handling and sending read receipts.\n */\nvar TimelinePanel = React.createClass({\n    displayName: 'TimelinePanel',\n\n    propTypes: {\n        // The js-sdk EventTimelineSet object for the timeline sequence we are\n        // representing.  This may or may not have a room, depending on what it's\n        // a timeline representing.  If it has a room, we maintain RRs etc for\n        // that room.\n        timelineSet: React.PropTypes.object.isRequired,\n\n        // Enable managing RRs and RMs. These require the timelineSet to have a room.\n        manageReadReceipts: React.PropTypes.bool,\n        manageReadMarkers: React.PropTypes.bool,\n\n        // true to give the component a 'display: none' style.\n        hidden: React.PropTypes.bool,\n\n        // ID of an event to highlight. If undefined, no event will be highlighted.\n        // typically this will be either 'eventId' or undefined.\n        highlightedEventId: React.PropTypes.string,\n\n        // id of an event to jump to. If not given, will go to the end of the\n        // live timeline.\n        eventId: React.PropTypes.string,\n\n        // where to position the event given by eventId, in pixels from the\n        // bottom of the viewport. If not given, will try to put the event\n        // half way down the viewport.\n        eventPixelOffset: React.PropTypes.number,\n\n        // Should we show URL Previews\n        showUrlPreview: React.PropTypes.bool,\n\n        // callback which is called when the panel is scrolled.\n        onScroll: React.PropTypes.func,\n\n        // callback which is called when the read-up-to mark is updated.\n        onReadMarkerUpdated: React.PropTypes.func,\n\n        // opacity for dynamic UI fading effects\n        opacity: React.PropTypes.number,\n\n        // maximum number of events to show in a timeline\n        timelineCap: React.PropTypes.number,\n\n        // classname to use for the messagepanel\n        className: React.PropTypes.string,\n\n        // shape property to be passed to EventTiles\n        tileShape: React.PropTypes.string,\n    },\n\n    statics: {\n        // a map from room id to read marker event ID\n        roomReadMarkerMap: {},\n\n        // a map from room id to read marker event timestamp\n        roomReadMarkerTsMap: {},\n    },\n\n    getDefaultProps: function() {\n        return {\n            // By default, disable the timelineCap in favour of unpaginating based on\n            // event tile heights. (See _unpaginateEvents)\n            timelineCap: Number.MAX_VALUE,\n            className: 'mx_RoomView_messagePanel',\n        };\n    },\n\n    getInitialState: function() {\n        // XXX: we could track RM per TimelineSet rather than per Room.\n        // but for now we just do it per room for simplicity.\n        if (this.props.manageReadMarkers) {\n            var initialReadMarker =\n                TimelinePanel.roomReadMarkerMap[this.props.timelineSet.room.roomId]\n                           || this._getCurrentReadReceipt();\n        }\n\n        return {\n            events: [],\n            timelineLoading: true, // track whether our room timeline is loading\n\n            // canBackPaginate == false may mean:\n            //\n            // * we haven't (successfully) loaded the timeline yet, or:\n            //\n            // * we have got to the point where the room was created, or:\n            //\n            // * the server indicated that there were no more visible events\n            //  (normally implying we got to the start of the room), or:\n            //\n            // * we gave up asking the server for more events\n            canBackPaginate: false,\n\n            // canForwardPaginate == false may mean:\n            //\n            // * we haven't (successfully) loaded the timeline yet\n            //\n            // * we have got to the end of time and are now tracking the live\n            //   timeline, or:\n            //\n            // * the server indicated that there were no more visible events\n            //   (not sure if this ever happens when we're not at the live\n            //   timeline), or:\n            //\n            // * we are looking at some historical point, but gave up asking\n            //   the server for more events\n            canForwardPaginate: false,\n\n            // start with the read-marker visible, so that we see its animated\n            // disappearance when switching into the room.\n            readMarkerVisible: true,\n\n            readMarkerEventId: initialReadMarker,\n\n            backPaginating: false,\n            forwardPaginating: false,\n        };\n    },\n\n    componentWillMount: function() {\n        debuglog(\"TimelinePanel: mounting\");\n\n        this.last_rr_sent_event_id = undefined;\n\n        this.dispatcherRef = dis.register(this.onAction);\n        MatrixClientPeg.get().on(\"Room.timeline\", this.onRoomTimeline);\n        MatrixClientPeg.get().on(\"Room.timelineReset\", this.onRoomTimelineReset);\n        MatrixClientPeg.get().on(\"Room.redaction\", this.onRoomRedaction);\n        MatrixClientPeg.get().on(\"Room.receipt\", this.onRoomReceipt);\n        MatrixClientPeg.get().on(\"Room.localEchoUpdated\", this.onLocalEchoUpdated);\n\n        this._initTimeline(this.props);\n    },\n\n    componentWillReceiveProps: function(newProps) {\n        if (newProps.timelineSet !== this.props.timelineSet) {\n            // throw new Error(\"changing timelineSet on a TimelinePanel is not supported\");\n\n            // regrettably, this does happen; in particular, when joining a\n            // room with /join. In that case, there are two Rooms in\n            // circulation - one which is created by the MatrixClient.joinRoom\n            // call and used to create the RoomView, and a second which is\n            // created by the sync loop once the room comes back down the /sync\n            // pipe. Once the latter happens, our room is replaced with the new one.\n            //\n            // for now, just warn about this. But we're going to end up paginating\n            // both rooms separately, and it's all bad.\n            console.warn(\"Replacing timelineSet on a TimelinePanel - confusion may ensue\");\n        }\n\n        if (newProps.eventId != this.props.eventId) {\n            console.log(\"TimelinePanel switching to eventId \" + newProps.eventId +\n                        \" (was \" + this.props.eventId + \")\");\n            return this._initTimeline(newProps);\n        }\n    },\n\n    shouldComponentUpdate: function(nextProps, nextState) {\n        if (!ObjectUtils.shallowEqual(this.props, nextProps)) {\n            if (DEBUG) {\n                console.group(\"Timeline.shouldComponentUpdate: props change\");\n                console.log(\"props before:\", this.props);\n                console.log(\"props after:\", nextProps);\n                console.groupEnd();\n            }\n            return true;\n        }\n\n        if (!ObjectUtils.shallowEqual(this.state, nextState)) {\n            if (DEBUG) {\n                console.group(\"Timeline.shouldComponentUpdate: state change\");\n                console.log(\"state before:\", this.state);\n                console.log(\"state after:\", nextState);\n                console.groupEnd();\n            }\n            return true;\n        }\n\n        return false;\n    },\n\n    componentWillUnmount: function() {\n        // set a boolean to say we've been unmounted, which any pending\n        // promises can use to throw away their results.\n        //\n        // (We could use isMounted, but facebook have deprecated that.)\n        this.unmounted = true;\n\n        dis.unregister(this.dispatcherRef);\n\n        var client = MatrixClientPeg.get();\n        if (client) {\n            client.removeListener(\"Room.timeline\", this.onRoomTimeline);\n            client.removeListener(\"Room.timelineReset\", this.onRoomTimelineReset);\n            client.removeListener(\"Room.redaction\", this.onRoomRedaction);\n            client.removeListener(\"Room.receipt\", this.onRoomReceipt);\n            client.removeListener(\"Room.localEchoUpdated\", this.onLocalEchoUpdated);\n        }\n    },\n\n    onMessageListUnfillRequest: function(backwards, scrollToken) {\n        let dir = backwards ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS;\n        debuglog(\"TimelinePanel: unpaginating events in direction\", dir);\n\n        // All tiles are inserted by MessagePanel to have a scrollToken === eventId\n        let eventId = scrollToken;\n\n        let marker = this.state.events.findIndex(\n            (ev) => {\n                return ev.getId() === eventId;\n            }\n        );\n\n        let count = backwards ? marker + 1 : this.state.events.length - marker;\n\n        if (count > 0) {\n            debuglog(\"TimelinePanel: Unpaginating\", count, \"in direction\", dir);\n            this._timelineWindow.unpaginate(count, backwards);\n\n            // We can now paginate in the unpaginated direction\n            const canPaginateKey = (backwards) ? 'canBackPaginate' : 'canForwardPaginate';\n            this.setState({\n                [canPaginateKey]: true,\n                events: this._getEvents(),\n            });\n        }\n    },\n\n    // set off a pagination request.\n    onMessageListFillRequest: function(backwards) {\n        var dir = backwards ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS;\n        var canPaginateKey = backwards ? 'canBackPaginate' : 'canForwardPaginate';\n        var paginatingKey = backwards ? 'backPaginating' : 'forwardPaginating';\n\n        if (!this.state[canPaginateKey]) {\n            debuglog(\"TimelinePanel: have given up\", dir, \"paginating this timeline\");\n            return q(false);\n        }\n\n        if(!this._timelineWindow.canPaginate(dir)) {\n            debuglog(\"TimelinePanel: can't\", dir, \"paginate any further\");\n            this.setState({[canPaginateKey]: false});\n            return q(false);\n        }\n\n        debuglog(\"TimelinePanel: Initiating paginate; backwards:\"+backwards);\n        this.setState({[paginatingKey]: true});\n\n        return this._timelineWindow.paginate(dir, PAGINATE_SIZE).then((r) => {\n            if (this.unmounted) { return; }\n\n            debuglog(\"TimelinePanel: paginate complete backwards:\"+backwards+\"; success:\"+r);\n\n            var newState = {\n                [paginatingKey]: false,\n                [canPaginateKey]: r,\n                events: this._getEvents(),\n            };\n\n            // moving the window in this direction may mean that we can now\n            // paginate in the other where we previously could not.\n            var otherDirection = backwards ? EventTimeline.FORWARDS : EventTimeline.BACKWARDS;\n            var canPaginateOtherWayKey = backwards ? 'canForwardPaginate' : 'canBackPaginate';\n            if (!this.state[canPaginateOtherWayKey] &&\n                    this._timelineWindow.canPaginate(otherDirection)) {\n                debuglog('TimelinePanel: can now', otherDirection, 'paginate again');\n                newState[canPaginateOtherWayKey] = true;\n            }\n\n            this.setState(newState);\n\n            return r;\n        });\n    },\n\n    onMessageListScroll: function() {\n        if (this.props.onScroll) {\n            this.props.onScroll();\n        }\n\n        if (this.props.manageReadMarkers) {\n            // we hide the read marker when it first comes onto the screen, but if\n            // it goes back off the top of the screen (presumably because the user\n            // clicks on the 'jump to bottom' button), we need to re-enable it.\n            if (this.getReadMarkerPosition() < 0) {\n                this.setState({readMarkerVisible: true});\n            }\n        }\n    },\n\n    onAction: function(payload) {\n        switch (payload.action) {\n            case 'user_activity':\n            case 'user_activity_end':\n                // we could treat user_activity_end differently and not\n                // send receipts for messages that have arrived between\n                // the actual user activity and the time they stopped\n                // being active, but let's see if this is actually\n                // necessary.\n                this.sendReadReceipt();\n                this.updateReadMarker();\n                break;\n        }\n    },\n\n    onRoomTimeline: function(ev, room, toStartOfTimeline, removed, data) {\n        // ignore events for other timeline sets\n        if (data.timeline.getTimelineSet() !== this.props.timelineSet) return;\n\n        // ignore anything but real-time updates at the end of the room:\n        // updates from pagination will happen when the paginate completes.\n        if (toStartOfTimeline || !data || !data.liveEvent) return;\n\n        if (!this.refs.messagePanel) return;\n\n        if (!this.refs.messagePanel.getScrollState().stuckAtBottom) {\n            // we won't load this event now, because we don't want to push any\n            // events off the other end of the timeline. But we need to note\n            // that we can now paginate.\n            this.setState({canForwardPaginate: true});\n            return;\n        }\n\n        // tell the timeline window to try to advance itself, but not to make\n        // an http request to do so.\n        //\n        // we deliberately avoid going via the ScrollPanel for this call - the\n        // ScrollPanel might already have an active pagination promise, which\n        // will fail, but would stop us passing the pagination request to the\n        // timeline window.\n        //\n        // see https://github.com/vector-im/vector-web/issues/1035\n        this._timelineWindow.paginate(EventTimeline.FORWARDS, 1, false).done(() => {\n            if (this.unmounted) { return; }\n\n            var events = this._timelineWindow.getEvents();\n            var lastEv = events[events.length-1];\n\n            // if we're at the end of the live timeline, append the pending events\n            if (this.props.timelineSet.room && !this._timelineWindow.canPaginate(EventTimeline.FORWARDS)) {\n                events.push(...this.props.timelineSet.room.getPendingEvents());\n            }\n\n            var updatedState = {events: events};\n\n            if (this.props.manageReadMarkers) {\n                // when a new event arrives when the user is not watching the\n                // window, but the window is in its auto-scroll mode, make sure the\n                // read marker is visible.\n                //\n                // We ignore events we have sent ourselves; we don't want to see the\n                // read-marker when a remote echo of an event we have just sent takes\n                // more than the timeout on userCurrentlyActive.\n                //\n                var myUserId = MatrixClientPeg.get().credentials.userId;\n                var sender = ev.sender ? ev.sender.userId : null;\n                var callback = null;\n                if (sender != myUserId && !UserActivity.userCurrentlyActive()) {\n                    updatedState.readMarkerVisible = true;\n                } else if(lastEv && this.getReadMarkerPosition() === 0) {\n                    // we know we're stuckAtBottom, so we can advance the RM\n                    // immediately, to save a later render cycle\n                    this._setReadMarker(lastEv.getId(), lastEv.getTs(), true);\n                    updatedState.readMarkerVisible = false;\n                    updatedState.readMarkerEventId = lastEv.getId();\n                    callback = this.props.onReadMarkerUpdated;\n                }\n            }\n\n            this.setState(updatedState, callback);\n        });\n    },\n\n    onRoomTimelineReset: function(room, timelineSet) {\n        if (timelineSet !== this.props.timelineSet) return;\n\n        if (this.refs.messagePanel && this.refs.messagePanel.isAtBottom()) {\n            this._loadTimeline();\n        }\n    },\n\n    onRoomRedaction: function(ev, room) {\n        if (this.unmounted) return;\n\n        // ignore events for other rooms\n        if (room !== this.props.timelineSet.room) return;\n\n        // we could skip an update if the event isn't in our timeline,\n        // but that's probably an early optimisation.\n        this.forceUpdate();\n    },\n\n    onRoomReceipt: function(ev, room) {\n        if (this.unmounted) return;\n\n        // ignore events for other rooms\n        if (room !== this.props.timelineSet.room) return;\n\n        this.forceUpdate();\n    },\n\n    onLocalEchoUpdated: function(ev, room, oldEventId) {\n        if (this.unmounted) return;\n\n        // ignore events for other rooms\n        if (room !== this.props.timelineSet.room) return;\n\n        this._reloadEvents();\n    },\n\n\n    sendReadReceipt: function() {\n        if (!this.refs.messagePanel) return;\n        if (!this.props.manageReadReceipts) return;\n        // This happens on user_activity_end which is delayed, and it's\n        // very possible have logged out within that timeframe, so check\n        // we still have a client.\n        if (!MatrixClientPeg.get()) return;\n\n        // if we are scrolled to the bottom, do a quick-reset of our unreadNotificationCount\n        // to avoid having to wait from the remote echo from the homeserver.\n        if (this.isAtEndOfLiveTimeline()) {\n            this.props.timelineSet.room.setUnreadNotificationCount('total', 0);\n            this.props.timelineSet.room.setUnreadNotificationCount('highlight', 0);\n            // XXX: i'm a bit surprised we don't have to emit an event or dispatch to get this picked up\n        }\n\n        var currentReadUpToEventId = this._getCurrentReadReceipt(true);\n        var currentReadUpToEventIndex = this._indexForEventId(currentReadUpToEventId);\n\n        // We want to avoid sending out read receipts when we are looking at\n        // events in the past which are before the latest RR.\n        //\n        // For now, let's apply a heuristic: if (a) the event corresponding to\n        // the latest RR (either from the server, or sent by ourselves) doesn't\n        // appear in our timeline, and (b) we could forward-paginate the event\n        // timeline, then don't send any more RRs.\n        //\n        // This isn't watertight, as we could be looking at a section of\n        // timeline which is *after* the latest RR (so we should actually send\n        // RRs) - but that is a bit of a niche case. It will sort itself out when\n        // the user eventually hits the live timeline.\n        //\n        if (currentReadUpToEventId && currentReadUpToEventIndex === null &&\n                this._timelineWindow.canPaginate(EventTimeline.FORWARDS)) {\n            return;\n        }\n\n        var lastReadEventIndex = this._getLastDisplayedEventIndex({\n            ignoreOwn: true\n        });\n        if (lastReadEventIndex === null) return;\n\n        var lastReadEvent = this.state.events[lastReadEventIndex];\n\n        // we also remember the last read receipt we sent to avoid spamming the\n        // same one at the server repeatedly\n        if (lastReadEventIndex > currentReadUpToEventIndex\n                && this.last_rr_sent_event_id != lastReadEvent.getId()) {\n            this.last_rr_sent_event_id = lastReadEvent.getId();\n            MatrixClientPeg.get().sendReadReceipt(lastReadEvent).catch(() => {\n                // it failed, so allow retries next time the user is active\n                this.last_rr_sent_event_id = undefined;\n            });\n        }\n    },\n\n    // if the read marker is on the screen, we can now assume we've caught up to the end\n    // of the screen, so move the marker down to the bottom of the screen.\n    updateReadMarker: function() {\n        if (!this.props.manageReadMarkers) return;\n        if (this.getReadMarkerPosition() !== 0) {\n            return;\n        }\n\n        // move the RM to *after* the message at the bottom of the screen. This\n        // avoids a problem whereby we never advance the RM if there is a huge\n        // message which doesn't fit on the screen.\n        //\n        // But ignore local echoes for this - they have a temporary event ID\n        // and we'll get confused when their ID changes and we can't figure out\n        // where the RM is pointing to. The read marker will be invisible for\n        // now anyway, so this doesn't really matter.\n        var lastDisplayedIndex = this._getLastDisplayedEventIndex({\n            allowPartial: true,\n            ignoreEchoes: true,\n        });\n\n        if (lastDisplayedIndex === null) {\n            return;\n        }\n\n        var lastDisplayedEvent = this.state.events[lastDisplayedIndex];\n        this._setReadMarker(lastDisplayedEvent.getId(),\n                            lastDisplayedEvent.getTs());\n\n        // the read-marker should become invisible, so that if the user scrolls\n        // down, they don't see it.\n        if(this.state.readMarkerVisible) {\n            this.setState({\n                readMarkerVisible: false,\n            });\n        }\n    },\n\n\n    // advance the read marker past any events we sent ourselves.\n    _advanceReadMarkerPastMyEvents: function() {\n        if (!this.props.manageReadMarkers) return;\n\n        // we call _timelineWindow.getEvents() rather than using\n        // this.state.events, because react batches the update to the latter, so it\n        // may not have been updated yet.\n        var events = this._timelineWindow.getEvents();\n\n        // first find where the current RM is\n        for (var i = 0; i < events.length; i++) {\n            if (events[i].getId() == this.state.readMarkerEventId) {\n                break;\n            }\n        }\n        if (i >= events.length) {\n            return;\n        }\n\n        // now think about advancing it\n        var myUserId = MatrixClientPeg.get().credentials.userId;\n        for (i++; i < events.length; i++) {\n            var ev = events[i];\n            if (!ev.sender || ev.sender.userId != myUserId) {\n                break;\n            }\n        }\n        // i is now the first unread message which we didn't send ourselves.\n        i--;\n\n        var ev = events[i];\n        this._setReadMarker(ev.getId(), ev.getTs());\n    },\n\n    /* jump down to the bottom of this room, where new events are arriving\n     */\n    jumpToLiveTimeline: function() {\n        // if we can't forward-paginate the existing timeline, then there\n        // is no point reloading it - just jump straight to the bottom.\n        //\n        // Otherwise, reload the timeline rather than trying to paginate\n        // through all of space-time.\n        if (this._timelineWindow.canPaginate(EventTimeline.FORWARDS)) {\n            this._loadTimeline();\n        } else {\n            if (this.refs.messagePanel) {\n                this.refs.messagePanel.scrollToBottom();\n            }\n        }\n    },\n\n    /* scroll to show the read-up-to marker. We put it 1/3 of the way down\n     * the container.\n     */\n    jumpToReadMarker: function() {\n        if (!this.props.manageReadMarkers) return;\n        if (!this.refs.messagePanel) return;\n        if (!this.state.readMarkerEventId) return;\n\n        // we may not have loaded the event corresponding to the read-marker\n        // into the _timelineWindow. In that case, attempts to scroll to it\n        // will fail.\n        //\n        // a quick way to figure out if we've loaded the relevant event is\n        // simply to check if the messagepanel knows where the read-marker is.\n        var ret = this.refs.messagePanel.getReadMarkerPosition();\n        if (ret !== null) {\n            // The messagepanel knows where the RM is, so we must have loaded\n            // the relevant event.\n            this.refs.messagePanel.scrollToEvent(this.state.readMarkerEventId,\n                                                 0, 1/3);\n            return;\n        }\n\n        // Looks like we haven't loaded the event corresponding to the read-marker.\n        // As with jumpToLiveTimeline, we want to reload the timeline around the\n        // read-marker.\n        this._loadTimeline(this.state.readMarkerEventId, 0, 1/3);\n    },\n\n\n    /* update the read-up-to marker to match the read receipt\n     */\n    forgetReadMarker: function() {\n        if (!this.props.manageReadMarkers) return;\n\n        var rmId = this._getCurrentReadReceipt();\n\n        // see if we know the timestamp for the rr event\n        var tl = this.props.timelineSet.getTimelineForEvent(rmId);\n        var rmTs;\n        if (tl) {\n            var event = tl.getEvents().find((e) => { return e.getId() == rmId; });\n            if (event) {\n                rmTs = event.getTs();\n            }\n        }\n\n        this._setReadMarker(rmId, rmTs);\n    },\n\n    /* return true if the content is fully scrolled down and we are\n     * at the end of the live timeline.\n     */\n    isAtEndOfLiveTimeline: function() {\n        return this.refs.messagePanel\n            && this.refs.messagePanel.isAtBottom()\n            && this._timelineWindow\n            && !this._timelineWindow.canPaginate(EventTimeline.FORWARDS);\n    },\n\n\n    /* get the current scroll state. See ScrollPanel.getScrollState for\n     * details.\n     *\n     * returns null if we are not mounted.\n     */\n    getScrollState: function() {\n        if (!this.refs.messagePanel) { return null; }\n        return this.refs.messagePanel.getScrollState();\n    },\n\n    // returns one of:\n    //\n    //  null: there is no read marker\n    //  -1: read marker is above the window\n    //   0: read marker is visible\n    //  +1: read marker is below the window\n    getReadMarkerPosition: function() {\n        if (!this.props.manageReadMarkers) return null;\n        if (!this.refs.messagePanel) return null;\n\n        var ret = this.refs.messagePanel.getReadMarkerPosition();\n        if (ret !== null) {\n            return ret;\n        }\n\n        // the messagePanel doesn't know where the read marker is.\n        // if we know the timestamp of the read marker, make a guess based on that.\n        var rmTs = TimelinePanel.roomReadMarkerTsMap[this.props.timelineSet.roomId];\n        if (rmTs && this.state.events.length > 0) {\n            if (rmTs < this.state.events[0].getTs()) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        return null;\n    },\n\n    /**\n     * called by the parent component when PageUp/Down/etc is pressed.\n     *\n     * We pass it down to the scroll panel.\n     */\n    handleScrollKey: function(ev) {\n        if (!this.refs.messagePanel) { return; }\n\n        // jump to the live timeline on ctrl-end, rather than the end of the\n        // timeline window.\n        if (ev.ctrlKey && ev.keyCode == KeyCode.END) {\n            this.jumpToLiveTimeline();\n        } else {\n            this.refs.messagePanel.handleScrollKey(ev);\n        }\n    },\n\n    _initTimeline: function(props) {\n        var initialEvent = props.eventId;\n        var pixelOffset = props.eventPixelOffset;\n\n        // if a pixelOffset is given, it is relative to the bottom of the\n        // container. If not, put the event in the middle of the container.\n        var offsetBase = 1;\n        if (pixelOffset == null) {\n            offsetBase = 0.5;\n        }\n\n        return this._loadTimeline(initialEvent, pixelOffset, offsetBase);\n    },\n\n    /**\n     * (re)-load the event timeline, and initialise the scroll state, centered\n     * around the given event.\n     *\n     * @param {string?}  eventId the event to focus on. If undefined, will\n     *    scroll to the bottom of the room.\n     *\n     * @param {number?} pixelOffset   offset to position the given event at\n     *    (pixels from the offsetBase). If omitted, defaults to 0.\n     *\n     * @param {number?} offsetBase the reference point for the pixelOffset. 0\n     *     means the top of the container, 1 means the bottom, and fractional\n     *     values mean somewhere in the middle. If omitted, it defaults to 0.\n     *\n     * returns a promise which will resolve when the load completes.\n     */\n    _loadTimeline: function(eventId, pixelOffset, offsetBase) {\n        this._timelineWindow = new Matrix.TimelineWindow(\n            MatrixClientPeg.get(), this.props.timelineSet,\n            {windowLimit: this.props.timelineCap});\n\n        var onLoaded = () => {\n            this._reloadEvents();\n\n            // If we switched away from the room while there were pending\n            // outgoing events, the read-marker will be before those events.\n            // We need to skip over any which have subsequently been sent.\n            this._advanceReadMarkerPastMyEvents();\n\n            this.setState({\n                canBackPaginate: this._timelineWindow.canPaginate(EventTimeline.BACKWARDS),\n                canForwardPaginate: this._timelineWindow.canPaginate(EventTimeline.FORWARDS),\n                timelineLoading: false,\n            }, () => {\n                // initialise the scroll state of the message panel\n                if (!this.refs.messagePanel) {\n                    // this shouldn't happen - we know we're mounted because\n                    // we're in a setState callback, and we know\n                    // timelineLoading is now false, so render() should have\n                    // mounted the message panel.\n                    console.log(\"can't initialise scroll state because \" +\n                                \"messagePanel didn't load\");\n                    return;\n                }\n                if (eventId) {\n                    this.refs.messagePanel.scrollToEvent(eventId, pixelOffset,\n                                                         offsetBase);\n                } else {\n                    this.refs.messagePanel.scrollToBottom();\n                }\n\n                this.sendReadReceipt();\n                this.updateReadMarker();\n            });\n        };\n\n        var onError = (error) => {\n            this.setState({timelineLoading: false});\n            var msg = error.message ? error.message : JSON.stringify(error);\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n\n            var onFinished;\n\n            // if we were given an event ID, then when the user closes the\n            // dialog, let's jump to the end of the timeline. If we weren't,\n            // something has gone badly wrong and rather than causing a loop of\n            // undismissable dialogs, let's just give up.\n            if (eventId) {\n                onFinished = () => {\n                    // go via the dispatcher so that the URL is updated\n                    dis.dispatch({\n                        action: 'view_room',\n                        room_id: this.props.timelineSet.roomId,\n                    });\n                };\n            }\n            var message = \"Tried to load a specific point in this room's timeline, but \";\n            if (error.errcode == 'M_FORBIDDEN') {\n                message += \"you do not have permission to view the message in question.\";\n            } else {\n                message += \"was unable to find it.\";\n            }\n            Modal.createDialog(ErrorDialog, {\n                title: \"Failed to load timeline position\",\n                description: message,\n                onFinished: onFinished,\n            });\n        };\n\n        var prom = this._timelineWindow.load(eventId, INITIAL_SIZE);\n\n        // if we already have the event in question, TimelineWindow.load\n        // returns a resolved promise.\n        //\n        // In this situation, we don't really want to defer the update of the\n        // state to the next event loop, because it makes room-switching feel\n        // quite slow. So we detect that situation and shortcut straight to\n        // calling _reloadEvents and updating the state.\n\n        if (prom.isFulfilled()) {\n            onLoaded();\n        } else {\n            this.setState({\n                events: [],\n                canBackPaginate: false,\n                canForwardPaginate: false,\n                timelineLoading: true,\n            });\n\n            prom = prom.then(onLoaded, onError);\n        }\n\n        prom.done();\n    },\n\n    // handle the completion of a timeline load or localEchoUpdate, by\n    // reloading the events from the timelinewindow and pending event list into\n    // the state.\n    _reloadEvents: function() {\n        // we might have switched rooms since the load started - just bin\n        // the results if so.\n        if (this.unmounted) return;\n\n        this.setState({\n            events: this._getEvents(),\n        });\n    },\n\n    // get the list of events from the timeline window and the pending event list\n    _getEvents: function() {\n        var events = this._timelineWindow.getEvents();\n\n        // if we're at the end of the live timeline, append the pending events\n        if (!this._timelineWindow.canPaginate(EventTimeline.FORWARDS)) {\n            events.push(...this.props.timelineSet.getPendingEvents());\n        }\n\n        return events;\n    },\n\n    _indexForEventId: function(evId) {\n        for (var i = 0; i < this.state.events.length; ++i) {\n            if (evId == this.state.events[i].getId()) {\n                return i;\n            }\n        }\n        return null;\n    },\n\n    _getLastDisplayedEventIndex: function(opts) {\n        opts = opts || {};\n        var ignoreOwn = opts.ignoreOwn || false;\n        var ignoreEchoes = opts.ignoreEchoes || false;\n        var allowPartial = opts.allowPartial || false;\n\n        var messagePanel = this.refs.messagePanel;\n        if (messagePanel === undefined) return null;\n\n        var wrapperRect = ReactDOM.findDOMNode(messagePanel).getBoundingClientRect();\n        var myUserId = MatrixClientPeg.get().credentials.userId;\n\n        for (var i = this.state.events.length-1; i >= 0; --i) {\n            var ev = this.state.events[i];\n\n            if (ignoreOwn && ev.sender && ev.sender.userId == myUserId) {\n                continue;\n            }\n\n            // local echoes have a fake event ID\n            if (ignoreEchoes && ev.status) {\n                continue;\n            }\n\n            var node = messagePanel.getNodeForEventId(ev.getId());\n            if (!node) continue;\n\n            var boundingRect = node.getBoundingClientRect();\n            if ((allowPartial && boundingRect.top < wrapperRect.bottom) ||\n                (!allowPartial && boundingRect.bottom < wrapperRect.bottom)) {\n                return i;\n            }\n        }\n        return null;\n    },\n\n    /**\n     * get the id of the event corresponding to our user's latest read-receipt.\n     *\n     * @param {Boolean} ignoreSynthesized If true, return only receipts that\n     *                                    have been sent by the server, not\n     *                                    implicit ones generated by the JS\n     *                                    SDK.\n     */\n    _getCurrentReadReceipt: function(ignoreSynthesized) {\n        var client = MatrixClientPeg.get();\n        // the client can be null on logout\n        if (client == null) {\n            return null;\n        }\n\n        var myUserId = client.credentials.userId;\n        return this.props.timelineSet.room.getEventReadUpTo(myUserId, ignoreSynthesized);\n    },\n\n    _setReadMarker: function(eventId, eventTs, inhibitSetState) {\n        var roomId = this.props.timelineSet.room.roomId;\n\n        if (TimelinePanel.roomReadMarkerMap[roomId] == eventId) {\n            // don't update the state (and cause a re-render) if there is\n            // no change to the RM.\n            return;\n        }\n\n        // ideally we'd sync these via the server, but for now just stash them\n        // in a map.\n        TimelinePanel.roomReadMarkerMap[roomId] = eventId;\n\n        // in order to later figure out if the read marker is\n        // above or below the visible timeline, we stash the timestamp.\n        TimelinePanel.roomReadMarkerTsMap[roomId] = eventTs;\n\n        if (inhibitSetState) {\n            return;\n        }\n\n        // run the render cycle before calling the callback, so that\n        // getReadMarkerPosition() returns the right thing.\n        this.setState({\n            readMarkerEventId: eventId,\n        }, this.props.onReadMarkerUpdated);\n    },\n\n    render: function() {\n        var MessagePanel = sdk.getComponent(\"structures.MessagePanel\");\n        var Loader = sdk.getComponent(\"elements.Spinner\");\n\n        // just show a spinner while the timeline loads.\n        //\n        // put it in a div of the right class (mx_RoomView_messagePanel) so\n        // that the order in the roomview flexbox is correct, and\n        // mx_RoomView_messageListWrapper to position the inner div in the\n        // right place.\n        //\n        // Note that the click-on-search-result functionality relies on the\n        // fact that the messagePanel is hidden while the timeline reloads,\n        // but that the RoomHeader (complete with search term) continues to\n        // exist.\n        if (this.state.timelineLoading) {\n            return (\n                    <div className={ this.props.className + \" mx_RoomView_messageListWrapper\" }>\n                        <Loader />\n                    </div>\n            );\n        }\n\n        // give the messagepanel a stickybottom if we're at the end of the\n        // live timeline, so that the arrival of new events triggers a\n        // scroll.\n        //\n        // Make sure that stickyBottom is *false* if we can paginate\n        // forwards, otherwise if somebody hits the bottom of the loaded\n        // events when viewing historical messages, we get stuck in a loop\n        // of paginating our way through the entire history of the room.\n        var stickyBottom = !this._timelineWindow.canPaginate(EventTimeline.FORWARDS);\n\n        return (\n            <MessagePanel ref=\"messagePanel\"\n                    hidden={ this.props.hidden }\n                    backPaginating={ this.state.backPaginating }\n                    forwardPaginating={ this.state.forwardPaginating }\n                    events={ this.state.events }\n                    highlightedEventId={ this.props.highlightedEventId }\n                    readMarkerEventId={ this.state.readMarkerEventId }\n                    readMarkerVisible={ this.state.readMarkerVisible }\n                    suppressFirstDateSeparator={ this.state.canBackPaginate }\n                    showUrlPreview = { this.props.showUrlPreview }\n                    manageReadReceipts = { this.props.manageReadReceipts }\n                    ourUserId={ MatrixClientPeg.get().credentials.userId }\n                    stickyBottom={ stickyBottom }\n                    onScroll={ this.onMessageListScroll }\n                    onFillRequest={ this.onMessageListFillRequest }\n                    onUnfillRequest={ this.onMessageListUnfillRequest }\n                    opacity={ this.props.opacity }\n                    className={ this.props.className }\n                    tileShape={ this.props.tileShape }\n            />\n        );\n    },\n});\n\nmodule.exports = TimelinePanel;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/UploadBar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ContentMessages = require('../../ContentMessages');","fix":{"range":[598,601],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require('../../dispatcher');","fix":{"range":[654,657],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var filesize = require('filesize');","fix":{"range":[693,696],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":24,"column":37,"nodeType":"Property","source":"        room: React.PropTypes.object","fix":{"range":[845,845],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":47,"column":9,"nodeType":"VariableDeclaration","source":"        var uploads = ContentMessages.getCurrentUploads();","fix":{"range":[1343,1346],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":63,"column":9,"nodeType":"VariableDeclaration","source":"        var upload;","fix":{"range":[1802,1805],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":64,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < uploads.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":74,"column":9,"nodeType":"VariableDeclaration","source":"        var innerProgressStyle = {","fix":{"range":[2082,2085],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":75,"column":71,"nodeType":"Property","source":"            width: ((upload.loaded / (upload.total || 1)) * 100) + '%'","fix":{"range":[2179,2179],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":77,"column":9,"nodeType":"VariableDeclaration","source":"        var uploadedSize = filesize(upload.loaded);","fix":{"range":[2199,2202],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":78,"column":9,"nodeType":"VariableDeclaration","source":"        var totalSize = filesize(upload.total);","fix":{"range":[2251,2254],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":83,"column":9,"nodeType":"VariableDeclaration","source":"        var others;","fix":{"range":[2452,2455],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 85 exceeds the maximum line length of 90.","line":85,"column":1,"nodeType":"Program","source":"            others = ' and ' + (uploads.length - 1) + ' other' + (uploads.length > 2 ? 's' : '');"},{"ruleId":"max-len","severity":1,"message":"Line 91 exceeds the maximum line length of 90.","line":91,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_UploadBar_uploadProgressInner\" style={innerProgressStyle}></div>"},{"ruleId":"max-len","severity":1,"message":"Line 93 exceeds the maximum line length of 90.","line":93,"column":1,"nodeType":"Program","source":"                <img className=\"mx_UploadBar_uploadIcon\" src=\"img/fileicon.png\" width=\"17\" height=\"22\"/>"},{"ruleId":"max-len","severity":1,"message":"Line 94 exceeds the maximum line length of 90.","line":94,"column":1,"nodeType":"Program","source":"                <img className=\"mx_UploadBar_uploadCancel\" src=\"img/cancel.svg\" width=\"18\" height=\"18\""},{"ruleId":"max-len","severity":1,"message":"Line 100 exceeds the maximum line length of 90.","line":100,"column":1,"nodeType":"Program","source":"                <div className=\"mx_UploadBar_uploadFilename\">Uploading {upload.fileName}{others}</div>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":103,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[3452,3452],"text":","}}],"errorCount":3,"warningCount":16,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar ContentMessages = require('../../ContentMessages');\nvar dis = require('../../dispatcher');\nvar filesize = require('filesize');\n\nmodule.exports = React.createClass({displayName: 'UploadBar',\n    propTypes: {\n        room: React.PropTypes.object\n    },\n\n    componentDidMount: function() {\n        dis.register(this.onAction);\n        this.mounted = true;\n    },\n\n    componentWillUnmount: function() {\n        this.mounted = false;\n    },\n\n    onAction: function(payload) {\n        switch (payload.action) {\n            case 'upload_progress':\n            case 'upload_finished':\n            case 'upload_failed':\n                if (this.mounted) this.forceUpdate();\n                break;\n        }\n    },\n\n    render: function() {\n        var uploads = ContentMessages.getCurrentUploads();\n\n        // for testing UI... - also fix up the ContentMessages.getCurrentUploads().length\n        // check in RoomView\n        //\n        // uploads = [{\n        //     roomId: this.props.room.roomId,\n        //     loaded: 123493,\n        //     total: 347534,\n        //     fileName: \"testing_fooble.jpg\",\n        // }];\n\n        if (uploads.length == 0) {\n            return <div />;\n        }\n\n        var upload;\n        for (var i = 0; i < uploads.length; ++i) {\n            if (uploads[i].roomId == this.props.room.roomId) {\n                upload = uploads[i];\n                break;\n            }\n        }\n        if (!upload) {\n            return <div />;\n        }\n\n        var innerProgressStyle = {\n            width: ((upload.loaded / (upload.total || 1)) * 100) + '%'\n        };\n        var uploadedSize = filesize(upload.loaded);\n        var totalSize = filesize(upload.total);\n        if (uploadedSize.replace(/^.* /, '') === totalSize.replace(/^.* /, '')) {\n            uploadedSize = uploadedSize.replace(/ .*/, '');\n        }\n\n        var others;\n        if (uploads.length > 1) {\n            others = ' and ' + (uploads.length - 1) + ' other' + (uploads.length > 2 ? 's' : '');\n        }\n\n        return (\n            <div className=\"mx_UploadBar\">\n                <div className=\"mx_UploadBar_uploadProgressOuter\">\n                    <div className=\"mx_UploadBar_uploadProgressInner\" style={innerProgressStyle}></div>\n                </div>\n                <img className=\"mx_UploadBar_uploadIcon\" src=\"img/fileicon.png\" width=\"17\" height=\"22\"/>\n                <img className=\"mx_UploadBar_uploadCancel\" src=\"img/cancel.svg\" width=\"18\" height=\"18\"\n                    onClick={function() { ContentMessages.cancelUpload(upload.promise); }}\n                />\n                <div className=\"mx_UploadBar_uploadBytes\">\n                    { uploadedSize } / { totalSize }\n                </div>\n                <div className=\"mx_UploadBar_uploadFilename\">Uploading {upload.fileName}{others}</div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/structures/UserSettings.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[567,570],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require('react-dom');","fix":{"range":[597,600],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../index');","fix":{"range":[634,637],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../MatrixClientPeg\");","fix":{"range":[668,671],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var PlatformPeg = require(\"../../PlatformPeg\");","fix":{"range":[724,727],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require('../../Modal');","fix":{"range":[772,775],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../dispatcher\");","fix":{"range":[808,811],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var q = require('q');","fix":{"range":[847,850],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var package_json = require('../../../package.json');","fix":{"range":[869,872],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'package_json' is not in camel case.","line":24,"column":5,"nodeType":"Identifier","source":"var package_json = require('../../../package.json');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var UserSettingsStore = require('../../UserSettingsStore');","fix":{"range":[922,925],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var GeminiScrollbar = require('react-gemini-scrollbar');","fix":{"range":[982,985],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var Email = require('../../email');","fix":{"range":[1039,1042],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var AddThreepid = require('../../AddThreepid');","fix":{"range":[1075,1078],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var SdkConfig = require('../../SdkConfig');","fix":{"range":[1123,1126],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'package_json' is not in camel case.","line":35,"column":17,"nodeType":"Identifier","source":"      'dist' in package_json ? package_json.version : package_json.gitHead || \"<local>\";"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":80,"column":6,"nodeType":"ObjectExpression","source":"    }","fix":{"range":[2701,2701],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":146,"column":9,"nodeType":"VariableDeclaration","source":"        var syncedSettings = UserSettingsStore.getSyncedSettings();","fix":{"range":[4604,4607],"text":"let"}},{"ruleId":"prefer-const","severity":1,"message":"'cli' is never reassigned. Use 'const' instead.","line":166,"column":13,"nodeType":"Identifier","source":"        let cli = MatrixClientPeg.get();","fix":{"range":[5227,5230],"text":"const"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":173,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[5426,5429],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":175,"column":83,"nodeType":"CallExpression","source":"            UserSettingsStore.loadProfileInfo(), UserSettingsStore.loadThreePids()","fix":{"range":[5541,5541],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":183,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[5803,5806],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":186,"column":46,"nodeType":"Property","source":"                description: error.toString()","fix":{"range":[6004,6004],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":199,"column":13,"nodeType":"VariableDeclaration","source":"            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");","fix":{"range":[6277,6280],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":213,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[6714,6717],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":214,"column":9,"nodeType":"VariableDeclaration","source":"        var changeAvatar = this.refs.changeAvatar;","fix":{"range":[6739,6742],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":223,"column":13,"nodeType":"VariableDeclaration","source":"            var errMsg = (typeof err === \"string\") ? err : (err.error || \"\");","fix":{"range":[7106,7109],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":224,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[7184,7187],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":227,"column":63,"nodeType":"Property","source":"                description: \"Failed to set avatar. \" + errMsg","fix":{"range":[7383,7383],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":233,"column":9,"nodeType":"VariableDeclaration","source":"        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[7464,7467],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 238 exceeds the maximum line length of 90.","line":238,"column":1,"nodeType":"Program","source":"                    For security, logging out will delete any end-to-end encryption keys from this browser,"},{"ruleId":"max-len","severity":1,"message":"Line 240 exceeds the maximum line length of 90.","line":240,"column":1,"nodeType":"Program","source":"                    In future this <a href=\"https://github.com/vector-im/riot-web/issues/2108\">will be improved</a>,"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":256,"column":9,"nodeType":"VariableDeclaration","source":"        var errMsg = err.error || \"\";","fix":{"range":[8419,8422],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":259,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[8573,8582],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":263,"column":9,"nodeType":"VariableDeclaration","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[8685,8688],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":266,"column":32,"nodeType":"Property","source":"            description: errMsg","fix":{"range":[8845,8845],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":271,"column":9,"nodeType":"VariableDeclaration","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[8910,8913],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":276,"column":48,"nodeType":"Property","source":"                          log back in to them.`","fix":{"range":[9247,9247],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":282,"column":49,"nodeType":"Property","source":"            action: \"start_upgrade_registration\"","fix":{"range":[9374,9374],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":292,"column":9,"nodeType":"VariableDeclaration","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[9627,9630],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":293,"column":9,"nodeType":"VariableDeclaration","source":"        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[9694,9697],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":295,"column":9,"nodeType":"VariableDeclaration","source":"        var email_address = this.refs.add_threepid_input.value;","fix":{"range":[9768,9771],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'email_address' is not in camel case.","line":295,"column":13,"nodeType":"Identifier","source":"        var email_address = this.refs.add_threepid_input.value;"},{"ruleId":"max-len","severity":1,"message":"Line 309 exceeds the maximum line length of 90.","line":309,"column":1,"nodeType":"Program","source":"                description: \"Please check your email and click on the link it contains. Once this is done, click continue.\","},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":317,"column":41,"nodeType":"Property","source":"                description: err.message","fix":{"range":[10851,10851],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 335 exceeds the maximum line length of 90.","line":335,"column":1,"nodeType":"Program","source":"                    MatrixClientPeg.get().deleteThreePid(threepid.medium, threepid.address).then(() => {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":368,"column":17,"nodeType":"VariableDeclaration","source":"                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[12758,12761],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":369,"column":17,"nodeType":"VariableDeclaration","source":"                var message = \"Unable to verify email address. \";","fix":{"range":[12839,12842],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 370 exceeds the maximum line length of 90.","line":370,"column":1,"nodeType":"Program","source":"                message += \"Please check your email and click on the link it contains. Once this is done, click continue.\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":378,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[13316,13319],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 388 exceeds the maximum line length of 90.","line":388,"column":1,"nodeType":"Program","source":"        const DeactivateAccountDialog = sdk.getComponent(\"dialogs.DeactivateAccountDialog\");"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":408,"column":35,"nodeType":"Property","source":"            rejectingInvites: true","fix":{"range":[14328,14328],"text":","}},{"ruleId":"prefer-const","severity":1,"message":"'promises' is never reassigned. Use 'const' instead.","line":411,"column":13,"nodeType":"Identifier","source":"        let promises = rooms.map((room) => {","fix":{"range":[14379,14382],"text":"const"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":418,"column":40,"nodeType":"Property","source":"                rejectingInvites: false","fix":{"range":[14745,14745],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 426 exceeds the maximum line length of 90.","line":426,"column":1,"nodeType":"Program","source":"                require.ensure(['../../async-components/views/dialogs/ExportE2eKeysDialog'], () => {"},{"ruleId":"max-len","severity":1,"message":"Line 427 exceeds the maximum line length of 90.","line":427,"column":1,"nodeType":"Program","source":"                    cb(require('../../async-components/views/dialogs/ExportE2eKeysDialog'));"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":431,"column":14,"nodeType":"ObjectExpression","source":"            }","fix":{"range":[15197,15197],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 438 exceeds the maximum line length of 90.","line":438,"column":1,"nodeType":"Program","source":"                require.ensure(['../../async-components/views/dialogs/ImportE2eKeysDialog'], () => {"},{"ruleId":"max-len","severity":1,"message":"Line 439 exceeds the maximum line length of 90.","line":439,"column":1,"nodeType":"Program","source":"                    cb(require('../../async-components/views/dialogs/ImportE2eKeysDialog'));"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":443,"column":14,"nodeType":"ObjectExpression","source":"            }","fix":{"range":[15625,15625],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":448,"column":9,"nodeType":"VariableDeclaration","source":"        var client = MatrixClientPeg.get();","fix":{"range":[15700,15703],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'client' is assigned a value but never used.","line":448,"column":13,"nodeType":"Identifier","source":"        var client = MatrixClientPeg.get();"},{"ruleId":"max-len","severity":1,"message":"Line 467 exceeds the maximum line length of 90.","line":467,"column":1,"nodeType":"Program","source":"                   onChange={ e => UserSettingsStore.setUrlPreviewsDisabled(e.target.checked) }"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":467,"column":20,"nodeType":"JSXAttribute","source":"                   onChange={ e => UserSettingsStore.setUrlPreviewsDisabled(e.target.checked) }"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":467,"column":31,"nodeType":"ArrowFunctionExpression","source":"                   onChange={ e => UserSettingsStore.setUrlPreviewsDisabled(e.target.checked) }","fix":{"range":[16415,16416],"text":"(e)"}},{"ruleId":"max-len","severity":1,"message":"Line 480 exceeds the maximum line length of 90.","line":480,"column":1,"nodeType":"Program","source":"                   onChange={ e => UserSettingsStore.setSyncedSetting(setting.id, e.target.checked) }"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":480,"column":20,"nodeType":"JSXAttribute","source":"                   onChange={ e => UserSettingsStore.setSyncedSetting(setting.id, e.target.checked) }"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":480,"column":31,"nodeType":"ArrowFunctionExpression","source":"                   onChange={ e => UserSettingsStore.setSyncedSetting(setting.id, e.target.checked) }","fix":{"range":[16940,16941],"text":"(e)"}},{"ruleId":"max-len","severity":1,"message":"Line 489 exceeds the maximum line length of 90.","line":489,"column":1,"nodeType":"Program","source":"        return <div className=\"mx_UserSettings_toggle\" key={ setting.id + \"_\" + setting.value }>"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":495,"column":20,"nodeType":"JSXAttribute","source":"                   onChange={ e => {"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":495,"column":31,"nodeType":"ArrowFunctionExpression","source":"                   onChange={ e => {","fix":{"range":[17584,17585],"text":"(e)"}},{"ruleId":"max-len","severity":1,"message":"Line 497 exceeds the maximum line length of 90.","line":497,"column":1,"nodeType":"Program","source":"                                UserSettingsStore.setSyncedSetting(setting.id, setting.value);"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":517,"column":9,"nodeType":"VariableDeclaration","source":"        let exportButton = null,"},{"ruleId":"max-len","severity":1,"message":"Line 539 exceeds the maximum line length of 90.","line":539,"column":1,"nodeType":"Program","source":"                        <li><label>Device ID:</label>             <span><code>{deviceId}</code></span></li>"},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before '<'.","line":539,"column":67,"nodeType":"Punctuator","source":"                        <li><label>Device ID:</label>             <span><code>{deviceId}</code></span></li>","fix":{"range":[19235,19235],"text":" "}},{"ruleId":"max-len","severity":1,"message":"Line 540 exceeds the maximum line length of 90.","line":540,"column":1,"nodeType":"Program","source":"                        <li><label>Device key:</label>            <span><code><b>{identityKey}</b></code></span></li>"},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before '<'.","line":540,"column":67,"nodeType":"Punctuator","source":"                        <li><label>Device key:</label>            <span><code><b>{identityKey}</b></code></span></li>","fix":{"range":[19343,19343],"text":" "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":550,"column":9,"nodeType":"VariableDeclaration","source":"        var DevicesPanel = sdk.getComponent('settings.DevicesPanel');","fix":{"range":[19598,19601],"text":"let"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":561,"column":27,"nodeType":"ReturnStatement","source":"            return <div />","fix":{"range":[19951,19951],"text":";"}},{"ruleId":"prefer-const","severity":1,"message":"'features' is never reassigned. Use 'const' instead.","line":580,"column":13,"nodeType":"Identifier","source":"        let features = UserSettingsStore.LABS_FEATURES.map(feature => (","fix":{"range":[20501,20504],"text":"const"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":580,"column":60,"nodeType":"ArrowFunctionExpression","source":"        let features = UserSettingsStore.LABS_FEATURES.map(feature => (","fix":{"range":[20552,20559],"text":"(feature)"}},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":587,"column":21,"nodeType":"JSXAttribute","source":"                    onChange={e => {"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":587,"column":31,"nodeType":"ArrowFunctionExpression","source":"                    onChange={e => {","fix":{"range":[20884,20885],"text":"(e)"}},{"ruleId":"max-len","severity":1,"message":"Line 590 exceeds the maximum line length of 90.","line":590,"column":1,"nodeType":"Program","source":"                            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":590,"column":29,"nodeType":"VariableDeclaration","source":"                            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");","fix":{"range":[21036,21039],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 593 exceeds the maximum line length of 90.","line":593,"column":1,"nodeType":"Program","source":"                                description: \"Guests can't use labs features. Please register.\","},{"ruleId":"max-len","severity":1,"message":"Line 608 exceeds the maximum line length of 90.","line":608,"column":1,"nodeType":"Program","source":"                    <p>These are experimental features that may break in unexpected ways. Use with caution.</p>"},{"ruleId":"prefer-const","severity":1,"message":"'invitedRooms' is never reassigned. Use 'const' instead.","line":630,"column":13,"nodeType":"Identifier","source":"        let invitedRooms = MatrixClientPeg.get().getRooms().filter((r) => {","fix":{"range":[22589,22592],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'Spinner' is never reassigned. Use 'const' instead.","line":637,"column":13,"nodeType":"Identifier","source":"        let Spinner = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[22815,22818],"text":"const"}},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":645,"column":17,"nodeType":"JSXAttribute","source":"                onClick={this._onRejectAllInvitesClicked.bind(this, invitedRooms)}>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":665,"column":9,"nodeType":"VariableDeclaration","source":"        var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[23785,23788],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":677,"column":9,"nodeType":"VariableDeclaration","source":"        var SimpleRoomHeader = sdk.getComponent('rooms.SimpleRoomHeader');","fix":{"range":[24278,24281],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":678,"column":9,"nodeType":"VariableDeclaration","source":"        var ChangeDisplayName = sdk.getComponent(\"views.settings.ChangeDisplayName\");","fix":{"range":[24353,24356],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":679,"column":9,"nodeType":"VariableDeclaration","source":"        var ChangePassword = sdk.getComponent(\"views.settings.ChangePassword\");","fix":{"range":[24439,24442],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":680,"column":9,"nodeType":"VariableDeclaration","source":"        var ChangeAvatar = sdk.getComponent('settings.ChangeAvatar');","fix":{"range":[24519,24522],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":681,"column":9,"nodeType":"VariableDeclaration","source":"        var Notifications = sdk.getComponent(\"settings.Notifications\");","fix":{"range":[24589,24592],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":682,"column":9,"nodeType":"VariableDeclaration","source":"        var EditableText = sdk.getComponent('elements.EditableText');","fix":{"range":[24661,24664],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":684,"column":9,"nodeType":"VariableDeclaration","source":"        var avatarUrl = (","fix":{"range":[24732,24735],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 685 exceeds the maximum line length of 90.","line":685,"column":1,"nodeType":"Program","source":"            this.state.avatarUrl ? MatrixClientPeg.get().mxcUrlToHttp(this.state.avatarUrl) : null"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":688,"column":9,"nodeType":"VariableDeclaration","source":"        var threepidsSection = this.state.threepids.map((val, pidIndex) => {","fix":{"range":[24869,24872],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 696 exceeds the maximum line length of 90.","line":696,"column":1,"nodeType":"Program","source":"                        <input type=\"text\" key={val.address} id={id} value={val.address} disabled />"},{"ruleId":"max-len","severity":1,"message":"Line 699 exceeds the maximum line length of 90.","line":699,"column":1,"nodeType":"Program","source":"                        <img src=\"img/cancel-small.svg\" width=\"14\" height=\"14\" alt=\"Remove\" onClick={this.onRemoveThreepidClicked.bind(this, val)} />"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":699,"column":93,"nodeType":"JSXAttribute","source":"                        <img src=\"img/cancel-small.svg\" width=\"14\" height=\"14\" alt=\"Remove\" onClick={this.onRemoveThreepidClicked.bind(this, val)} />"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":699,"column":102,"nodeType":"MemberExpression","source":"                        <img src=\"img/cancel-small.svg\" width=\"14\" height=\"14\" alt=\"Remove\" onClick={this.onRemoveThreepidClicked.bind(this, val)} />"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":704,"column":9,"nodeType":"VariableDeclaration","source":"        var addThreepidSection;","fix":{"range":[25791,25794],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 722 exceeds the maximum line length of 90.","line":722,"column":1,"nodeType":"Program","source":"                         <img src=\"img/plus.svg\" width=\"14\" height=\"14\" alt=\"Add\" onClick={ this.onAddThreepidClicked.bind(this, undefined, true) }/>"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":722,"column":83,"nodeType":"JSXAttribute","source":"                         <img src=\"img/plus.svg\" width=\"14\" height=\"14\" alt=\"Add\" onClick={ this.onAddThreepidClicked.bind(this, undefined, true) }/>"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":722,"column":93,"nodeType":"MemberExpression","source":"                         <img src=\"img/plus.svg\" width=\"14\" height=\"14\" alt=\"Add\" onClick={ this.onAddThreepidClicked.bind(this, undefined, true) }/>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":729,"column":9,"nodeType":"VariableDeclaration","source":"        var accountJsx;","fix":{"range":[27073,27076],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":737,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[27338,27347],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 745 exceeds the maximum line length of 90.","line":745,"column":1,"nodeType":"Program","source":"                        buttonClassName=\"mx_UserSettings_button mx_UserSettings_changePasswordButton\""},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":750,"column":9,"nodeType":"VariableDeclaration","source":"        var notification_area;","fix":{"range":[27962,27965],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'notification_area' is not in camel case.","line":750,"column":13,"nodeType":"Identifier","source":"        var notification_area;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'notification_area' is not in camel case.","line":752,"column":13,"nodeType":"Identifier","source":"            notification_area = (<div>"},{"ruleId":"max-len","severity":1,"message":"Line 756 exceeds the maximum line length of 90.","line":756,"column":1,"nodeType":"Program","source":"                    <Notifications threepids={this.state.threepids} brand={this.props.brand} />"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":761,"column":9,"nodeType":"VariableDeclaration","source":"        var olmVersion = MatrixClientPeg.get().olmVersion;","fix":{"range":[28367,28370],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":764,"column":9,"nodeType":"VariableDeclaration","source":"        var olmVersionString = \"<not-enabled>\";","fix":{"range":[28581,28584],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 798 exceeds the maximum line length of 90.","line":798,"column":1,"nodeType":"Program","source":"                                showUploadSection={false} className=\"mx_UserSettings_avatarPicker_img\"/>"},{"ruleId":"max-len","severity":1,"message":"Line 806 exceeds the maximum line length of 90.","line":806,"column":1,"nodeType":"Program","source":"                            <input id=\"avatarInput\" type=\"file\" onChange={this.onAvatarSelected}/>"},{"ruleId":"max-len","severity":1,"message":"Line 815 exceeds the maximum line length of 90.","line":815,"column":1,"nodeType":"Program","source":"                    <AccessibleButton className=\"mx_UserSettings_logout mx_UserSettings_button\" onClick={this.onLogoutClicked}>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'notification_area' is not in camel case.","line":822,"column":18,"nodeType":"Identifier","source":"                {notification_area}"},{"ruleId":"max-len","severity":1,"message":"Line 841 exceeds the maximum line length of 90.","line":841,"column":1,"nodeType":"Program","source":"                        Identity Server is { MatrixClientPeg.get().getIdentityServerUrl() }"},{"ruleId":"max-len","severity":1,"message":"Line 845 exceeds the maximum line length of 90.","line":845,"column":1,"nodeType":"Program","source":"                        vector-web version: {this.state.vectorVersion !== null ? this.state.vectorVersion : 'unknown'}<br/>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":855,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[32544,32544],"text":","}}],"errorCount":26,"warningCount":98,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar sdk = require('../../index');\nvar MatrixClientPeg = require(\"../../MatrixClientPeg\");\nvar PlatformPeg = require(\"../../PlatformPeg\");\nvar Modal = require('../../Modal');\nvar dis = require(\"../../dispatcher\");\nvar q = require('q');\nvar package_json = require('../../../package.json');\nvar UserSettingsStore = require('../../UserSettingsStore');\nvar GeminiScrollbar = require('react-gemini-scrollbar');\nvar Email = require('../../email');\nvar AddThreepid = require('../../AddThreepid');\nvar SdkConfig = require('../../SdkConfig');\nimport AccessibleButton from '../views/elements/AccessibleButton';\n\n// if this looks like a release, use the 'version' from package.json; else use\n// the git sha.\nconst REACT_SDK_VERSION =\n      'dist' in package_json ? package_json.version : package_json.gitHead || \"<local>\";\n\n\n// Enumerate some simple 'flip a bit' UI settings (if any).\n// 'id' gives the key name in the im.vector.web.settings account data event\n// 'label' is how we describe it in the UI.\nconst SETTINGS_LABELS = [\n/*\n    {\n        id: 'alwaysShowTimestamps',\n        label: 'Always show message timestamps',\n    },\n    {\n        id: 'showTwelveHourTimestamps',\n        label: 'Show timestamps in 12 hour format (e.g. 2:30pm)',\n    },\n    {\n        id: 'useCompactLayout',\n        label: 'Use compact timeline layout',\n    },\n    {\n        id: 'useFixedWidthFont',\n        label: 'Use fixed width font',\n    },\n*/\n];\n\n// Enumerate the available themes, with a nice human text label.\n// 'id' gives the key name in the im.vector.web.settings account data event\n// 'value' is the value for that key in the event\n// 'label' is how we describe it in the UI.\n//\n// XXX: Ideally we would have a theme manifest or something and they'd be nicely\n// packaged up in a single directory, and/or located at the application layer.\n// But for now for expedience we just hardcode them here.\nconst THEMES = [\n    {\n        id: 'theme',\n        label: 'Light theme',\n        value: 'light',\n    },\n    {\n        id: 'theme',\n        label: 'Dark theme',\n        value: 'dark',\n    }\n];\n\n\nmodule.exports = React.createClass({\n    displayName: 'UserSettings',\n\n    propTypes: {\n        onClose: React.PropTypes.func,\n        // The brand string given when creating email pushers\n        brand: React.PropTypes.string,\n\n        // True to show the 'labs' section of experimental features\n        enableLabs: React.PropTypes.bool,\n\n        // true if RightPanel is collapsed\n        collapsedRhs: React.PropTypes.bool,\n    },\n\n    getDefaultProps: function() {\n        return {\n            onClose: function() {},\n            enableLabs: true,\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            avatarUrl: null,\n            threePids: [],\n            phase: \"UserSettings.LOADING\", // LOADING, DISPLAY\n            email_add_pending: false,\n            vectorVersion: null,\n            rejectingInvites: false,\n        };\n    },\n\n    componentWillMount: function() {\n        this._unmounted = false;\n\n        if (PlatformPeg.get()) {\n            q().then(() => {\n                return PlatformPeg.get().getAppVersion();\n            }).done((appVersion) => {\n                if (this._unmounted) return;\n                this.setState({\n                    vectorVersion: appVersion,\n                });\n            }, (e) => {\n                console.log(\"Failed to fetch app version\", e);\n            });\n        }\n\n        // Bulk rejecting invites:\n        // /sync won't have had time to return when UserSettings re-renders from state changes, so getRooms()\n        // will still return rooms with invites. To get around this, add a listener for\n        // membership updates and kick the UI.\n        MatrixClientPeg.get().on(\"RoomMember.membership\", this._onInviteStateChange);\n\n        dis.dispatch({\n            action: 'ui_opacity',\n            sideOpacity: 0.3,\n            middleOpacity: 0.3,\n        });\n        this._refreshFromServer();\n\n        var syncedSettings = UserSettingsStore.getSyncedSettings();\n        if (!syncedSettings.theme) {\n            syncedSettings.theme = 'light';\n        }\n        this._syncedSettings = syncedSettings;\n    },\n\n    componentDidMount: function() {\n        this.dispatcherRef = dis.register(this.onAction);\n        this._me = MatrixClientPeg.get().credentials.userId;\n    },\n\n    componentWillUnmount: function() {\n        this._unmounted = true;\n        dis.dispatch({\n            action: 'ui_opacity',\n            sideOpacity: 1.0,\n            middleOpacity: 1.0,\n        });\n        dis.unregister(this.dispatcherRef);\n        let cli = MatrixClientPeg.get();\n        if (cli) {\n            cli.removeListener(\"RoomMember.membership\", this._onInviteStateChange);\n        }\n    },\n\n    _refreshFromServer: function() {\n        var self = this;\n        q.all([\n            UserSettingsStore.loadProfileInfo(), UserSettingsStore.loadThreePids()\n        ]).done(function(resps) {\n            self.setState({\n                avatarUrl: resps[0].avatar_url,\n                threepids: resps[1].threepids,\n                phase: \"UserSettings.DISPLAY\",\n            });\n        }, function(error) {\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Can't load user settings\",\n                description: error.toString()\n            });\n        });\n    },\n\n    onAction: function(payload) {\n        if (payload.action === \"notifier_enabled\") {\n            this.forceUpdate();\n        }\n    },\n\n    onAvatarPickerClick: function(ev) {\n        if (MatrixClientPeg.get().isGuest()) {\n            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");\n            Modal.createDialog(NeedToRegisterDialog, {\n                title: \"Please Register\",\n                description: \"Guests can't set avatars. Please register.\",\n            });\n            return;\n        }\n\n        if (this.refs.file_label) {\n            this.refs.file_label.click();\n        }\n    },\n\n    onAvatarSelected: function(ev) {\n        var self = this;\n        var changeAvatar = this.refs.changeAvatar;\n        if (!changeAvatar) {\n            console.error(\"No ChangeAvatar found to upload image to!\");\n            return;\n        }\n        changeAvatar.onFileSelected(ev).done(function() {\n            // dunno if the avatar changed, re-check it.\n            self._refreshFromServer();\n        }, function(err) {\n            var errMsg = (typeof err === \"string\") ? err : (err.error || \"\");\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Error\",\n                description: \"Failed to set avatar. \" + errMsg\n            });\n        });\n    },\n\n    onLogoutClicked: function(ev) {\n        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n        Modal.createDialog(QuestionDialog, {\n            title: \"Sign out?\",\n            description:\n                <div>\n                    For security, logging out will delete any end-to-end encryption keys from this browser,\n                    making previous encrypted chat history unreadable if you log back in.\n                    In future this <a href=\"https://github.com/vector-im/riot-web/issues/2108\">will be improved</a>,\n                    but for now be warned.\n                </div>,\n            button: \"Sign out\",\n            onFinished: (confirmed) => {\n                if (confirmed) {\n                    dis.dispatch({action: 'logout'});\n                    if (this.props.onFinished) {\n                        this.props.onFinished();\n                    }\n                }\n            },\n        });\n    },\n\n    onPasswordChangeError: function(err) {\n        var errMsg = err.error || \"\";\n        if (err.httpStatus === 403) {\n            errMsg = \"Failed to change password. Is your password correct?\";\n        }\n        else if (err.httpStatus) {\n            errMsg += ` (HTTP status ${err.httpStatus})`;\n        }\n        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n        Modal.createDialog(ErrorDialog, {\n            title: \"Error\",\n            description: errMsg\n        });\n    },\n\n    onPasswordChanged: function() {\n        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n        Modal.createDialog(ErrorDialog, {\n            title: \"Success\",\n            description: `Your password was successfully changed. You will not\n                          receive push notifications on other devices until you\n                          log back in to them.`\n        });\n    },\n\n    onUpgradeClicked: function() {\n        dis.dispatch({\n            action: \"start_upgrade_registration\"\n        });\n    },\n\n    onEnableNotificationsChange: function(event) {\n        UserSettingsStore.setEnableNotifications(event.target.checked);\n    },\n\n    onAddThreepidClicked: function(value, shouldSubmit) {\n        if (!shouldSubmit) return;\n        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n\n        var email_address = this.refs.add_threepid_input.value;\n        if (!Email.looksValid(email_address)) {\n            Modal.createDialog(ErrorDialog, {\n                title: \"Invalid Email Address\",\n                description: \"This doesn't appear to be a valid email address\",\n            });\n            return;\n        }\n        this.add_threepid = new AddThreepid();\n        // we always bind emails when registering, so let's do the\n        // same here.\n        this.add_threepid.addEmailAddress(email_address, true).done(() => {\n            Modal.createDialog(QuestionDialog, {\n                title: \"Verification Pending\",\n                description: \"Please check your email and click on the link it contains. Once this is done, click continue.\",\n                button: 'Continue',\n                onFinished: this.onEmailDialogFinished,\n            });\n        }, (err) => {\n            this.setState({email_add_pending: false});\n            Modal.createDialog(ErrorDialog, {\n                title: \"Unable to add email address\",\n                description: err.message\n            });\n        });\n        ReactDOM.findDOMNode(this.refs.add_threepid_input).blur();\n        this.setState({email_add_pending: true});\n    },\n\n    onRemoveThreepidClicked: function(threepid) {\n        const QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n        Modal.createDialog(QuestionDialog, {\n            title: \"Remove Contact Information?\",\n            description: \"Remove \" + threepid.address + \"?\",\n            button: 'Remove',\n            onFinished: (submit) => {\n                if (submit) {\n                    this.setState({\n                        phase: \"UserSettings.LOADING\",\n                    });\n                    MatrixClientPeg.get().deleteThreePid(threepid.medium, threepid.address).then(() => {\n                        return this._refreshFromServer();\n                    }).catch((err) => {\n                        const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                        Modal.createDialog(ErrorDialog, {\n                            title: \"Unable to remove contact information\",\n                            description: err.toString(),\n                        });\n                    }).done();\n                }\n            },\n        });\n    },\n\n    onEmailDialogFinished: function(ok) {\n        if (ok) {\n            this.verifyEmailAddress();\n        } else {\n            this.setState({email_add_pending: false});\n        }\n    },\n\n    verifyEmailAddress: function() {\n        this.add_threepid.checkEmailLinkClicked().done(() => {\n            this.add_threepid = undefined;\n            this.setState({\n                phase: \"UserSettings.LOADING\",\n            });\n            this._refreshFromServer();\n            this.setState({email_add_pending: false});\n        }, (err) => {\n            this.setState({email_add_pending: false});\n            if (err.errcode == 'M_THREEPID_AUTH_FAILED') {\n                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n                var message = \"Unable to verify email address. \";\n                message += \"Please check your email and click on the link it contains. Once this is done, click continue.\";\n                Modal.createDialog(QuestionDialog, {\n                    title: \"Verification Pending\",\n                    description: message,\n                    button: 'Continue',\n                    onFinished: this.onEmailDialogFinished,\n                });\n            } else {\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Unable to verify email address\",\n                    description: err.toString(),\n                });\n            }\n        });\n    },\n\n    _onDeactivateAccountClicked: function() {\n        const DeactivateAccountDialog = sdk.getComponent(\"dialogs.DeactivateAccountDialog\");\n        Modal.createDialog(DeactivateAccountDialog, {});\n    },\n\n    _onBugReportClicked: function() {\n        const BugReportDialog = sdk.getComponent(\"dialogs.BugReportDialog\");\n        if (!BugReportDialog) {\n            return;\n        }\n        Modal.createDialog(BugReportDialog, {});\n    },\n\n    _onInviteStateChange: function(event, member, oldMembership) {\n        if (member.userId === this._me && oldMembership === \"invite\") {\n            this.forceUpdate();\n        }\n    },\n\n    _onRejectAllInvitesClicked: function(rooms, ev) {\n        this.setState({\n            rejectingInvites: true\n        });\n        // reject the invites\n        let promises = rooms.map((room) => {\n            return MatrixClientPeg.get().leave(room.roomId);\n        });\n        // purposefully drop errors to the floor: we'll just have a non-zero number on the UI\n        // after trying to reject all the invites.\n        q.allSettled(promises).then(() => {\n            this.setState({\n                rejectingInvites: false\n            });\n        }).done();\n    },\n\n    _onExportE2eKeysClicked: function() {\n        Modal.createDialogAsync(\n            (cb) => {\n                require.ensure(['../../async-components/views/dialogs/ExportE2eKeysDialog'], () => {\n                    cb(require('../../async-components/views/dialogs/ExportE2eKeysDialog'));\n                }, \"e2e-export\");\n            }, {\n                matrixClient: MatrixClientPeg.get(),\n            }\n        );\n    },\n\n    _onImportE2eKeysClicked: function() {\n        Modal.createDialogAsync(\n            (cb) => {\n                require.ensure(['../../async-components/views/dialogs/ImportE2eKeysDialog'], () => {\n                    cb(require('../../async-components/views/dialogs/ImportE2eKeysDialog'));\n                }, \"e2e-export\");\n            }, {\n                matrixClient: MatrixClientPeg.get(),\n            }\n        );\n    },\n\n    _renderUserInterfaceSettings: function() {\n        var client = MatrixClientPeg.get();\n\n        return (\n            <div>\n                <h3>User Interface</h3>\n                <div className=\"mx_UserSettings_section\">\n                    { this._renderUrlPreviewSelector() }\n                    { SETTINGS_LABELS.map( this._renderSyncedSetting ) }\n                    { THEMES.map( this._renderThemeSelector ) }\n                </div>\n            </div>\n        );\n    },\n\n    _renderUrlPreviewSelector: function() {\n        return <div className=\"mx_UserSettings_toggle\">\n            <input id=\"urlPreviewsDisabled\"\n                   type=\"checkbox\"\n                   defaultChecked={ UserSettingsStore.getUrlPreviewsDisabled() }\n                   onChange={ e => UserSettingsStore.setUrlPreviewsDisabled(e.target.checked) }\n            />\n            <label htmlFor=\"urlPreviewsDisabled\">\n                Disable inline URL previews by default\n            </label>\n        </div>;\n    },\n\n    _renderSyncedSetting: function(setting) {\n        return <div className=\"mx_UserSettings_toggle\" key={ setting.id }>\n            <input id={ setting.id }\n                   type=\"checkbox\"\n                   defaultChecked={ this._syncedSettings[setting.id] }\n                   onChange={ e => UserSettingsStore.setSyncedSetting(setting.id, e.target.checked) }\n            />\n            <label htmlFor={ setting.id }>\n                { setting.label }\n            </label>\n        </div>;\n    },\n\n    _renderThemeSelector: function(setting) {\n        return <div className=\"mx_UserSettings_toggle\" key={ setting.id + \"_\" + setting.value }>\n            <input id={ setting.id + \"_\" + setting.value }\n                   type=\"radio\"\n                   name={ setting.id }\n                   value={ setting.value }\n                   defaultChecked={ this._syncedSettings[setting.id] === setting.value }\n                   onChange={ e => {\n                            if (e.target.checked) {\n                                UserSettingsStore.setSyncedSetting(setting.id, setting.value);\n                            }\n                            dis.dispatch({\n                                action: 'set_theme',\n                                value: setting.value,\n                            });\n                        }\n                   }\n            />\n            <label htmlFor={ setting.id + \"_\" + setting.value }>\n                { setting.label }\n            </label>\n        </div>;\n    },\n\n    _renderCryptoInfo: function() {\n        const client = MatrixClientPeg.get();\n        const deviceId = client.deviceId;\n        const identityKey = client.getDeviceEd25519Key() || \"<not supported>\";\n\n        let exportButton = null,\n            importButton = null;\n\n        if (client.isCryptoEnabled) {\n            exportButton = (\n                <AccessibleButton className=\"mx_UserSettings_button\"\n                        onClick={this._onExportE2eKeysClicked}>\n                    Export E2E room keys\n                </AccessibleButton>\n            );\n            importButton = (\n                <AccessibleButton className=\"mx_UserSettings_button\"\n                        onClick={this._onImportE2eKeysClicked}>\n                    Import E2E room keys\n                </AccessibleButton>\n            );\n        }\n        return (\n            <div>\n                <h3>Cryptography</h3>\n                <div className=\"mx_UserSettings_section mx_UserSettings_cryptoSection\">\n                    <ul>\n                        <li><label>Device ID:</label>             <span><code>{deviceId}</code></span></li>\n                        <li><label>Device key:</label>            <span><code><b>{identityKey}</b></code></span></li>\n                    </ul>\n                    {exportButton}\n                    {importButton}\n                </div>\n            </div>\n        );\n    },\n\n    _renderDevicesPanel: function() {\n        var DevicesPanel = sdk.getComponent('settings.DevicesPanel');\n        return (\n            <div>\n                <h3>Devices</h3>\n                <DevicesPanel className=\"mx_UserSettings_section\"/>\n            </div>\n        );\n    },\n\n    _renderBugReport: function() {\n        if (!SdkConfig.get().bug_report_endpoint_url) {\n            return <div />\n        }\n        return (\n            <div>\n                <h3>Bug Report</h3>\n                <div className=\"mx_UserSettings_section\">\n                    <p>Found a bug?</p>\n                    <button className=\"mx_UserSettings_button danger\"\n                        onClick={this._onBugReportClicked}>Report it\n                    </button>\n                </div>\n            </div>\n        );\n    },\n\n    _renderLabs: function() {\n        // default to enabled if undefined\n        if (this.props.enableLabs === false) return null;\n\n        let features = UserSettingsStore.LABS_FEATURES.map(feature => (\n            <div key={feature.id} className=\"mx_UserSettings_toggle\">\n                <input\n                    type=\"checkbox\"\n                    id={feature.id}\n                    name={feature.id}\n                    defaultChecked={ UserSettingsStore.isFeatureEnabled(feature.id) }\n                    onChange={e => {\n                        if (MatrixClientPeg.get().isGuest()) {\n                            e.target.checked = false;\n                            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");\n                            Modal.createDialog(NeedToRegisterDialog, {\n                                title: \"Please Register\",\n                                description: \"Guests can't use labs features. Please register.\",\n                            });\n                            return;\n                        }\n\n                        UserSettingsStore.setFeatureEnabled(feature.id, e.target.checked);\n                        this.forceUpdate();\n                    }}/>\n                <label htmlFor={feature.id}>{feature.name}</label>\n            </div>\n        ));\n        return (\n            <div>\n                <h3>Labs</h3>\n                <div className=\"mx_UserSettings_section\">\n                    <p>These are experimental features that may break in unexpected ways. Use with caution.</p>\n                    {features}\n                </div>\n            </div>\n        );\n    },\n\n    _renderDeactivateAccount: function() {\n        // We can't deactivate a guest account.\n        if (MatrixClientPeg.get().isGuest()) return null;\n\n        return <div>\n            <h3>Deactivate Account</h3>\n                <div className=\"mx_UserSettings_section\">\n                    <AccessibleButton className=\"mx_UserSettings_button danger\"\n                        onClick={this._onDeactivateAccountClicked}>Deactivate my account\n                    </AccessibleButton>\n                </div>\n        </div>;\n    },\n\n    _renderBulkOptions: function() {\n        let invitedRooms = MatrixClientPeg.get().getRooms().filter((r) => {\n            return r.hasMembershipState(this._me, \"invite\");\n        });\n        if (invitedRooms.length === 0) {\n            return null;\n        }\n\n        let Spinner = sdk.getComponent(\"elements.Spinner\");\n\n        let reject = <Spinner />;\n        if (!this.state.rejectingInvites) {\n            // bind() the invited rooms so any new invites that may come in as this button is clicked\n            // don't inadvertently get rejected as well.\n            reject = (\n                <AccessibleButton className=\"mx_UserSettings_button danger\"\n                onClick={this._onRejectAllInvitesClicked.bind(this, invitedRooms)}>\n                    Reject all {invitedRooms.length} invites\n                </AccessibleButton>\n            );\n        }\n\n        return <div>\n            <h3>Bulk Options</h3>\n                <div className=\"mx_UserSettings_section\">\n                    {reject}\n                </div>\n        </div>;\n    },\n\n    nameForMedium: function(medium) {\n        if (medium == 'msisdn') return 'Phone';\n        return medium[0].toUpperCase() + medium.slice(1);\n    },\n\n    render: function() {\n        var Loader = sdk.getComponent(\"elements.Spinner\");\n        switch (this.state.phase) {\n            case \"UserSettings.LOADING\":\n                return (\n                    <Loader />\n                );\n            case \"UserSettings.DISPLAY\":\n                break; // quit the switch to return the common state\n            default:\n                throw new Error(\"Unknown state.phase => \" + this.state.phase);\n        }\n        // can only get here if phase is UserSettings.DISPLAY\n        var SimpleRoomHeader = sdk.getComponent('rooms.SimpleRoomHeader');\n        var ChangeDisplayName = sdk.getComponent(\"views.settings.ChangeDisplayName\");\n        var ChangePassword = sdk.getComponent(\"views.settings.ChangePassword\");\n        var ChangeAvatar = sdk.getComponent('settings.ChangeAvatar');\n        var Notifications = sdk.getComponent(\"settings.Notifications\");\n        var EditableText = sdk.getComponent('elements.EditableText');\n\n        var avatarUrl = (\n            this.state.avatarUrl ? MatrixClientPeg.get().mxcUrlToHttp(this.state.avatarUrl) : null\n        );\n\n        var threepidsSection = this.state.threepids.map((val, pidIndex) => {\n            const id = \"3pid-\" + val.address;\n            return (\n                <div className=\"mx_UserSettings_profileTableRow\" key={pidIndex}>\n                    <div className=\"mx_UserSettings_profileLabelCell\">\n                        <label htmlFor={id}>{this.nameForMedium(val.medium)}</label>\n                    </div>\n                    <div className=\"mx_UserSettings_profileInputCell\">\n                        <input type=\"text\" key={val.address} id={id} value={val.address} disabled />\n                    </div>\n                    <div className=\"mx_UserSettings_threepidButton mx_filterFlipColor\">\n                        <img src=\"img/cancel-small.svg\" width=\"14\" height=\"14\" alt=\"Remove\" onClick={this.onRemoveThreepidClicked.bind(this, val)} />\n                    </div>\n                </div>\n            );\n        });\n        var addThreepidSection;\n        if (this.state.email_add_pending) {\n            addThreepidSection = <Loader />;\n        } else if (!MatrixClientPeg.get().isGuest()) {\n            addThreepidSection = (\n                <div className=\"mx_UserSettings_profileTableRow\" key=\"new\">\n                    <div className=\"mx_UserSettings_profileLabelCell\">\n                    </div>\n                    <div className=\"mx_UserSettings_profileInputCell\">\n                        <EditableText\n                            ref=\"add_threepid_input\"\n                            className=\"mx_UserSettings_editable\"\n                            placeholderClassName=\"mx_UserSettings_threepidPlaceholder\"\n                            placeholder={ \"Add email address\" }\n                            blurToCancel={ false }\n                            onValueChanged={ this.onAddThreepidClicked } />\n                    </div>\n                    <div className=\"mx_UserSettings_threepidButton mx_filterFlipColor\">\n                         <img src=\"img/plus.svg\" width=\"14\" height=\"14\" alt=\"Add\" onClick={ this.onAddThreepidClicked.bind(this, undefined, true) }/>\n                    </div>\n                </div>\n            );\n        }\n        threepidsSection.push(addThreepidSection);\n\n        var accountJsx;\n\n        if (MatrixClientPeg.get().isGuest()) {\n            accountJsx = (\n                <div className=\"mx_UserSettings_button\" onClick={this.onUpgradeClicked}>\n                    Create an account\n                </div>\n            );\n        }\n        else {\n            accountJsx = (\n                <ChangePassword\n                        className=\"mx_UserSettings_accountTable\"\n                        rowClassName=\"mx_UserSettings_profileTableRow\"\n                        rowLabelClassName=\"mx_UserSettings_profileLabelCell\"\n                        rowInputClassName=\"mx_UserSettings_profileInputCell\"\n                        buttonClassName=\"mx_UserSettings_button mx_UserSettings_changePasswordButton\"\n                        onError={this.onPasswordChangeError}\n                        onFinished={this.onPasswordChanged} />\n            );\n        }\n        var notification_area;\n        if (!MatrixClientPeg.get().isGuest() && this.state.threepids !== undefined) {\n            notification_area = (<div>\n                <h3>Notifications</h3>\n\n                <div className=\"mx_UserSettings_section\">\n                    <Notifications threepids={this.state.threepids} brand={this.props.brand} />\n                </div>\n            </div>);\n        }\n\n        var olmVersion = MatrixClientPeg.get().olmVersion;\n        // If the olmVersion is not defined then either crypto is disabled, or\n        // we are using a version old version of olm. We assume the former.\n        var olmVersionString = \"<not-enabled>\";\n        if (olmVersion !== undefined) {\n            olmVersionString = olmVersion[0] + \".\" + olmVersion[1] + \".\" + olmVersion[2];\n        }\n\n        return (\n            <div className=\"mx_UserSettings\">\n                <SimpleRoomHeader\n                    title=\"Settings\"\n                    collapsedRhs={ this.props.collapsedRhs }\n                    onCancelClick={ this.props.onClose }\n                />\n\n                <GeminiScrollbar className=\"mx_UserSettings_body\"\n                                 autoshow={true}>\n\n                <h3>Profile</h3>\n\n                <div className=\"mx_UserSettings_section\">\n                    <div className=\"mx_UserSettings_profileTable\">\n                        <div className=\"mx_UserSettings_profileTableRow\">\n                            <div className=\"mx_UserSettings_profileLabelCell\">\n                                <label htmlFor=\"displayName\">Display name</label>\n                            </div>\n                            <div className=\"mx_UserSettings_profileInputCell\">\n                                <ChangeDisplayName />\n                            </div>\n                        </div>\n                        {threepidsSection}\n                    </div>\n\n                    <div className=\"mx_UserSettings_avatarPicker\">\n                        <div onClick={ this.onAvatarPickerClick }>\n                            <ChangeAvatar ref=\"changeAvatar\" initialAvatarUrl={avatarUrl}\n                                showUploadSection={false} className=\"mx_UserSettings_avatarPicker_img\"/>\n                        </div>\n                        <div className=\"mx_UserSettings_avatarPicker_edit\">\n                            <label htmlFor=\"avatarInput\" ref=\"file_label\">\n                                <img src=\"img/camera.svg\" className=\"mx_filterFlipColor\"\n                                    alt=\"Upload avatar\" title=\"Upload avatar\"\n                                    width=\"17\" height=\"15\" />\n                            </label>\n                            <input id=\"avatarInput\" type=\"file\" onChange={this.onAvatarSelected}/>\n                        </div>\n                    </div>\n                </div>\n\n                <h3>Account</h3>\n\n                <div className=\"mx_UserSettings_section\">\n\n                    <AccessibleButton className=\"mx_UserSettings_logout mx_UserSettings_button\" onClick={this.onLogoutClicked}>\n                        Sign out\n                    </AccessibleButton>\n\n                    {accountJsx}\n                </div>\n\n                {notification_area}\n\n                {this._renderUserInterfaceSettings()}\n                {this._renderLabs()}\n                {this._renderDevicesPanel()}\n                {this._renderCryptoInfo()}\n                {this._renderBulkOptions()}\n                {this._renderBugReport()}\n\n                <h3>Advanced</h3>\n\n                <div className=\"mx_UserSettings_section\">\n                    <div className=\"mx_UserSettings_advanced\">\n                        Logged in as {this._me}\n                    </div>\n                    <div className=\"mx_UserSettings_advanced\">\n                        Homeserver is { MatrixClientPeg.get().getHomeserverUrl() }\n                    </div>\n                    <div className=\"mx_UserSettings_advanced\">\n                        Identity Server is { MatrixClientPeg.get().getIdentityServerUrl() }\n                    </div>\n                    <div className=\"mx_UserSettings_advanced\">\n                        matrix-react-sdk version: {REACT_SDK_VERSION}<br/>\n                        vector-web version: {this.state.vectorVersion !== null ? this.state.vectorVersion : 'unknown'}<br/>\n                        olm version: {olmVersionString}<br/>\n                    </div>\n                </div>\n\n                {this._renderDeactivateAccount()}\n\n                </GeminiScrollbar>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/avatars/BaseAvatar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var AvatarLogic = require(\"../../../Avatar\");","fix":{"range":[613,616],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":36,"column":53,"nodeType":"Property","source":"        defaultToInitialLetter: React.PropTypes.bool // true to add default url","fix":{"range":[1425,1425],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":44,"column":41,"nodeType":"Property","source":"            defaultToInitialLetter: true","fix":{"range":[1633,1633],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":9,"nodeType":"VariableDeclaration","source":"        var newState = this._getState(nextProps);","fix":{"range":[1885,1888],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":55,"column":9,"nodeType":"VariableDeclaration","source":"        var newImageUrls = newState.imageUrls;","fix":{"range":[1935,1938],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":56,"column":9,"nodeType":"VariableDeclaration","source":"        var oldImageUrls = this.state.imageUrls;","fix":{"range":[1982,1985],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":59,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2152,2161],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":62,"column":18,"nodeType":"VariableDeclaration","source":"            for (var i = 0; i < newImageUrls.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":75,"column":9,"nodeType":"VariableDeclaration","source":"        var urls = props.urls || [];","fix":{"range":[2672,2675],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":80,"column":9,"nodeType":"VariableDeclaration","source":"        var defaultImageUrl = null;","fix":{"range":[2800,2803],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":83,"column":43,"nodeType":"LogicalExpression","source":"                props.idName || props.name","fix":{"range":[2983,2983],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":90,"column":25,"nodeType":"Property","source":"            urlsIndex: 0","fix":{"range":[3184,3184],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":95,"column":9,"nodeType":"VariableDeclaration","source":"        var nextIndex = this.state.urlsIndex + 1;","fix":{"range":[3240,3243],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":99,"column":37,"nodeType":"Property","source":"                urlsIndex: nextIndex","fix":{"range":[3433,3433],"text":","}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":104,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'name'.","line":104,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":113,"column":9,"nodeType":"VariableDeclaration","source":"        var idx = 0;","fix":{"range":[3692,3695],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":114,"column":9,"nodeType":"VariableDeclaration","source":"        var initial = name[0];","fix":{"range":[3713,3716],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":121,"column":9,"nodeType":"VariableDeclaration","source":"        var chars = 1;","fix":{"range":[3959,3962],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":122,"column":9,"nodeType":"VariableDeclaration","source":"        var first = name.charCodeAt(idx);","fix":{"range":[3982,3985],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":126,"column":13,"nodeType":"VariableDeclaration","source":"            var second = name.charCodeAt(idx+1);","fix":{"range":[4149,4152],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":132,"column":9,"nodeType":"VariableDeclaration","source":"        var firstChar = name.substring(idx, idx+chars);","fix":{"range":[4300,4303],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":138,"column":9,"nodeType":"VariableDeclaration","source":"        var imageUrl = this.state.imageUrls[this.state.urlsIndex];","fix":{"range":[4495,4498],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'idName' is assigned a value but never used.","line":141,"column":19,"nodeType":"Identifier","source":"            name, idName, title, url, urls, width, height, resizeMethod,"},{"ruleId":"no-unused-vars","severity":2,"message":"'url' is assigned a value but never used.","line":141,"column":34,"nodeType":"Identifier","source":"            name, idName, title, url, urls, width, height, resizeMethod,"},{"ruleId":"no-unused-vars","severity":2,"message":"'urls' is assigned a value but never used.","line":141,"column":39,"nodeType":"Identifier","source":"            name, idName, title, url, urls, width, height, resizeMethod,"},{"ruleId":"no-unused-vars","severity":2,"message":"'resizeMethod' is assigned a value but never used.","line":141,"column":60,"nodeType":"Identifier","source":"            name, idName, title, url, urls, width, height, resizeMethod,"},{"ruleId":"no-unused-vars","severity":2,"message":"'defaultToInitialLetter' is assigned a value but never used.","line":142,"column":13,"nodeType":"Identifier","source":"            defaultToInitialLetter, onClick,"},{"ruleId":"max-len","severity":1,"message":"Line 153 exceeds the maximum line length of 90.","line":153,"column":1,"nodeType":"Program","source":"                                    lineHeight: height + \"px\" }}>{initialLetter}</EmojiText>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":179,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[6261,6261],"text":","}}],"errorCount":11,"warningCount":20,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar AvatarLogic = require(\"../../../Avatar\");\nimport sdk from '../../../index';\nimport AccessibleButton from '../elements/AccessibleButton';\n\nmodule.exports = React.createClass({\n    displayName: 'BaseAvatar',\n\n    propTypes: {\n        name: React.PropTypes.string.isRequired, // The name (first initial used as default)\n        idName: React.PropTypes.string, // ID for generating hash colours\n        title: React.PropTypes.string, // onHover title text\n        url: React.PropTypes.string, // highest priority of them all, shortcut to set in urls[0]\n        urls: React.PropTypes.array, // [highest_priority, ... , lowest_priority]\n        width: React.PropTypes.number,\n        height: React.PropTypes.number,\n        resizeMethod: React.PropTypes.string,\n        defaultToInitialLetter: React.PropTypes.bool // true to add default url\n    },\n\n    getDefaultProps: function() {\n        return {\n            width: 40,\n            height: 40,\n            resizeMethod: 'crop',\n            defaultToInitialLetter: true\n        };\n    },\n\n    getInitialState: function() {\n        return this._getState(this.props);\n    },\n\n    componentWillReceiveProps: function(nextProps) {\n        // work out if we need to call setState (if the image URLs array has changed)\n        var newState = this._getState(nextProps);\n        var newImageUrls = newState.imageUrls;\n        var oldImageUrls = this.state.imageUrls;\n        if (newImageUrls.length !== oldImageUrls.length) {\n            this.setState(newState); // detected a new entry\n        }\n        else {\n            // check each one to see if they are the same\n            for (var i = 0; i < newImageUrls.length; i++) {\n                if (oldImageUrls[i] !== newImageUrls[i]) {\n                    this.setState(newState); // detected a diff\n                    break;\n                }\n            }\n        }\n    },\n\n    _getState: function(props) {\n        // work out the full set of urls to try to load. This is formed like so:\n        // imageUrls: [ props.url, props.urls, default image ]\n\n        var urls = props.urls || [];\n        if (props.url) {\n            urls.unshift(props.url); // put in urls[0]\n        }\n\n        var defaultImageUrl = null;\n        if (props.defaultToInitialLetter) {\n            defaultImageUrl = AvatarLogic.defaultAvatarUrlForString(\n                props.idName || props.name\n            );\n            urls.push(defaultImageUrl); // lowest priority\n        }\n        return {\n            imageUrls: urls,\n            defaultImageUrl: defaultImageUrl,\n            urlsIndex: 0\n        };\n    },\n\n    onError: function(ev) {\n        var nextIndex = this.state.urlsIndex + 1;\n        if (nextIndex < this.state.imageUrls.length) {\n            // try the next one\n            this.setState({\n                urlsIndex: nextIndex\n            });\n        }\n    },\n\n    /**\n     * returns the first (non-sigil) character of 'name',\n     * converted to uppercase\n     */\n    _getInitialLetter: function(name) {\n        if (name.length < 1) {\n            return undefined;\n        }\n\n        var idx = 0;\n        var initial = name[0];\n        if ((initial === '@' || initial === '#') && name[1]) {\n            idx++;\n        }\n\n        // string.codePointAt(0) would do this, but that isn't supported by\n        // some browsers (notably PhantomJS).\n        var chars = 1;\n        var first = name.charCodeAt(idx);\n\n        // check if it’s the start of a surrogate pair\n        if (first >= 0xD800 && first <= 0xDBFF && name[idx+1]) {\n            var second = name.charCodeAt(idx+1);\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n                chars++;\n            }\n        }\n\n        var firstChar = name.substring(idx, idx+chars);\n        return firstChar.toUpperCase();\n    },\n\n    render: function() {\n        const EmojiText = sdk.getComponent('elements.EmojiText');\n        var imageUrl = this.state.imageUrls[this.state.urlsIndex];\n\n        const {\n            name, idName, title, url, urls, width, height, resizeMethod,\n            defaultToInitialLetter, onClick,\n            ...otherProps\n        } = this.props;\n\n        if (imageUrl === this.state.defaultImageUrl) {\n            const initialLetter = this._getInitialLetter(name);\n            return (\n                <span className=\"mx_BaseAvatar\" {...otherProps}>\n                    <EmojiText className=\"mx_BaseAvatar_initial\" aria-hidden=\"true\"\n                            style={{ fontSize: (width * 0.65) + \"px\",\n                                    width: width + \"px\",\n                                    lineHeight: height + \"px\" }}>{initialLetter}</EmojiText>\n                    <img className=\"mx_BaseAvatar_image\" src={imageUrl}\n                        alt=\"\" title={title} onError={this.onError}\n                        width={width} height={height} />\n                </span>\n            );\n        }\n        if (onClick != null) {\n            return (\n                <AccessibleButton className=\"mx_BaseAvatar\" onClick={onClick}>\n                    <img className=\"mx_BaseAvatar_image\" src={imageUrl}\n                        onError={this.onError}\n                        width={width} height={height}\n                        title={title} alt=\"\"\n                        {...otherProps} />\n                </AccessibleButton>\n            );\n        } else {\n            return (\n                <img className=\"mx_BaseAvatar mx_BaseAvatar_image\" src={imageUrl}\n                    onError={this.onError}\n                    width={width} height={height}\n                    title={title} alt=\"\"\n                    {...otherProps} />\n            );\n        }\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/avatars/MemberAvatar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var Avatar = require('../../../Avatar');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require(\"../../../index\");","fix":{"range":[654,657],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":66,"column":61,"nodeType":"Property","source":"                                         props.resizeMethod)","fix":{"range":[2141,2141],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":71,"column":9,"nodeType":"VariableDeclaration","source":"        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");","fix":{"range":[2194,2197],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":73,"column":9,"nodeType":"VariableDeclaration","source":"        var {member, onClick, viewUserOnClick, ...otherProps} = this.props;","fix":{"range":[2260,2263],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":88,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2768,2768],"text":","}}],"errorCount":2,"warningCount":5,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar Avatar = require('../../../Avatar');\nvar sdk = require(\"../../../index\");\nconst dispatcher = require(\"../../../dispatcher\");\n\nmodule.exports = React.createClass({\n    displayName: 'MemberAvatar',\n\n    propTypes: {\n        member: React.PropTypes.object.isRequired,\n        width: React.PropTypes.number,\n        height: React.PropTypes.number,\n        resizeMethod: React.PropTypes.string,\n        // The onClick to give the avatar\n        onClick: React.PropTypes.func,\n        // Whether the onClick of the avatar should be overriden to dispatch 'view_user'\n        viewUserOnClick: React.PropTypes.bool,\n        title: React.PropTypes.string,\n    },\n\n    getDefaultProps: function() {\n        return {\n            width: 40,\n            height: 40,\n            resizeMethod: 'crop',\n            viewUserOnClick: false,\n        };\n    },\n\n    getInitialState: function() {\n        return this._getState(this.props);\n    },\n\n    componentWillReceiveProps: function(nextProps) {\n        this.setState(this._getState(nextProps));\n    },\n\n    _getState: function(props) {\n        if (!props.member) {\n            console.error(\"MemberAvatar called somehow with null member\");\n        }\n        return {\n            name: props.member.name,\n            title: props.title || props.member.userId,\n            imageUrl: Avatar.avatarUrlForMember(props.member,\n                                         props.width,\n                                         props.height,\n                                         props.resizeMethod)\n        };\n    },\n\n    render: function() {\n        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");\n\n        var {member, onClick, viewUserOnClick, ...otherProps} = this.props;\n\n        if (viewUserOnClick) {\n            onClick = () => {\n                dispatcher.dispatch({\n                    action: 'view_user',\n                    member: this.props.member,\n                });\n            };\n        }\n\n        return (\n            <BaseAvatar {...otherProps} name={this.state.name} title={this.state.title}\n                idName={member.userId} url={this.state.imageUrl} onClick={onClick}/>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/avatars/RoomAvatar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[567,570],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var ContentRepo = require(\"matrix-js-sdk\").ContentRepo;","fix":{"range":[597,600],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[653,656],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var Avatar = require('../../../Avatar');","fix":{"range":[712,715],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require(\"../../../index\");","fix":{"range":[753,756],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":33,"column":45,"nodeType":"Property","source":"        resizeMethod: React.PropTypes.string","fix":{"range":[1228,1228],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":47,"column":48,"nodeType":"Property","source":"            urls: this.getImageUrls(this.props)","fix":{"range":[1511,1511],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":53,"column":46,"nodeType":"Property","source":"            urls: this.getImageUrls(newProps)","fix":{"range":[1652,1652],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":62,"column":62,"nodeType":"MemberExpression","source":"                props.width, props.height, props.resizeMethod","fix":{"range":[1928,1928],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":66,"column":42,"nodeType":"CallExpression","source":"            this.getFallbackAvatar(props) // lowest priority","fix":{"range":[2090,2090],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":78,"column":18,"nodeType":"Literal","source":"            false","fix":{"range":[2464,2464],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":85,"column":9,"nodeType":"VariableDeclaration","source":"        var mlist = props.room.currentState.members;","fix":{"range":[2577,2580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":86,"column":9,"nodeType":"VariableDeclaration","source":"        var userIds = [];","fix":{"range":[2630,2633],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":88,"column":14,"nodeType":"VariableDeclaration","source":"        for (var uid in mlist) {","fix":{"range":[2732,2735],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":98,"column":13,"nodeType":"VariableDeclaration","source":"            var theOtherGuy = null;","fix":{"range":[2985,2988],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":107,"column":22,"nodeType":"Literal","source":"                false","fix":{"range":[3417,3417],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":113,"column":26,"nodeType":"Literal","source":"                    false","fix":{"range":[3672,3672],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":127,"column":9,"nodeType":"VariableDeclaration","source":"        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");","fix":{"range":[3941,3944],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":129,"column":9,"nodeType":"VariableDeclaration","source":"        var {room, oobData, ...otherProps} = this.props;","fix":{"range":[4007,4010],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":131,"column":9,"nodeType":"VariableDeclaration","source":"        var roomName = room ? room.name : oobData.name;","fix":{"range":[4065,4068],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":138,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[4296,4296],"text":","}}],"errorCount":9,"warningCount":12,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar React = require('react');\nvar ContentRepo = require(\"matrix-js-sdk\").ContentRepo;\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar Avatar = require('../../../Avatar');\nvar sdk = require(\"../../../index\");\n\nmodule.exports = React.createClass({\n    displayName: 'RoomAvatar',\n\n    // Room may be left unset here, but if it is,\n    // oobData.avatarUrl should be set (else there\n    // would be nowhere to get the avatar from)\n    propTypes: {\n        room: React.PropTypes.object,\n        oobData: React.PropTypes.object,\n        width: React.PropTypes.number,\n        height: React.PropTypes.number,\n        resizeMethod: React.PropTypes.string\n    },\n\n    getDefaultProps: function() {\n        return {\n            width: 36,\n            height: 36,\n            resizeMethod: 'crop',\n            oobData: {},\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            urls: this.getImageUrls(this.props)\n        };\n    },\n\n    componentWillReceiveProps: function(newProps) {\n        this.setState({\n            urls: this.getImageUrls(newProps)\n        });\n    },\n\n    getImageUrls: function(props) {\n        return [\n            ContentRepo.getHttpUriForMxc(\n                MatrixClientPeg.get().getHomeserverUrl(),\n                props.oobData.avatarUrl,\n                props.width, props.height, props.resizeMethod\n            ), // highest priority\n            this.getRoomAvatarUrl(props),\n            this.getOneToOneAvatar(props),\n            this.getFallbackAvatar(props) // lowest priority\n        ].filter(function(url) {\n            return (url != null && url != \"\");\n        });\n    },\n\n    getRoomAvatarUrl: function(props) {\n        if (!this.props.room) return null;\n\n        return props.room.getAvatarUrl(\n            MatrixClientPeg.get().getHomeserverUrl(),\n            props.width, props.height, props.resizeMethod,\n            false\n        );\n    },\n\n    getOneToOneAvatar: function(props) {\n        if (!this.props.room) return null;\n\n        var mlist = props.room.currentState.members;\n        var userIds = [];\n        // for .. in optimisation to return early if there are >2 keys\n        for (var uid in mlist) {\n            if (mlist.hasOwnProperty(uid)) {\n                userIds.push(uid);\n            }\n            if (userIds.length > 2) {\n                return null;\n            }\n        }\n\n        if (userIds.length == 2) {\n            var theOtherGuy = null;\n            if (mlist[userIds[0]].userId == MatrixClientPeg.get().credentials.userId) {\n                theOtherGuy = mlist[userIds[1]];\n            } else {\n                theOtherGuy = mlist[userIds[0]];\n            }\n            return theOtherGuy.getAvatarUrl(\n                MatrixClientPeg.get().getHomeserverUrl(),\n                props.width, props.height, props.resizeMethod,\n                false\n            );\n        } else if (userIds.length == 1) {\n            return mlist[userIds[0]].getAvatarUrl(\n                MatrixClientPeg.get().getHomeserverUrl(),\n                props.width, props.height, props.resizeMethod,\n                    false\n            );\n        } else {\n           return null;\n        }\n    },\n\n    getFallbackAvatar: function(props) {\n        if (!this.props.room) return null;\n\n        return Avatar.defaultAvatarUrlForString(props.room.roomId);\n    },\n\n    render: function() {\n        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");\n\n        var {room, oobData, ...otherProps} = this.props;\n\n        var roomName = room ? room.name : oobData.name;\n\n        return (\n            <BaseAvatar {...otherProps} name={roomName}\n                idName={room ? room.roomId : null}\n                urls={this.state.urls} />\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/create_room/CreateRoomButton.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 39 exceeds the maximum line length of 90.","line":39,"column":1,"nodeType":"Program","source":"            <button className=\"mx_CreateRoomButton\" onClick={this.onClick}>Create Room</button>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":41,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[1091,1091],"text":","}}],"errorCount":1,"warningCount":2,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'CreateRoomButton',\n    propTypes: {\n        onCreateRoom: React.PropTypes.func,\n    },\n\n    getDefaultProps: function() {\n        return {\n            onCreateRoom: function() {},\n        };\n    },\n\n    onClick: function() {\n        this.props.onCreateRoom();\n    },\n\n    render: function() {\n        return (\n            <button className=\"mx_CreateRoomButton\" onClick={this.onClick}>Create Room</button>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/create_room/Presets.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Presets = {","fix":{"range":[614,617],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":31,"column":39,"nodeType":"Property","source":"        preset: React.PropTypes.string","fix":{"range":[890,890],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 48 exceeds the maximum line length of 90.","line":48,"column":1,"nodeType":"Program","source":"            <select className=\"mx_Presets\" onChange={this.onValueChanged} value={this.props.preset}>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":54,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[1523,1523],"text":","}}],"errorCount":2,"warningCount":3,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nvar Presets = {\n    PrivateChat: \"private_chat\",\n    PublicChat: \"public_chat\",\n    Custom: \"custom\",\n};\n\nmodule.exports = React.createClass({\n    displayName: 'CreateRoomPresets',\n    propTypes: {\n        onChange: React.PropTypes.func,\n        preset: React.PropTypes.string\n    },\n\n    Presets: Presets,\n\n    getDefaultProps: function() {\n        return {\n            onChange: function() {},\n        };\n    },\n\n    onValueChanged: function(ev) {\n        this.props.onChange(ev.target.value);\n    },\n\n    render: function() {\n        return (\n            <select className=\"mx_Presets\" onChange={this.onValueChanged} value={this.props.preset}>\n                <option value={this.Presets.PrivateChat}>Private Chat</option>\n                <option value={this.Presets.PublicChat}>Public Chat</option>\n                <option value={this.Presets.Custom}>Custom</option>\n            </select>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/create_room/RoomAlias.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":9,"nodeType":"VariableDeclaration","source":"        var room_alias = this.props.alias;","fix":{"range":[1117,1120],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":37,"column":13,"nodeType":"Identifier","source":"        var room_alias = this.props.alias;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":39,"column":13,"nodeType":"Identifier","source":"        if (room_alias && this.props.homeserver) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":40,"column":13,"nodeType":"VariableDeclaration","source":"            var suffix = \":\" + this.props.homeserver;","fix":{"range":[1216,1219],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":42,"column":17,"nodeType":"Identifier","source":"                room_alias = room_alias.slice(1, -suffix.length);"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":46,"column":16,"nodeType":"Identifier","source":"        return room_alias;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":9,"nodeType":"VariableDeclaration","source":"        var target = ev.target;","fix":{"range":[1586,1589],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":55,"column":9,"nodeType":"VariableDeclaration","source":"        var curr_val = ev.target.value;","fix":{"range":[1618,1621],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'curr_val' is not in camel case.","line":55,"column":13,"nodeType":"Identifier","source":"        var curr_val = ev.target.value;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'curr_val' is not in camel case.","line":58,"column":17,"nodeType":"Identifier","source":"            if (curr_val == \"\") {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":59,"column":17,"nodeType":"VariableDeclaration","source":"                var self = this;","fix":{"range":[1738,1741],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":65,"column":17,"nodeType":"VariableDeclaration","source":"                var suffix = \":\" + this.props.homeserver;","fix":{"range":[1972,1975],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 69 exceeds the maximum line length of 90.","line":69,"column":1,"nodeType":"Program","source":"                        curr_val.endsWith(suffix) ? (target.value.length - suffix.length) : target.value.length"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":69,"column":112,"nodeType":"ConditionalExpression","source":"                        curr_val.endsWith(suffix) ? (target.value.length - suffix.length) : target.value.length","fix":{"range":[2269,2269],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":77,"column":9,"nodeType":"VariableDeclaration","source":"        var curr_val = ev.target.value;","fix":{"range":[2383,2386],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'curr_val' is not in camel case.","line":77,"column":13,"nodeType":"Identifier","source":"        var curr_val = ev.target.value;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'curr_val' is not in camel case.","line":80,"column":17,"nodeType":"Identifier","source":"            if (curr_val == \"#:\" + this.props.homeserver) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'curr_val' is not in camel case.","line":85,"column":17,"nodeType":"Identifier","source":"            if (curr_val != \"\") {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":86,"column":17,"nodeType":"VariableDeclaration","source":"                var new_val = ev.target.value;","fix":{"range":[2640,2643],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_val' is not in camel case.","line":86,"column":21,"nodeType":"Identifier","source":"                var new_val = ev.target.value;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":87,"column":17,"nodeType":"VariableDeclaration","source":"                var suffix = \":\" + this.props.homeserver;","fix":{"range":[2687,2690],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_val' is not in camel case.","line":88,"column":48,"nodeType":"Identifier","source":"                if (!curr_val.startsWith(\"#\")) new_val = \"#\" + new_val;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_val' is not in camel case.","line":88,"column":64,"nodeType":"Identifier","source":"                if (!curr_val.startsWith(\"#\")) new_val = \"#\" + new_val;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_val' is not in camel case.","line":89,"column":49,"nodeType":"Identifier","source":"                if (!curr_val.endsWith(suffix)) new_val = new_val + suffix;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_val' is not in camel case.","line":89,"column":59,"nodeType":"Identifier","source":"                if (!curr_val.endsWith(suffix)) new_val = new_val + suffix;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_val' is not in camel case.","line":90,"column":35,"nodeType":"Identifier","source":"                ev.target.value = new_val;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":101,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[3231,3231],"text":","}}],"errorCount":2,"warningCount":26,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'RoomAlias',\n    propTypes: {\n        // Specifying a homeserver will make magical things happen when you,\n        // e.g. start typing in the room alias box.\n        homeserver: React.PropTypes.string,\n        alias: React.PropTypes.string,\n        onChange: React.PropTypes.func,\n    },\n\n    getDefaultProps: function() {\n        return {\n            onChange: function() {},\n            alias: '',\n        };\n    },\n\n    getAliasLocalpart: function() {\n        var room_alias = this.props.alias;\n\n        if (room_alias && this.props.homeserver) {\n            var suffix = \":\" + this.props.homeserver;\n            if (room_alias.startsWith(\"#\") && room_alias.endsWith(suffix)) {\n                room_alias = room_alias.slice(1, -suffix.length);\n            }\n        }\n\n        return room_alias;\n    },\n\n    onValueChanged: function(ev) {\n        this.props.onChange(ev.target.value);\n    },\n\n    onFocus: function(ev) {\n        var target = ev.target;\n        var curr_val = ev.target.value;\n\n        if (this.props.homeserver) {\n            if (curr_val == \"\") {\n                var self = this;\n                setTimeout(function() {\n                    target.value = \"#:\" + self.props.homeserver;\n                    target.setSelectionRange(1, 1);\n                }, 0);\n            } else {\n                var suffix = \":\" + this.props.homeserver;\n                setTimeout(function() {\n                    target.setSelectionRange(\n                        curr_val.startsWith(\"#\") ? 1 : 0,\n                        curr_val.endsWith(suffix) ? (target.value.length - suffix.length) : target.value.length\n                    );\n                }, 0);\n            }\n        }\n    },\n\n    onBlur: function(ev) {\n        var curr_val = ev.target.value;\n\n        if (this.props.homeserver) {\n            if (curr_val == \"#:\" + this.props.homeserver) {\n                ev.target.value = \"\";\n                return;\n            }\n\n            if (curr_val != \"\") {\n                var new_val = ev.target.value;\n                var suffix = \":\" + this.props.homeserver;\n                if (!curr_val.startsWith(\"#\")) new_val = \"#\" + new_val;\n                if (!curr_val.endsWith(suffix)) new_val = new_val + suffix;\n                ev.target.value = new_val;\n            }\n        }\n    },\n\n    render: function() {\n        return (\n            <input type=\"text\" className=\"mx_RoomAlias\" placeholder=\"Alias (optional)\"\n                onChange={this.onValueChanged} onFocus={this.onFocus} onBlur={this.onBlur}\n                value={this.props.alias}/>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/dialogs/BaseDialog.js","messages":[],"errorCount":0,"warningCount":0},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/dialogs/ChatInviteDialog.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'classNames' is defined but never used.","line":18,"column":8,"nodeType":"Identifier","source":"import classNames from 'classnames';"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'rate_limited_func' is not in camel case.","line":24,"column":8,"nodeType":"Identifier","source":"import rate_limited_func from '../../../ratelimitedfunc';"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":54,"column":52,"nodeType":"Property","source":"        onFinished: React.PropTypes.func.isRequired","fix":{"range":[1912,1912],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":64,"column":24,"nodeType":"Property","source":"            focus: true","fix":{"range":[2208,2208],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":103,"column":17,"nodeType":"VariableDeclaration","source":"                var room = this._getDirectMessageRoom(inviteList[0]);","fix":{"range":[3443,3446],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 142 exceeds the maximum line length of 90.","line":142,"column":1,"nodeType":"Program","source":"        } else if (this.state.queryList.length > 0 && (e.keyCode === 188 || e.keyCode === 13 || e.keyCode === 9)) { // comma or enter or tab"},{"ruleId":"max-len","severity":1,"message":"Line 146 exceeds the maximum line length of 90.","line":146,"column":1,"nodeType":"Program","source":"        } else if (this.refs.textinput.value.length === 0 && this.state.inviteList.length && e.keyCode === 8) { // backspace"},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":184,"column":18,"nodeType":"ReturnStatement","source":"                }","fix":{"range":[6598,6598],"text":";"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":212,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[7469,7472],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":214,"column":13,"nodeType":"VariableDeclaration","source":"            var inviteList = self.state.inviteList.slice();","fix":{"range":[7526,7529],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":220,"column":17,"nodeType":"ThisExpression","source":"            if (this._cancelThreepidLookup) this._cancelThreepidLookup();"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":220,"column":45,"nodeType":"ThisExpression","source":"            if (this._cancelThreepidLookup) this._cancelThreepidLookup();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":225,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[7862,7865],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":232,"column":9,"nodeType":"VariableDeclaration","source":"        var inviteList = this.state.inviteList.slice();","fix":{"range":[8004,8007],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":243,"column":9,"nodeType":"VariableDeclaration","source":"        var dmRooms = dmRoomMap.getDMRoomsForUserId(addr);","fix":{"range":[8399,8402],"text":"let"}},{"ruleId":"prefer-const","severity":1,"message":"'room' is never reassigned. Use 'const' instead.","line":247,"column":21,"nodeType":"Identifier","source":"                let room = MatrixClientPeg.get().getRoom(dmRooms[i]);","fix":{"range":[8649,8652],"text":"const"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":261,"column":13,"nodeType":"VariableDeclaration","source":"            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");","fix":{"range":[9094,9097],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":264,"column":80,"nodeType":"Property","source":"                description: \"Guest users can't invite users. Please register.\"","fix":{"range":[9347,9347],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":275,"column":13,"nodeType":"VariableDeclaration","source":"            var self = this;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":278,"column":17,"nodeType":"VariableDeclaration","source":"                var room = MatrixClientPeg.get().getRoom(self.props.roomId);","fix":{"range":[9707,9710],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":283,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[9939,9942],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":286,"column":48,"nodeType":"Property","source":"                    description: err.toString()","fix":{"range":[10143,10143],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":296,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[10452,10455],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":299,"column":48,"nodeType":"Property","source":"                    description: err.toString()","fix":{"range":[10661,10661],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":306,"column":13,"nodeType":"VariableDeclaration","source":"            var self = this;"},{"ruleId":"no-redeclare","severity":2,"message":"'self' is already defined.","line":306,"column":17,"nodeType":"Identifier","source":"            var self = this;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":307,"column":13,"nodeType":"VariableDeclaration","source":"            var room;","fix":{"range":[10842,10845],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":317,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[11249,11252],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":320,"column":48,"nodeType":"Property","source":"                    description: err.toString()","fix":{"range":[11453,11453],"text":","}},{"ruleId":"new-cap","severity":1,"message":"A constructor name should not start with a lowercase letter.","line":331,"column":26,"nodeType":"NewExpression","source":"    _updateUserList: new rate_limited_func(function() {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":333,"column":9,"nodeType":"ThisExpression","source":"        this._userList = MatrixClientPeg.get().getUsers();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":338,"column":9,"nodeType":"VariableDeclaration","source":"        var name = user.displayName.toLowerCase();","fix":{"range":[11936,11939],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":339,"column":9,"nodeType":"VariableDeclaration","source":"        var uid = user.userId.toLowerCase();","fix":{"range":[11987,11990],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 369 exceeds the maximum line length of 90.","line":369,"column":1,"nodeType":"Program","source":"        const expr = new RegExp(\"(?:^|[\\\\s\\\\(\\)'\\\",\\.-_@\\?;:{}\\\\[\\\\]\\\\#~`\\\\*\\\\&\\\\$])\" + escapeRegExp(query));"},{"ruleId":"max-len","severity":1,"message":"Line 390 exceeds the maximum line length of 90.","line":390,"column":1,"nodeType":"Program","source":"        if (addrs.length === 1 && getAddressType(addrs[0]) === \"mx\" && !this.props.roomId) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":399,"column":9,"nodeType":"VariableDeclaration","source":"        var errorList = [];","fix":{"range":[13894,13897],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":400,"column":14,"nodeType":"VariableDeclaration","source":"        for (var addr in addrs) {","fix":{"range":[13927,13930],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":407,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[14132,14135],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 409 exceeds the maximum line length of 90.","line":409,"column":1,"nodeType":"Program","source":"                title: \"Failed to invite the following users to the \" + room.name + \" room:\","},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":454,"column":10,"nodeType":"ExpressionStatement","source":"        }","fix":{"range":[15828,15828],"text":";"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":476,"column":19,"nodeType":"Property","source":"                }]","fix":{"range":[16669,16669],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":486,"column":9,"nodeType":"VariableDeclaration","source":"        var query = [];","fix":{"range":[16923,16926],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":489,"column":13,"nodeType":"VariableDeclaration","source":"            var AddressTile = sdk.getComponent(\"elements.AddressTile\");","fix":{"range":[17033,17036],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 492 exceeds the maximum line length of 90.","line":492,"column":1,"nodeType":"Program","source":"                    <AddressTile key={i} address={this.state.inviteList[i]} canDismiss={true} onDismissed={ this.onDismissed(i) } />"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":492,"column":133,"nodeType":"JSXElement","source":"                    <AddressTile key={i} address={this.state.inviteList[i]} canDismiss={true} onDismissed={ this.onDismissed(i) } />","fix":{"range":[17322,17322],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":508,"column":24,"nodeType":"JSXElement","source":"            </textarea>","fix":{"range":[17839,17839],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":511,"column":9,"nodeType":"VariableDeclaration","source":"        var error;","fix":{"range":[17860,17863],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":512,"column":9,"nodeType":"VariableDeclaration","source":"        var addressSelector;","fix":{"range":[17879,17882],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 514 exceeds the maximum line length of 90.","line":514,"column":1,"nodeType":"Program","source":"            error = <div className=\"mx_ChatInviteDialog_error\">You have entered an invalid contact. Try using their Matrix ID or email address.</div>;"},{"ruleId":"max-len","severity":1,"message":"Line 516 exceeds the maximum line length of 90.","line":516,"column":1,"nodeType":"Program","source":"            const addressSelectorHeader = <div className=\"mx_ChatInviteDialog_addressSelectHeader\">"},{"ruleId":"max-len","severity":1,"message":"Line 536 exceeds the maximum line length of 90.","line":536,"column":1,"nodeType":"Program","source":"                    <TintableSvg src=\"img/icons-close-button.svg\" width=\"35\" height=\"35\" />"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":553,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[19756,19756],"text":","}}],"errorCount":17,"warningCount":35,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport sdk from '../../../index';\nimport { getAddressType, inviteMultipleToRoom } from '../../../Invite';\nimport createRoom from '../../../createRoom';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\nimport DMRoomMap from '../../../utils/DMRoomMap';\nimport rate_limited_func from '../../../ratelimitedfunc';\nimport dis from '../../../dispatcher';\nimport Modal from '../../../Modal';\nimport AccessibleButton from '../elements/AccessibleButton';\nimport q from 'q';\n\nconst TRUNCATE_QUERY_LIST = 40;\n\n/*\n * Escapes a string so it can be used in a RegExp\n * Basically just replaces: \\ ^ $ * + ? . ( ) | { } [ ]\n * From http://stackoverflow.com/a/6969486\n */\nfunction escapeRegExp(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\nmodule.exports = React.createClass({\n    displayName: \"ChatInviteDialog\",\n    propTypes: {\n        title: React.PropTypes.string,\n        description: React.PropTypes.oneOfType([\n            React.PropTypes.element,\n            React.PropTypes.string,\n        ]),\n        value: React.PropTypes.string,\n        placeholder: React.PropTypes.string,\n        roomId: React.PropTypes.string,\n        button: React.PropTypes.string,\n        focus: React.PropTypes.bool,\n        onFinished: React.PropTypes.func.isRequired\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Start a chat\",\n            description: \"Who would you like to communicate with?\",\n            value: \"\",\n            placeholder: \"Email, name or matrix ID\",\n            button: \"Start Chat\",\n            focus: true\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            error: false,\n\n            // List of AddressTile.InviteAddressType objects represeting\n            // the list of addresses we're going to invite\n            inviteList: [],\n\n            // List of AddressTile.InviteAddressType objects represeting\n            // the set of autocompletion results for the current search\n            // query.\n            queryList: [],\n        };\n    },\n\n    componentDidMount: function() {\n        if (this.props.focus) {\n            // Set the cursor at the end of the text input\n            this.refs.textinput.value = this.props.value;\n        }\n        this._updateUserList();\n    },\n\n    onButtonClick: function() {\n        let inviteList = this.state.inviteList.slice();\n        // Check the text input field to see if user has an unconverted address\n        // If there is and it's valid add it to the local inviteList\n        if (this.refs.textinput.value !== '') {\n            inviteList = this._addInputToList();\n            if (inviteList === null) return;\n        }\n\n        if (inviteList.length > 0) {\n            if (this._isDmChat(inviteList)) {\n                // Direct Message chat\n                var room = this._getDirectMessageRoom(inviteList[0]);\n                if (room) {\n                    // A Direct Message room already exists for this user and you\n                    // so go straight to that room\n                    dis.dispatch({\n                        action: 'view_room',\n                        room_id: room.roomId,\n                    });\n                    this.props.onFinished(true, inviteList[0]);\n                } else {\n                    this._startChat(inviteList);\n                }\n            } else {\n                // Multi invite chat\n                this._startChat(inviteList);\n            }\n        } else {\n            // No addresses supplied\n            this.setState({ error: true });\n        }\n    },\n\n    onCancel: function() {\n        this.props.onFinished(false);\n    },\n\n    onKeyDown: function(e) {\n        if (e.keyCode === 27) { // escape\n            e.stopPropagation();\n            e.preventDefault();\n            this.props.onFinished(false);\n        } else if (e.keyCode === 38) { // up arrow\n            e.stopPropagation();\n            e.preventDefault();\n            this.addressSelector.moveSelectionUp();\n        } else if (e.keyCode === 40) { // down arrow\n            e.stopPropagation();\n            e.preventDefault();\n            this.addressSelector.moveSelectionDown();\n        } else if (this.state.queryList.length > 0 && (e.keyCode === 188 || e.keyCode === 13 || e.keyCode === 9)) { // comma or enter or tab\n            e.stopPropagation();\n            e.preventDefault();\n            this.addressSelector.chooseSelection();\n        } else if (this.refs.textinput.value.length === 0 && this.state.inviteList.length && e.keyCode === 8) { // backspace\n            e.stopPropagation();\n            e.preventDefault();\n            this.onDismissed(this.state.inviteList.length - 1)();\n        } else if (e.keyCode === 13) { // enter\n            e.stopPropagation();\n            e.preventDefault();\n            if (this.refs.textinput.value == '') {\n                // if there's nothing in the input box, submit the form\n                this.onButtonClick();\n            } else {\n                this._addInputToList();\n            }\n        } else if (e.keyCode === 188 || e.keyCode === 9) { // comma or tab\n            e.stopPropagation();\n            e.preventDefault();\n            this._addInputToList();\n        }\n    },\n\n    onQueryChanged: function(ev) {\n        const query = ev.target.value;\n        let queryList = [];\n\n        // Only do search if there is something to search\n        if (query.length > 0 && query != '@') {\n            // filter the known users list\n            queryList = this._userList.filter((user) => {\n                return this._matches(query, user);\n            }).map((user) => {\n                // Return objects, structure of which is defined\n                // by InviteAddressType\n                return {\n                    addressType: 'mx',\n                    address: user.userId,\n                    displayName: user.displayName,\n                    avatarMxc: user.avatarUrl,\n                    isKnown: true,\n                }\n            });\n\n            // If the query isn't a user we know about, but is a\n            // valid address, add an entry for that\n            if (queryList.length == 0) {\n                const addrType = getAddressType(query);\n                if (addrType !== null) {\n                    queryList[0] = {\n                        addressType: addrType,\n                        address: query,\n                        isKnown: false,\n                    };\n                    if (this._cancelThreepidLookup) this._cancelThreepidLookup();\n                    if (addrType == 'email') {\n                        this._lookupThreepid(addrType, query).done();\n                    }\n                }\n            }\n        }\n\n        this.setState({\n            queryList: queryList,\n            error: false,\n        });\n    },\n\n    onDismissed: function(index) {\n        var self = this;\n        return function() {\n            var inviteList = self.state.inviteList.slice();\n            inviteList.splice(index, 1);\n            self.setState({\n                inviteList: inviteList,\n                queryList: [],\n            });\n            if (this._cancelThreepidLookup) this._cancelThreepidLookup();\n        };\n    },\n\n    onClick: function(index) {\n        var self = this;\n        return function() {\n            self.onSelected(index);\n        };\n    },\n\n    onSelected: function(index) {\n        var inviteList = this.state.inviteList.slice();\n        inviteList.push(this.state.queryList[index]);\n        this.setState({\n            inviteList: inviteList,\n            queryList: [],\n        });\n        if (this._cancelThreepidLookup) this._cancelThreepidLookup();\n    },\n\n    _getDirectMessageRoom: function(addr) {\n        const dmRoomMap = new DMRoomMap(MatrixClientPeg.get());\n        var dmRooms = dmRoomMap.getDMRoomsForUserId(addr);\n        if (dmRooms.length > 0) {\n            // Cycle through all the DM rooms and find the first non forgotten or parted room\n            for (let i = 0; i < dmRooms.length; i++) {\n                let room = MatrixClientPeg.get().getRoom(dmRooms[i]);\n                if (room) {\n                    const me = room.getMember(MatrixClientPeg.get().credentials.userId);\n                    if (me.membership == 'join') {\n                        return room;\n                    }\n                }\n            }\n        }\n        return null;\n    },\n\n    _startChat: function(addrs) {\n        if (MatrixClientPeg.get().isGuest()) {\n            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");\n            Modal.createDialog(NeedToRegisterDialog, {\n                title: \"Please Register\",\n                description: \"Guest users can't invite users. Please register.\"\n            });\n            return;\n        }\n\n        const addrTexts = addrs.map((addr) => {\n            return addr.address;\n        });\n\n        if (this.props.roomId) {\n            // Invite new user to a room\n            var self = this;\n            inviteMultipleToRoom(this.props.roomId, addrTexts)\n            .then(function(addrs) {\n                var room = MatrixClientPeg.get().getRoom(self.props.roomId);\n                return self._showAnyInviteErrors(addrs, room);\n            })\n            .catch(function(err) {\n                console.error(err.stack);\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Failure to invite\",\n                    description: err.toString()\n                });\n                return null;\n            })\n            .done();\n        } else if (this._isDmChat(addrTexts)) {\n            // Start the DM chat\n            createRoom({dmUserId: addrTexts[0]})\n            .catch(function(err) {\n                console.error(err.stack);\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Failure to invite user\",\n                    description: err.toString()\n                });\n                return null;\n            })\n            .done();\n        } else {\n            // Start multi user chat\n            var self = this;\n            var room;\n            createRoom().then(function(roomId) {\n                room = MatrixClientPeg.get().getRoom(roomId);\n                return inviteMultipleToRoom(roomId, addrTexts);\n            })\n            .then(function(addrs) {\n                return self._showAnyInviteErrors(addrs, room);\n            })\n            .catch(function(err) {\n                console.error(err.stack);\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Failure to invite\",\n                    description: err.toString()\n                });\n                return null;\n            })\n            .done();\n        }\n\n        // Close - this will happen before the above, as that is async\n        this.props.onFinished(true, addrTexts);\n    },\n\n    _updateUserList: new rate_limited_func(function() {\n        // Get all the users\n        this._userList = MatrixClientPeg.get().getUsers();\n    }, 500),\n\n    // This is the search algorithm for matching users\n    _matches: function(query, user) {\n        var name = user.displayName.toLowerCase();\n        var uid = user.userId.toLowerCase();\n        query = query.toLowerCase();\n\n        // don't match any that are already on the invite list\n        if (this._isOnInviteList(uid)) {\n            return false;\n        }\n\n        // ignore current user\n        if (uid === MatrixClientPeg.get().credentials.userId) {\n            return false;\n        }\n\n        // direct prefix matches\n        if (name.indexOf(query) === 0 || uid.indexOf(query) === 0) {\n            return true;\n        }\n\n        // strip @ on uid and try matching again\n        if (uid.length > 1 && uid[0] === \"@\" && uid.substring(1).indexOf(query) === 0) {\n            return true;\n        }\n\n        // Try to find the query following a \"word boundary\", except that\n        // this does avoids using \\b because it only considers letters from\n        // the roman alphabet to be word characters.\n        // Instead, we look for the query following either:\n        //  * The start of the string\n        //  * Whitespace, or\n        //  * A fixed number of punctuation characters\n        const expr = new RegExp(\"(?:^|[\\\\s\\\\(\\)'\\\",\\.-_@\\?;:{}\\\\[\\\\]\\\\#~`\\\\*\\\\&\\\\$])\" + escapeRegExp(query));\n        if (expr.test(name)) {\n            return true;\n        }\n\n        return false;\n    },\n\n    _isOnInviteList: function(uid) {\n        for (let i = 0; i < this.state.inviteList.length; i++) {\n            if (\n                this.state.inviteList[i].addressType == 'mx' &&\n                this.state.inviteList[i].address.toLowerCase() === uid\n            ) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    _isDmChat: function(addrs) {\n        if (addrs.length === 1 && getAddressType(addrs[0]) === \"mx\" && !this.props.roomId) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    _showAnyInviteErrors: function(addrs, room) {\n        // Show user any errors\n        var errorList = [];\n        for (var addr in addrs) {\n            if (addrs.hasOwnProperty(addr) && addrs[addr] === \"error\") {\n                errorList.push(addr);\n            }\n        }\n\n        if (errorList.length > 0) {\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Failed to invite the following users to the \" + room.name + \" room:\",\n                description: errorList.join(\", \"),\n            });\n        }\n        return addrs;\n    },\n\n    _addInputToList: function() {\n        const addressText = this.refs.textinput.value.trim();\n        const addrType = getAddressType(addressText);\n        const addrObj = {\n            addressType: addrType,\n            address: addressText,\n            isKnown: false,\n        };\n        if (addrType == null) {\n            this.setState({ error: true });\n            return null;\n        } else if (addrType == 'mx') {\n            const user = MatrixClientPeg.get().getUser(addrObj.address);\n            if (user) {\n                addrObj.displayName = user.displayName;\n                addrObj.avatarMxc = user.avatarUrl;\n                addrObj.isKnown = true;\n            }\n        }\n\n        const inviteList = this.state.inviteList.slice();\n        inviteList.push(addrObj);\n        this.setState({\n            inviteList: inviteList,\n            queryList: [],\n        });\n        if (this._cancelThreepidLookup) this._cancelThreepidLookup();\n        return inviteList;\n    },\n\n    _lookupThreepid: function(medium, address) {\n        let cancelled = false;\n        // Note that we can't safely remove this after we're done\n        // because we don't know that it's the same one, so we just\n        // leave it: it's replacing the old one each time so it's\n        // not like they leak.\n        this._cancelThreepidLookup = function() {\n            cancelled = true;\n        }\n\n        // wait a bit to let the user finish typing\n        return q.delay(500).then(() => {\n            if (cancelled) return null;\n            return MatrixClientPeg.get().lookupThreePid(medium, address);\n        }).then((res) => {\n            if (res === null || !res.mxid) return null;\n            if (cancelled) return null;\n\n            return MatrixClientPeg.get().getProfileInfo(res.mxid);\n        }).then((res) => {\n            if (res === null) return null;\n            if (cancelled) return null;\n            this.setState({\n                queryList: [{\n                    // an InviteAddressType\n                    addressType: medium,\n                    address: address,\n                    displayName: res.displayname,\n                    avatarMxc: res.avatar_url,\n                    isKnown: true,\n                }]\n            });\n        });\n    },\n\n    render: function() {\n        const TintableSvg = sdk.getComponent(\"elements.TintableSvg\");\n        const AddressSelector = sdk.getComponent(\"elements.AddressSelector\");\n        this.scrollElement = null;\n\n        var query = [];\n        // create the invite list\n        if (this.state.inviteList.length > 0) {\n            var AddressTile = sdk.getComponent(\"elements.AddressTile\");\n            for (let i = 0; i < this.state.inviteList.length; i++) {\n                query.push(\n                    <AddressTile key={i} address={this.state.inviteList[i]} canDismiss={true} onDismissed={ this.onDismissed(i) } />\n                );\n            }\n        }\n\n        // Add the query at the end\n        query.push(\n            <textarea key={this.state.inviteList.length}\n                rows=\"1\"\n                id=\"textinput\"\n                ref=\"textinput\"\n                className=\"mx_ChatInviteDialog_input\"\n                onChange={this.onQueryChanged}\n                placeholder={this.props.placeholder}\n                defaultValue={this.props.value}\n                autoFocus={this.props.focus}>\n            </textarea>\n        );\n\n        var error;\n        var addressSelector;\n        if (this.state.error) {\n            error = <div className=\"mx_ChatInviteDialog_error\">You have entered an invalid contact. Try using their Matrix ID or email address.</div>;\n        } else {\n            const addressSelectorHeader = <div className=\"mx_ChatInviteDialog_addressSelectHeader\">\n                Searching known users\n            </div>;\n            addressSelector = (\n                <AddressSelector ref={(ref) => {this.addressSelector = ref;}}\n                    addressList={ this.state.queryList }\n                    onSelected={ this.onSelected }\n                    truncateAt={ TRUNCATE_QUERY_LIST }\n                    header={ addressSelectorHeader }\n                />\n            );\n        }\n\n        return (\n            <div className=\"mx_ChatInviteDialog\" onKeyDown={this.onKeyDown}>\n                <div className=\"mx_Dialog_title\">\n                    {this.props.title}\n                </div>\n                <AccessibleButton className=\"mx_ChatInviteDialog_cancel\"\n                        onClick={this.onCancel} >\n                    <TintableSvg src=\"img/icons-close-button.svg\" width=\"35\" height=\"35\" />\n                </AccessibleButton>\n                <div className=\"mx_ChatInviteDialog_label\">\n                    <label htmlFor=\"textinput\">{ this.props.description }</label>\n                </div>\n                <div className=\"mx_Dialog_content\">\n                    <div className=\"mx_ChatInviteDialog_inputContainer\">{ query }</div>\n                    { error }\n                    { addressSelector }\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button className=\"mx_Dialog_primary\" onClick={this.onButtonClick}>\n                        {this.props.button}\n                    </button>\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/dialogs/DeactivateAccountDialog.js","messages":[{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":63,"column":17,"nodeType":"CallExpression","source":"                Velocity(this._passwordField, \"callout.shake\", 300);"},{"ruleId":"max-len","severity":1,"message":"Line 104 exceeds the maximum line length of 90.","line":104,"column":1,"nodeType":"Program","source":"                    <p>This will make your account permanently unusable. You will not be able to re-register the same user ID.</p>"}],"errorCount":0,"warningCount":2,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\n\nimport sdk from '../../../index';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\nimport Lifecycle from '../../../Lifecycle';\nimport Velocity from 'velocity-vector';\n\nexport default class DeactivateAccountDialog extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this._passwordField = null;\n\n        this._onOk = this._onOk.bind(this);\n        this._onCancel = this._onCancel.bind(this);\n        this._onPasswordFieldChange = this._onPasswordFieldChange.bind(this);\n\n        this.state = {\n            confirmButtonEnabled: false,\n            busy: false,\n            errStr: null,\n        };\n    }\n\n    _onPasswordFieldChange(ev) {\n        this.setState({\n            confirmButtonEnabled: Boolean(ev.target.value),\n        });\n    }\n\n    _onOk() {\n        // This assumes that the HS requires password UI auth\n        // for this endpoint. In reality it could be any UI auth.\n        this.setState({busy: true});\n        MatrixClientPeg.get().deactivateAccount({\n            type: 'm.login.password',\n            user: MatrixClientPeg.get().credentials.userId,\n            password: this._passwordField.value,\n        }).done(() => {\n            Lifecycle.onLoggedOut();\n            this.props.onFinished(false);\n        }, (err) => {\n            let errStr = 'Unknown error';\n            // https://matrix.org/jira/browse/SYN-744\n            if (err.httpStatus == 401 || err.httpStatus == 403) {\n                errStr = 'Incorrect password';\n                Velocity(this._passwordField, \"callout.shake\", 300);\n            }\n            this.setState({\n                busy: false,\n                errStr: errStr,\n            });\n        });\n    }\n\n    _onCancel() {\n        this.props.onFinished(false);\n    }\n\n    render() {\n        const Loader = sdk.getComponent(\"elements.Spinner\");\n        let passwordBoxClass = '';\n\n        let error = null;\n        if (this.state.errStr) {\n            error = <div className=\"error\">\n                {this.state.errStr}\n            </div>;\n            passwordBoxClass = 'error';\n        }\n\n        const okLabel = this.state.busy ? <Loader /> : 'Deactivate Account';\n        const okEnabled = this.state.confirmButtonEnabled && !this.state.busy;\n\n        let cancelButton = null;\n        if (!this.state.busy) {\n            cancelButton = <button onClick={this._onCancel} autoFocus={true}>\n                Cancel\n            </button>;\n        }\n\n        return (\n            <div className=\"mx_DeactivateAccountDialog\">\n                <div className=\"mx_Dialog_title danger\">\n                    Deactivate Account\n                </div>\n                <div className=\"mx_Dialog_content\">\n                    <p>This will make your account permanently unusable. You will not be able to re-register the same user ID.</p>\n\n                    <p>This action is irreversible.</p>\n\n                    <p>To continue, please enter your password.</p>\n\n                    <p>Password:</p>\n                    <input\n                        type=\"password\"\n                        onChange={this._onPasswordFieldChange}\n                        ref={(e) => {this._passwordField = e;}}\n                        className={passwordBoxClass}\n                    />\n                    {error}\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button\n                        className=\"mx_Dialog_primary danger\"\n                        onClick={this._onOk}\n                        disabled={!okEnabled}\n                    >\n                        {okLabel}\n                    </button>\n\n                    {cancelButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nDeactivateAccountDialog.propTypes = {\n    onFinished: React.PropTypes.func.isRequired,\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/dialogs/ErrorDialog.js","messages":[{"ruleId":"max-len","severity":1,"message":"Line 62 exceeds the maximum line length of 90.","line":62,"column":1,"nodeType":"Program","source":"                    <button className=\"mx_Dialog_primary\" onClick={this.props.onFinished} autoFocus={this.props.focus}>"}],"errorCount":0,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\n * Usage:\n * Modal.createDialog(ErrorDialog, {\n *   title: \"some text\", (default: \"Error\")\n *   description: \"some more text\",\n *   button: \"Button Text\",\n *   onFinished: someFunction,\n *   focus: true|false (default: true)\n * });\n */\n\nimport React from 'react';\nimport sdk from '../../../index';\n\nexport default React.createClass({\n    displayName: 'ErrorDialog',\n    propTypes: {\n        title: React.PropTypes.string,\n        description: React.PropTypes.oneOfType([\n            React.PropTypes.element,\n            React.PropTypes.string,\n        ]),\n        button: React.PropTypes.string,\n        focus: React.PropTypes.bool,\n        onFinished: React.PropTypes.func.isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Error\",\n            description: \"An error has occurred.\",\n            button: \"OK\",\n            focus: true,\n        };\n    },\n\n    render: function() {\n        const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');\n        return (\n            <BaseDialog className=\"mx_ErrorDialog\" onFinished={this.props.onFinished}\n                    title={this.props.title}>\n                <div className=\"mx_Dialog_content\">\n                    {this.props.description}\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button className=\"mx_Dialog_primary\" onClick={this.props.onFinished} autoFocus={this.props.focus}>\n                        {this.props.button}\n                    </button>\n                </div>\n            </BaseDialog>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/dialogs/InteractiveAuthDialog.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":82,"column":31,"nodeType":"Property","source":"                errorText: msg","fix":{"range":[2449,2449],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":148,"column":9,"nodeType":"VariableDeclaration","source":"        var StageComponent = getEntryComponentForLoginType(stage);","fix":{"range":[4051,4054],"text":"let"}}],"errorCount":1,"warningCount":1,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport Matrix from 'matrix-js-sdk';\nconst InteractiveAuth = Matrix.InteractiveAuth;\n\nimport React from 'react';\n\nimport sdk from '../../../index';\n\nimport {getEntryComponentForLoginType} from '../login/InteractiveAuthEntryComponents';\n\nexport default React.createClass({\n    displayName: 'InteractiveAuthDialog',\n\n    propTypes: {\n        // response from initial request. If not supplied, will do a request on\n        // mount.\n        authData: React.PropTypes.shape({\n            flows: React.PropTypes.array,\n            params: React.PropTypes.object,\n            session: React.PropTypes.string,\n        }),\n\n        // callback\n        makeRequest: React.PropTypes.func.isRequired,\n\n        onFinished: React.PropTypes.func.isRequired,\n\n        title: React.PropTypes.string,\n        submitButtonLabel: React.PropTypes.string,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Authentication\",\n            submitButtonLabel: \"Submit\",\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            authStage: null,\n            busy: false,\n            errorText: null,\n            stageErrorText: null,\n            submitButtonEnabled: false,\n        };\n    },\n\n    componentWillMount: function() {\n        this._unmounted = false;\n        this._authLogic = new InteractiveAuth({\n            authData: this.props.authData,\n            doRequest: this._requestCallback,\n            startAuthStage: this._startAuthStage,\n        });\n\n        this._authLogic.attemptAuth().then((result) => {\n            this.props.onFinished(true, result);\n        }).catch((error) => {\n            console.error(\"Error during user-interactive auth:\", error);\n            if (this._unmounted) {\n                return;\n            }\n\n            const msg = error.message || error.toString();\n            this.setState({\n                errorText: msg\n            });\n        }).done();\n    },\n\n    componentWillUnmount: function() {\n        this._unmounted = true;\n    },\n\n    _startAuthStage: function(stageType, error) {\n        this.setState({\n            authStage: stageType,\n            errorText: error ? error.error : null,\n        }, this._setFocus);\n    },\n\n    _requestCallback: function(auth) {\n        this.setState({\n            busy: true,\n            errorText: null,\n            stageErrorText: null,\n        });\n        return this.props.makeRequest(auth).finally(() => {\n            if (this._unmounted) {\n                return;\n            }\n            this.setState({\n                busy: false,\n            });\n        });\n    },\n\n    _onEnterPressed: function(e) {\n        if (this.state.submitButtonEnabled && !this.state.busy) {\n            this._onSubmit();\n        }\n    },\n\n    _onSubmit: function() {\n        if (this.refs.stageComponent && this.refs.stageComponent.onSubmitClick) {\n            this.refs.stageComponent.onSubmitClick();\n        }\n    },\n\n    _setFocus: function() {\n        if (this.refs.stageComponent && this.refs.stageComponent.focus) {\n            this.refs.stageComponent.focus();\n        }\n    },\n\n    _onCancel: function() {\n        this.props.onFinished(false);\n    },\n\n    _setSubmitButtonEnabled: function(enabled) {\n        this.setState({\n            submitButtonEnabled: enabled,\n        });\n    },\n\n    _submitAuthDict: function(authData) {\n        this._authLogic.submitAuthDict(authData);\n    },\n\n    _renderCurrentStage: function() {\n        const stage = this.state.authStage;\n        var StageComponent = getEntryComponentForLoginType(stage);\n        return (\n            <StageComponent ref=\"stageComponent\"\n                loginType={stage}\n                authSessionId={this._authLogic.getSessionId()}\n                stageParams={this._authLogic.getStageParams(stage)}\n                submitAuthDict={this._submitAuthDict}\n                setSubmitButtonEnabled={this._setSubmitButtonEnabled}\n                errorText={this.state.stageErrorText}\n            />\n        );\n    },\n\n    render: function() {\n        const Loader = sdk.getComponent(\"elements.Spinner\");\n        const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');\n\n        let error = null;\n        if (this.state.errorText) {\n            error = (\n                <div className=\"error\">\n                    {this.state.errorText}\n                </div>\n            );\n        }\n\n        const submitLabel = this.state.busy ? <Loader /> : this.props.submitButtonLabel;\n        const submitEnabled = this.state.submitButtonEnabled && !this.state.busy;\n\n        const submitButton = (\n            <button className=\"mx_Dialog_primary\"\n                onClick={this._onSubmit}\n                disabled={!submitEnabled}\n            >\n                {submitLabel}\n            </button>\n        );\n\n        const cancelButton = (\n            <button onClick={this._onCancel}>\n                Cancel\n            </button>\n        );\n\n        return (\n            <BaseDialog className=\"mx_InteractiveAuthDialog\"\n                onEnterPressed={this._onEnterPressed}\n                onFinished={this.props.onFinished}\n                title={this.props.title}\n            >\n                <div className=\"mx_Dialog_content\">\n                    <p>This operation requires additional authentication.</p>\n                    {this._renderCurrentStage()}\n                    {error}\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    {submitButton}\n                    {cancelButton}\n                </div>\n            </BaseDialog>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/dialogs/NeedToRegisterDialog.js","messages":[{"ruleId":"max-len","severity":1,"message":"Line 68 exceeds the maximum line length of 90.","line":68,"column":1,"nodeType":"Program","source":"                    <button className=\"mx_Dialog_primary\" onClick={this.props.onFinished} autoFocus={true}>"}],"errorCount":0,"warningCount":1,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\n * Usage:\n * Modal.createDialog(NeedToRegisterDialog, {\n *   title: \"some text\", (default: \"Registration required\")\n *   description: \"some more text\",\n *   onFinished: someFunction,\n * });\n */\n\nimport React from 'react';\nimport dis from '../../../dispatcher';\nimport sdk from '../../../index';\n\nmodule.exports = React.createClass({\n    displayName: 'NeedToRegisterDialog',\n    propTypes: {\n        title: React.PropTypes.string,\n        description: React.PropTypes.oneOfType([\n            React.PropTypes.element,\n            React.PropTypes.string,\n        ]),\n        onFinished: React.PropTypes.func.isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"Registration required\",\n            description: \"A registered account is required for this action\",\n        };\n    },\n\n    onRegisterClicked: function() {\n        dis.dispatch({\n            action: \"start_upgrade_registration\",\n        });\n        if (this.props.onFinished) {\n            this.props.onFinished();\n        }\n    },\n\n    render: function() {\n        const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');\n        return (\n            <BaseDialog className=\"mx_NeedToRegisterDialog\"\n                onFinished={this.props.onFinished}\n                title={this.props.title}\n            >\n                <div className=\"mx_Dialog_content\">\n                    {this.props.description}\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button className=\"mx_Dialog_primary\" onClick={this.props.onFinished} autoFocus={true}>\n                        Cancel\n                    </button>\n                    <button onClick={this.onRegisterClicked}>\n                        Register\n                    </button>\n                </div>\n            </BaseDialog>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/dialogs/QuestionDialog.js","messages":[{"ruleId":"max-len","severity":1,"message":"Line 61 exceeds the maximum line length of 90.","line":61,"column":1,"nodeType":"Program","source":"                    <button className=\"mx_Dialog_primary\" onClick={this.onOk} autoFocus={this.props.focus}>"}],"errorCount":0,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport sdk from '../../../index';\n\nexport default React.createClass({\n    displayName: 'QuestionDialog',\n    propTypes: {\n        title: React.PropTypes.string,\n        description: React.PropTypes.oneOfType([\n            React.PropTypes.element,\n            React.PropTypes.string,\n        ]),\n        button: React.PropTypes.string,\n        focus: React.PropTypes.bool,\n        onFinished: React.PropTypes.func.isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"\",\n            description: \"\",\n            button: \"OK\",\n            focus: true,\n        };\n    },\n\n    onOk: function() {\n        this.props.onFinished(true);\n    },\n\n    onCancel: function() {\n        this.props.onFinished(false);\n    },\n\n    render: function() {\n        const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');\n        return (\n            <BaseDialog className=\"mx_QuestionDialog\" onFinished={this.props.onFinished}\n                onEnterPressed={ this.onOk }\n                title={this.props.title}\n            >\n                <div className=\"mx_Dialog_content\">\n                    {this.props.description}\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button className=\"mx_Dialog_primary\" onClick={this.onOk} autoFocus={this.props.focus}>\n                        {this.props.button}\n                    </button>\n\n                    <button onClick={this.onCancel}>\n                        Cancel\n                    </button>\n                </div>\n            </BaseDialog>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/dialogs/SetDisplayNameDialog.js","messages":[{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'value'.","line":39,"column":22,"nodeType":"Identifier","source":"            return { value : \"Guest \" + MatrixClientPeg.get().getUserIdLocalpart() };","fix":{"range":[1224,1225],"text":""}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":40,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[1293,1302],"text":"        "}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'value'.","line":42,"column":22,"nodeType":"Identifier","source":"            return { value : MatrixClientPeg.get().getUserIdLocalpart() };","fix":{"range":[1335,1336],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":52,"column":35,"nodeType":"Property","source":"            value: ev.target.value","fix":{"range":[1578,1578],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 70 exceeds the maximum line length of 90.","line":70,"column":1,"nodeType":"Program","source":"                    Your display name is how you'll appear to others when you speak in rooms.<br/>"}],"errorCount":1,"warningCount":4,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport sdk from '../../../index';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\n\n/**\n * Prompt the user to set a display name.\n *\n * On success, `onFinished(true, newDisplayName)` is called.\n */\nexport default React.createClass({\n    displayName: 'SetDisplayNameDialog',\n    propTypes: {\n        onFinished: React.PropTypes.func.isRequired,\n        currentDisplayName: React.PropTypes.string,\n    },\n\n    getInitialState: function() {\n        if (this.props.currentDisplayName) {\n            return { value: this.props.currentDisplayName };\n        }\n\n        if (MatrixClientPeg.get().isGuest()) {\n            return { value : \"Guest \" + MatrixClientPeg.get().getUserIdLocalpart() };\n        }\n        else {\n            return { value : MatrixClientPeg.get().getUserIdLocalpart() };\n        }\n    },\n\n    componentDidMount: function() {\n        this.refs.input_value.select();\n    },\n\n    onValueChange: function(ev) {\n        this.setState({\n            value: ev.target.value\n        });\n    },\n\n    onFormSubmit: function(ev) {\n        ev.preventDefault();\n        this.props.onFinished(true, this.state.value);\n        return false;\n    },\n\n    render: function() {\n        const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');\n        return (\n            <BaseDialog className=\"mx_SetDisplayNameDialog\"\n                onFinished={this.props.onFinished}\n                title=\"Set a Display Name\"\n            >\n                <div className=\"mx_Dialog_content\">\n                    Your display name is how you'll appear to others when you speak in rooms.<br/>\n                    What would you like it to be?\n                </div>\n                <form onSubmit={this.onFormSubmit}>\n                    <div className=\"mx_Dialog_content\">\n                        <input type=\"text\" ref=\"input_value\" value={this.state.value}\n                            autoFocus={true} onChange={this.onValueChange} size=\"30\"\n                            className=\"mx_SetDisplayNameDialog_input\"\n                        />\n                    </div>\n                    <div className=\"mx_Dialog_buttons\">\n                        <input className=\"mx_Dialog_primary\" type=\"submit\" value=\"Set\" />\n                    </div>\n                </form>\n            </BaseDialog>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/dialogs/TextInputDialog.js","messages":[{"ruleId":"max-len","severity":1,"message":"Line 71 exceeds the maximum line length of 90.","line":71,"column":1,"nodeType":"Program","source":"                        <input id=\"textinput\" ref=\"textinput\" className=\"mx_TextInputDialog_input\" defaultValue={this.props.value} autoFocus={this.props.focus} size=\"64\" onKeyDown={this.onKeyDown}/>"}],"errorCount":0,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport sdk from '../../../index';\n\nexport default React.createClass({\n    displayName: 'TextInputDialog',\n    propTypes: {\n        title: React.PropTypes.string,\n        description: React.PropTypes.oneOfType([\n            React.PropTypes.element,\n            React.PropTypes.string,\n        ]),\n        value: React.PropTypes.string,\n        button: React.PropTypes.string,\n        focus: React.PropTypes.bool,\n        onFinished: React.PropTypes.func.isRequired,\n    },\n\n    getDefaultProps: function() {\n        return {\n            title: \"\",\n            value: \"\",\n            description: \"\",\n            button: \"OK\",\n            focus: true,\n        };\n    },\n\n    componentDidMount: function() {\n        if (this.props.focus) {\n            // Set the cursor at the end of the text input\n            this.refs.textinput.value = this.props.value;\n        }\n    },\n\n    onOk: function() {\n        this.props.onFinished(true, this.refs.textinput.value);\n    },\n\n    onCancel: function() {\n        this.props.onFinished(false);\n    },\n\n    render: function() {\n        const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');\n        return (\n            <BaseDialog className=\"mx_TextInputDialog\" onFinished={this.props.onFinished}\n                onEnterPressed={this.onOk}\n                title={this.props.title}\n            >\n                <div className=\"mx_Dialog_content\">\n                    <div className=\"mx_TextInputDialog_label\">\n                        <label htmlFor=\"textinput\"> {this.props.description} </label>\n                    </div>\n                    <div>\n                        <input id=\"textinput\" ref=\"textinput\" className=\"mx_TextInputDialog_input\" defaultValue={this.props.value} autoFocus={this.props.focus} size=\"64\" onKeyDown={this.onKeyDown}/>\n                    </div>\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button onClick={this.onCancel}>\n                        Cancel\n                    </button>\n                    <button className=\"mx_Dialog_primary\" onClick={this.onOk}>\n                        {this.props.button}\n                    </button>\n                </div>\n            </BaseDialog>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/AccessibleButton.js","messages":[],"errorCount":0,"warningCount":0},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/AddressSelector.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":48,"column":9,"nodeType":"VariableDeclaration","source":"        var selected = this.state.selected;","fix":{"range":[1502,1505],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":9,"nodeType":"VariableDeclaration","source":"        var maxSelected = this._maxSelected(props.addressList);","fix":{"range":[1546,1549],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 58 exceeds the maximum line length of 90.","line":58,"column":1,"nodeType":"Program","source":"        if (this.scrollElement && this.props.addressList.length > 0 && !this.state.hover) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":59,"column":13,"nodeType":"VariableDeclaration","source":"            var elementHeight = this.addressListElement.getBoundingClientRect().height;","fix":{"range":[1964,1967],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 60 exceeds the maximum line length of 90.","line":60,"column":1,"nodeType":"Program","source":"            this.scrollElement.scrollTop = (this.state.selected * elementHeight) - elementHeight;"},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'hover'.","line":68,"column":17,"nodeType":"Identifier","source":"                hover : false,","fix":{"range":[2329,2330],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'hover'.","line":77,"column":17,"nodeType":"Identifier","source":"                hover : false,","fix":{"range":[2588,2589],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'hover'.","line":98,"column":25,"nodeType":"Identifier","source":"        this.setState({ hover : false });","fix":{"range":[2991,2992],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":110,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[3309,3312],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'self' is assigned a value but never used.","line":110,"column":13,"nodeType":"Identifier","source":"        var self = this;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":111,"column":9,"nodeType":"VariableDeclaration","source":"        var AddressTile = sdk.getComponent(\"elements.AddressTile\");","fix":{"range":[3334,3337],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":112,"column":9,"nodeType":"VariableDeclaration","source":"        var maxSelected = this._maxSelected(this.props.addressList);","fix":{"range":[3402,3405],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":113,"column":9,"nodeType":"VariableDeclaration","source":"        var addressList = [];","fix":{"range":[3471,3474],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":117,"column":18,"nodeType":"VariableDeclaration","source":"            for (var i = 0; i <= maxSelected; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":118,"column":17,"nodeType":"VariableDeclaration","source":"                var classes = classNames({","fix":{"range":[3677,3680],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 127 exceeds the maximum line length of 90.","line":127,"column":1,"nodeType":"Program","source":"                    <div className={classes} onClick={this.onClick.bind(this, i)} onMouseEnter={this.onMouseEnter.bind(this, i)} onMouseLeave={this.onMouseLeave} key={i} ref={(ref) => { this.addressListElement = ref; }} >"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":127,"column":46,"nodeType":"JSXAttribute","source":"                    <div className={classes} onClick={this.onClick.bind(this, i)} onMouseEnter={this.onMouseEnter.bind(this, i)} onMouseLeave={this.onMouseLeave} key={i} ref={(ref) => { this.addressListElement = ref; }} >"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":127,"column":83,"nodeType":"JSXAttribute","source":"                    <div className={classes} onClick={this.onClick.bind(this, i)} onMouseEnter={this.onMouseEnter.bind(this, i)} onMouseLeave={this.onMouseLeave} key={i} ref={(ref) => { this.addressListElement = ref; }} >"},{"ruleId":"max-len","severity":1,"message":"Line 128 exceeds the maximum line length of 90.","line":128,"column":1,"nodeType":"Program","source":"                        <AddressTile address={this.props.addressList[i]} justified={true} networkName=\"vector\" networkUrl=\"img/search-icon-vector.svg\" />"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":129,"column":27,"nodeType":"JSXElement","source":"                    </div>","fix":{"range":[4587,4587],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":137,"column":9,"nodeType":"VariableDeclaration","source":"        var listSize = list.length === 0 ? 0 : list.length - 1;","fix":{"range":[4710,4713],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 138 exceeds the maximum line length of 90.","line":138,"column":1,"nodeType":"Program","source":"        var maxSelected = listSize > (this.props.truncateAt - 1) ? (this.props.truncateAt - 1) : listSize;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":138,"column":9,"nodeType":"VariableDeclaration","source":"        var maxSelected = listSize > (this.props.truncateAt - 1) ? (this.props.truncateAt - 1) : listSize;","fix":{"range":[4774,4777],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":143,"column":9,"nodeType":"VariableDeclaration","source":"        var classes = classNames({","fix":{"range":[4942,4945],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":154,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[5320,5320],"text":","}}],"errorCount":5,"warningCount":20,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nimport React from 'react';\nimport sdk from '../../../index';\nimport classNames from 'classnames';\nimport { InviteAddressType } from './AddressTile';\n\nexport default React.createClass({\n    displayName: 'AddressSelector',\n\n    propTypes: {\n        onSelected: React.PropTypes.func.isRequired,\n\n        // List of the addresses to display\n        addressList: React.PropTypes.arrayOf(InviteAddressType).isRequired,\n        truncateAt: React.PropTypes.number.isRequired,\n        selected: React.PropTypes.number,\n\n        // Element to put as a header on top of the list\n        header: React.PropTypes.node,\n    },\n\n    getInitialState: function() {\n        return {\n            selected: this.props.selected === undefined ? 0 : this.props.selected,\n            hover: false,\n        };\n    },\n\n    componentWillReceiveProps: function(props) {\n        // Make sure the selected item isn't outside the list bounds\n        var selected = this.state.selected;\n        var maxSelected = this._maxSelected(props.addressList);\n        if (selected > maxSelected) {\n            this.setState({ selected: maxSelected });\n        }\n    },\n\n    componentDidUpdate: function() {\n        // As the user scrolls with the arrow keys keep the selected item\n        // at the top of the window.\n        if (this.scrollElement && this.props.addressList.length > 0 && !this.state.hover) {\n            var elementHeight = this.addressListElement.getBoundingClientRect().height;\n            this.scrollElement.scrollTop = (this.state.selected * elementHeight) - elementHeight;\n        }\n    },\n\n    moveSelectionUp: function() {\n        if (this.state.selected > 0) {\n            this.setState({\n                selected: this.state.selected - 1,\n                hover : false,\n            });\n        }\n    },\n\n    moveSelectionDown: function() {\n        if (this.state.selected < this._maxSelected(this.props.addressList)) {\n            this.setState({\n                selected: this.state.selected + 1,\n                hover : false,\n            });\n        }\n    },\n\n    chooseSelection: function() {\n        this.selectAddress(this.state.selected);\n    },\n\n    onClick: function(index) {\n        this.selectAddress(index);\n    },\n\n    onMouseEnter: function(index) {\n        this.setState({\n            selected: index,\n            hover: true,\n        });\n    },\n\n    onMouseLeave: function() {\n        this.setState({ hover : false });\n    },\n\n    selectAddress: function(index) {\n        // Only try to select an address if one exists\n        if (this.props.addressList.length !== 0) {\n            this.props.onSelected(index);\n            this.setState({ hover: false });\n        }\n    },\n\n    createAddressListTiles: function() {\n        var self = this;\n        var AddressTile = sdk.getComponent(\"elements.AddressTile\");\n        var maxSelected = this._maxSelected(this.props.addressList);\n        var addressList = [];\n\n        // Only create the address elements if there are address\n        if (this.props.addressList.length > 0) {\n            for (var i = 0; i <= maxSelected; i++) {\n                var classes = classNames({\n                    \"mx_AddressSelector_addressListElement\": true,\n                    \"mx_AddressSelector_selected\": this.state.selected === i,\n                });\n\n                // NOTE: Defaulting to \"vector\" as the network, until the network backend stuff is done.\n                // Saving the addressListElement so we can use it to work out, in the componentDidUpdate\n                // method, how far to scroll when using the arrow keys\n                addressList.push(\n                    <div className={classes} onClick={this.onClick.bind(this, i)} onMouseEnter={this.onMouseEnter.bind(this, i)} onMouseLeave={this.onMouseLeave} key={i} ref={(ref) => { this.addressListElement = ref; }} >\n                        <AddressTile address={this.props.addressList[i]} justified={true} networkName=\"vector\" networkUrl=\"img/search-icon-vector.svg\" />\n                    </div>\n                );\n            }\n        }\n        return addressList;\n    },\n\n    _maxSelected: function(list) {\n        var listSize = list.length === 0 ? 0 : list.length - 1;\n        var maxSelected = listSize > (this.props.truncateAt - 1) ? (this.props.truncateAt - 1) : listSize;\n        return maxSelected;\n    },\n\n    render: function() {\n        var classes = classNames({\n            \"mx_AddressSelector\": true,\n            \"mx_AddressSelector_empty\": this.props.addressList.length === 0,\n        });\n\n        return (\n            <div className={classes} ref={(ref) => {this.scrollElement = ref;}}>\n                { this.props.header }\n                { this.createAddressListTiles() }\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/AddressTile.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var classNames = require('classnames');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require(\"../../../index\");","fix":{"range":[653,656],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var Invite = require(\"../../../Invite\");","fix":{"range":[690,693],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Invite' is assigned a value but never used.","line":22,"column":5,"nodeType":"Identifier","source":"var Invite = require(\"../../../Invite\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[731,734],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var Avatar = require('../../../Avatar');","fix":{"range":[790,793],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Avatar' is assigned a value but never used.","line":24,"column":5,"nodeType":"Identifier","source":"var Avatar = require('../../../Avatar');"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":33,"column":22,"nodeType":"Literal","source":"        'mx', 'email'","fix":{"range":[1182,1182],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":70,"column":50,"nodeType":"Literal","source":"                address.avatarMxc, 25, 25, 'crop'","fix":{"range":[2274,2274],"text":","}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":133,"column":86,"nodeType":"ExpressionStatement","source":"                nameNode = <div className={nameClasses}>{ address.displayName }</div>","fix":{"range":[4582,4582],"text":";"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":144,"column":13,"nodeType":"VariableDeclaration","source":"            var unknownClasses = classNames({","fix":{"range":[4871,4874],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 171 exceeds the maximum line length of 90.","line":171,"column":1,"nodeType":"Program","source":"                    <BaseAvatar width={25} height={25} name={name} title={name} url={imgUrl} />"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":177,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[5913,5913],"text":","}}],"errorCount":6,"warningCount":8,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar classNames = require('classnames');\nvar sdk = require(\"../../../index\");\nvar Invite = require(\"../../../Invite\");\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar Avatar = require('../../../Avatar');\n\n// React PropType definition for an object describing\n// an address that can be invited to a room (which\n// could be a third party identifier or a matrix ID)\n// along with some additional information about the\n// address / target.\nexport const InviteAddressType = React.PropTypes.shape({\n    addressType: React.PropTypes.oneOf([\n        'mx', 'email'\n    ]).isRequired,\n    address: React.PropTypes.string.isRequired,\n    displayName: React.PropTypes.string,\n    avatarMxc: React.PropTypes.string,\n    // true if the address is known to be a valid address (eg. is a real\n    // user we've seen) or false otherwise (eg. is just an address the\n    // user has entered)\n    isKnown: React.PropTypes.bool,\n});\n\n\nexport default React.createClass({\n    displayName: 'AddressTile',\n\n    propTypes: {\n        address: InviteAddressType.isRequired,\n        canDismiss: React.PropTypes.bool,\n        onDismissed: React.PropTypes.func,\n        justified: React.PropTypes.bool,\n    },\n\n    getDefaultProps: function() {\n        return {\n            canDismiss: false,\n            onDismissed: function() {}, // NOP\n            justified: false,\n        };\n    },\n\n    render: function() {\n        const address = this.props.address;\n        const name = address.displayName || address.address;\n\n        let imgUrl;\n        if (address.avatarMxc) {\n            imgUrl = MatrixClientPeg.get().mxcUrlToHttp(\n                address.avatarMxc, 25, 25, 'crop'\n            );\n        }\n\n        if (address.addressType === \"mx\") {\n            if (!imgUrl) imgUrl = 'img/icon-mx-user.svg';\n        } else if (address.addressType === 'email') {\n            if (!imgUrl) imgUrl = 'img/icon-email-user.svg';\n        } else {\n            if (!imgUrl) imgUrl = \"img/avatar-error.svg\";\n        }\n\n        // Removing networks for now as they're not really supported\n        /*\n        var network;\n        if (this.props.networkUrl !== \"\") {\n            network = (\n                <div className=\"mx_AddressTile_network\">\n                    <BaseAvatar width={25} height={25} name={this.props.networkName} title=\"Riot\" url={this.props.networkUrl} />\n                </div>\n            );\n        }\n        */\n\n        const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');\n        const TintableSvg = sdk.getComponent(\"elements.TintableSvg\");\n\n        const nameClasses = classNames({\n            \"mx_AddressTile_name\": true,\n            \"mx_AddressTile_justified\": this.props.justified,\n        });\n\n        let info;\n        let error = false;\n        if (address.addressType === \"mx\" && address.isKnown) {\n            const idClasses = classNames({\n                \"mx_AddressTile_id\": true,\n                \"mx_AddressTile_justified\": this.props.justified,\n            });\n\n            info = (\n                <div className=\"mx_AddressTile_mx\">\n                    <div className={nameClasses}>{ name }</div>\n                    <div className={idClasses}>{ address.address }</div>\n                </div>\n            );\n        } else if (address.addressType === \"mx\") {\n            const unknownMxClasses = classNames({\n                \"mx_AddressTile_unknownMx\": true,\n                \"mx_AddressTile_justified\": this.props.justified,\n            });\n\n            info = (\n                <div className={unknownMxClasses}>{ this.props.address.address }</div>\n            );\n        } else if (address.addressType === \"email\") {\n            const emailClasses = classNames({\n                \"mx_AddressTile_email\": true,\n                \"mx_AddressTile_justified\": this.props.justified,\n            });\n\n            let nameNode = null;\n            if (address.displayName) {\n                nameNode = <div className={nameClasses}>{ address.displayName }</div>\n            }\n\n            info = (\n                <div className=\"mx_AddressTile_mx\">\n                    <div className={emailClasses}>{ address.address }</div>\n                    {nameNode}\n                </div>\n            );\n        } else {\n            error = true;\n            var unknownClasses = classNames({\n                \"mx_AddressTile_unknown\": true,\n                \"mx_AddressTile_justified\": this.props.justified,\n            });\n\n            info = (\n                <div className={unknownClasses}>Unknown Address</div>\n            );\n        }\n\n        const classes = classNames({\n            \"mx_AddressTile\": true,\n            \"mx_AddressTile_error\": error,\n        });\n\n        let dismiss;\n        if (this.props.canDismiss) {\n            dismiss = (\n                <div className=\"mx_AddressTile_dismiss\" onClick={this.props.onDismissed} >\n                    <TintableSvg src=\"img/icon-address-delete.svg\" width=\"9\" height=\"9\" />\n                </div>\n            );\n        }\n\n        return (\n            <div className={classes}>\n                <div className=\"mx_AddressTile_avatar\">\n                    <BaseAvatar width={25} height={25} name={name} title={name} url={imgUrl} />\n                </div>\n                { info }\n                { dismiss }\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/DeviceVerifyButtons.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":9,"nodeType":"VariableDeclaration","source":"        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[959,962],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 44 exceeds the maximum line length of 90.","line":44,"column":1,"nodeType":"Program","source":"                            <li><label>Device name:</label> <span>{ this.props.device.getDisplayName() }</span></li>"},{"ruleId":"max-len","severity":1,"message":"Line 45 exceeds the maximum line length of 90.","line":45,"column":1,"nodeType":"Program","source":"                            <li><label>Device ID:</label>             <span><code>{ this.props.device.deviceId}</code></span></li>"},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before '<'.","line":45,"column":71,"nodeType":"Punctuator","source":"                            <li><label>Device ID:</label>             <span><code>{ this.props.device.deviceId}</code></span></li>","fix":{"range":[1807,1807],"text":" "}},{"ruleId":"max-len","severity":1,"message":"Line 46 exceeds the maximum line length of 90.","line":46,"column":1,"nodeType":"Program","source":"                            <li><label>Device key:</label>            <span><code><b>{ this.props.device.getFingerprint() }</b></code></span></li>"},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before '<'.","line":46,"column":71,"nodeType":"Punctuator","source":"                            <li><label>Device key:</label>            <span><code><b>{ this.props.device.getFingerprint() }</b></code></span></li>","fix":{"range":[1938,1938],"text":" "}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":60,"column":25,"nodeType":"ArrowFunctionExpression","source":"            onFinished: confirm=>{","fix":{"range":[2611,2618],"text":"(confirm)"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":63,"column":76,"nodeType":"Literal","source":"                        this.props.userId, this.props.device.deviceId, true","fix":{"range":[2789,2789],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":72,"column":65,"nodeType":"Literal","source":"            this.props.userId, this.props.device.deviceId, false","fix":{"range":[3013,3013],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":78,"column":64,"nodeType":"Literal","source":"            this.props.userId, this.props.device.deviceId, true","fix":{"range":[3179,3179],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":84,"column":65,"nodeType":"Literal","source":"            this.props.userId, this.props.device.deviceId, false","fix":{"range":[3348,3348],"text":","}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":89,"column":9,"nodeType":"VariableDeclaration","source":"        var blacklistButton = null, verifyButton = null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":89,"column":9,"nodeType":"VariableDeclaration","source":"        var blacklistButton = null, verifyButton = null;","fix":{"range":[3401,3404],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 93 exceeds the maximum line length of 90.","line":93,"column":1,"nodeType":"Program","source":"                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_unblacklist\""},{"ruleId":"max-len","severity":1,"message":"Line 100 exceeds the maximum line length of 90.","line":100,"column":1,"nodeType":"Program","source":"                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_blacklist\""},{"ruleId":"max-len","severity":1,"message":"Line 109 exceeds the maximum line length of 90.","line":109,"column":1,"nodeType":"Program","source":"                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_unverify\""},{"ruleId":"max-len","severity":1,"message":"Line 116 exceeds the maximum line length of 90.","line":116,"column":1,"nodeType":"Program","source":"                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_verify\""}],"errorCount":6,"warningCount":11,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\nimport sdk from '../../../index';\nimport Modal from '../../../Modal';\n\nexport default React.createClass({\n    displayName: 'DeviceVerifyButtons',\n\n    propTypes: {\n        userId: React.PropTypes.string.isRequired,\n        device: React.PropTypes.object.isRequired,\n    },\n\n    onVerifyClick: function() {\n        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n        Modal.createDialog(QuestionDialog, {\n            title: \"Verify device\",\n            description: (\n                <div>\n                    <p>\n                        To verify that this device can be trusted, please contact its\n                        owner using some other means (e.g. in person or a phone call)\n                        and ask them whether the key they see in their User Settings\n                        for this device matches the key below:\n                    </p>\n                    <div className=\"mx_UserSettings_cryptoSection\">\n                        <ul>\n                            <li><label>Device name:</label> <span>{ this.props.device.getDisplayName() }</span></li>\n                            <li><label>Device ID:</label>             <span><code>{ this.props.device.deviceId}</code></span></li>\n                            <li><label>Device key:</label>            <span><code><b>{ this.props.device.getFingerprint() }</b></code></span></li>\n                        </ul>\n                    </div>\n                    <p>\n                        If it matches, press the verify button below.\n                        If it doesnt, then someone else is intercepting this device\n                        and you probably want to press the blacklist button instead.\n                    </p>\n                    <p>\n                        In future this verification process will be more sophisticated.\n                    </p>\n                </div>\n            ),\n            button: \"I verify that the keys match\",\n            onFinished: confirm=>{\n                if (confirm) {\n                    MatrixClientPeg.get().setDeviceVerified(\n                        this.props.userId, this.props.device.deviceId, true\n                    );\n                }\n            },\n        });\n    },\n\n    onUnverifyClick: function() {\n        MatrixClientPeg.get().setDeviceVerified(\n            this.props.userId, this.props.device.deviceId, false\n        );\n    },\n\n    onBlacklistClick: function() {\n        MatrixClientPeg.get().setDeviceBlocked(\n            this.props.userId, this.props.device.deviceId, true\n        );\n    },\n\n    onUnblacklistClick: function() {\n        MatrixClientPeg.get().setDeviceBlocked(\n            this.props.userId, this.props.device.deviceId, false\n        );\n    },\n\n    render: function() {\n        var blacklistButton = null, verifyButton = null;\n\n        if (this.props.device.isBlocked()) {\n            blacklistButton = (\n                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_unblacklist\"\n                  onClick={this.onUnblacklistClick}>\n                    Unblacklist\n                </button>\n            );\n        } else {\n            blacklistButton = (\n                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_blacklist\"\n                  onClick={this.onBlacklistClick}>\n                    Blacklist\n                </button>\n            );\n        }\n\n        if (this.props.device.isVerified()) {\n            verifyButton = (\n                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_unverify\"\n                  onClick={this.onUnverifyClick}>\n                    Unverify\n                </button>\n            );\n        } else {\n            verifyButton = (\n                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_verify\"\n                  onClick={this.onVerifyClick}>\n                    Verify...\n                </button>\n            );\n        }\n\n        // mx_MemberDeviceInfo because the vector's CSS on EncryptedEventDialog is awful\n        return (\n            <div className=\"mx_MemberDeviceInfo mx_DeviceVerifyButtons\" >\n                { verifyButton }\n                { blacklistButton }\n            </div>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/DirectorySearchBox.js","messages":[{"ruleId":"camelcase","severity":1,"message":"Identifier 'searchbox_classes' is not in camel case.","line":76,"column":15,"nodeType":"Identifier","source":"        const searchbox_classes = {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'join_button' is not in camel case.","line":81,"column":13,"nodeType":"Identifier","source":"        let join_button;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'join_button' is not in camel case.","line":83,"column":13,"nodeType":"Identifier","source":"            join_button = <span className=\"mx_DirectorySearchBox_joinButton\""},{"ruleId":"camelcase","severity":1,"message":"Identifier 'join_button' is not in camel case.","line":98,"column":18,"nodeType":"Identifier","source":"                {join_button}"},{"ruleId":"max-len","severity":1,"message":"Line 100 exceeds the maximum line length of 90.","line":100,"column":1,"nodeType":"Program","source":"                    <span className=\"mx_DirectorySearchBox_clear\" onClick={this._onClearClick} />"}],"errorCount":0,"warningCount":5,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport classnames from 'classnames';\n\nexport default class DirectorySearchBox extends React.Component {\n    constructor() {\n        super();\n        this._collectInput = this._collectInput.bind(this);\n        this._onClearClick = this._onClearClick.bind(this);\n        this._onChange = this._onChange.bind(this);\n        this._onKeyUp = this._onKeyUp.bind(this);\n        this._onJoinButtonClick = this._onJoinButtonClick.bind(this);\n\n        this.input = null;\n\n        this.state = {\n            value: '',\n        };\n    }\n\n    _collectInput(e) {\n        this.input = e;\n    }\n\n    _onClearClick() {\n        this.setState({value: ''});\n\n        if (this.input) {\n            this.input.focus();\n\n            if (this.props.onClear) {\n                this.props.onClear();\n            }\n        }\n    }\n\n    _onChange(ev) {\n        if (!this.input) return;\n        this.setState({value: ev.target.value});\n\n        if (this.props.onChange) {\n            this.props.onChange(ev.target.value);\n        }\n    }\n\n    _onKeyUp(ev) {\n        if (ev.key == 'Enter') {\n            if (this.props.onJoinClick) {\n                this.props.onJoinClick(this.state.value);\n            }\n        }\n    }\n\n    _onJoinButtonClick() {\n        if (this.props.onJoinClick) {\n            this.props.onJoinClick(this.state.value);\n        }\n    }\n\n    render() {\n        const searchbox_classes = {\n            mx_DirectorySearchBox: true,\n        };\n        searchbox_classes[this.props.className] = true;\n\n        let join_button;\n        if (this.props.showJoinButton) {\n            join_button = <span className=\"mx_DirectorySearchBox_joinButton\"\n                onClick={this._onJoinButtonClick}\n            >\n                Join\n            </span>;\n        }\n\n        return <span className={classnames(searchbox_classes)}>\n            <div className=\"mx_DirectorySearchBox_container\">\n                <input type=\"text\" name=\"dirsearch\" value={this.state.value}\n                    className=\"mx_DirectorySearchBox_input\"\n                    ref={this._collectInput}\n                    onChange={this._onChange} onKeyUp={this._onKeyUp}\n                    placeholder={this.props.placeholder}\n                />\n                {join_button}\n                <span className=\"mx_DirectorySearchBox_clear_wrapper\">\n                    <span className=\"mx_DirectorySearchBox_clear\" onClick={this._onClearClick} />\n                </span>\n            </div>\n        </span>;\n    }\n}\n\nDirectorySearchBox.propTypes = {\n    className: React.PropTypes.string,\n    onChange: React.PropTypes.func,\n    onClear: React.PropTypes.func,\n    onJoinClick: React.PropTypes.func,\n    placeholder: React.PropTypes.string,\n    showJoinButton: React.PropTypes.bool,\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/EditableText.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'KEY_TAB' is assigned a value but never used.","line":21,"column":7,"nodeType":"Identifier","source":"const KEY_TAB = 9;"},{"ruleId":"no-unused-vars","severity":2,"message":"'KEY_SHIFT' is assigned a value but never used.","line":22,"column":7,"nodeType":"Identifier","source":"const KEY_SHIFT = 16;"},{"ruleId":"no-unused-vars","severity":2,"message":"'KEY_WINDOWS' is assigned a value but never used.","line":23,"column":7,"nodeType":"Identifier","source":"const KEY_WINDOWS = 91;"},{"ruleId":"max-len","severity":1,"message":"Line 89 exceeds the maximum line length of 90.","line":89,"column":1,"nodeType":"Program","source":"            this.refs.editable_div.setAttribute(\"class\", this.props.className + \" \" + this.props.placeholderClassName);"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":92,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2736,2745],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":148,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4337,4346],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":173,"column":9,"nodeType":"VariableDeclaration","source":"        var node = ev.target.childNodes[0];","fix":{"range":[4989,4992],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":175,"column":13,"nodeType":"VariableDeclaration","source":"            var range = document.createRange();","fix":{"range":[5057,5060],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":179,"column":13,"nodeType":"VariableDeclaration","source":"            var sel = window.getSelection();","fix":{"range":[5188,5191],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":186,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[5344,5347],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":187,"column":9,"nodeType":"VariableDeclaration","source":"        var submit = (ev.key === \"Enter\");","fix":{"range":[5369,5372],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":196,"column":9,"nodeType":"VariableDeclaration","source":"        var sel = window.getSelection();","fix":{"range":[5588,5591],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":200,"column":13,"nodeType":"Punctuator","source":"            {this.cancelEdit();}","fix":{"range":[5689,5702],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":200,"column":32,"nodeType":"Punctuator","source":"            {this.cancelEdit();}","fix":{"range":[5722,5731],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":202,"column":13,"nodeType":"Punctuator","source":"            {this.onFinish(ev);}","fix":{"range":[5735,5748],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":208,"column":9,"nodeType":"VariableDeclaration","source":"        var editable_el;","fix":{"range":[5854,5857],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'editable_el' is not in camel case.","line":208,"column":13,"nodeType":"Identifier","source":"        var editable_el;"},{"ruleId":"max-len","severity":1,"message":"Line 210 exceeds the maximum line length of 90.","line":210,"column":1,"nodeType":"Program","source":"        if (!this.props.editable || (this.state.phase == this.Phases.Display && (this.props.label || this.props.labelClassName) && !this.value)) {"},{"ruleId":"max-len","severity":1,"message":"Line 212 exceeds the maximum line length of 90.","line":212,"column":1,"nodeType":"Program","source":"            editable_el = <div className={this.props.className + \" \" + this.props.labelClassName} onClick={this.onClickDiv}>{ this.props.label || this.props.initialValue }</div>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'editable_el' is not in camel case.","line":212,"column":13,"nodeType":"Identifier","source":"            editable_el = <div className={this.props.className + \" \" + this.props.labelClassName} onClick={this.onClickDiv}>{ this.props.label || this.props.initialValue }</div>;"},{"ruleId":"max-len","severity":1,"message":"Line 215 exceeds the maximum line length of 90.","line":215,"column":1,"nodeType":"Program","source":"            editable_el = <div ref=\"editable_div\" contentEditable=\"true\" className={this.props.className}"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'editable_el' is not in camel case.","line":215,"column":13,"nodeType":"Identifier","source":"            editable_el = <div ref=\"editable_div\" contentEditable=\"true\" className={this.props.className}"},{"ruleId":"max-len","severity":1,"message":"Line 216 exceeds the maximum line length of 90.","line":216,"column":1,"nodeType":"Program","source":"                               onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} onFocus={this.onFocus} onBlur={this.onBlur}></div>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'editable_el' is not in camel case.","line":219,"column":16,"nodeType":"Identifier","source":"        return editable_el;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":220,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[6661,6661],"text":","}}],"errorCount":4,"warningCount":22,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nconst KEY_TAB = 9;\nconst KEY_SHIFT = 16;\nconst KEY_WINDOWS = 91;\n\nmodule.exports = React.createClass({\n    displayName: 'EditableText',\n\n    propTypes: {\n        onValueChanged: React.PropTypes.func,\n        initialValue: React.PropTypes.string,\n        label: React.PropTypes.string,\n        placeholder: React.PropTypes.string,\n        className: React.PropTypes.string,\n        labelClassName: React.PropTypes.string,\n        placeholderClassName: React.PropTypes.string,\n        blurToCancel: React.PropTypes.bool,\n        editable: React.PropTypes.bool,\n    },\n\n    Phases: {\n        Display: \"display\",\n        Edit: \"edit\",\n    },\n\n    getDefaultProps: function() {\n        return {\n            onValueChanged: function() {},\n            initialValue: '',\n            label: '',\n            placeholder: '',\n            editable: true,\n            className: \"mx_EditableText\",\n            placeholderClassName: \"mx_EditableText_placeholder\",\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            phase: this.Phases.Display,\n        };\n    },\n\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.initialValue !== this.props.initialValue) {\n            this.value = nextProps.initialValue;\n            if (this.refs.editable_div) {\n                this.showPlaceholder(!this.value);\n            }\n        }\n    },\n\n    componentWillMount: function() {\n        // we track value as an JS object field rather than in React state\n        // as React doesn't play nice with contentEditable.\n        this.value = '';\n        this.placeholder = false;\n    },\n\n    componentDidMount: function() {\n        this.value = this.props.initialValue;\n        if (this.refs.editable_div) {\n            this.showPlaceholder(!this.value);\n        }\n    },\n\n    showPlaceholder: function(show) {\n        if (show) {\n            this.refs.editable_div.textContent = this.props.placeholder;\n            this.refs.editable_div.setAttribute(\"class\", this.props.className + \" \" + this.props.placeholderClassName);\n            this.placeholder = true;\n            this.value = '';\n        }\n        else {\n            this.refs.editable_div.textContent = this.value;\n            this.refs.editable_div.setAttribute(\"class\", this.props.className);\n            this.placeholder = false;\n        }\n    },\n\n    getValue: function() {\n        return this.value;\n    },\n\n    setValue: function(value) {\n        this.value = value;\n        this.showPlaceholder(!this.value);\n    },\n\n    edit: function() {\n        this.setState({\n            phase: this.Phases.Edit,\n        });\n    },\n\n    cancelEdit: function() {\n        this.setState({\n            phase: this.Phases.Display,\n        });\n        this.value = this.props.initialValue;\n        this.showPlaceholder(!this.value);\n        this.onValueChanged(false);\n    },\n\n    onValueChanged: function(shouldSubmit) {\n        this.props.onValueChanged(this.value, shouldSubmit);\n    },\n\n    onKeyDown: function(ev) {\n        // console.log(\"keyDown: textContent=\" + ev.target.textContent + \", value=\" + this.value + \", placeholder=\" + this.placeholder);\n\n        if (this.placeholder) {\n            this.showPlaceholder(false);\n        }\n\n        if (ev.key == \"Enter\") {\n            ev.stopPropagation();\n            ev.preventDefault();\n        }\n\n        // console.log(\"keyDown: textContent=\" + ev.target.textContent + \", value=\" + this.value + \", placeholder=\" + this.placeholder);\n    },\n\n    onKeyUp: function(ev) {\n        // console.log(\"keyUp: textContent=\" + ev.target.textContent + \", value=\" + this.value + \", placeholder=\" + this.placeholder);\n\n        if (!ev.target.textContent) {\n            this.showPlaceholder(true);\n        }\n        else if (!this.placeholder) {\n            this.value = ev.target.textContent;\n        }\n\n        if (ev.key == \"Enter\") {\n            this.onFinish(ev);\n        } else if (ev.key == \"Escape\") {\n            this.cancelEdit();\n        }\n\n        // console.log(\"keyUp: textContent=\" + ev.target.textContent + \", value=\" + this.value + \", placeholder=\" + this.placeholder);\n    },\n\n    onClickDiv: function(ev) {\n        if (!this.props.editable) return;\n\n        this.setState({\n            phase: this.Phases.Edit,\n        });\n    },\n\n    onFocus: function(ev) {\n        //ev.target.setSelectionRange(0, ev.target.textContent.length);\n\n        var node = ev.target.childNodes[0];\n        if (node) {\n            var range = document.createRange();\n            range.setStart(node, 0);\n            range.setEnd(node, node.length);\n\n            var sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    },\n\n    onFinish: function(ev) {\n        var self = this;\n        var submit = (ev.key === \"Enter\");\n        this.setState({\n            phase: this.Phases.Display,\n        }, function() {\n            self.onValueChanged(submit);\n        });\n    },\n\n    onBlur: function(ev) {\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n\n        if (this.props.blurToCancel)\n            {this.cancelEdit();}\n        else\n            {this.onFinish(ev);}\n\n        this.showPlaceholder(!this.value);\n    },\n\n    render: function() {\n        var editable_el;\n\n        if (!this.props.editable || (this.state.phase == this.Phases.Display && (this.props.label || this.props.labelClassName) && !this.value)) {\n            // show the label\n            editable_el = <div className={this.props.className + \" \" + this.props.labelClassName} onClick={this.onClickDiv}>{ this.props.label || this.props.initialValue }</div>;\n        } else {\n            // show the content editable div, but manually manage its contents as react and contentEditable don't play nice together\n            editable_el = <div ref=\"editable_div\" contentEditable=\"true\" className={this.props.className}\n                               onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} onFocus={this.onFocus} onBlur={this.onBlur}></div>;\n        }\n\n        return editable_el;\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/EditableTextContainer.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":67,"column":14,"nodeType":"ArrowFunctionExpression","source":"            }","fix":{"range":[2144,2144],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":99,"column":14,"nodeType":"ArrowFunctionExpression","source":"            }","fix":{"range":[2893,2893],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":105,"column":13,"nodeType":"VariableDeclaration","source":"            var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[2970,2973],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":114,"column":13,"nodeType":"VariableDeclaration","source":"            var EditableText = sdk.getComponent('elements.EditableText');","fix":{"range":[3264,3267],"text":"let"}}],"errorCount":2,"warningCount":2,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport sdk from '../../../index';\nimport q from 'q';\n\n/**\n * A component which wraps an EditableText, with a spinner while updates take\n * place.\n *\n * Parent components should supply an 'onSubmit' callback which returns a\n * promise; a spinner is shown until the promise resolves.\n *\n * The parent can also supply a 'getIntialValue' callback, which works in a\n * similarly asynchronous way. If this is not provided, the initial value is\n * taken from the 'initialValue' property.\n */\nexport default class EditableTextContainer extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this._unmounted = false;\n        this.state = {\n            busy: false,\n            errorString: null,\n            value: props.initialValue,\n        };\n        this._onValueChanged = this._onValueChanged.bind(this);\n    }\n\n    componentWillMount() {\n        if (this.props.getInitialValue === undefined) {\n            // use whatever was given in the initialValue property.\n            return;\n        }\n\n        this.setState({busy: true});\n\n        this.props.getInitialValue().done(\n            (result) => {\n                if (this._unmounted) { return; }\n                this.setState({\n                    busy: false,\n                    value: result,\n                });\n            },\n            (error) => {\n                if (this._unmounted) { return; }\n                this.setState({\n                    errorString: error.toString(),\n                    busy: false,\n                });\n            }\n        );\n    }\n\n    componentWillUnmount() {\n        this._unmounted = true;\n    }\n\n    _onValueChanged(value, shouldSubmit) {\n        if (!shouldSubmit) {\n            return;\n        }\n\n        this.setState({\n            busy: true,\n            errorString: null,\n        });\n\n        this.props.onSubmit(value).done(\n            () => {\n                if (this._unmounted) { return; }\n                this.setState({\n                    busy: false,\n                    value: value,\n                });\n            },\n            (error) => {\n                if (this._unmounted) { return; }\n                this.setState({\n                    errorString: error.toString(),\n                    busy: false,\n                });\n            }\n        );\n    }\n\n    render() {\n        if (this.state.busy) {\n            var Loader = sdk.getComponent(\"elements.Spinner\");\n            return (\n                <Loader />\n            );\n        } else if (this.state.errorString) {\n            return (\n                <div className=\"error\">{this.state.errorString}</div>\n            );\n        } else {\n            var EditableText = sdk.getComponent('elements.EditableText');\n            return (\n                <EditableText initialValue={this.state.value}\n                    placeholder={this.props.placeholder}\n                    onValueChanged={this._onValueChanged}\n                />\n            );\n        }\n    }\n\n}\n\nEditableTextContainer.propTypes = {\n    /* callback to retrieve the initial value. */\n    getInitialValue: React.PropTypes.func,\n\n    /* initial value; used if getInitialValue is not given */\n    initialValue: React.PropTypes.string,\n\n    /* placeholder text to use when the value is empty (and not being\n     * edited) */\n    placeholder: React.PropTypes.string,\n\n    /* callback to update the value. Called with a single argument: the new\n     * value. */\n    onSubmit: React.PropTypes.func,\n};\n\n\nEditableTextContainer.defaultProps = {\n    initialValue: \"\",\n    placeholder: \"\",\n    onSubmit: function(v) {return q(); },\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/EmojiText.js","messages":[],"errorCount":0,"warningCount":0},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/MemberEventListSummary.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":92,"column":37,"nodeType":"Identifier","source":"                canonicalTransitions","fix":{"range":[3700,3700],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":97,"column":56,"nodeType":"MemberExpression","source":"                    t.transitionType, plural, t.repeats","fix":{"range":[3890,3890],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":244,"column":40,"nodeType":"Literal","source":"            items.length - itemLimit, 0","fix":{"range":[9085,9085],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":339,"column":14,"nodeType":"ArrowFunctionExpression","source":"            }","fix":{"range":[12711,12711],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":397,"column":78,"nodeType":"ArrowFunctionExpression","source":"            (seq1, seq2) => aggregate.indices[seq1] > aggregate.indices[seq2]","fix":{"range":[14563,14563],"text":","}}],"errorCount":5,"warningCount":0,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nconst MemberAvatar = require('../avatars/MemberAvatar.js');\n\nmodule.exports = React.createClass({\n    displayName: 'MemberEventListSummary',\n\n    propTypes: {\n        // An array of member events to summarise\n        events: React.PropTypes.array.isRequired,\n        // An array of EventTiles to render when expanded\n        children: React.PropTypes.array.isRequired,\n        // The maximum number of names to show in either each summary e.g. 2 would result \"A, B and 234 others left\"\n        summaryLength: React.PropTypes.number,\n        // The maximum number of avatars to display in the summary\n        avatarsMaxLength: React.PropTypes.number,\n        // The minimum number of events needed to trigger summarisation\n        threshold: React.PropTypes.number,\n    },\n\n    getInitialState: function() {\n        return {\n            expanded: false,\n        };\n    },\n\n    getDefaultProps: function() {\n        return {\n            summaryLength: 1,\n            threshold: 3,\n            avatarsMaxLength: 5,\n        };\n    },\n\n    shouldComponentUpdate: function(nextProps, nextState) {\n        // Update if\n        //  - The number of summarised events has changed\n        //  - or if the summary is currently expanded\n        //  - or if the summary is about to toggle to become collapsed\n        //  - or if there are fewEvents, meaning the child eventTiles are shown as-is\n        return (\n            nextProps.events.length !== this.props.events.length ||\n            this.state.expanded || nextState.expanded ||\n            nextProps.events.length < this.props.threshold\n        );\n    },\n\n    _toggleSummary: function() {\n        this.setState({\n            expanded: !this.state.expanded,\n        });\n    },\n\n    /**\n     * Render the JSX for users aggregated by their transition sequences (`eventAggregates`) where\n     * the sequences are ordered by `orderedTransitionSequences`.\n     * @param {object[]} eventAggregates a map of transition sequence to array of user display names\n     * or user IDs.\n     * @param {string[]} orderedTransitionSequences an array which is some ordering of\n     * `Object.keys(eventAggregates)`.\n     * @returns {ReactElement} a single <span> containing the textual summary of the aggregated\n     * events that occurred.\n     */\n    _renderSummary: function(eventAggregates, orderedTransitionSequences) {\n        const summaries = orderedTransitionSequences.map((transitions) => {\n            const userNames = eventAggregates[transitions];\n            const nameList = this._renderNameList(userNames);\n            const plural = userNames.length > 1;\n\n            const splitTransitions = transitions.split(',');\n\n            // Some neighbouring transitions are common, so canonicalise some into \"pair\"\n            // transitions\n            const canonicalTransitions = this._getCanonicalTransitions(splitTransitions);\n            // Transform into consecutive repetitions of the same transition (like 5\n            // consecutive 'joined_and_left's)\n            const coalescedTransitions = this._coalesceRepeatedTransitions(\n                canonicalTransitions\n            );\n\n            const descs = coalescedTransitions.map((t) => {\n                return this._getDescriptionForTransition(\n                    t.transitionType, plural, t.repeats\n                );\n            });\n\n            const desc = this._renderCommaSeparatedList(descs);\n\n            return nameList + \" \" + desc;\n        });\n\n        if (!summaries) {\n            return null;\n        }\n\n        return (\n            <span>\n                {summaries.join(\", \")}\n            </span>\n        );\n    },\n\n    /**\n     * @param {string[]} users an array of user display names or user IDs.\n     * @returns {string} a comma-separated list that ends with \"and [n] others\" if there are\n     * more items in `users` than `this.props.summaryLength`, which is the number of names\n     * included before \"and [n] others\".\n     */\n    _renderNameList: function(users) {\n        return this._renderCommaSeparatedList(users, this.props.summaryLength);\n    },\n\n    /**\n     * Canonicalise an array of transitions such that some pairs of transitions become\n     * single transitions. For example an input ['joined','left'] would result in an output\n     * ['joined_and_left'].\n     * @param {string[]} transitions an array of transitions.\n     * @returns {string[]} an array of transitions.\n     */\n    _getCanonicalTransitions: function(transitions) {\n        const modMap = {\n            'joined': {\n                'after': 'left',\n                'newTransition': 'joined_and_left',\n            },\n            'left': {\n                'after': 'joined',\n                'newTransition': 'left_and_joined',\n            },\n            // $currentTransition : {\n            //     'after' : $nextTransition,\n            //     'newTransition' : 'new_transition_type',\n            // },\n        };\n        const res = [];\n\n        for (let i = 0; i < transitions.length; i++) {\n            const t = transitions[i];\n            const t2 = transitions[i + 1];\n\n            let transition = t;\n\n            if (i < transitions.length - 1 && modMap[t] && modMap[t].after === t2) {\n                transition = modMap[t].newTransition;\n                i++;\n            }\n\n            res.push(transition);\n        }\n        return res;\n    },\n\n    /**\n     * Transform an array of transitions into an array of transitions and how many times\n     * they are repeated consecutively.\n     *\n     * An array of 123 \"joined_and_left\" transitions, would result in:\n     * ```\n     * [{\n     *   transitionType: \"joined_and_left\"\n     *   repeats: 123\n     * }]\n     * ```\n     * @param {string[]} transitions the array of transitions to transform.\n     * @returns {object[]} an array of coalesced transitions.\n     */\n    _coalesceRepeatedTransitions: function(transitions) {\n        const res = [];\n        for (let i = 0; i < transitions.length; i++) {\n            if (res.length > 0 && res[res.length - 1].transitionType === transitions[i]) {\n                res[res.length - 1].repeats += 1;\n            } else {\n                res.push({\n                    transitionType: transitions[i],\n                    repeats: 1,\n                });\n            }\n        }\n        return res;\n    },\n\n    /**\n     * For a certain transition, t, describe what happened to the users that\n     * underwent the transition.\n     * @param {string} t the transition type.\n     * @param {boolean} plural whether there were multiple users undergoing the same\n     * transition.\n     * @param {number} repeats the number of times the transition was repeated in a row.\n     * @returns {string} the written English equivalent of the transition.\n     */\n    _getDescriptionForTransition(t, plural, repeats) {\n        const beConjugated = plural ? \"were\" : \"was\";\n        const invitation = \"their invitation\" + (plural || (repeats > 1) ? \"s\" : \"\");\n\n        let res = null;\n        const map = {\n            \"joined\": \"joined\",\n            \"left\": \"left\",\n            \"joined_and_left\": \"joined and left\",\n            \"left_and_joined\": \"left and rejoined\",\n            \"invite_reject\": \"rejected \" + invitation,\n            \"invite_withdrawal\": \"had \" + invitation + \" withdrawn\",\n            \"invited\": beConjugated + \" invited\",\n            \"banned\": beConjugated + \" banned\",\n            \"unbanned\": beConjugated + \" unbanned\",\n            \"kicked\": beConjugated + \" kicked\",\n        };\n\n        if (Object.keys(map).includes(t)) {\n            res = map[t] + (repeats > 1 ? \" \" + repeats + \" times\" : \"\" );\n        }\n\n        return res;\n    },\n\n    /**\n     * Constructs a written English string representing `items`, with an optional limit on\n     * the number of items included in the result. If specified and if the length of\n     *`items` is greater than the limit, the string \"and n others\" will be appended onto\n     * the result.\n     * If `items` is empty, returns the empty string. If there is only one item, return\n     * it.\n     * @param {string[]} items the items to construct a string from.\n     * @param {number?} itemLimit the number by which to limit the list.\n     * @returns {string} a string constructed by joining `items` with a comma between each\n     * item, but with the last item appended as \" and [lastItem]\".\n     */\n    _renderCommaSeparatedList(items, itemLimit) {\n        const remaining = itemLimit === undefined ? 0 : Math.max(\n            items.length - itemLimit, 0\n        );\n        if (items.length === 0) {\n            return \"\";\n        } else if (items.length === 1) {\n            return items[0];\n        } else if (remaining) {\n            items = items.slice(0, itemLimit);\n            const other = \" other\" + (remaining > 1 ? \"s\" : \"\");\n            return items.join(', ') + ' and ' + remaining + other;\n        } else {\n            const lastItem = items.pop();\n            return items.join(', ') + ' and ' + lastItem;\n        }\n    },\n\n    _renderAvatars: function(roomMembers) {\n        const avatars = roomMembers.slice(0, this.props.avatarsMaxLength).map((m) => {\n            return (\n                <MemberAvatar key={m.userId} member={m} width={14} height={14} />\n            );\n        });\n        return (\n            <span>\n                {avatars}\n            </span>\n        );\n    },\n\n    _getTransitionSequence: function(events) {\n        return events.map(this._getTransition);\n    },\n\n    /**\n     * Label a given membership event, `e`, where `getContent().membership` has\n     * changed for each transition allowed by the Matrix protocol. This attempts to\n     * label the membership changes that occur in `../../../TextForEvent.js`.\n     * @param {MatrixEvent} e the membership change event to label.\n     * @returns {string?} the transition type given to this event. This defaults to `null`\n     * if a transition is not recognised.\n     */\n    _getTransition: function(e) {\n        switch (e.mxEvent.getContent().membership) {\n            case 'invite': return 'invited';\n            case 'ban': return 'banned';\n            case 'join': return 'joined';\n            case 'leave':\n                if (e.mxEvent.getSender() === e.mxEvent.getStateKey()) {\n                    switch (e.mxEvent.getPrevContent().membership) {\n                        case 'invite': return 'invite_reject';\n                        default: return 'left';\n                    }\n                }\n                switch (e.mxEvent.getPrevContent().membership) {\n                    case 'invite': return 'invite_withdrawal';\n                    case 'ban': return 'unbanned';\n                    case 'join': return 'kicked';\n                    default: return 'left';\n                }\n            default: return null;\n        }\n    },\n\n    _getAggregate: function(userEvents) {\n        // A map of aggregate type to arrays of display names. Each aggregate type\n        // is a comma-delimited string of transitions, e.g. \"joined,left,kicked\".\n        // The array of display names is the array of users who went through that\n        // sequence during eventsToRender.\n        const aggregate = {\n            // $aggregateType : []:string\n        };\n        // A map of aggregate types to the indices that order them (the index of\n        // the first event for a given transition sequence)\n        const aggregateIndices = {\n            // $aggregateType : int\n        };\n\n        const users = Object.keys(userEvents);\n        users.forEach(\n            (userId) => {\n                const firstEvent = userEvents[userId][0];\n                const displayName = firstEvent.displayName;\n\n                const seq = this._getTransitionSequence(userEvents[userId]);\n                if (!aggregate[seq]) {\n                    aggregate[seq] = [];\n                    aggregateIndices[seq] = -1;\n                }\n\n                aggregate[seq].push(displayName);\n\n                if (aggregateIndices[seq] === -1 ||\n                    firstEvent.index < aggregateIndices[seq]) {\n                        aggregateIndices[seq] = firstEvent.index;\n                }\n            }\n        );\n\n        return {\n            names: aggregate,\n            indices: aggregateIndices,\n        };\n    },\n\n    render: function() {\n        const eventsToRender = this.props.events;\n        const fewEvents = eventsToRender.length < this.props.threshold;\n        const expanded = this.state.expanded || fewEvents;\n\n        let expandedEvents = null;\n        if (expanded) {\n            expandedEvents = this.props.children;\n        }\n\n        if (fewEvents) {\n            return (\n                <div className=\"mx_MemberEventListSummary\">\n                    {expandedEvents}\n                </div>\n            );\n        }\n\n        // Map user IDs to an array of objects:\n        const userEvents = {\n            // $userId : [{\n            //     // The original event\n            //     mxEvent: e,\n            //     // The display name of the user (if not, then user ID)\n            //     displayName: e.target.name || userId,\n            //     // The original index of the event in this.props.events\n            //     index: index,\n            // }]\n        };\n\n        const avatarMembers = [];\n        eventsToRender.forEach((e, index) => {\n            const userId = e.getStateKey();\n            // Initialise a user's events\n            if (!userEvents[userId]) {\n                userEvents[userId] = [];\n                avatarMembers.push(e.target);\n            }\n            userEvents[userId].push({\n                mxEvent: e,\n                displayName: e.target.name || userId,\n                index: index,\n            });\n        });\n\n        const aggregate = this._getAggregate(userEvents);\n\n        // Sort types by order of lowest event index within sequence\n        const orderedTransitionSequences = Object.keys(aggregate.names).sort(\n            (seq1, seq2) => aggregate.indices[seq1] > aggregate.indices[seq2]\n        );\n\n        const avatars = this._renderAvatars(avatarMembers);\n        const summary = this._renderSummary(aggregate.names, orderedTransitionSequences);\n        const toggleButton = (\n            <a className=\"mx_MemberEventListSummary_toggle\" onClick={this._toggleSummary}>\n                {expanded ? 'collapse' : 'expand'}\n            </a>\n        );\n\n        const summaryContainer = (\n            <div className=\"mx_EventTile_line\">\n                <div className=\"mx_EventTile_info\">\n                    <span className=\"mx_MemberEventListSummary_avatars\">\n                        {avatars}\n                    </span>\n                    <span className=\"mx_TextualEvent mx_MemberEventListSummary_summary\">\n                        {summary}\n                    </span>&nbsp;\n                    {toggleButton}\n                </div>\n            </div>\n        );\n\n        return (\n            <div className=\"mx_MemberEventListSummary\">\n                {summaryContainer}\n                {expandedEvents}\n            </div>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/PowerSelector.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var roles = {","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var reverseRoles = {};","fix":{"range":[686,689],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":74,"column":9,"nodeType":"VariableDeclaration","source":"        var value;","fix":{"range":[2063,2066],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":85,"column":9,"nodeType":"VariableDeclaration","source":"        var customPicker;","fix":{"range":[2372,2375],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":87,"column":13,"nodeType":"VariableDeclaration","source":"            var input;","fix":{"range":[2435,2438],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":90,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[2557,2570],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 92 exceeds the maximum line length of 90.","line":92,"column":1,"nodeType":"Program","source":"                input = <input ref=\"custom\" type=\"text\" size=\"3\" defaultValue={ this.props.value } onBlur={ this.onCustomBlur } onKeyDown={ this.onCustomKeyDown }/>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":97,"column":9,"nodeType":"VariableDeclaration","source":"        var selectValue;","fix":{"range":[2831,2834],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":100,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2926,2935],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":104,"column":9,"nodeType":"VariableDeclaration","source":"        var select;","fix":{"range":[3023,3026],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":107,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[3130,3139],"text":"        "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":127,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[3890,3890],"text":","}}],"errorCount":1,"warningCount":12,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nvar roles = {\n    0: 'User',\n    50: 'Moderator',\n    100: 'Admin',\n};\n\nvar reverseRoles = {};\nObject.keys(roles).forEach(function(key) {\n    reverseRoles[roles[key]] = key;\n});\n\nmodule.exports = React.createClass({\n    displayName: 'PowerSelector',\n\n    propTypes: {\n        value: React.PropTypes.number.isRequired,\n\n        // if true, the <select/> should be a 'controlled' form element and updated by React\n        // to reflect the current value, rather than left freeform.\n        // MemberInfo uses controlled; RoomSettings uses non-controlled.\n        //\n        // ignored if disabled is truthy. false by default.\n        controlled: React.PropTypes.bool,\n\n        // should the user be able to change the value? false by default.\n        disabled: React.PropTypes.bool,\n        onChange: React.PropTypes.func,\n    },\n\n    getInitialState: function() {\n        return {\n            custom: (roles[this.props.value] === undefined),\n        };\n    },\n\n    onSelectChange: function(event) {\n        this.setState({ custom: event.target.value === \"Custom\" });\n        if (event.target.value !== \"Custom\") {\n            this.props.onChange(this.getValue());\n        }\n    },\n\n    onCustomBlur: function(event) {\n        this.props.onChange(this.getValue());\n    },\n\n    onCustomKeyDown: function(event) {\n        if (event.key == \"Enter\") {\n            this.props.onChange(this.getValue());\n        }\n    },\n\n    getValue: function() {\n        var value;\n        if (this.refs.select) {\n            value = reverseRoles[this.refs.select.value];\n            if (this.refs.custom) {\n                if (value === undefined) value = parseInt( this.refs.custom.value );\n            }\n        }\n        return value;\n    },\n\n    render: function() {\n        var customPicker;\n        if (this.state.custom) {\n            var input;\n            if (this.props.disabled) {\n                input = <span>{ this.props.value }</span>;\n            }\n            else {\n                input = <input ref=\"custom\" type=\"text\" size=\"3\" defaultValue={ this.props.value } onBlur={ this.onCustomBlur } onKeyDown={ this.onCustomKeyDown }/>;\n            }\n            customPicker = <span> of { input }</span>;\n        }\n\n        var selectValue;\n        if (this.state.custom) {\n            selectValue = \"Custom\";\n        }\n        else {\n            selectValue = roles[this.props.value] || \"Custom\";\n        }\n        var select;\n        if (this.props.disabled) {\n            select = <span>{ selectValue }</span>;\n        }\n        else {\n            select =\n                <select ref=\"select\"\n                        value={ this.props.controlled ? selectValue : undefined }\n                        defaultValue={ !this.props.controlled ? selectValue : undefined }\n                        onChange={ this.onSelectChange }>\n                    <option value=\"User\">User (0)</option>\n                    <option value=\"Moderator\">Moderator (50)</option>\n                    <option value=\"Admin\">Admin (100)</option>\n                    <option value=\"Custom\">Custom level</option>\n                </select>;\n        }\n\n        return (\n            <span className=\"mx_PowerSelector\">\n                { select }\n                { customPicker }\n            </span>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/ProgressBar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":25,"column":36,"nodeType":"Property","source":"        max: React.PropTypes.number","fix":{"range":[774,774],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":9,"nodeType":"VariableDeclaration","source":"        var progressStyle = {","fix":{"range":[948,951],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":32,"column":67,"nodeType":"Property","source":"            width: ((this.props.value / this.props.max) * 100)+\"%\"","fix":{"range":[1036,1036],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 35 exceeds the maximum line length of 90.","line":35,"column":1,"nodeType":"Program","source":"            <div className=\"mx_ProgressBar\"><div className=\"mx_ProgressBar_fill\" style={progressStyle}></div></div>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":37,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[1197,1197],"text":","}}],"errorCount":3,"warningCount":3,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'ProgressBar',\n    propTypes: {\n        value: React.PropTypes.number,\n        max: React.PropTypes.number\n    },\n\n    render: function() {\n        // Would use an HTML5 progress tag but if that doesn't animate if you\n        // use the HTML attributes rather than styles\n        var progressStyle = {\n            width: ((this.props.value / this.props.max) * 100)+\"%\"\n        };\n        return (\n            <div className=\"mx_ProgressBar\"><div className=\"mx_ProgressBar_fill\" style={progressStyle}></div></div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/TintableSvg.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[577,580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[607,610],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'ReactDOM' is assigned a value but never used.","line":20,"column":5,"nodeType":"Identifier","source":"var ReactDOM = require(\"react-dom\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Tinter = require(\"../../../Tinter\");","fix":{"range":[644,647],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var TintableSvg = React.createClass({"},{"ruleId":"max-len","severity":1,"message":"Line 66 exceeds the maximum line length of 90.","line":66,"column":1,"nodeType":"Program","source":"            <object className={ \"mx_TintableSvg \" + (this.props.className ? this.props.className : \"\") }"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":75,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2220,2220],"text":","}}],"errorCount":2,"warningCount":5,"source":"/*\nCopyright 2015 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar ReactDOM = require(\"react-dom\");\nvar Tinter = require(\"../../../Tinter\");\n\nvar TintableSvg = React.createClass({\n    displayName: 'TintableSvg',\n\n    propTypes: {\n        src: React.PropTypes.string.isRequired,\n        width: React.PropTypes.string.isRequired,\n        height: React.PropTypes.string.isRequired,\n        className: React.PropTypes.string,\n    },\n\n    statics: {\n        // list of currently mounted TintableSvgs\n        mounts: {},\n        idSequence: 0,\n    },\n\n    componentWillMount: function() {\n        this.fixups = [];\n    },\n\n    componentDidMount: function() {\n        this.id = TintableSvg.idSequence++;\n        TintableSvg.mounts[this.id] = this;\n    },\n\n    componentWillUnmount: function() {\n        delete TintableSvg.mounts[this.id];\n    },\n\n    tint: function() {\n        // TODO: only bother running this if the global tint settings have changed\n        // since we loaded!\n        Tinter.applySvgFixups(this.fixups);\n    },\n\n    onLoad: function(event) {\n        // console.log(\"TintableSvg.onLoad for \" + this.props.src);\n        this.fixups = Tinter.calcSvgFixups([event.target]);\n        Tinter.applySvgFixups(this.fixups);\n    },\n\n    render: function() {\n        return (\n            <object className={ \"mx_TintableSvg \" + (this.props.className ? this.props.className : \"\") }\n                    type=\"image/svg+xml\"\n                    data={ this.props.src }\n                    width={ this.props.width }\n                    height={ this.props.height }\n                    onLoad={ this.onLoad }\n                    tabIndex=\"-1\"\n                />\n        );\n    }\n});\n\n// Register with the Tinter so that we will be told if the tint changes\nTinter.registerTintable(function() {\n    if (TintableSvg.mounts) {\n        Object.keys(TintableSvg.mounts).forEach((id) => {\n            TintableSvg.mounts[id].tint();\n        });\n    }\n});\n\nmodule.exports = TintableSvg;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/TruncatedList.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[561,564],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":28,"column":52,"nodeType":"Property","source":"        createOverflowElement: React.PropTypes.func","fix":{"range":[1105,1105],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":38,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[1381,1381],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":43,"column":9,"nodeType":"VariableDeclaration","source":"        var childsJsx = this.props.children;","fix":{"range":[1434,1437],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":44,"column":9,"nodeType":"VariableDeclaration","source":"        var overflowJsx;","fix":{"range":[1479,1482],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":45,"column":9,"nodeType":"VariableDeclaration","source":"        var childArray = React.Children.toArray(this.props.children).filter((c) => {","fix":{"range":[1504,1507],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":9,"nodeType":"VariableDeclaration","source":"        var childCount = childArray.length;","fix":{"range":[1632,1635],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":52,"column":13,"nodeType":"VariableDeclaration","source":"            var overflowCount = childCount - this.props.truncateAt;","fix":{"range":[1723,1726],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":56,"column":46,"nodeType":"Identifier","source":"                    overflowCount, childCount","fix":{"range":[1926,1926],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":71,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2320,2320],"text":","}}],"errorCount":4,"warningCount":6,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'TruncatedList',\n\n    propTypes: {\n        // The number of elements to show before truncating. If negative, no truncation is done.\n        truncateAt: React.PropTypes.number,\n        // The className to apply to the wrapping div\n        className: React.PropTypes.string,\n        // A function which will be invoked when an overflow element is required.\n        // This will be inserted after the children.\n        createOverflowElement: React.PropTypes.func\n    },\n\n    getDefaultProps: function() {\n        return {\n            truncateAt: 2,\n            createOverflowElement: function(overflowCount, totalCount) {\n                return (\n                    <div>And {overflowCount} more...</div>\n                );\n            }\n        };\n    },\n\n    render: function() {\n        var childsJsx = this.props.children;\n        var overflowJsx;\n        var childArray = React.Children.toArray(this.props.children).filter((c) => {\n            return c != null;\n        });\n\n        var childCount = childArray.length;\n\n        if (this.props.truncateAt >= 0) {\n            var overflowCount = childCount - this.props.truncateAt;\n\n            if (overflowCount > 1) {\n                overflowJsx = this.props.createOverflowElement(\n                    overflowCount, childCount\n                );\n\n                // cut out the overflow elements\n                childArray.splice(childCount - overflowCount, overflowCount);\n                childsJsx = childArray; // use what is left\n            }\n        }\n\n        return (\n            <div className={this.props.className}>\n                {childsJsx}\n                {overflowJsx}\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/elements/UserSelector.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":36,"column":23,"nodeType":"Identifier","source":"    addUser: function(user_id) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":37,"column":47,"nodeType":"Identifier","source":"        if (this.props.selected_users.indexOf(user_id == -1)) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":38,"column":67,"nodeType":"Identifier","source":"            this.props.onChange(this.props.selected_users.concat([user_id]));"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":42,"column":26,"nodeType":"Identifier","source":"    removeUser: function(user_id) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":44,"column":25,"nodeType":"Identifier","source":"            return e != user_id;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[1482,1485],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":58,"column":61,"nodeType":"Identifier","source":"                    {this.props.selected_users.map(function(user_id, i) {"},{"ruleId":"max-len","severity":1,"message":"Line 59 exceeds the maximum line length of 90.","line":59,"column":1,"nodeType":"Program","source":"                        return <li key={user_id}>{user_id} - <span onClick={function() {self.removeUser(user_id);}}>X</span></li>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":59,"column":41,"nodeType":"Identifier","source":"                        return <li key={user_id}>{user_id} - <span onClick={function() {self.removeUser(user_id);}}>X</span></li>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":59,"column":51,"nodeType":"Identifier","source":"                        return <li key={user_id}>{user_id} - <span onClick={function() {self.removeUser(user_id);}}>X</span></li>;"},{"ruleId":"max-len","severity":1,"message":"Line 62 exceeds the maximum line length of 90.","line":62,"column":1,"nodeType":"Program","source":"                <input type=\"text\" ref=\"user_id_input\" defaultValue=\"\" className=\"mx_UserSelector_userIdInput\" placeholder=\"ex. @bob:example.com\"/>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":68,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2184,2184],"text":","}}],"errorCount":1,"warningCount":12,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'UserSelector',\n\n    propTypes: {\n        onChange: React.PropTypes.func,\n        selected_users: React.PropTypes.arrayOf(React.PropTypes.string),\n    },\n\n    getDefaultProps: function() {\n        return {\n            onChange: function() {},\n            selected: [],\n        };\n    },\n\n    addUser: function(user_id) {\n        if (this.props.selected_users.indexOf(user_id == -1)) {\n            this.props.onChange(this.props.selected_users.concat([user_id]));\n        }\n    },\n\n    removeUser: function(user_id) {\n        this.props.onChange(this.props.selected_users.filter(function(e) {\n            return e != user_id;\n        }));\n    },\n\n    onAddUserId: function() {\n        this.addUser(this.refs.user_id_input.value);\n        this.refs.user_id_input.value = \"\";\n    },\n\n    render: function() {\n        var self = this;\n        return (\n            <div>\n                <ul className=\"mx_UserSelector_UserIdList\" ref=\"list\">\n                    {this.props.selected_users.map(function(user_id, i) {\n                        return <li key={user_id}>{user_id} - <span onClick={function() {self.removeUser(user_id);}}>X</span></li>;\n                    })}\n                </ul>\n                <input type=\"text\" ref=\"user_id_input\" defaultValue=\"\" className=\"mx_UserSelector_userIdInput\" placeholder=\"ex. @bob:example.com\"/>\n                <button onClick={this.onAddUserId} className=\"mx_UserSelector_AddUserId\">\n                    Add User\n                </button>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/login/CaptchaForm.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var DIV_ID = 'mx_recaptcha';","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":56,"column":13,"nodeType":"VariableDeclaration","source":"            var protocol = global.location.protocol;","fix":{"range":[1569,1572],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":58,"column":17,"nodeType":"VariableDeclaration","source":"                var warning = document.createElement('div');","fix":{"range":[1666,1669],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 63 exceeds the maximum line length of 90.","line":63,"column":1,"nodeType":"Program","source":"                warning.innerHTML = \"Robot check is currently unavailable on desktop - please use a <a href='https://riot.im/app'>web browser</a>.\";"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":65,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[2229,2242],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":67,"column":17,"nodeType":"VariableDeclaration","source":"                var scriptTag = document.createElement('script');","fix":{"range":[2265,2268],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 69 exceeds the maximum line length of 90.","line":69,"column":1,"nodeType":"Program","source":"                    'src', protocol+\"//www.google.com/recaptcha/api.js?onload=mx_on_recaptcha_loaded&render=explicit\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":69,"column":118,"nodeType":"BinaryExpression","source":"                    'src', protocol+\"//www.google.com/recaptcha/api.js?onload=mx_on_recaptcha_loaded&render=explicit\"","fix":{"range":[2472,2472],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":82,"column":9,"nodeType":"VariableDeclaration","source":"        var publicKey = this.props.sitePublicKey;","fix":{"range":[2807,2810],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":126,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[4054,4054],"text":","}}],"errorCount":2,"warningCount":9,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar DIV_ID = 'mx_recaptcha';\n\n/**\n * A pure UI component which displays a captcha form.\n */\nmodule.exports = React.createClass({\n    displayName: 'CaptchaForm',\n\n    propTypes: {\n        sitePublicKey: React.PropTypes.string,\n\n        // called with the captcha response\n        onCaptchaResponse: React.PropTypes.func,\n    },\n\n    getDefaultProps: function() {\n        return {\n            onCaptchaResponse: () => {},\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            errorText: null,\n        };\n    },\n\n    componentDidMount: function() {\n        // Just putting a script tag into the returned jsx doesn't work, annoyingly,\n        // so we do this instead.\n        if (global.grecaptcha) {\n            // already loaded\n            this._onCaptchaLoaded();\n        } else {\n            console.log(\"Loading recaptcha script...\");\n            window.mx_on_recaptcha_loaded = () => {this._onCaptchaLoaded();};\n            var protocol = global.location.protocol;\n            if (protocol === \"file:\") {\n                var warning = document.createElement('div');\n                // XXX: fix hardcoded app URL.  Better solutions include:\n                // * jumping straight to a hosted captcha page (but we don't support that yet)\n                // * embedding the captcha in an iframe (if that works)\n                // * using a better captcha lib\n                warning.innerHTML = \"Robot check is currently unavailable on desktop - please use a <a href='https://riot.im/app'>web browser</a>.\";\n                this.refs.recaptchaContainer.appendChild(warning);\n            }\n            else {\n                var scriptTag = document.createElement('script');\n                scriptTag.setAttribute(\n                    'src', protocol+\"//www.google.com/recaptcha/api.js?onload=mx_on_recaptcha_loaded&render=explicit\"\n                );\n                this.refs.recaptchaContainer.appendChild(scriptTag);\n            }\n        }\n    },\n\n    _renderRecaptcha: function(divId) {\n        if (!global.grecaptcha) {\n            console.error(\"grecaptcha not loaded!\");\n            throw new Error(\"Recaptcha did not load successfully\");\n        }\n\n        var publicKey = this.props.sitePublicKey;\n        if (!publicKey) {\n            console.error(\"No public key for recaptcha!\");\n            throw new Error(\n                \"This server has not supplied enough information for Recaptcha \"\n                    + \"authentication\");\n        }\n\n        console.log(\"Rendering to %s\", divId);\n        global.grecaptcha.render(divId, {\n            sitekey: publicKey,\n            callback: this.props.onCaptchaResponse,\n        });\n    },\n\n    _onCaptchaLoaded: function() {\n        console.log(\"Loaded recaptcha script.\");\n        try {\n            this._renderRecaptcha(DIV_ID);\n        } catch (e) {\n            this.setState({\n                errorText: e.toString(),\n            });\n        }\n    },\n\n    render: function() {\n        let error = null;\n        if (this.state.errorText) {\n            error = (\n                <div className=\"error\">\n                    {this.state.errorText}\n                </div>\n            );\n        }\n\n        return (\n            <div ref=\"recaptchaContainer\">\n                This Home Server would like to make sure you are not a robot\n                <br/>\n                <div id={DIV_ID}></div>\n                {error}\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/login/CasLogin.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":34,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[927,927],"text":","}}],"errorCount":1,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'CasLogin',\n\n    propTypes: {\n      onSubmit: React.PropTypes.func, // fn()\n    },\n\n    render: function() {\n        return (\n            <div>\n                <button onClick={this.props.onSubmit}>Sign in with CAS</button>\n            </div>\n        );\n    }\n\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/login/CustomServerDialog.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require(\"react\");","fix":{"range":[568,571],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 37 exceeds the maximum line length of 90.","line":37,"column":1,"nodeType":"Program","source":"                        You can also set a custom identity server but this will typically prevent"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":48,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[1820,1820],"text":","}}],"errorCount":1,"warningCount":2,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require(\"react\");\n\nmodule.exports = React.createClass({\n    displayName: 'CustomServerDialog',\n\n    render: function() {\n        return (\n            <div className=\"mx_ErrorDialog\">\n                <div className=\"mx_Dialog_title\">\n                    Custom Server Options\n                </div>\n                <div className=\"mx_Dialog_content\">\n                    <span>\n                        You can use the custom server options to sign into other Matrix\n                        servers by specifying a different Home server URL.\n                        <br/>\n                        This allows you to use this app with an existing Matrix account on\n                        a different home server.\n                        <br/>\n                        <br/>\n                        You can also set a custom identity server but this will typically prevent\n                        interaction with users based on email address.\n                    </span>\n                </div>\n                <div className=\"mx_Dialog_buttons\">\n                    <button onClick={this.props.onFinished} autoFocus={true}>\n                        Dismiss\n                    </button>\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/login/InteractiveAuthEntryComponents.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":130,"column":9,"nodeType":"VariableDeclaration","source":"        var sitePublicKey = this.props.stageParams.public_key;","fix":{"range":[4219,4222],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":171,"column":9,"nodeType":"VariableDeclaration","source":"        var url = MatrixClientPeg.get().getFallbackAuthUrl(","fix":{"range":[5552,5555],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":173,"column":37,"nodeType":"MemberExpression","source":"            this.props.authSessionId","fix":{"range":[5674,5674],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":206,"column":10,"nodeType":"VariableDeclaration","source":"    for (var c of AuthEntryComponents) {","fix":{"range":[6432,6435],"text":"let"}}],"errorCount":1,"warningCount":3,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\n\nimport sdk from '../../../index';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\n\n/* This file contains a collection of components which are used by the\n * InteractiveAuthDialog to prompt the user to enter the information needed\n * for an auth stage. (The intention is that they could also be used for other\n * components, such as the registration flow).\n *\n * Call getEntryComponentForLoginType() to get a component suitable for a\n * particular login type. Each component requires the same properties:\n *\n * loginType:              the login type of the auth stage being attempted\n * authSessionId:          session id from the server\n * stageParams:            params from the server for the stage being attempted\n * errorText:              error message from a previous attempt to authenticate\n * submitAuthDict:         a function which will be called with the new auth dict\n * setSubmitButtonEnabled: a function which will enable/disable the 'submit' button\n *\n * Each component may also provide the following functions (beyond the standard React ones):\n *    onSubmitClick: handle a 'submit' button click\n *    focus: set the input focus appropriately in the form.\n */\n\nexport const PasswordAuthEntry = React.createClass({\n    displayName: 'PasswordAuthEntry',\n\n    statics: {\n        LOGIN_TYPE: \"m.login.password\",\n    },\n\n    propTypes: {\n        submitAuthDict: React.PropTypes.func.isRequired,\n        setSubmitButtonEnabled: React.PropTypes.func.isRequired,\n        errorText: React.PropTypes.string,\n    },\n\n    componentWillMount: function() {\n        this.props.setSubmitButtonEnabled(false);\n    },\n\n    focus: function() {\n        if (this.refs.passwordField) {\n            this.refs.passwordField.focus();\n        }\n    },\n\n    onSubmitClick: function() {\n        this.props.submitAuthDict({\n            type: PasswordAuthEntry.LOGIN_TYPE,\n            user: MatrixClientPeg.get().credentials.userId,\n            password: this.refs.passwordField.value,\n        });\n    },\n\n    _onPasswordFieldChange: function(ev) {\n        // enable the submit button iff the password is non-empty\n        this.props.setSubmitButtonEnabled(Boolean(ev.target.value));\n    },\n\n    render: function() {\n        let passwordBoxClass = null;\n\n        if (this.props.errorText) {\n            passwordBoxClass = 'error';\n        }\n\n        return (\n            <div>\n                <p>To continue, please enter your password.</p>\n                <p>Password:</p>\n                <input\n                    ref=\"passwordField\"\n                    className={passwordBoxClass}\n                    onChange={this._onPasswordFieldChange}\n                    type=\"password\"\n                />\n                <div className=\"error\">\n                    {this.props.errorText}\n                </div>\n            </div>\n        );\n    },\n});\n\nexport const RecaptchaAuthEntry = React.createClass({\n    displayName: 'RecaptchaAuthEntry',\n\n    statics: {\n        LOGIN_TYPE: \"m.login.recaptcha\",\n    },\n\n    propTypes: {\n        submitAuthDict: React.PropTypes.func.isRequired,\n        stageParams: React.PropTypes.object.isRequired,\n        setSubmitButtonEnabled: React.PropTypes.func.isRequired,\n        errorText: React.PropTypes.string,\n    },\n\n    componentWillMount: function() {\n        this.props.setSubmitButtonEnabled(false);\n    },\n\n    _onCaptchaResponse: function(response) {\n        this.props.submitAuthDict({\n            type: RecaptchaAuthEntry.LOGIN_TYPE,\n            response: response,\n        });\n    },\n\n    render: function() {\n        const CaptchaForm = sdk.getComponent(\"views.login.CaptchaForm\");\n        var sitePublicKey = this.props.stageParams.public_key;\n        return (\n            <div>\n                <CaptchaForm sitePublicKey={sitePublicKey}\n                    onCaptchaResponse={this._onCaptchaResponse}\n                />\n                <div className=\"error\">\n                    {this.props.errorText}\n                </div>\n            </div>\n        );\n    },\n});\n\nexport const FallbackAuthEntry = React.createClass({\n    displayName: 'FallbackAuthEntry',\n\n    propTypes: {\n        authSessionId: React.PropTypes.string.isRequired,\n        loginType: React.PropTypes.string.isRequired,\n        submitAuthDict: React.PropTypes.func.isRequired,\n        setSubmitButtonEnabled: React.PropTypes.func.isRequired,\n        errorText: React.PropTypes.string,\n    },\n\n    componentWillMount: function() {\n        // we have to make the user click a button, as browsers will block\n        // the popup if we open it immediately.\n        this._popupWindow = null;\n        this.props.setSubmitButtonEnabled(true);\n        window.addEventListener(\"message\", this._onReceiveMessage);\n    },\n\n    componentWillUnmount: function() {\n        window.removeEventListener(\"message\", this._onReceiveMessage);\n        if (this._popupWindow) {\n            this._popupWindow.close();\n        }\n    },\n\n    onSubmitClick: function() {\n        var url = MatrixClientPeg.get().getFallbackAuthUrl(\n            this.props.loginType,\n            this.props.authSessionId\n        );\n        this._popupWindow = window.open(url);\n        this.props.setSubmitButtonEnabled(false);\n    },\n\n    _onReceiveMessage: function(event) {\n        if (\n            event.data === \"authDone\" &&\n            event.origin === MatrixClientPeg.get().getHomeserverUrl()\n        ) {\n            this.props.submitAuthDict({});\n        }\n    },\n\n    render: function() {\n        return (\n            <div>\n                Click \"Submit\" to authenticate\n                <div className=\"error\">\n                    {this.props.errorText}\n                </div>\n            </div>\n        );\n    },\n});\n\nconst AuthEntryComponents = [\n    PasswordAuthEntry,\n    RecaptchaAuthEntry,\n];\n\nexport function getEntryComponentForLoginType(loginType) {\n    for (var c of AuthEntryComponents) {\n        if (c.LOGIN_TYPE == loginType) {\n            return c;\n        }\n    }\n    return FallbackAuthEntry;\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/login/LoginFooter.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":30,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[873,873],"text":","}}],"errorCount":1,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'LoginFooter',\n\n    render: function() {\n        return (\n            <div className=\"mx_Login_links\">\n                <a href=\"https://matrix.org\">powered by Matrix</a>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/login/LoginHeader.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":30,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[828,828],"text":","}}],"errorCount":1,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'LoginHeader',\n\n    render: function() {\n        return (\n            <div className=\"mx_Login_logo\">\n                Matrix\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/login/PasswordLogin.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ReactDOM' is defined but never used.","line":18,"column":8,"nodeType":"Identifier","source":"import ReactDOM from 'react-dom';"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'field_input_incorrect' is not in camel case.","line":20,"column":9,"nodeType":"Identifier","source":"import {field_input_incorrect} from '../../../UiEffects';"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'field_input_incorrect' is not in camel case.","line":20,"column":9,"nodeType":"Identifier","source":"import {field_input_incorrect} from '../../../UiEffects';"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":80,"column":9,"nodeType":"VariableDeclaration","source":"        var forgotPasswordJsx;","fix":{"range":[2460,2463],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 84 exceeds the maximum line length of 90.","line":84,"column":1,"nodeType":"Program","source":"                <a className=\"mx_Login_forgot\" onClick={this.props.onForgotPasswordClick} href=\"#\">"},{"ruleId":"max-len","severity":1,"message":"Line 103 exceeds the maximum line length of 90.","line":103,"column":1,"nodeType":"Program","source":"                <input className={pwFieldClass} ref={(e) => {this._passwordField = e;}} type=\"password\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":113,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[3775,3775],"text":","}}],"errorCount":2,"warningCount":5,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport {field_input_incorrect} from '../../../UiEffects';\n\n\n/**\n * A pure UI component which displays a username/password form.\n */\nmodule.exports = React.createClass({displayName: 'PasswordLogin',\n    propTypes: {\n        onSubmit: React.PropTypes.func.isRequired, // fn(username, password)\n        onForgotPasswordClick: React.PropTypes.func, // fn()\n        initialUsername: React.PropTypes.string,\n        initialPassword: React.PropTypes.string,\n        onUsernameChanged: React.PropTypes.func,\n        onPasswordChanged: React.PropTypes.func,\n        loginIncorrect: React.PropTypes.bool,\n    },\n\n    getDefaultProps: function() {\n        return {\n            onUsernameChanged: function() {},\n            onPasswordChanged: function() {},\n            initialUsername: \"\",\n            initialPassword: \"\",\n            loginIncorrect: false,\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            username: this.props.initialUsername,\n            password: this.props.initialPassword,\n        };\n    },\n\n    componentWillMount: function() {\n        this._passwordField = null;\n    },\n\n    componentWillReceiveProps: function(nextProps) {\n        if (!this.props.loginIncorrect && nextProps.loginIncorrect) {\n            field_input_incorrect(this._passwordField);\n        }\n    },\n\n    onSubmitForm: function(ev) {\n        ev.preventDefault();\n        this.props.onSubmit(this.state.username, this.state.password);\n    },\n\n    onUsernameChanged: function(ev) {\n        this.setState({username: ev.target.value});\n        this.props.onUsernameChanged(ev.target.value);\n    },\n\n    onPasswordChanged: function(ev) {\n        this.setState({password: ev.target.value});\n        this.props.onPasswordChanged(ev.target.value);\n    },\n\n    render: function() {\n        var forgotPasswordJsx;\n\n        if (this.props.onForgotPasswordClick) {\n            forgotPasswordJsx = (\n                <a className=\"mx_Login_forgot\" onClick={this.props.onForgotPasswordClick} href=\"#\">\n                    Forgot your password?\n                </a>\n            );\n        }\n\n        const pwFieldClass = classNames({\n            mx_Login_field: true,\n            error: this.props.loginIncorrect,\n        });\n\n        return (\n            <div>\n                <form onSubmit={this.onSubmitForm}>\n                <input className=\"mx_Login_field\" type=\"text\"\n                    name=\"username\" // make it a little easier for browser's remember-password\n                    value={this.state.username} onChange={this.onUsernameChanged}\n                    placeholder=\"Email or user name\" autoFocus />\n                <br />\n                <input className={pwFieldClass} ref={(e) => {this._passwordField = e;}} type=\"password\"\n                    name=\"password\"\n                    value={this.state.password} onChange={this.onPasswordChanged}\n                    placeholder=\"Password\" />\n                <br />\n                {forgotPasswordJsx}\n                <input className=\"mx_Login_submit\" type=\"submit\" value=\"Sign in\" />\n                </form>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/login/RegistrationForm.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var UiEffects = require('../../../UiEffects');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[660,663],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var Email = require('../../../email');","fix":{"range":[697,700],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[736,739],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var FIELD_EMAIL = 'field_email';","fix":{"range":[776,779],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var FIELD_USERNAME = 'field_username';","fix":{"range":[809,812],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var FIELD_PASSWORD = 'field_password';","fix":{"range":[848,851],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var FIELD_PASSWORD_CONFIRM = 'field_password_confirm';","fix":{"range":[887,890],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":60,"column":46,"nodeType":"Property","source":"        onRegisterClick: React.PropTypes.func // onRegisterClick(Object) => ?Promise","fix":{"range":[2210,2210],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":69,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[2455,2455],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":93,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[3109,3112],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":96,"column":17,"nodeType":"VariableDeclaration","source":"                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[3226,3229],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 101 exceeds the maximum line length of 90.","line":101,"column":1,"nodeType":"Program","source":"                            If you don't specify an email address, you won't be able to reset your password.<br/>"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":111,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[3896,3909],"text":"            "}},{"ruleId":"prefer-const","severity":1,"message":"'email' is never reassigned. Use 'const' instead.","line":119,"column":13,"nodeType":"Identifier","source":"        let email = this.refs.email.value.trim();","fix":{"range":[4018,4021],"text":"const"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":120,"column":9,"nodeType":"VariableDeclaration","source":"        var promise = this.props.onRegisterClick({","fix":{"range":[4068,4071],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'ev' is not defined.","line":127,"column":13,"nodeType":"Identifier","source":"            ev.target.disabled = true;"},{"ruleId":"no-undef","severity":2,"message":"'ev' is not defined.","line":129,"column":17,"nodeType":"Identifier","source":"                ev.target.disabled = false;"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":134,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":139,"column":9,"nodeType":"VariableDeclaration","source":"        var keys = Object.keys(this.state.fieldValid);","fix":{"range":[4609,4612],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":140,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < keys.length; ++i) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'field_id' is not in camel case.","line":152,"column":29,"nodeType":"Identifier","source":"    validateField: function(field_id) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":153,"column":9,"nodeType":"VariableDeclaration","source":"        var pwd1 = this.refs.password.value.trim();","fix":{"range":[5004,5007],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":154,"column":9,"nodeType":"VariableDeclaration","source":"        var pwd2 = this.refs.passwordConfirm.value.trim();","fix":{"range":[5056,5059],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'field_id' is not in camel case.","line":156,"column":17,"nodeType":"Identifier","source":"        switch (field_id) {"},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":157,"column":13,"nodeType":"SwitchCase","source":"            case FIELD_EMAIL:"},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":157,"column":13,"nodeType":"SwitchCase","source":"            case FIELD_EMAIL:"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":163,"column":26,"nodeType":"ArrowFunctionExpression","source":"                        }","fix":{"range":[5504,5504],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 178 exceeds the maximum line length of 90.","line":178,"column":1,"nodeType":"Program","source":"                this.markFieldValid(field_id, valid, \"RegistrationForm.ERR_EMAIL_INVALID\");"},{"ruleId":"max-len","severity":1,"message":"Line 182 exceeds the maximum line length of 90.","line":182,"column":1,"nodeType":"Program","source":"                var username = this.refs.username.value.trim() || this.props.guestUsername;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":182,"column":17,"nodeType":"VariableDeclaration","source":"                var username = this.refs.username.value.trim() || this.props.guestUsername;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":187,"column":64,"nodeType":"Literal","source":"                        \"RegistrationForm.ERR_USERNAME_INVALID\"","fix":{"range":[6590,6590],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":193,"column":62,"nodeType":"Literal","source":"                        \"RegistrationForm.ERR_USERNAME_BLANK\"","fix":{"range":[6826,6826],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":204,"column":64,"nodeType":"Literal","source":"                        \"RegistrationForm.ERR_PASSWORD_MISSING\"","fix":{"range":[7209,7209],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":210,"column":63,"nodeType":"Literal","source":"                        \"RegistrationForm.ERR_PASSWORD_LENGTH\"","fix":{"range":[7474,7474],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":219,"column":61,"nodeType":"Literal","source":"                    \"RegistrationForm.ERR_PASSWORD_MISMATCH\"","fix":{"range":[7803,7803],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'field_id' is not in camel case.","line":225,"column":30,"nodeType":"Identifier","source":"    markFieldValid: function(field_id, val, error_code) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'error_code' is not in camel case.","line":225,"column":45,"nodeType":"Identifier","source":"    markFieldValid: function(field_id, val, error_code) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":226,"column":9,"nodeType":"VariableDeclaration","source":"        var fieldValid = this.state.fieldValid;","fix":{"range":[7930,7933],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'field_id' is not in camel case.","line":235,"column":22,"nodeType":"Identifier","source":"    fieldElementById(field_id) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'field_id' is not in camel case.","line":236,"column":17,"nodeType":"Identifier","source":"        switch (field_id) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'field_id' is not in camel case.","line":248,"column":30,"nodeType":"Identifier","source":"    _classForField: function(field_id, baseClass) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":258,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[8883,8886],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":259,"column":9,"nodeType":"VariableDeclaration","source":"        var emailSection, belowEmailSection, registerButton;","fix":{"range":[8908,8911],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":259,"column":9,"nodeType":"VariableDeclaration","source":"        var emailSection, belowEmailSection, registerButton;"},{"ruleId":"max-len","severity":1,"message":"Line 273 exceeds the maximum line length of 90.","line":273,"column":1,"nodeType":"Program","source":"                            Sorry, but your university is not registered with us just yet.&nbsp;"},{"ruleId":"max-len","severity":1,"message":"Line 278 exceeds the maximum line length of 90.","line":278,"column":1,"nodeType":"Program","source":"                            to get your university signed up. Or continue to register with Riot to enjoy our open source platform."},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":296,"column":9,"nodeType":"VariableDeclaration","source":"        var placeholderUserName = \"User name\";","fix":{"range":[10704,10707],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 307 exceeds the maximum line length of 90.","line":307,"column":1,"nodeType":"Program","source":"                        placeholder={ placeholderUserName } defaultValue={this.props.defaultUsername}"},{"ruleId":"max-len","severity":1,"message":"Line 312 exceeds the maximum line length of 90.","line":312,"column":1,"nodeType":"Program","source":"                        <div className=\"mx_Login_fieldLabel\">Setting a user name will create a fresh account</div> : null"},{"ruleId":"max-len","severity":1,"message":"Line 317 exceeds the maximum line length of 90.","line":317,"column":1,"nodeType":"Program","source":"                        placeholder=\"Password\" defaultValue={this.props.defaultPassword} />"},{"ruleId":"max-len","severity":1,"message":"Line 321 exceeds the maximum line length of 90.","line":321,"column":1,"nodeType":"Program","source":"                        className={this._classForField(FIELD_PASSWORD_CONFIRM, 'mx_Login_field')}"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":329,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[12435,12435],"text":","}}],"errorCount":13,"warningCount":41,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar UiEffects = require('../../../UiEffects');\nvar sdk = require('../../../index');\nvar Email = require('../../../email');\nvar Modal = require(\"../../../Modal\");\n\nvar FIELD_EMAIL = 'field_email';\nvar FIELD_USERNAME = 'field_username';\nvar FIELD_PASSWORD = 'field_password';\nvar FIELD_PASSWORD_CONFIRM = 'field_password_confirm';\n\n/**\n * A pure UI component which displays a registration form.\n */\nmodule.exports = React.createClass({\n    displayName: 'RegistrationForm',\n\n    propTypes: {\n        // Values pre-filled in the input boxes when the component loads\n        defaultEmail: React.PropTypes.string,\n        defaultUsername: React.PropTypes.string,\n        defaultPassword: React.PropTypes.string,\n        teamsConfig: React.PropTypes.shape({\n            // Email address to request new teams\n            supportEmail: React.PropTypes.string,\n            teams: React.PropTypes.arrayOf(React.PropTypes.shape({\n                // The displayed name of the team\n                \"name\": React.PropTypes.string,\n                // The domain of team email addresses\n                \"domain\": React.PropTypes.string,\n            })).required,\n        }),\n\n        // A username that will be used if no username is entered.\n        // Specifying this param will also warn the user that entering\n        // a different username will cause a fresh account to be generated.\n        guestUsername: React.PropTypes.string,\n\n        showEmail: React.PropTypes.bool,\n        minPasswordLength: React.PropTypes.number,\n        onError: React.PropTypes.func,\n        onRegisterClick: React.PropTypes.func // onRegisterClick(Object) => ?Promise\n    },\n\n    getDefaultProps: function() {\n        return {\n            showEmail: false,\n            minPasswordLength: 6,\n            onError: function(e) {\n                console.error(e);\n            }\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            fieldValid: {},\n            selectedTeam: null,\n        };\n    },\n\n    onSubmit: function(ev) {\n        ev.preventDefault();\n\n        // validate everything, in reverse order so\n        // the error that ends up being displayed\n        // is the one from the first invalid field.\n        // It's not super ideal that this just calls\n        // onError once for each invalid field.\n        this.validateField(FIELD_PASSWORD_CONFIRM);\n        this.validateField(FIELD_PASSWORD);\n        this.validateField(FIELD_USERNAME);\n        this.validateField(FIELD_EMAIL);\n\n        var self = this;\n        if (this.allFieldsValid()) {\n            if (this.refs.email.value == '') {\n                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n                Modal.createDialog(QuestionDialog, {\n                    title: \"Warning\",\n                    description:\n                        <div>\n                            If you don't specify an email address, you won't be able to reset your password.<br/>\n                            Are you sure?\n                        </div>,\n                    button: \"Continue\",\n                    onFinished: function(confirmed) {\n                        if (confirmed) {\n                            self._doSubmit();\n                        }\n                    },\n                });\n            }\n            else {\n                self._doSubmit();\n            }\n        }\n    },\n\n    _doSubmit: function() {\n        let email = this.refs.email.value.trim();\n        var promise = this.props.onRegisterClick({\n            username: this.refs.username.value.trim() || this.props.guestUsername,\n            password: this.refs.password.value.trim(),\n            email: email,\n        });\n\n        if (promise) {\n            ev.target.disabled = true;\n            promise.finally(function() {\n                ev.target.disabled = false;\n            });\n        }\n    },\n\n    /**\n     * Returns true if all fields were valid last time\n     * they were validated.\n     */\n    allFieldsValid: function() {\n        var keys = Object.keys(this.state.fieldValid);\n        for (var i = 0; i < keys.length; ++i) {\n            if (this.state.fieldValid[keys[i]] == false) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    _isUniEmail: function(email) {\n        return email.endsWith('.ac.uk') || email.endsWith('.edu');\n    },\n\n    validateField: function(field_id) {\n        var pwd1 = this.refs.password.value.trim();\n        var pwd2 = this.refs.passwordConfirm.value.trim();\n\n        switch (field_id) {\n            case FIELD_EMAIL:\n                const email = this.refs.email.value;\n                if (this.props.teamsConfig && this._isUniEmail(email)) {\n                    const matchingTeam = this.props.teamsConfig.teams.find(\n                        (team) => {\n                            return email.split('@').pop() === team.domain;\n                        }\n                    ) || null;\n                    this.setState({\n                        selectedTeam: matchingTeam,\n                        showSupportEmail: !matchingTeam,\n                    });\n                    this.props.onTeamSelected(matchingTeam);\n                } else {\n                    this.props.onTeamSelected(null);\n                    this.setState({\n                        selectedTeam: null,\n                        showSupportEmail: false,\n                    });\n                }\n                const valid = email === '' || Email.looksValid(email);\n                this.markFieldValid(field_id, valid, \"RegistrationForm.ERR_EMAIL_INVALID\");\n                break;\n            case FIELD_USERNAME:\n                // XXX: SPEC-1\n                var username = this.refs.username.value.trim() || this.props.guestUsername;\n                if (encodeURIComponent(username) != username) {\n                    this.markFieldValid(\n                        field_id,\n                        false,\n                        \"RegistrationForm.ERR_USERNAME_INVALID\"\n                    );\n                } else if (username == '') {\n                    this.markFieldValid(\n                        field_id,\n                        false,\n                        \"RegistrationForm.ERR_USERNAME_BLANK\"\n                    );\n                } else {\n                    this.markFieldValid(field_id, true);\n                }\n                break;\n            case FIELD_PASSWORD:\n                if (pwd1 == '') {\n                    this.markFieldValid(\n                        field_id,\n                        false,\n                        \"RegistrationForm.ERR_PASSWORD_MISSING\"\n                    );\n                } else if (pwd1.length < this.props.minPasswordLength) {\n                    this.markFieldValid(\n                        field_id,\n                        false,\n                        \"RegistrationForm.ERR_PASSWORD_LENGTH\"\n                    );\n                } else {\n                    this.markFieldValid(field_id, true);\n                }\n                break;\n            case FIELD_PASSWORD_CONFIRM:\n                this.markFieldValid(\n                    field_id, pwd1 == pwd2,\n                    \"RegistrationForm.ERR_PASSWORD_MISMATCH\"\n                );\n                break;\n        }\n    },\n\n    markFieldValid: function(field_id, val, error_code) {\n        var fieldValid = this.state.fieldValid;\n        fieldValid[field_id] = val;\n        this.setState({fieldValid: fieldValid});\n        if (!val) {\n            UiEffects.field_input_incorrect(this.fieldElementById(field_id));\n            this.props.onError(error_code);\n        }\n    },\n\n    fieldElementById(field_id) {\n        switch (field_id) {\n            case FIELD_EMAIL:\n                return this.refs.email;\n            case FIELD_USERNAME:\n                return this.refs.username;\n            case FIELD_PASSWORD:\n                return this.refs.password;\n            case FIELD_PASSWORD_CONFIRM:\n                return this.refs.passwordConfirm;\n        }\n    },\n\n    _classForField: function(field_id, baseClass) {\n        let cls = baseClass || '';\n        if (this.state.fieldValid[field_id] === false) {\n            if (cls) cls += ' ';\n            cls += 'error';\n        }\n        return cls;\n    },\n\n    render: function() {\n        var self = this;\n        var emailSection, belowEmailSection, registerButton;\n        if (this.props.showEmail) {\n            emailSection = (\n                <input type=\"text\" ref=\"email\"\n                    autoFocus={true} placeholder=\"Email address (optional)\"\n                    defaultValue={this.props.defaultEmail}\n                    className={this._classForField(FIELD_EMAIL, 'mx_Login_field')}\n                    onBlur={function() {self.validateField(FIELD_EMAIL);}}\n                    value={self.state.email}/>\n            );\n            if (this.props.teamsConfig) {\n                if (this.props.teamsConfig.supportEmail && this.state.showSupportEmail) {\n                    belowEmailSection = (\n                        <p className=\"mx_Login_support\">\n                            Sorry, but your university is not registered with us just yet.&nbsp;\n                            Email us on&nbsp;\n                            <a href={\"mailto:\" + this.props.teamsConfig.supportEmail}>\n                                {this.props.teamsConfig.supportEmail}\n                            </a>&nbsp;\n                            to get your university signed up. Or continue to register with Riot to enjoy our open source platform.\n                        </p>\n                    );\n                } else if (this.state.selectedTeam) {\n                    belowEmailSection = (\n                        <p className=\"mx_Login_support\">\n                            You are registering with {this.state.selectedTeam.name}\n                        </p>\n                    );\n                }\n            }\n        }\n        if (this.props.onRegisterClick) {\n            registerButton = (\n                <input className=\"mx_Login_submit\" type=\"submit\" value=\"Register\" />\n            );\n        }\n\n        var placeholderUserName = \"User name\";\n        if (this.props.guestUsername) {\n            placeholderUserName += \" (default: \" + this.props.guestUsername + \")\";\n        }\n\n        return (\n            <div>\n                <form onSubmit={this.onSubmit}>\n                    {emailSection}\n                    {belowEmailSection}\n                    <input type=\"text\" ref=\"username\"\n                        placeholder={ placeholderUserName } defaultValue={this.props.defaultUsername}\n                        className={this._classForField(FIELD_USERNAME, 'mx_Login_field')}\n                        onBlur={function() {self.validateField(FIELD_USERNAME);}} />\n                    <br />\n                    { this.props.guestUsername ?\n                        <div className=\"mx_Login_fieldLabel\">Setting a user name will create a fresh account</div> : null\n                    }\n                    <input type=\"password\" ref=\"password\"\n                        className={this._classForField(FIELD_PASSWORD, 'mx_Login_field')}\n                        onBlur={function() {self.validateField(FIELD_PASSWORD);}}\n                        placeholder=\"Password\" defaultValue={this.props.defaultPassword} />\n                    <br />\n                    <input type=\"password\" ref=\"passwordConfirm\"\n                        placeholder=\"Confirm password\"\n                        className={this._classForField(FIELD_PASSWORD_CONFIRM, 'mx_Login_field')}\n                        onBlur={function() {self.validateField(FIELD_PASSWORD_CONFIRM);}}\n                        defaultValue={this.props.defaultPassword} />\n                    <br />\n                    {registerButton}\n                </form>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/login/ServerConfig.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require('../../../Modal');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[652,655],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":48,"column":44,"nodeType":"Property","source":"        delayTimeMs: React.PropTypes.number // time to wait before invoking onChanged","fix":{"range":[1890,1890],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":58,"column":27,"nodeType":"Property","source":"            delayTimeMs: 0","fix":{"range":[2199,2199],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":69,"column":80,"nodeType":"Property","source":"                           (this.props.customIsUrl !== this.props.defaultIsUrl)","fix":{"range":[2710,2710],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":75,"column":13,"nodeType":"ThisExpression","source":"            this._hsTimeoutId = this._waitThenInvoke(this._hsTimeoutId, function() {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":75,"column":33,"nodeType":"ThisExpression","source":"            this._hsTimeoutId = this._waitThenInvoke(this._hsTimeoutId, function() {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":75,"column":54,"nodeType":"ThisExpression","source":"            this._hsTimeoutId = this._waitThenInvoke(this._hsTimeoutId, function() {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":76,"column":17,"nodeType":"VariableDeclaration","source":"                var hsUrl = this.state.hs_url.trim().replace(/\\/$/, \"\");","fix":{"range":[2933,2936],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":76,"column":29,"nodeType":"ThisExpression","source":"                var hsUrl = this.state.hs_url.trim().replace(/\\/$/, \"\");"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":77,"column":43,"nodeType":"ThisExpression","source":"                if (hsUrl === \"\") hsUrl = this.props.defaultHsUrl;"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":78,"column":17,"nodeType":"ThisExpression","source":"                this.props.onHsUrlChanged(hsUrl);"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":85,"column":13,"nodeType":"ThisExpression","source":"            this._isTimeoutId = this._waitThenInvoke(this._isTimeoutId, function() {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":85,"column":33,"nodeType":"ThisExpression","source":"            this._isTimeoutId = this._waitThenInvoke(this._isTimeoutId, function() {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":85,"column":54,"nodeType":"ThisExpression","source":"            this._isTimeoutId = this._waitThenInvoke(this._isTimeoutId, function() {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":86,"column":17,"nodeType":"VariableDeclaration","source":"                var isUrl = this.state.is_url.trim().replace(/\\/$/, \"\");","fix":{"range":[3350,3353],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":86,"column":29,"nodeType":"ThisExpression","source":"                var isUrl = this.state.is_url.trim().replace(/\\/$/, \"\");"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":87,"column":43,"nodeType":"ThisExpression","source":"                if (isUrl === \"\") isUrl = this.props.defaultIsUrl;"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":88,"column":17,"nodeType":"ThisExpression","source":"                this.props.onIsUrlChanged(isUrl);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":102,"column":35,"nodeType":"Property","source":"            configVisible: visible","fix":{"range":[3892,3892],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":107,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4066,4075],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":115,"column":9,"nodeType":"VariableDeclaration","source":"        var CustomServerDialog = sdk.getComponent('login.CustomServerDialog');","fix":{"range":[4256,4259],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":120,"column":9,"nodeType":"VariableDeclaration","source":"        var serverConfigStyle = {};","fix":{"range":[4416,4419],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":123,"column":9,"nodeType":"VariableDeclaration","source":"        var toggleButton;","fix":{"range":[4534,4537],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 127 exceeds the maximum line length of 90.","line":127,"column":1,"nodeType":"Program","source":"                    <input className=\"mx_Login_radio\" id=\"basic\" name=\"configVisible\" type=\"radio\""},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":129,"column":25,"nodeType":"JSXAttribute","source":"                        onChange={this.onServerConfigVisibleChange.bind(this, false)} />"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":129,"column":35,"nodeType":"MemberExpression","source":"                        onChange={this.onServerConfigVisibleChange.bind(this, false)} />"},{"ruleId":"max-len","severity":1,"message":"Line 134 exceeds the maximum line length of 90.","line":134,"column":1,"nodeType":"Program","source":"                    <input className=\"mx_Login_radio\" id=\"advanced\" name=\"configVisible\" type=\"radio\""},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":136,"column":25,"nodeType":"JSXAttribute","source":"                        onChange={this.onServerConfigVisibleChange.bind(this, true)} />"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":136,"column":35,"nodeType":"MemberExpression","source":"                        onChange={this.onServerConfigVisibleChange.bind(this, true)} />"},{"ruleId":"max-len","severity":1,"message":"Line 149 exceeds the maximum line length of 90.","line":149,"column":1,"nodeType":"Program","source":"                    <label className=\"mx_Login_label mx_ServerConfig_hslabel\" htmlFor=\"hsurl\">"},{"ruleId":"max-len","severity":1,"message":"Line 157 exceeds the maximum line length of 90.","line":157,"column":1,"nodeType":"Program","source":"                    <label className=\"mx_Login_label mx_ServerConfig_islabel\" htmlFor=\"isurl\">"},{"ruleId":"max-len","severity":1,"message":"Line 165 exceeds the maximum line length of 90.","line":165,"column":1,"nodeType":"Program","source":"                    <a className=\"mx_ServerConfig_help\" href=\"#\" onClick={this.showHelpPopup}>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":172,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[6895,6895],"text":","}}],"errorCount":21,"warningCount":14,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar Modal = require('../../../Modal');\nvar sdk = require('../../../index');\n\n/**\n * A pure UI component which displays the HS and IS to use.\n */\nmodule.exports = React.createClass({\n    displayName: 'ServerConfig',\n\n    propTypes: {\n        onHsUrlChanged: React.PropTypes.func,\n        onIsUrlChanged: React.PropTypes.func,\n\n        // default URLs are defined in config.json (or the hardcoded defaults)\n        // they are used if the user has not overridden them with a custom URL.\n        // In other words, if the custom URL is blank, the default is used.\n        defaultHsUrl: React.PropTypes.string, // e.g. https://matrix.org\n        defaultIsUrl: React.PropTypes.string, // e.g. https://vector.im\n\n        // custom URLs are explicitly provided by the user and override the\n        // default URLs.  The user enters them via the component's input fields,\n        // which is reflected on these properties whenever on..UrlChanged fires.\n        // They are persisted in localStorage by MatrixClientPeg, and so can\n        // override the default URLs when the component initially loads.\n        customHsUrl: React.PropTypes.string,\n        customIsUrl: React.PropTypes.string,\n\n        withToggleButton: React.PropTypes.bool,\n        delayTimeMs: React.PropTypes.number // time to wait before invoking onChanged\n    },\n\n    getDefaultProps: function() {\n        return {\n            onHsUrlChanged: function() {},\n            onIsUrlChanged: function() {},\n            customHsUrl: \"\",\n            customIsUrl: \"\",\n            withToggleButton: false,\n            delayTimeMs: 0\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            hs_url: this.props.customHsUrl,\n            is_url: this.props.customIsUrl,\n            // if withToggleButton is false, then show the config all the time given we have no way otherwise of making it visible\n            configVisible: !this.props.withToggleButton ||\n                           (this.props.customHsUrl !== this.props.defaultHsUrl) ||\n                           (this.props.customIsUrl !== this.props.defaultIsUrl)\n        };\n    },\n\n    onHomeserverChanged: function(ev) {\n        this.setState({hs_url: ev.target.value}, function() {\n            this._hsTimeoutId = this._waitThenInvoke(this._hsTimeoutId, function() {\n                var hsUrl = this.state.hs_url.trim().replace(/\\/$/, \"\");\n                if (hsUrl === \"\") hsUrl = this.props.defaultHsUrl;\n                this.props.onHsUrlChanged(hsUrl);\n            });\n        });\n    },\n\n    onIdentityServerChanged: function(ev) {\n        this.setState({is_url: ev.target.value}, function() {\n            this._isTimeoutId = this._waitThenInvoke(this._isTimeoutId, function() {\n                var isUrl = this.state.is_url.trim().replace(/\\/$/, \"\");\n                if (isUrl === \"\") isUrl = this.props.defaultIsUrl;\n                this.props.onIsUrlChanged(isUrl);\n            });\n        });\n    },\n\n    _waitThenInvoke: function(existingTimeoutId, fn) {\n        if (existingTimeoutId) {\n            clearTimeout(existingTimeoutId);\n        }\n        return setTimeout(fn.bind(this), this.props.delayTimeMs);\n    },\n\n    onServerConfigVisibleChange: function(visible, ev) {\n        this.setState({\n            configVisible: visible\n        });\n        if (!visible) {\n            this.props.onHsUrlChanged(this.props.defaultHsUrl);\n            this.props.onIsUrlChanged(this.props.defaultIsUrl);\n        }\n        else {\n            this.props.onHsUrlChanged(this.state.hs_url);\n            this.props.onIsUrlChanged(this.state.is_url);\n        }\n    },\n\n    showHelpPopup: function() {\n        var CustomServerDialog = sdk.getComponent('login.CustomServerDialog');\n        Modal.createDialog(CustomServerDialog);\n    },\n\n    render: function() {\n        var serverConfigStyle = {};\n        serverConfigStyle.display = this.state.configVisible ? 'block' : 'none';\n\n        var toggleButton;\n        if (this.props.withToggleButton) {\n            toggleButton = (\n                <div style={{ textAlign: 'center' }}>\n                    <input className=\"mx_Login_radio\" id=\"basic\" name=\"configVisible\" type=\"radio\"\n                        checked={!this.state.configVisible}\n                        onChange={this.onServerConfigVisibleChange.bind(this, false)} />\n                    <label className=\"mx_Login_label\" htmlFor=\"basic\">\n                        Default server\n                    </label>\n                    &nbsp;&nbsp;\n                    <input className=\"mx_Login_radio\" id=\"advanced\" name=\"configVisible\" type=\"radio\"\n                        checked={this.state.configVisible}\n                        onChange={this.onServerConfigVisibleChange.bind(this, true)} />\n                    <label className=\"mx_Login_label\" htmlFor=\"advanced\">\n                        Custom server\n                    </label>\n                </div>\n            );\n        }\n\n        return (\n        <div>\n            {toggleButton}\n            <div style={serverConfigStyle}>\n                <div className=\"mx_ServerConfig\">\n                    <label className=\"mx_Login_label mx_ServerConfig_hslabel\" htmlFor=\"hsurl\">\n                        Home server URL\n                    </label>\n                    <input className=\"mx_Login_field\" id=\"hsurl\" type=\"text\"\n                        placeholder={this.props.defaultHsUrl}\n                        disabled={!this.props.withToggleButton}\n                        value={this.state.hs_url}\n                        onChange={this.onHomeserverChanged} />\n                    <label className=\"mx_Login_label mx_ServerConfig_islabel\" htmlFor=\"isurl\">\n                        Identity server URL\n                    </label>\n                    <input className=\"mx_Login_field\" id=\"isurl\" type=\"text\"\n                        placeholder={this.props.defaultIsUrl}\n                        disabled={!this.props.withToggleButton}\n                        value={this.state.is_url}\n                        onChange={this.onIdentityServerChanged} />\n                    <a className=\"mx_ServerConfig_help\" href=\"#\" onClick={this.showHelpPopup}>\n                        What does this mean?\n                    </a>\n                </div>\n            </div>\n        </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/messages/MAudioBody.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'sdk' is defined but never used.","line":23,"column":8,"nodeType":"Identifier","source":"import sdk from '../../../index';"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":38,"column":41,"nodeType":"Property","source":"            playing: !this.state.playing","fix":{"range":[1165,1165],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":52,"column":9,"nodeType":"VariableDeclaration","source":"        var content = this.props.mxEvent.getContent();","fix":{"range":[1487,1490],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":13,"nodeType":"VariableDeclaration","source":"            var decryptedBlob;","fix":{"range":[1624,1627],"text":"let"}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":72,"column":14,"nodeType":"BlockStatement","source":"    render() {","fix":{"range":[2196,2198],"text":"\n"}}],"errorCount":2,"warningCount":3,"source":"/*\n Copyright 2016 OpenMarket Ltd\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n'use strict';\n\nimport React from 'react';\nimport MFileBody from './MFileBody';\n\nimport MatrixClientPeg from '../../../MatrixClientPeg';\nimport sdk from '../../../index';\nimport { decryptFile, readBlobAsDataUri } from '../../../utils/DecryptFile';\n\nexport default class MAudioBody extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playing: false,\n            decryptedUrl: null,\n            decryptedBlob: null,\n            error: null,\n        };\n    }\n    onPlayToggle() {\n        this.setState({\n            playing: !this.state.playing\n        });\n    }\n\n    _getContentUrl() {\n        const content = this.props.mxEvent.getContent();\n        if (content.file !== undefined) {\n            return this.state.decryptedUrl;\n        } else {\n            return MatrixClientPeg.get().mxcUrlToHttp(content.url);\n        }\n    }\n\n    componentDidMount() {\n        var content = this.props.mxEvent.getContent();\n        if (content.file !== undefined && this.state.decryptedUrl === null) {\n            var decryptedBlob;\n            decryptFile(content.file).then(function(blob) {\n                decryptedBlob = blob;\n                return readBlobAsDataUri(decryptedBlob);\n            }).done((url) => {\n                this.setState({\n                    decryptedUrl: url,\n                    decryptedBlob: decryptedBlob,\n                });\n            }, (err) => {\n                console.warn(\"Unable to decrypt attachment: \", err);\n                this.setState({\n                    error: err,\n                });\n            });\n        }\n    }\n\n    render() {\n\n        const content = this.props.mxEvent.getContent();\n\n        if (this.state.error !== null) {\n            return (\n                <span className=\"mx_MAudioBody\" ref=\"body\">\n                    <img src=\"img/warning.svg\" width=\"16\" height=\"16\"/>\n                    Error decrypting audio\n                </span>\n            );\n        }\n\n        if (content.file !== undefined && this.state.decryptedUrl === null) {\n            // Need to decrypt the attachment\n            // The attachment is decrypted in componentDidMount.\n            // For now add an img tag with a 16x16 spinner.\n            // Not sure how tall the audio player is so not sure how tall it should actually be.\n            return (\n                <span className=\"mx_MAudioBody\">\n                    <img src=\"img/spinner.gif\" alt={content.body} width=\"16\" height=\"16\"/>\n                </span>\n            );\n        }\n\n        const contentUrl = this._getContentUrl();\n\n        return (\n            <span className=\"mx_MAudioBody\">\n                <audio src={contentUrl} controls />\n                <MFileBody {...this.props} decryptedBlob={this.state.decryptedBlob} />\n            </span>\n        );\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/messages/MessageEvent.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 46 exceeds the maximum line length of 90.","line":46,"column":1,"nodeType":"Program","source":"        return this.refs.body && this.refs.body.getEventTileOps ? this.refs.body.getEventTileOps() : null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":50,"column":9,"nodeType":"VariableDeclaration","source":"        var UnknownBody = sdk.getComponent('messages.UnknownBody');","fix":{"range":[1501,1504],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":52,"column":9,"nodeType":"VariableDeclaration","source":"        var bodyTypes = {","fix":{"range":[1570,1573],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":59,"column":63,"nodeType":"Property","source":"            'm.video': sdk.getComponent('messages.MVideoBody')","fix":{"range":[2035,2035],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":62,"column":9,"nodeType":"VariableDeclaration","source":"        var content = this.props.mxEvent.getContent();","fix":{"range":[2056,2059],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":63,"column":9,"nodeType":"VariableDeclaration","source":"        var msgtype = content.msgtype;","fix":{"range":[2111,2114],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":64,"column":9,"nodeType":"VariableDeclaration","source":"        var BodyType = UnknownBody;","fix":{"range":[2150,2153],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 72 exceeds the maximum line length of 90.","line":72,"column":1,"nodeType":"Program","source":"        return <BodyType ref=\"body\" mxEvent={this.props.mxEvent} highlights={this.props.highlights}"}],"errorCount":1,"warningCount":9,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sdk = require('../../../index');\n\nmodule.exports = React.createClass({\n    displayName: 'MessageEvent',\n\n    propTypes: {\n        /* the MatrixEvent to show */\n        mxEvent: React.PropTypes.object.isRequired,\n\n        /* a list of words to highlight */\n        highlights: React.PropTypes.array,\n\n        /* link URL for the highlights */\n        highlightLink: React.PropTypes.string,\n\n        /* should show URL previews for this event */\n        showUrlPreview: React.PropTypes.bool,\n\n        /* callback called when dynamic content in events are loaded */\n        onWidgetLoad: React.PropTypes.func,\n\n        /* the shsape of the tile, used */\n        tileShape: React.PropTypes.string,\n    },\n\n    getEventTileOps: function() {\n        return this.refs.body && this.refs.body.getEventTileOps ? this.refs.body.getEventTileOps() : null;\n    },\n\n    render: function() {\n        var UnknownBody = sdk.getComponent('messages.UnknownBody');\n\n        var bodyTypes = {\n            'm.text': sdk.getComponent('messages.TextualBody'),\n            'm.notice': sdk.getComponent('messages.TextualBody'),\n            'm.emote': sdk.getComponent('messages.TextualBody'),\n            'm.image': sdk.getComponent('messages.MImageBody'),\n            'm.file': sdk.getComponent('messages.MFileBody'),\n            'm.audio': sdk.getComponent('messages.MAudioBody'),\n            'm.video': sdk.getComponent('messages.MVideoBody')\n        };\n\n        var content = this.props.mxEvent.getContent();\n        var msgtype = content.msgtype;\n        var BodyType = UnknownBody;\n        if (msgtype && bodyTypes[msgtype]) {\n            BodyType = bodyTypes[msgtype];\n        } else if (content.url) {\n            // Fallback to MFileBody if there's a content URL\n            BodyType = bodyTypes['m.file'];\n        }\n\n        return <BodyType ref=\"body\" mxEvent={this.props.mxEvent} highlights={this.props.highlights}\n                    highlightLink={this.props.highlightLink}\n                    showUrlPreview={this.props.showUrlPreview}\n                    tileShape={this.props.tileShape}\n                    onWidgetLoad={this.props.onWidgetLoad} />;\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/messages/MFileBody.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'q' is defined but never used.","line":26,"column":8,"nodeType":"Identifier","source":"import q from 'q';"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":1,"nodeType":"VariableDeclaration","source":"var tintedDownloadImageURL;","fix":{"range":[969,972],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":1,"nodeType":"VariableDeclaration","source":"var nextMountId = 0;","fix":{"range":[1115,1118],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'event'.","line":118,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'event'.","line":146,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":172,"column":5,"nodeType":"VariableDeclaration","source":"    var cssText = style.cssText;","fix":{"range":[6453,6456],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":176,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < style.length; i++) {"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'content'.","line":197,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":205,"column":9,"nodeType":"VariableDeclaration","source":"        var linkText = 'Attachment';","fix":{"range":[7441,7444],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 264 exceeds the maximum line length of 90.","line":264,"column":1,"nodeType":"Program","source":"        const fileName = content.body && content.body.length > 0 ? content.body : \"Attachment\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":273,"column":17,"nodeType":"VariableDeclaration","source":"                var decrypting = false;","fix":{"range":[10185,10188],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":286,"column":71,"nodeType":"Property","source":"                            description: \"Error decrypting attachment\"","fix":{"range":[10811,10811],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'renderer_url' is not in camel case.","line":322,"column":17,"nodeType":"Identifier","source":"            let renderer_url = DEFAULT_CROSS_ORIGIN_RENDERER;"},{"ruleId":"max-len","severity":1,"message":"Line 323 exceeds the maximum line length of 90.","line":323,"column":1,"nodeType":"Program","source":"            if (this.context.appConfig && this.context.appConfig.cross_origin_renderer_url) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'renderer_url' is not in camel case.","line":324,"column":17,"nodeType":"Identifier","source":"                renderer_url = this.context.appConfig.cross_origin_renderer_url;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'renderer_url' is not in camel case.","line":337,"column":38,"nodeType":"Identifier","source":"                        <iframe src={renderer_url} onLoad={onIframeLoad} ref=\"iframe\"/>"},{"ruleId":"max-len","severity":1,"message":"Line 349 exceeds the maximum line length of 90.","line":349,"column":1,"nodeType":"Program","source":"                            <a className=\"mx_ImageBody_downloadLink\" href={contentUrl} target=\"_blank\">"},{"ruleId":"max-len","severity":1,"message":"Line 353 exceeds the maximum line length of 90.","line":353,"column":1,"nodeType":"Program","source":"                                { content.info && content.info.size ? filesize(content.info.size) : \"\" }"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":358,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[14179,14192],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 364 exceeds the maximum line length of 90.","line":364,"column":1,"nodeType":"Program","source":"                                <img src={tintedDownloadImageURL} width=\"12\" height=\"14\" ref=\"downloadImage\"/>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":372,"column":13,"nodeType":"VariableDeclaration","source":"            var extra = text ? (': ' + text) : '';","fix":{"range":[14735,14738],"text":"let"}}],"errorCount":2,"warningCount":19,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nimport React from 'react';\nimport filesize from 'filesize';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\nimport sdk from '../../../index';\nimport {decryptFile} from '../../../utils/DecryptFile';\nimport Tinter from '../../../Tinter';\nimport request from 'browser-request';\nimport q from 'q';\nimport Modal from '../../../Modal';\n\n\n// A cached tinted copy of \"img/download.svg\"\nvar tintedDownloadImageURL;\n// Track a list of mounted MFileBody instances so that we can update\n// the \"img/download.svg\" when the tint changes.\nvar nextMountId = 0;\nconst mounts = {};\n\n/**\n * Updates the tinted copy of \"img/download.svg\" when the tint changes.\n */\nfunction updateTintedDownloadImage() {\n    // Download the svg as an XML document.\n    // We could cache the XML response here, but since the tint rarely changes\n    // it's probably not worth it.\n    // Also note that we can't use fetch here because fetch doesn't support\n    // file URLs, which the download image will be if we're running from\n    // the filesystem (like in an Electron wrapper).\n    request({uri: \"img/download.svg\"}, (err, response, body) => {\n        if (err) return;\n\n        const svg = new DOMParser().parseFromString(body, \"image/svg+xml\");\n        // Apply the fixups to the XML.\n        const fixups = Tinter.calcSvgFixups([{contentDocument: svg}]);\n        Tinter.applySvgFixups(fixups);\n        // Encoded the fixed up SVG as a data URL.\n        const svgString = new XMLSerializer().serializeToString(svg);\n        tintedDownloadImageURL = \"data:image/svg+xml;base64,\" + window.btoa(svgString);\n        // Notify each mounted MFileBody that the URL has changed.\n        Object.keys(mounts).forEach(function(id) {\n            mounts[id].tint();\n        });\n    });\n}\n\nTinter.registerTintable(updateTintedDownloadImage);\n\n// User supplied content can contain scripts, we have to be careful that\n// we don't accidentally run those script within the same origin as the\n// client. Otherwise those scripts written by remote users can read\n// the access token and end-to-end keys that are in local storage.\n//\n// For attachments downloaded directly from the homeserver we can use\n// Content-Security-Policy headers to disable script execution.\n//\n// But attachments with end-to-end encryption are more difficult to handle.\n// We need to decrypt the attachment on the client and then display it.\n// To display the attachment we need to turn the decrypted bytes into a URL.\n//\n// There are two ways to turn bytes into URLs, data URL and blob URLs.\n// Data URLs aren't suitable for downloading a file because Chrome has a\n// 2MB limit on the size of URLs that can be viewed in the browser or\n// downloaded. This limit does not seem to apply when the url is used as\n// the source attribute of an image tag.\n//\n// Blob URLs are generated using window.URL.createObjectURL and unforuntately\n// for our purposes they inherit the origin of the page that created them.\n// This means that any scripts that run when the URL is viewed will be able\n// to access local storage.\n//\n// The easiest solution is to host the code that generates the blob URL on\n// a different domain to the client.\n// Another possibility is to generate the blob URL within a sandboxed iframe.\n// The downside of using a second domain is that it complicates hosting,\n// the downside of using a sandboxed iframe is that the browers are overly\n// restrictive in what you are allowed to do with the generated URL.\n//\n// For now given how unusable the blobs generated in sandboxed iframes are we\n// default to using a renderer hosted on \"usercontent.riot.im\". This is\n// overridable so that people running their own version of the client can\n// choose a different renderer.\n//\n// To that end the first version of the blob generation will be the following\n// html:\n//\n//      <html><head><script>\n//      window.onmessage=function(e){eval(\"(\"+e.data.code+\")\")(e)}\n//      </script></head><body></body></html>\n//\n// This waits to receive a message event sent using the window.postMessage API.\n// When it receives the event it evals a javascript function in data.code and\n// runs the function passing the event as an argument.\n//\n// In particular it means that the rendering function can be written as a\n// ordinary javascript function which then is turned into a string using\n// toString().\n//\nconst DEFAULT_CROSS_ORIGIN_RENDERER = \"https://usercontent.riot.im/v1.html\";\n\n/**\n * Render the attachment inside the iframe.\n * We can't use imported libraries here so this has to be vanilla JS.\n */\nfunction remoteRender(event) {\n    const data = event.data;\n\n    const img = document.createElement(\"img\");\n    img.id = \"img\";\n    img.src = data.imgSrc;\n\n    const a = document.createElement(\"a\");\n    a.id = \"a\";\n    a.rel = data.rel;\n    a.target = data.target;\n    a.download = data.download;\n    a.style = data.style;\n    a.href = window.URL.createObjectURL(data.blob);\n    a.appendChild(img);\n    a.appendChild(document.createTextNode(data.textContent));\n\n    const body = document.body;\n    // Don't display scrollbars if the link takes more than one line\n    // to display.\n    body.style = \"margin: 0px; overflow: hidden\";\n    body.appendChild(a);\n}\n\n/**\n * Update the tint inside the iframe.\n * We can't use imported libraries here so this has to be vanilla JS.\n */\nfunction remoteSetTint(event) {\n    const data = event.data;\n\n    const img = document.getElementById(\"img\");\n    img.src = data.imgSrc;\n    img.style = data.imgStyle;\n\n    const a = document.getElementById(\"a\");\n    a.style = data.style;\n}\n\n\n/**\n * Get the current CSS style for a DOMElement.\n * @param {HTMLElement} element The element to get the current style of.\n * @return {string} The CSS style encoded as a string.\n */\nfunction computedStyle(element) {\n    if (!element) {\n        return \"\";\n    }\n    const style = window.getComputedStyle(element, null);\n    var cssText = style.cssText;\n    if (cssText == \"\") {\n        // Firefox doesn't implement \".cssText\" for computed styles.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=137687\n        for (var i = 0; i < style.length; i++) {\n            cssText += style[i] + \":\";\n            cssText += style.getPropertyValue(style[i]) + \";\";\n        }\n    }\n    return cssText;\n}\n\nmodule.exports = React.createClass({\n    displayName: 'MFileBody',\n\n    getInitialState: function() {\n        return {\n            decryptedBlob: (this.props.decryptedBlob ? this.props.decryptedBlob : null),\n        };\n    },\n\n    contextTypes: {\n        appConfig: React.PropTypes.object,\n    },\n\n    /**\n     * Extracts a human readable label for the file attachment to use as\n     * link text.\n     *\n     * @params {Object} content The \"content\" key of the matrix event.\n     * @return {string} the human readable link text for the attachment.\n     */\n    presentableTextForFile: function(content) {\n        var linkText = 'Attachment';\n        if (content.body && content.body.length > 0) {\n            // The content body should be the name of the file including a\n            // file extension.\n            linkText = content.body;\n        }\n\n        if (content.info && content.info.size) {\n            // If we know the size of the file then add it as human readable\n            // string to the end of the link text so that the user knows how\n            // big a file they are downloading.\n            // The content.info also contains a MIME-type but we don't display\n            // it since it is \"ugly\", users generally aren't aware what it\n            // means and the type of the attachment can usually be inferrered\n            // from the file extension.\n            linkText += ' (' + filesize(content.info.size) + ')';\n        }\n        return linkText;\n    },\n\n    _getContentUrl: function() {\n        const content = this.props.mxEvent.getContent();\n        return MatrixClientPeg.get().mxcUrlToHttp(content.url);\n    },\n\n    componentDidMount: function() {\n        // Add this to the list of mounted components to receive notifications\n        // when the tint changes.\n        this.id = nextMountId++;\n        mounts[this.id] = this;\n        this.tint();\n    },\n\n    componentWillUnmount: function() {\n        // Remove this from the list of mounted components\n        delete mounts[this.id];\n    },\n\n    tint: function() {\n        // Update our tinted copy of \"img/download.svg\"\n        if (this.refs.downloadImage) {\n            this.refs.downloadImage.src = tintedDownloadImageURL;\n        }\n        if (this.refs.iframe) {\n            // If the attachment is encrypted then the download image\n            // will be inside the iframe so we wont be able to update\n            // it directly.\n            this.refs.iframe.contentWindow.postMessage({\n                code: remoteSetTint.toString(),\n                imgSrc: tintedDownloadImageURL,\n                style: computedStyle(this.refs.dummyLink),\n            }, \"*\");\n        }\n    },\n\n    render: function() {\n        const content = this.props.mxEvent.getContent();\n        const text = this.presentableTextForFile(content);\n        const isEncrypted = content.file !== undefined;\n        const fileName = content.body && content.body.length > 0 ? content.body : \"Attachment\";\n        const contentUrl = this._getContentUrl();\n        const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n\n        if (isEncrypted) {\n            if (this.state.decryptedBlob === null) {\n                // Need to decrypt the attachment\n                // Wait for the user to click on the link before downloading\n                // and decrypting the attachment.\n                var decrypting = false;\n                const decrypt = () => {\n                    if (decrypting) {\n                        return false;\n                    }\n                    decrypting = true;\n                    decryptFile(content.file).then((blob) => {\n                        this.setState({\n                            decryptedBlob: blob,\n                        });\n                    }).catch((err) => {\n                        console.warn(\"Unable to decrypt attachment: \", err);\n                        Modal.createDialog(ErrorDialog, {\n                            description: \"Error decrypting attachment\"\n                        });\n                    }).finally(() => {\n                        decrypting = false;\n                        return;\n                    });\n                };\n\n                return (\n                    <span className=\"mx_MFileBody\" ref=\"body\">\n                        <div className=\"mx_MImageBody_download\">\n                            <a href=\"javascript:void(0)\" onClick={decrypt}>\n                                Decrypt {text}\n                            </a>\n                        </div>\n                    </span>\n                );\n            }\n\n            // When the iframe loads we tell it to render a download link\n            const onIframeLoad = (ev) => {\n                ev.target.contentWindow.postMessage({\n                    code: remoteRender.toString(),\n                    imgSrc: tintedDownloadImageURL,\n                    style: computedStyle(this.refs.dummyLink),\n                    blob: this.state.decryptedBlob,\n                    // Set a download attribute for encrypted files so that the file\n                    // will have the correct name when the user tries to download it.\n                    // We can't provide a Content-Disposition header like we would for HTTP.\n                    download: fileName,\n                    target: \"_blank\",\n                    textContent: \"Download \" + text,\n                }, \"*\");\n            };\n\n            // If the attachment is encryped then put the link inside an iframe.\n            let renderer_url = DEFAULT_CROSS_ORIGIN_RENDERER;\n            if (this.context.appConfig && this.context.appConfig.cross_origin_renderer_url) {\n                renderer_url = this.context.appConfig.cross_origin_renderer_url;\n            }\n            return (\n                <span className=\"mx_MFileBody\">\n                    <div className=\"mx_MImageBody_download\">\n                        <div style={{display: \"none\"}}>\n                            {/*\n                              * Add dummy copy of the \"a\" tag\n                              * We'll use it to learn how the download link\n                              * would have been styled if it was rendered inline.\n                              */}\n                            <a ref=\"dummyLink\"/>\n                        </div>\n                        <iframe src={renderer_url} onLoad={onIframeLoad} ref=\"iframe\"/>\n                    </div>\n                </span>\n            );\n        } else if (contentUrl) {\n            // If the attachment is not encrypted then we check whether we\n            // are being displayed in the room timeline or in a list of\n            // files in the right hand side of the screen.\n            if (this.props.tileShape === \"file_grid\") {\n                return (\n                    <span className=\"mx_MFileBody\">\n                        <div className=\"mx_MImageBody_download\">\n                            <a className=\"mx_ImageBody_downloadLink\" href={contentUrl} target=\"_blank\">\n                                { fileName }\n                            </a>\n                            <div className=\"mx_MImageBody_size\">\n                                { content.info && content.info.size ? filesize(content.info.size) : \"\" }\n                            </div>\n                        </div>\n                    </span>\n                );\n            }\n            else {\n                return (\n                    <span className=\"mx_MFileBody\">\n                        <div className=\"mx_MImageBody_download\">\n                            <a href={contentUrl} target=\"_blank\" rel=\"noopener\">\n                                <img src={tintedDownloadImageURL} width=\"12\" height=\"14\" ref=\"downloadImage\"/>\n                                Download {text}\n                            </a>\n                        </div>\n                    </span>\n                );\n            }\n        } else {\n            var extra = text ? (': ' + text) : '';\n            return <span className=\"mx_MFileBody\">\n                Invalid file{extra}\n            </span>;\n        }\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/messages/MImageBody.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":45,"column":24,"nodeType":"Property","source":"            error: null","fix":{"range":[1422,1422],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":58,"column":44,"nodeType":"Property","source":"                mxEvent: this.props.mxEvent","fix":{"range":[1841,1841],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":80,"column":9,"nodeType":"VariableDeclaration","source":"        var imgElement = e.target;","fix":{"range":[2417,2420],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":88,"column":9,"nodeType":"VariableDeclaration","source":"        var imgElement = e.target;","fix":{"range":[2600,2603],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":118,"column":13,"nodeType":"VariableDeclaration","source":"            var thumbnailPromise = q(null);","fix":{"range":[3639,3642],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":121,"column":48,"nodeType":"MemberExpression","source":"                    content.info.thumbnail_file","fix":{"range":[3813,3813],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":126,"column":13,"nodeType":"VariableDeclaration","source":"            var decryptedBlob;","fix":{"range":[3952,3955],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":171,"column":9,"nodeType":"VariableDeclaration","source":"        var thumbHeight = null;","fix":{"range":[5736,5739],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 173 exceeds the maximum line length of 90.","line":173,"column":1,"nodeType":"Program","source":"            thumbHeight = ImageUtils.thumbHeight(content.info.w, content.info.h, timelineWidth, maxHeight);"},{"ruleId":"no-unused-vars","severity":2,"message":"'TintableSvg' is assigned a value but never used.","line":180,"column":15,"nodeType":"Identifier","source":"        const TintableSvg = sdk.getComponent(\"elements.TintableSvg\");"},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":192,"column":77,"nodeType":"BlockStatement","source":"        if (content.file !== undefined && this.state.decryptedUrl === null) {","fix":{"range":[6547,6549],"text":"\n"}},{"ruleId":"max-len","severity":1,"message":"Line 204 exceeds the maximum line length of 90.","line":204,"column":1,"nodeType":"Program","source":"                        <img src=\"img/spinner.gif\" alt={content.body} width=\"32\" height=\"32\" style={{"},{"ruleId":"max-len","severity":1,"message":"Line 219 exceeds the maximum line length of 90.","line":219,"column":1,"nodeType":"Program","source":"                        <img className=\"mx_MImageBody_thumbnail\" src={thumbUrl} ref=\"image\""}],"errorCount":4,"warningCount":9,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nimport React from 'react';\nimport MFileBody from './MFileBody';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\nimport ImageUtils from '../../../ImageUtils';\nimport Modal from '../../../Modal';\nimport sdk from '../../../index';\nimport dis from '../../../dispatcher';\nimport { decryptFile, readBlobAsDataUri } from '../../../utils/DecryptFile';\nimport q from 'q';\n\nmodule.exports = React.createClass({\n    displayName: 'MImageBody',\n\n    propTypes: {\n        /* the MatrixEvent to show */\n        mxEvent: React.PropTypes.object.isRequired,\n\n        /* called when the image has loaded */\n        onWidgetLoad: React.PropTypes.func.isRequired,\n    },\n\n    getInitialState: function() {\n        return {\n            decryptedUrl: null,\n            decryptedThumbnailUrl: null,\n            decryptedBlob: null,\n            error: null\n        };\n    },\n\n\n    onClick: function onClick(ev) {\n        if (ev.button == 0 && !ev.metaKey) {\n            ev.preventDefault();\n            const content = this.props.mxEvent.getContent();\n            const httpUrl = this._getContentUrl();\n            const ImageView = sdk.getComponent(\"elements.ImageView\");\n            const params = {\n                src: httpUrl,\n                mxEvent: this.props.mxEvent\n            };\n\n            if (content.info) {\n                params.width = content.info.w;\n                params.height = content.info.h;\n                params.fileSize = content.info.size;\n            }\n\n            Modal.createDialog(ImageView, params, \"mx_Dialog_lightbox\");\n        }\n    },\n\n    _isGif: function() {\n        const content = this.props.mxEvent.getContent();\n        return (content && content.info && content.info.mimetype === \"image/gif\");\n    },\n\n    onImageEnter: function(e) {\n        if (!this._isGif()) {\n            return;\n        }\n        var imgElement = e.target;\n        imgElement.src = this._getContentUrl();\n    },\n\n    onImageLeave: function(e) {\n        if (!this._isGif()) {\n            return;\n        }\n        var imgElement = e.target;\n        imgElement.src = this._getThumbUrl();\n    },\n\n    _getContentUrl: function() {\n        const content = this.props.mxEvent.getContent();\n        if (content.file !== undefined) {\n            return this.state.decryptedUrl;\n        } else {\n            return MatrixClientPeg.get().mxcUrlToHttp(content.url);\n        }\n    },\n\n    _getThumbUrl: function() {\n        const content = this.props.mxEvent.getContent();\n        if (content.file !== undefined) {\n            if (this.state.decryptedThumbnailUrl) {\n                return this.state.decryptedThumbnailUrl;\n            }\n            return this.state.decryptedUrl;\n        } else {\n            return MatrixClientPeg.get().mxcUrlToHttp(content.url, 800, 600);\n        }\n    },\n\n    componentDidMount: function() {\n        this.dispatcherRef = dis.register(this.onAction);\n        this.fixupHeight();\n        const content = this.props.mxEvent.getContent();\n        if (content.file !== undefined && this.state.decryptedUrl === null) {\n            var thumbnailPromise = q(null);\n            if (content.info.thumbnail_file) {\n                thumbnailPromise = decryptFile(\n                    content.info.thumbnail_file\n                ).then(function(blob) {\n                    return readBlobAsDataUri(blob);\n                });\n            }\n            var decryptedBlob;\n            thumbnailPromise.then((thumbnailUrl) => {\n                return decryptFile(content.file).then(function(blob) {\n                    decryptedBlob = blob;\n                    return readBlobAsDataUri(blob);\n                }).then((contentUrl) => {\n                    this.setState({\n                        decryptedUrl: contentUrl,\n                        decryptedThumbnailUrl: thumbnailUrl,\n                        decryptedBlob: decryptedBlob,\n                    });\n                    this.props.onWidgetLoad();\n                });\n            }).catch((err) => {\n                console.warn(\"Unable to decrypt attachment: \", err);\n                // Set a placeholder image when we can't decrypt the image.\n                this.setState({\n                    error: err,\n                });\n            }).done();\n        }\n    },\n\n    componentWillUnmount: function() {\n        dis.unregister(this.dispatcherRef);\n    },\n\n    onAction: function(payload) {\n        if (payload.action === \"timeline_resize\") {\n            this.fixupHeight();\n        }\n    },\n\n    fixupHeight: function() {\n        if (!this.refs.image) {\n            console.warn(\"Refusing to fix up height on MImageBody with no image element\");\n            return;\n        }\n\n        const content = this.props.mxEvent.getContent();\n        const timelineWidth = this.refs.body.offsetWidth;\n        const maxHeight = 600; // let images take up as much width as they can so long as the height doesn't exceed 600px.\n        // the alternative here would be 600*timelineWidth/800; to scale them down to fit inside a 4:3 bounding box\n\n        //console.log(\"trying to fit image into timelineWidth of \" + this.refs.body.offsetWidth + \" or \" + this.refs.body.clientWidth);\n        var thumbHeight = null;\n        if (content.info) {\n            thumbHeight = ImageUtils.thumbHeight(content.info.w, content.info.h, timelineWidth, maxHeight);\n        }\n        this.refs.image.style.height = thumbHeight + \"px\";\n        // console.log(\"Image height now\", thumbHeight);\n    },\n\n    render: function() {\n        const TintableSvg = sdk.getComponent(\"elements.TintableSvg\");\n        const content = this.props.mxEvent.getContent();\n\n        if (this.state.error !== null) {\n            return (\n                <span className=\"mx_MImageBody\" ref=\"body\">\n                    <img src=\"img/warning.svg\" width=\"16\" height=\"16\"/>\n                    Error decrypting image\n                </span>\n            );\n        }\n\n        if (content.file !== undefined && this.state.decryptedUrl === null) {\n\n            // Need to decrypt the attachment\n            // The attachment is decrypted in componentDidMount.\n            // For now add an img tag with a spinner.\n            return (\n                <span className=\"mx_MImageBody\" ref=\"body\">\n                    <div className=\"mx_MImageBody_thumbnail\" ref=\"image\" style={{\n                        \"display\": \"flex\",\n                        \"alignItems\": \"center\",\n                        \"width\": \"100%\",\n                    }}>\n                        <img src=\"img/spinner.gif\" alt={content.body} width=\"32\" height=\"32\" style={{\n                            \"margin\": \"auto\",\n                        }}/>\n                    </div>\n                </span>\n            );\n        }\n\n        const contentUrl = this._getContentUrl();\n        const thumbUrl = this._getThumbUrl();\n\n        if (thumbUrl) {\n            return (\n                <span className=\"mx_MImageBody\" ref=\"body\">\n                    <a href={contentUrl} onClick={ this.onClick }>\n                        <img className=\"mx_MImageBody_thumbnail\" src={thumbUrl} ref=\"image\"\n                            alt={content.body}\n                            onMouseEnter={this.onImageEnter}\n                            onMouseLeave={this.onImageLeave} />\n                    </a>\n                    <MFileBody {...this.props} decryptedBlob={this.state.decryptedBlob} />\n                </span>\n            );\n        } else if (content.body) {\n            return (\n                <span className=\"mx_MImageBody\">\n                    Image '{content.body}' cannot be displayed.\n                </span>\n            );\n        } else {\n            return (\n                <span className=\"mx_MImageBody\">\n                    This image cannot be displayed.\n                </span>\n            );\n        }\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/messages/MVideoBody.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Model' is defined but never used.","line":22,"column":8,"nodeType":"Identifier","source":"import Model from '../../../Modal';"},{"ruleId":"no-unused-vars","severity":2,"message":"'sdk' is defined but never used.","line":23,"column":8,"nodeType":"Identifier","source":"import sdk from '../../../index';"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":57,"column":9,"nodeType":"VariableDeclaration","source":"        var widthMulti = thumbWidth / fullWidth;","fix":{"range":[1809,1812],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":58,"column":9,"nodeType":"VariableDeclaration","source":"        var heightMulti = thumbHeight / fullHeight;","fix":{"range":[1858,1861],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":62,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2062,2071],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":92,"column":13,"nodeType":"VariableDeclaration","source":"            var thumbnailPromise = q(null);","fix":{"range":[3046,3049],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":95,"column":48,"nodeType":"MemberExpression","source":"                    content.info.thumbnail_file","fix":{"range":[3220,3220],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":100,"column":13,"nodeType":"VariableDeclaration","source":"            var decryptedBlob;","fix":{"range":[3359,3362],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 147 exceeds the maximum line length of 90.","line":147,"column":1,"nodeType":"Program","source":"                        <img src=\"img/spinner.gif\" alt={content.body} width=\"16\" height=\"16\"/>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":156,"column":9,"nodeType":"VariableDeclaration","source":"        var height = null;","fix":{"range":[5494,5497],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":157,"column":9,"nodeType":"VariableDeclaration","source":"        var width = null;","fix":{"range":[5521,5524],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":158,"column":9,"nodeType":"VariableDeclaration","source":"        var poster = null;","fix":{"range":[5547,5550],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":159,"column":9,"nodeType":"VariableDeclaration","source":"        var preload = \"metadata\";","fix":{"range":[5574,5577],"text":"let"}}],"errorCount":3,"warningCount":10,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nimport React from 'react';\nimport MFileBody from './MFileBody';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\nimport Model from '../../../Modal';\nimport sdk from '../../../index';\nimport { decryptFile, readBlobAsDataUri } from '../../../utils/DecryptFile';\nimport q from 'q';\n\nmodule.exports = React.createClass({\n    displayName: 'MVideoBody',\n\n    propTypes: {\n        /* the MatrixEvent to show */\n        mxEvent: React.PropTypes.object.isRequired,\n\n        /* called when the video has loaded */\n        onWidgetLoad: React.PropTypes.func.isRequired,\n    },\n\n    getInitialState: function() {\n        return {\n            decryptedUrl: null,\n            decryptedThumbnailUrl: null,\n            decryptedBlob: null,\n            error: null,\n        };\n    },\n\n    thumbScale: function(fullWidth, fullHeight, thumbWidth, thumbHeight) {\n        if (!fullWidth || !fullHeight) {\n            // Cannot calculate thumbnail height for image: missing w/h in metadata. We can't even\n            // log this because it's spammy\n            return undefined;\n        }\n        if (fullWidth < thumbWidth && fullHeight < thumbHeight) {\n            // no scaling needs to be applied\n            return 1;\n        }\n        var widthMulti = thumbWidth / fullWidth;\n        var heightMulti = thumbHeight / fullHeight;\n        if (widthMulti < heightMulti) {\n            // width is the dominant dimension so scaling will be fixed on that\n            return widthMulti;\n        }\n        else {\n            // height is the dominant dimension so scaling will be fixed on that\n            return heightMulti;\n        }\n    },\n\n    _getContentUrl: function() {\n        const content = this.props.mxEvent.getContent();\n        if (content.file !== undefined) {\n            return this.state.decryptedUrl;\n        } else {\n            return MatrixClientPeg.get().mxcUrlToHttp(content.url);\n        }\n    },\n\n    _getThumbUrl: function() {\n        const content = this.props.mxEvent.getContent();\n        if (content.file !== undefined) {\n            return this.state.decryptedThumbnailUrl;\n        } else if (content.info.thumbnail_url) {\n            return MatrixClientPeg.get().mxcUrlToHttp(content.info.thumbnail_url);\n        } else {\n            return null;\n        }\n    },\n\n    componentDidMount: function() {\n        const content = this.props.mxEvent.getContent();\n        if (content.file !== undefined && this.state.decryptedUrl === null) {\n            var thumbnailPromise = q(null);\n            if (content.info.thumbnail_file) {\n                thumbnailPromise = decryptFile(\n                    content.info.thumbnail_file\n                ).then(function(blob) {\n                    return readBlobAsDataUri(blob);\n                });\n            }\n            var decryptedBlob;\n            thumbnailPromise.then((thumbnailUrl) => {\n                return decryptFile(content.file).then(function(blob) {\n                    decryptedBlob = blob;\n                    return readBlobAsDataUri(blob);\n                }).then((contentUrl) => {\n                    this.setState({\n                        decryptedUrl: contentUrl,\n                        decryptedThumbnailUrl: thumbnailUrl,\n                        decryptedBlob: decryptedBlob,\n                    });\n                    this.props.onWidgetLoad();\n                });\n            }).catch((err) => {\n                console.warn(\"Unable to decrypt attachment: \", err);\n                // Set a placeholder image when we can't decrypt the image.\n                this.setState({\n                    error: err,\n                });\n            }).done();\n        }\n    },\n\n    render: function() {\n        const content = this.props.mxEvent.getContent();\n\n        if (this.state.error !== null) {\n            return (\n                <span className=\"mx_MVideoBody\" ref=\"body\">\n                    <img src=\"img/warning.svg\" width=\"16\" height=\"16\"/>\n                    Error decrypting video\n                </span>\n            );\n        }\n\n        if (content.file !== undefined && this.state.decryptedUrl === null) {\n            // Need to decrypt the attachment\n            // The attachment is decrypted in componentDidMount.\n            // For now add an img tag with a spinner.\n            return (\n                <span className=\"mx_MVideoBody\" ref=\"body\">\n                    <div className=\"mx_MImageBody_thumbnail\" ref=\"image\" style={{\n                        \"display\": \"flex\",\n                        \"align-items\": \"center\",\n                        \"justify-items\": \"center\",\n                        \"width\": \"100%\",\n                    }}>\n                        <img src=\"img/spinner.gif\" alt={content.body} width=\"16\" height=\"16\"/>\n                    </div>\n                </span>\n            );\n        }\n\n        const contentUrl = this._getContentUrl();\n        const thumbUrl = this._getThumbUrl();\n\n        var height = null;\n        var width = null;\n        var poster = null;\n        var preload = \"metadata\";\n        if (content.info) {\n            const scale = this.thumbScale(content.info.w, content.info.h, 480, 360);\n            if (scale) {\n                width = Math.floor(content.info.w * scale);\n                height = Math.floor(content.info.h * scale);\n            }\n\n            if (thumbUrl) {\n                poster = thumbUrl;\n                preload = \"none\";\n            }\n        }\n\n        return (\n            <span className=\"mx_MVideoBody\">\n                <video className=\"mx_MVideoBody\" src={contentUrl} alt={content.body}\n                    controls preload={preload} autoPlay={false}\n                    height={height} width={width} poster={poster}>\n                </video>\n                <MFileBody {...this.props} decryptedBlob={this.state.decryptedBlob} />\n            </span>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/messages/SenderProfile.js","messages":[],"errorCount":0,"warningCount":0},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/messages/TextualBody.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require('react-dom');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var highlight = require('highlight.js');","fix":{"range":[650,653],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var HtmlUtils = require('../../../HtmlUtils');","fix":{"range":[691,694],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var linkify = require('linkifyjs');","fix":{"range":[738,741],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var linkifyElement = require('linkifyjs/element');","fix":{"range":[774,777],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var linkifyMatrix = require('../../../linkify-matrix');","fix":{"range":[825,828],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[881,884],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var ScalarAuthClient = require(\"../../../ScalarAuthClient\");","fix":{"range":[918,921],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[979,982],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var SdkConfig = require('../../../SdkConfig');","fix":{"range":[1018,1021],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":109,"column":13,"nodeType":"VariableDeclaration","source":"            var links = this.findLinks(this.refs.content.children);","fix":{"range":[3821,3824],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 117 exceeds the maximum line length of 90.","line":117,"column":1,"nodeType":"Program","source":"                    var hidden = global.localStorage.getItem(\"hide_preview_\" + this.props.mxEvent.getId());"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":117,"column":21,"nodeType":"VariableDeclaration","source":"                    var hidden = global.localStorage.getItem(\"hide_preview_\" + this.props.mxEvent.getId());","fix":{"range":[4194,4197],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":125,"column":9,"nodeType":"VariableDeclaration","source":"        var links = [];","fix":{"range":[4434,4437],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":126,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < nodes.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":127,"column":13,"nodeType":"VariableDeclaration","source":"            var node = nodes[i];","fix":{"range":[4511,4514],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":129,"column":13,"nodeType":"Punctuator","source":"            {","fix":{"range":[4598,4611],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":133,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[4734,4747],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":136,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[4848,4861],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":148,"column":9,"nodeType":"Punctuator","source":"        {","fix":{"range":[5247,5256],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":158,"column":9,"nodeType":"Punctuator","source":"        {","fix":{"range":[5710,5719],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":160,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[5755,5764],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":162,"column":13,"nodeType":"VariableDeclaration","source":"            var url = node.getAttribute(\"href\");","fix":{"range":[5783,5786],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":163,"column":13,"nodeType":"VariableDeclaration","source":"            var host = url.match(/^https?:\\/\\/(.*?)(\\/|$)/)[1];","fix":{"range":[5832,5835],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":173,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[6330,6343],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 185 exceeds the maximum line length of 90.","line":185,"column":1,"nodeType":"Program","source":"            global.localStorage.setItem(\"hide_preview_\" + this.props.mxEvent.getId(), \"1\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":191,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[6841,6844],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 200 exceeds the maximum line length of 90.","line":200,"column":1,"nodeType":"Program","source":"                    global.localStorage.removeItem(\"hide_preview_\" + self.props.mxEvent.getId());"},{"ruleId":"prefer-const","severity":1,"message":"'scalarClient' is never reassigned. Use 'const' instead.","line":216,"column":13,"nodeType":"Identifier","source":"        let scalarClient = new ScalarAuthClient();","fix":{"range":[7910,7913],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'completeUrl' is never reassigned. Use 'const' instead.","line":218,"column":17,"nodeType":"Identifier","source":"            let completeUrl = scalarClient.getStarterLink(starterLink);","fix":{"range":[8009,8012],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'QuestionDialog' is never reassigned. Use 'const' instead.","line":219,"column":17,"nodeType":"Identifier","source":"            let QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[8081,8084],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'integrationsUrl' is never reassigned. Use 'const' instead.","line":220,"column":17,"nodeType":"Identifier","source":"            let integrationsUrl = SdkConfig.get().integrations_ui_url;","fix":{"range":[8158,8161],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 225 exceeds the maximum line length of 90.","line":225,"column":1,"nodeType":"Program","source":"                        You are about to taken to a third-party site so you can authenticate your account for use with {integrationsUrl}.<br/>"},{"ruleId":"prefer-const","severity":1,"message":"'width' is never reassigned. Use 'const' instead.","line":233,"column":25,"nodeType":"Identifier","source":"                    let width = window.screen.width > 1024 ? 1024 : window.screen.width;","fix":{"range":[8784,8787],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'height' is never reassigned. Use 'const' instead.","line":234,"column":25,"nodeType":"Identifier","source":"                    let height = window.screen.height > 800 ? 800 : window.screen.height;","fix":{"range":[8873,8876],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'left' is never reassigned. Use 'const' instead.","line":235,"column":25,"nodeType":"Identifier","source":"                    let left = (window.screen.width - width) / 2;","fix":{"range":[8963,8966],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'top' is never reassigned. Use 'const' instead.","line":236,"column":25,"nodeType":"Identifier","source":"                    let top = (window.screen.height - height) / 2;","fix":{"range":[9029,9032],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 237 exceeds the maximum line length of 90.","line":237,"column":1,"nodeType":"Program","source":"                    window.open(completeUrl, '_blank', `height=${height}, width=${width}, top=${top}, left=${left},`);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":245,"column":9,"nodeType":"VariableDeclaration","source":"        var mxEvent = this.props.mxEvent;","fix":{"range":[9349,9352],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":246,"column":9,"nodeType":"VariableDeclaration","source":"        var content = mxEvent.getContent();","fix":{"range":[9391,9394],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":248,"column":9,"nodeType":"VariableDeclaration","source":"        var body = HtmlUtils.bodyToHtml(content, this.props.highlights, {});","fix":{"range":[9436,9439],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":252,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[9625,9634],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 253 exceeds the maximum line length of 90.","line":253,"column":1,"nodeType":"Program","source":"        else if (content.data && typeof content.data[\"org.matrix.neb.starter_link\"] === \"string\") {"},{"ruleId":"max-len","severity":1,"message":"Line 254 exceeds the maximum line length of 90.","line":254,"column":1,"nodeType":"Program","source":"            body = <a href=\"#\" onClick={ this.onStarterLinkClick.bind(this, content.data[\"org.matrix.neb.starter_link\"]) }>{ body }</a>;"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":254,"column":32,"nodeType":"JSXAttribute","source":"            body = <a href=\"#\" onClick={ this.onStarterLinkClick.bind(this, content.data[\"org.matrix.neb.starter_link\"]) }>{ body }</a>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":257,"column":9,"nodeType":"VariableDeclaration","source":"        var widgets;","fix":{"range":[9882,9885],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 258 exceeds the maximum line length of 90.","line":258,"column":1,"nodeType":"Program","source":"        if (this.state.links.length && !this.state.widgetHidden && this.props.showUrlPreview) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":259,"column":13,"nodeType":"VariableDeclaration","source":"            var LinkPreviewWidget = sdk.getComponent('rooms.LinkPreviewWidget');","fix":{"range":[10003,10006],"text":"let"}},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":271,"column":13,"nodeType":"SwitchCase","source":"            case \"m.emote\":"}],"errorCount":2,"warningCount":48,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar highlight = require('highlight.js');\nvar HtmlUtils = require('../../../HtmlUtils');\nvar linkify = require('linkifyjs');\nvar linkifyElement = require('linkifyjs/element');\nvar linkifyMatrix = require('../../../linkify-matrix');\nvar sdk = require('../../../index');\nvar ScalarAuthClient = require(\"../../../ScalarAuthClient\");\nvar Modal = require(\"../../../Modal\");\nvar SdkConfig = require('../../../SdkConfig');\n\nlinkifyMatrix(linkify);\n\nmodule.exports = React.createClass({\n    displayName: 'TextualBody',\n\n    propTypes: {\n        /* the MatrixEvent to show */\n        mxEvent: React.PropTypes.object.isRequired,\n\n        /* a list of words to highlight */\n        highlights: React.PropTypes.array,\n\n        /* link URL for the highlights */\n        highlightLink: React.PropTypes.string,\n\n        /* should show URL previews for this event */\n        showUrlPreview: React.PropTypes.bool,\n\n        /* callback for when our widget has loaded */\n        onWidgetLoad: React.PropTypes.func,\n    },\n\n    getInitialState: function() {\n        return {\n            // the URLs (if any) to be previewed with a LinkPreviewWidget\n            // inside this TextualBody.\n            links: [],\n\n            // track whether the preview widget is hidden\n            widgetHidden: false,\n        };\n    },\n\n    componentDidMount: function() {\n        this._unmounted = false;\n\n        linkifyElement(this.refs.content, linkifyMatrix.options);\n        this.calculateUrlPreview();\n\n        if (this.props.mxEvent.getContent().format === \"org.matrix.custom.html\") {\n            const blocks = ReactDOM.findDOMNode(this).getElementsByTagName(\"code\");\n            if (blocks.length > 0) {\n                // Do this asynchronously: parsing code takes time and we don't\n                // need to block the DOM update on it.\n                setTimeout(() => {\n                    if (this._unmounted) return;\n                    for (let i = 0; i < blocks.length; i++) {\n                        highlight.highlightBlock(blocks[i]);\n                    }\n                }, 10);\n            }\n        }\n    },\n\n    componentDidUpdate: function() {\n        this.calculateUrlPreview();\n    },\n\n    componentWillUnmount: function() {\n        this._unmounted = true;\n    },\n\n    shouldComponentUpdate: function(nextProps, nextState) {\n        //console.log(\"shouldComponentUpdate: ShowUrlPreview for %s is %s\", this.props.mxEvent.getId(), this.props.showUrlPreview);\n\n        // exploit that events are immutable :)\n        return (nextProps.mxEvent.getId() !== this.props.mxEvent.getId() ||\n                nextProps.highlights !== this.props.highlights ||\n                nextProps.highlightLink !== this.props.highlightLink ||\n                nextProps.showUrlPreview !== this.props.showUrlPreview ||\n                nextState.links !== this.state.links ||\n                nextState.widgetHidden !== this.state.widgetHidden);\n    },\n\n    calculateUrlPreview: function() {\n        //console.log(\"calculateUrlPreview: ShowUrlPreview for %s is %s\", this.props.mxEvent.getId(), this.props.showUrlPreview);\n\n        if (this.props.showUrlPreview && !this.state.links.length) {\n            var links = this.findLinks(this.refs.content.children);\n            if (links.length) {\n                this.setState({ links: links.map((link)=>{\n                    return link.getAttribute(\"href\");\n                })});\n\n                // lazy-load the hidden state of the preview widget from localstorage\n                if (global.localStorage) {\n                    var hidden = global.localStorage.getItem(\"hide_preview_\" + this.props.mxEvent.getId());\n                    this.setState({ widgetHidden: hidden });\n                }\n            }\n        }\n    },\n\n    findLinks: function(nodes) {\n        var links = [];\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            if (node.tagName === \"A\" && node.getAttribute(\"href\"))\n            {\n                if (this.isLinkPreviewable(node)) {\n                    links.push(node);\n                }\n            }\n            else if (node.tagName === \"PRE\" || node.tagName === \"CODE\") {\n                continue;\n            }\n            else if (node.children && node.children.length) {\n                links = links.concat(this.findLinks(node.children));\n            }\n        }\n        return links;\n    },\n\n    isLinkPreviewable: function(node) {\n        // don't try to preview relative links\n        if (!node.getAttribute(\"href\").startsWith(\"http://\") &&\n            !node.getAttribute(\"href\").startsWith(\"https://\"))\n        {\n            return false;\n        }\n\n        // as a random heuristic to avoid highlighting things like \"foo.pl\"\n        // we require the linked text to either include a / (either from http://\n        // or from a full foo.bar/baz style schemeless URL) - or be a markdown-style\n        // link, in which case we check the target text differs from the link value.\n        // TODO: make this configurable?\n        if (node.textContent.indexOf(\"/\") > -1)\n        {\n            return true;\n        }\n        else {\n            var url = node.getAttribute(\"href\");\n            var host = url.match(/^https?:\\/\\/(.*?)(\\/|$)/)[1];\n\n            // never preview matrix.to links (if anything we should give a smart\n            // preview of the room/user they point to: nobody needs to be reminded\n            // what the matrix.to site looks like).\n            if (host == 'matrix.to') return false;\n\n            if (node.textContent.toLowerCase().trim().startsWith(host.toLowerCase())) {\n                // it's a \"foo.pl\" style link\n                return false;\n            }\n            else {\n                // it's a [foo bar](http://foo.com) style link\n                return true;\n            }\n        }\n    },\n\n    onCancelClick: function(event) {\n        this.setState({ widgetHidden: true });\n        // FIXME: persist this somewhere smarter than local storage\n        if (global.localStorage) {\n            global.localStorage.setItem(\"hide_preview_\" + this.props.mxEvent.getId(), \"1\");\n        }\n        this.forceUpdate();\n    },\n\n    getEventTileOps: function() {\n        var self = this;\n        return {\n            isWidgetHidden: function() {\n                return self.state.widgetHidden;\n            },\n\n            unhideWidget: function() {\n                self.setState({ widgetHidden: false });\n                if (global.localStorage) {\n                    global.localStorage.removeItem(\"hide_preview_\" + self.props.mxEvent.getId());\n                }\n            },\n        };\n    },\n\n    onStarterLinkClick: function(starterLink, ev) {\n        ev.preventDefault();\n        // We need to add on our scalar token to the starter link, but we may not have one!\n        // In addition, we can't fetch one on click and then go to it immediately as that\n        // is then treated as a popup!\n        // We can get around this by fetching one now and showing a \"confirmation dialog\" (hurr hurr)\n        // which requires the user to click through and THEN we can open the link in a new tab because\n        // the window.open command occurs in the same stack frame as the onClick callback.\n\n        // Go fetch a scalar token\n        let scalarClient = new ScalarAuthClient();\n        scalarClient.connect().then(() => {\n            let completeUrl = scalarClient.getStarterLink(starterLink);\n            let QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n            let integrationsUrl = SdkConfig.get().integrations_ui_url;\n            Modal.createDialog(QuestionDialog, {\n                title: \"Add an Integration\",\n                description:\n                    <div>\n                        You are about to taken to a third-party site so you can authenticate your account for use with {integrationsUrl}.<br/>\n                        Do you wish to continue?\n                    </div>,\n                button: \"Continue\",\n                onFinished: function(confirmed) {\n                    if (!confirmed) {\n                        return;\n                    }\n                    let width = window.screen.width > 1024 ? 1024 : window.screen.width;\n                    let height = window.screen.height > 800 ? 800 : window.screen.height;\n                    let left = (window.screen.width - width) / 2;\n                    let top = (window.screen.height - height) / 2;\n                    window.open(completeUrl, '_blank', `height=${height}, width=${width}, top=${top}, left=${left},`);\n                },\n            });\n        });\n    },\n\n    render: function() {\n        const EmojiText = sdk.getComponent('elements.EmojiText');\n        var mxEvent = this.props.mxEvent;\n        var content = mxEvent.getContent();\n\n        var body = HtmlUtils.bodyToHtml(content, this.props.highlights, {});\n\n        if (this.props.highlightLink) {\n            body = <a href={ this.props.highlightLink }>{ body }</a>;\n        }\n        else if (content.data && typeof content.data[\"org.matrix.neb.starter_link\"] === \"string\") {\n            body = <a href=\"#\" onClick={ this.onStarterLinkClick.bind(this, content.data[\"org.matrix.neb.starter_link\"]) }>{ body }</a>;\n        }\n\n        var widgets;\n        if (this.state.links.length && !this.state.widgetHidden && this.props.showUrlPreview) {\n            var LinkPreviewWidget = sdk.getComponent('rooms.LinkPreviewWidget');\n            widgets = this.state.links.map((link)=>{\n                return <LinkPreviewWidget\n                            key={ link }\n                            link={ link }\n                            mxEvent={ this.props.mxEvent }\n                            onCancelClick={ this.onCancelClick }\n                            onWidgetLoad={ this.props.onWidgetLoad }/>;\n            });\n        }\n\n        switch (content.msgtype) {\n            case \"m.emote\":\n                const name = mxEvent.sender ? mxEvent.sender.name : mxEvent.getSender();\n                return (\n                    <span ref=\"content\" className=\"mx_MEmoteBody mx_EventTile_content\">\n                        * <EmojiText>{name}</EmojiText> { body }\n                        { widgets }\n                    </span>\n                );\n            case \"m.notice\":\n                return (\n                    <span ref=\"content\" className=\"mx_MNoticeBody mx_EventTile_content\">\n                        { body }\n                        { widgets }\n                    </span>\n                );\n            default: // including \"m.text\"\n                return (\n                    <span ref=\"content\" className=\"mx_MTextBody mx_EventTile_content\">\n                        { body }\n                        { widgets }\n                    </span>\n                );\n        }\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/messages/TextualEvent.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var TextForEvent = require('../../../TextForEvent');","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":9,"nodeType":"VariableDeclaration","source":"        var text = TextForEvent.textForEvent(this.props.mxEvent);","fix":{"range":[872,875],"text":"let"}}],"errorCount":0,"warningCount":3,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nvar TextForEvent = require('../../../TextForEvent');\nimport sdk from '../../../index';\n\nmodule.exports = React.createClass({\n    displayName: 'TextualEvent',\n\n    render: function() {\n        const EmojiText = sdk.getComponent('elements.EmojiText');\n        var text = TextForEvent.textForEvent(this.props.mxEvent);\n        if (text == null || text.length === 0) return null;\n        return (\n            <EmojiText element=\"div\" className=\"mx_TextualEvent\">{text}</EmojiText>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/messages/UnknownBody.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":9,"nodeType":"VariableDeclaration","source":"        var content = this.props.mxEvent.getContent();","fix":{"range":[717,720],"text":"let"}}],"errorCount":0,"warningCount":2,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'UnknownBody',\n\n    render: function() {\n        var content = this.props.mxEvent.getContent();\n        return (\n            <span className=\"mx_UnknownBody\">\n                {content.body}\n            </span>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/room_settings/AliasSettings.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[584,587],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var ObjectUtils = require(\"../../../ObjectUtils\");","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[665,668],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require(\"../../../index\");","fix":{"range":[724,727],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[761,764],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":32,"column":52,"nodeType":"Property","source":"        canonicalAliasEvent: React.PropTypes.object // MatrixEvent","fix":{"range":[1172,1172],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":39,"column":28,"nodeType":"Property","source":"            aliasEvents: []","fix":{"range":[1349,1349],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 44 exceeds the maximum line length of 90.","line":44,"column":1,"nodeType":"Program","source":"        return this.recalculateState(this.props.aliasEvents, this.props.canonicalAliasEvent);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":50,"column":9,"nodeType":"VariableDeclaration","source":"        var state = {","fix":{"range":[1622,1625],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":53,"column":33,"nodeType":"Property","source":"            canonicalAlias: null // #canonical:domain.com","fix":{"range":[1824,1824],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":55,"column":9,"nodeType":"VariableDeclaration","source":"        var localDomain = MatrixClientPeg.get().getDomain();","fix":{"range":[1869,1872],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":71,"column":9,"nodeType":"VariableDeclaration","source":"        var promises = [];","fix":{"range":[2329,2332],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":74,"column":9,"nodeType":"VariableDeclaration","source":"        var aliasOperations = this.getAliasOperations();","fix":{"range":[2404,2407],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":75,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < aliasOperations.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":76,"column":13,"nodeType":"VariableDeclaration","source":"            var alias_operation = aliasOperations[i];","fix":{"range":[2524,2527],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'alias_operation' is not in camel case.","line":76,"column":17,"nodeType":"Identifier","source":"            var alias_operation = aliasOperations[i];"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":82,"column":67,"nodeType":"MemberExpression","source":"                            alias_operation.val, this.props.roomId","fix":{"range":[2883,2883],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":83,"column":26,"nodeType":"CallExpression","source":"                        )","fix":{"range":[2909,2909],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":89,"column":48,"nodeType":"MemberExpression","source":"                            alias_operation.val","fix":{"range":[3129,3129],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":90,"column":26,"nodeType":"CallExpression","source":"                        )","fix":{"range":[3155,3155],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 94 exceeds the maximum line length of 90.","line":94,"column":1,"nodeType":"Program","source":"                    console.log(\"Unknown alias operation, ignoring: \" + alias_operation.place);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":100,"column":9,"nodeType":"VariableDeclaration","source":"        var oldCanonicalAlias = null;","fix":{"range":[3397,3400],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":109,"column":57,"nodeType":"Property","source":"                        alias: this.state.canonicalAlias","fix":{"range":[3920,3920],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":110,"column":26,"nodeType":"Literal","source":"                    }, \"\"","fix":{"range":[3946,3946],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":111,"column":18,"nodeType":"CallExpression","source":"                )","fix":{"range":[3964,3964],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":119,"column":9,"nodeType":"VariableDeclaration","source":"        var dict = {};","fix":{"range":[4109,4112],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":134,"column":9,"nodeType":"VariableDeclaration","source":"        var oldAliases = this.aliasEventsToDictionary(this.props.aliasEvents);","fix":{"range":[4539,4542],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":143,"column":13,"nodeType":"VariableDeclaration","source":"            var domain = alias.replace(/^.*?:/, '');","fix":{"range":[4950,4953],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":148,"column":60,"nodeType":"Property","source":"                domainToAliases: this.state.domainToAliases","fix":{"range":[5300,5300],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":153,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[5417,5426],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":155,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[5445,5448],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":165,"column":9,"nodeType":"VariableDeclaration","source":"        var oldAlias;","fix":{"range":[5851,5854],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'oldAlias' is assigned a value but never used.","line":165,"column":13,"nodeType":"Identifier","source":"        var oldAlias;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":169,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[6043,6052],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":171,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[6071,6074],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":185,"column":9,"nodeType":"VariableDeclaration","source":"        var alias = this.state.domainToAliases[domain].splice(index, 1);","fix":{"range":[6785,6788],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'alias' is assigned a value but never used.","line":185,"column":13,"nodeType":"Identifier","source":"        var alias = this.state.domainToAliases[domain].splice(index, 1);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":187,"column":56,"nodeType":"Property","source":"            domainToAliases: this.state.domainToAliases","fix":{"range":[6929,6929],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":193,"column":47,"nodeType":"Property","source":"            canonicalAlias: event.target.value","fix":{"range":[7066,7066],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":198,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[7120,7123],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":199,"column":9,"nodeType":"VariableDeclaration","source":"        var EditableText = sdk.getComponent(\"elements.EditableText\");","fix":{"range":[7145,7148],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":200,"column":9,"nodeType":"VariableDeclaration","source":"        var localDomain = MatrixClientPeg.get().getDomain();","fix":{"range":[7215,7218],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":202,"column":9,"nodeType":"VariableDeclaration","source":"        var canonical_alias_section;","fix":{"range":[7277,7280],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'canonical_alias_section' is not in camel case.","line":202,"column":13,"nodeType":"Identifier","source":"        var canonical_alias_section;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'canonical_alias_section' is not in camel case.","line":204,"column":13,"nodeType":"Identifier","source":"            canonical_alias_section = ("},{"ruleId":"max-len","severity":1,"message":"Line 205 exceeds the maximum line length of 90.","line":205,"column":1,"nodeType":"Program","source":"                <select onChange={this.onCanonicalAliasChange} defaultValue={ this.state.canonicalAlias }>"},{"ruleId":"max-len","severity":1,"message":"Line 209 exceeds the maximum line length of 90.","line":209,"column":1,"nodeType":"Program","source":"                            return self.state.domainToAliases[domain].map(function(alias, j) {"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":220,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[8163,8172],"text":"        "}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'canonical_alias_section' is not in camel case.","line":222,"column":13,"nodeType":"Identifier","source":"            canonical_alias_section = ("},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":227,"column":9,"nodeType":"VariableDeclaration","source":"        var remote_aliases_section;","fix":{"range":[8319,8322],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'remote_aliases_section' is not in camel case.","line":227,"column":13,"nodeType":"Identifier","source":"        var remote_aliases_section;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'remote_aliases_section' is not in camel case.","line":229,"column":13,"nodeType":"Identifier","source":"            remote_aliases_section = ("},{"ruleId":"max-len","severity":1,"message":"Line 236 exceeds the maximum line length of 90.","line":236,"column":1,"nodeType":"Program","source":"                            return this.state.domainToAliases[domain].map(function(alias, j) {"},{"ruleId":"max-len","severity":1,"message":"Line 238 exceeds the maximum line length of 90.","line":238,"column":1,"nodeType":"Program","source":"                                    <div className=\"mx_RoomSettings_aliasesTableRow\" key={ i + \"_\" + j }>"},{"ruleId":"max-len","severity":1,"message":"Line 240 exceeds the maximum line length of 90.","line":240,"column":1,"nodeType":"Program","source":"                                             className=\"mx_RoomSettings_alias mx_RoomSettings_editable\""},{"ruleId":"camelcase","severity":1,"message":"Identifier 'canonical_alias_section' is not in camel case.","line":257,"column":58,"nodeType":"Identifier","source":"                    The main address for this room is: { canonical_alias_section }"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":267,"column":25,"nodeType":"VariableDeclaration","source":"                        var deleteButton;","fix":{"range":[10317,10320],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 271 exceeds the maximum line length of 90.","line":271,"column":1,"nodeType":"Program","source":"                                    alt=\"Delete\" onClick={ self.onAliasDeleted.bind(self, localDomain, i) } />"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":271,"column":50,"nodeType":"JSXAttribute","source":"                                    alt=\"Delete\" onClick={ self.onAliasDeleted.bind(self, localDomain, i) } />"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":271,"column":60,"nodeType":"MemberExpression","source":"                                    alt=\"Delete\" onClick={ self.onAliasDeleted.bind(self, localDomain, i) } />"},{"ruleId":"max-len","severity":1,"message":"Line 277 exceeds the maximum line length of 90.","line":277,"column":1,"nodeType":"Program","source":"                                    className=\"mx_RoomSettings_alias mx_RoomSettings_editable\""},{"ruleId":"max-len","severity":1,"message":"Line 278 exceeds the maximum line length of 90.","line":278,"column":1,"nodeType":"Program","source":"                                    placeholderClassName=\"mx_RoomSettings_aliasPlaceholder\""},{"ruleId":"max-len","severity":1,"message":"Line 279 exceeds the maximum line length of 90.","line":279,"column":1,"nodeType":"Program","source":"                                    placeholder={ \"New address (e.g. #foo:\" + localDomain + \")\" }"},{"ruleId":"max-len","severity":1,"message":"Line 281 exceeds the maximum line length of 90.","line":281,"column":1,"nodeType":"Program","source":"                                    onValueChanged={ self.onAliasChanged.bind(self, localDomain, i) }"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":281,"column":37,"nodeType":"JSXAttribute","source":"                                    onValueChanged={ self.onAliasChanged.bind(self, localDomain, i) }"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":281,"column":54,"nodeType":"MemberExpression","source":"                                    onValueChanged={ self.onAliasChanged.bind(self, localDomain, i) }"},{"ruleId":"max-len","severity":1,"message":"Line 284 exceeds the maximum line length of 90.","line":284,"column":1,"nodeType":"Program","source":"                                <div className=\"mx_RoomSettings_deleteAlias mx_filterFlipColor\">"},{"ruleId":"max-len","severity":1,"message":"Line 297 exceeds the maximum line length of 90.","line":297,"column":1,"nodeType":"Program","source":"                                placeholder={ \"New address (e.g. #foo:\" + localDomain + \")\" }"},{"ruleId":"max-len","severity":1,"message":"Line 302 exceeds the maximum line length of 90.","line":302,"column":1,"nodeType":"Program","source":"                                      onClick={ self.onAliasAdded.bind(self, undefined) }/>"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":302,"column":39,"nodeType":"JSXAttribute","source":"                                      onClick={ self.onAliasAdded.bind(self, undefined) }/>"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":302,"column":49,"nodeType":"MemberExpression","source":"                                      onClick={ self.onAliasAdded.bind(self, undefined) }/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'remote_aliases_section' is not in camel case.","line":308,"column":19,"nodeType":"Identifier","source":"                { remote_aliases_section }"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":312,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[12808,12808],"text":","}}],"errorCount":22,"warningCount":52,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar q = require(\"q\");\nvar React = require('react');\nvar ObjectUtils = require(\"../../../ObjectUtils\");\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar sdk = require(\"../../../index\");\nvar Modal = require(\"../../../Modal\");\n\nmodule.exports = React.createClass({\n    displayName: 'AliasSettings',\n\n    propTypes: {\n        roomId: React.PropTypes.string.isRequired,\n        canSetCanonicalAlias: React.PropTypes.bool.isRequired,\n        canSetAliases: React.PropTypes.bool.isRequired,\n        aliasEvents: React.PropTypes.array, // [MatrixEvent]\n        canonicalAliasEvent: React.PropTypes.object // MatrixEvent\n    },\n\n    getDefaultProps: function() {\n        return {\n            canSetAliases: false,\n            canSetCanonicalAlias: false,\n            aliasEvents: []\n        };\n    },\n\n    getInitialState: function() {\n        return this.recalculateState(this.props.aliasEvents, this.props.canonicalAliasEvent);\n    },\n\n    recalculateState: function(aliasEvents, canonicalAliasEvent) {\n        aliasEvents = aliasEvents || [];\n\n        var state = {\n            domainToAliases: {}, // { domain.com => [#alias1:domain.com, #alias2:domain.com] }\n            remoteDomains: [], // [ domain.com, foobar.com ]\n            canonicalAlias: null // #canonical:domain.com\n        };\n        var localDomain = MatrixClientPeg.get().getDomain();\n\n        state.domainToAliases = this.aliasEventsToDictionary(aliasEvents);\n\n        state.remoteDomains = Object.keys(state.domainToAliases).filter((alias) => {\n            return alias !== localDomain;\n        });\n\n        if (canonicalAliasEvent) {\n            state.canonicalAlias = canonicalAliasEvent.getContent().alias;\n        }\n\n        return state;\n    },\n\n    saveSettings: function() {\n        var promises = [];\n\n        // save new aliases for m.room.aliases\n        var aliasOperations = this.getAliasOperations();\n        for (var i = 0; i < aliasOperations.length; i++) {\n            var alias_operation = aliasOperations[i];\n            console.log(\"alias %s %s\", alias_operation.place, alias_operation.val);\n            switch (alias_operation.place) {\n                case 'add':\n                    promises.push(\n                        MatrixClientPeg.get().createAlias(\n                            alias_operation.val, this.props.roomId\n                        )\n                    );\n                    break;\n                case 'del':\n                    promises.push(\n                        MatrixClientPeg.get().deleteAlias(\n                            alias_operation.val\n                        )\n                    );\n                    break;\n                default:\n                    console.log(\"Unknown alias operation, ignoring: \" + alias_operation.place);\n            }\n        }\n\n\n        // save new canonical alias\n        var oldCanonicalAlias = null;\n        if (this.props.canonicalAliasEvent) {\n            oldCanonicalAlias = this.props.canonicalAliasEvent.getContent().alias;\n        }\n        if (oldCanonicalAlias !== this.state.canonicalAlias) {\n            console.log(\"AliasSettings: Updating canonical alias\");\n            promises = [q.all(promises).then(\n                MatrixClientPeg.get().sendStateEvent(\n                    this.props.roomId, \"m.room.canonical_alias\", {\n                        alias: this.state.canonicalAlias\n                    }, \"\"\n                )\n            )];\n        }\n\n        return promises;\n    },\n\n    aliasEventsToDictionary: function(aliasEvents) { // m.room.alias events\n        var dict = {};\n        aliasEvents.forEach((event) => {\n            dict[event.getStateKey()] = (\n                (event.getContent().aliases || []).slice() // shallow-copy\n            );\n        });\n        return dict;\n    },\n\n    isAliasValid: function(alias) {\n        // XXX: FIXME SPEC-1\n        return (alias.match(/^#([^\\/:,]+?):(.+)$/) && encodeURI(alias) === alias);\n    },\n\n    getAliasOperations: function() {\n        var oldAliases = this.aliasEventsToDictionary(this.props.aliasEvents);\n        return ObjectUtils.getKeyValueArrayDiffs(oldAliases, this.state.domainToAliases);\n    },\n\n    onAliasAdded: function(alias) {\n        if (!alias || alias.length === 0) return; // ignore attempts to create blank aliases\n\n        if (this.isAliasValid(alias)) {\n            // add this alias to the domain to aliases dict\n            var domain = alias.replace(/^.*?:/, '');\n            // XXX: do we need to deep copy aliases before editing it?\n            this.state.domainToAliases[domain] = this.state.domainToAliases[domain] || [];\n            this.state.domainToAliases[domain].push(alias);\n            this.setState({\n                domainToAliases: this.state.domainToAliases\n            });\n\n            // reset the add field\n            this.refs.add_alias.setValue(''); // FIXME\n        }\n        else {\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Invalid alias format\",\n                description: \"'\" + alias + \"' is not a valid format for an alias\",\n            });\n        }\n    },\n\n    onAliasChanged: function(domain, index, alias) {\n        if (alias === \"\") return; // hit the delete button to delete please\n        var oldAlias;\n        if (this.isAliasValid(alias)) {\n            oldAlias = this.state.domainToAliases[domain][index];\n            this.state.domainToAliases[domain][index] = alias;\n        }\n        else {\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Invalid address format\",\n                description: \"'\" + alias + \"' is not a valid format for an address\",\n            });\n        }\n    },\n\n    onAliasDeleted: function(domain, index) {\n        // It's a bit naughty to directly manipulate this.state, and React would\n        // normally whine at you, but it can't see us doing the splice.  Given we\n        // promptly setState anyway, it's just about acceptable.  The alternative\n        // would be to arbitrarily deepcopy to a temp variable and then setState\n        // that, but why bother when we can cut this corner.\n        var alias = this.state.domainToAliases[domain].splice(index, 1);\n        this.setState({\n            domainToAliases: this.state.domainToAliases\n        });\n    },\n\n    onCanonicalAliasChange: function(event) {\n        this.setState({\n            canonicalAlias: event.target.value\n        });\n    },\n\n    render: function() {\n        var self = this;\n        var EditableText = sdk.getComponent(\"elements.EditableText\");\n        var localDomain = MatrixClientPeg.get().getDomain();\n\n        var canonical_alias_section;\n        if (this.props.canSetCanonicalAlias) {\n            canonical_alias_section = (\n                <select onChange={this.onCanonicalAliasChange} defaultValue={ this.state.canonicalAlias }>\n                    <option value=\"\" key=\"unset\">not specified</option>\n                    {\n                        Object.keys(self.state.domainToAliases).map(function(domain, i) {\n                            return self.state.domainToAliases[domain].map(function(alias, j) {\n                                return (\n                                    <option value={ alias } key={ i + \"_\" + j }>\n                                        { alias }\n                                    </option>\n                                );\n                            });\n                        })\n                    }\n                </select>\n            );\n        }\n        else {\n            canonical_alias_section = (\n                <b>{ this.state.canonicalAlias || \"not set\" }</b>\n            );\n        }\n\n        var remote_aliases_section;\n        if (this.state.remoteDomains.length) {\n            remote_aliases_section = (\n                <div>\n                    <div className=\"mx_RoomSettings_aliasLabel\">\n                        Remote addresses for this room:\n                    </div>\n                    <div className=\"mx_RoomSettings_aliasesTable\">\n                        { this.state.remoteDomains.map((domain, i) => {\n                            return this.state.domainToAliases[domain].map(function(alias, j) {\n                                return (\n                                    <div className=\"mx_RoomSettings_aliasesTableRow\" key={ i + \"_\" + j }>\n                                        <EditableText\n                                             className=\"mx_RoomSettings_alias mx_RoomSettings_editable\"\n                                             blurToCancel={ false }\n                                             editable={ false }\n                                             initialValue={ alias } />\n                                    </div>\n                                );\n                            });\n                        })}\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <h3>Addresses</h3>\n                <div className=\"mx_RoomSettings_aliasLabel\">\n                    The main address for this room is: { canonical_alias_section }\n                </div>\n                <div className=\"mx_RoomSettings_aliasLabel\">\n                    { (this.state.domainToAliases[localDomain] &&\n                        this.state.domainToAliases[localDomain].length > 0)\n                      ? \"Local addresses for this room:\"\n                      : \"This room has no local addresses\" }\n                </div>\n                <div className=\"mx_RoomSettings_aliasesTable\">\n                    { (this.state.domainToAliases[localDomain] || []).map((alias, i) => {\n                        var deleteButton;\n                        if (this.props.canSetAliases) {\n                            deleteButton = (\n                                <img src=\"img/cancel-small.svg\" width=\"14\" height=\"14\"\n                                    alt=\"Delete\" onClick={ self.onAliasDeleted.bind(self, localDomain, i) } />\n                            );\n                        }\n                        return (\n                            <div className=\"mx_RoomSettings_aliasesTableRow\" key={ i }>\n                                <EditableText\n                                    className=\"mx_RoomSettings_alias mx_RoomSettings_editable\"\n                                    placeholderClassName=\"mx_RoomSettings_aliasPlaceholder\"\n                                    placeholder={ \"New address (e.g. #foo:\" + localDomain + \")\" }\n                                    blurToCancel={ false }\n                                    onValueChanged={ self.onAliasChanged.bind(self, localDomain, i) }\n                                    editable={ self.props.canSetAliases }\n                                    initialValue={ alias } />\n                                <div className=\"mx_RoomSettings_deleteAlias mx_filterFlipColor\">\n                                     { deleteButton }\n                                </div>\n                            </div>\n                        );\n                    })}\n\n                    { this.props.canSetAliases ?\n                        <div className=\"mx_RoomSettings_aliasesTableRow\" key=\"new\">\n                            <EditableText\n                                ref=\"add_alias\"\n                                className=\"mx_RoomSettings_alias mx_RoomSettings_editable\"\n                                placeholderClassName=\"mx_RoomSettings_aliasPlaceholder\"\n                                placeholder={ \"New address (e.g. #foo:\" + localDomain + \")\" }\n                                blurToCancel={ false }\n                                onValueChanged={ self.onAliasAdded } />\n                            <div className=\"mx_RoomSettings_addAlias mx_filterFlipColor\">\n                                 <img src=\"img/plus.svg\" width=\"14\" height=\"14\" alt=\"Add\"\n                                      onClick={ self.onAliasAdded.bind(self, undefined) }/>\n                            </div>\n                        </div> : \"\"\n                    }\n                </div>\n\n                { remote_aliases_section }\n\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/room_settings/ColorSettings.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[561,564],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var Tinter = require('../../../Tinter');","fix":{"range":[651,654],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[692,695],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[751,754],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var ROOM_COLORS = [","fix":{"range":[791,794],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":42,"column":48,"nodeType":"Property","source":"        room: React.PropTypes.object.isRequired","fix":{"range":[1282,1282],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":46,"column":9,"nodeType":"VariableDeclaration","source":"        var data = {","fix":{"range":[1333,1336],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":50,"column":30,"nodeType":"Property","source":"            hasChanged: false","fix":{"range":[1515,1515],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":52,"column":9,"nodeType":"VariableDeclaration","source":"        var event = this.props.room.getAccountData(\"org.matrix.room.color_scheme\");","fix":{"range":[1535,1538],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":56,"column":9,"nodeType":"VariableDeclaration","source":"        var scheme = event.getContent();","fix":{"range":[1676,1679],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":65,"column":61,"nodeType":"MemberExpression","source":"                scheme.primary_color, scheme.secondary_color","fix":{"range":[2095,2095],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":75,"column":9,"nodeType":"VariableDeclaration","source":"        var originalState = this.getInitialState();","fix":{"range":[2323,2326],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":85,"column":64,"nodeType":"Property","source":"                    secondary_color: this.state.secondary_color","fix":{"range":[3031,3031],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":86,"column":18,"nodeType":"ObjectExpression","source":"                }","fix":{"range":[3049,3049],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 89 exceeds the maximum line length of 90.","line":89,"column":1,"nodeType":"Program","source":"                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":89,"column":21,"nodeType":"VariableDeclaration","source":"                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");","fix":{"range":[3171,3174],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 92 exceeds the maximum line length of 90.","line":92,"column":1,"nodeType":"Program","source":"                        description: \"Saving room color settings is only available to registered users\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":92,"column":104,"nodeType":"Property","source":"                        description: \"Saving room color settings is only available to registered users\"","fix":{"range":[3464,3464],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":105,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < ROOM_COLORS.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":106,"column":13,"nodeType":"VariableDeclaration","source":"            var room_color = ROOM_COLORS[i];","fix":{"range":[3840,3843],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_color' is not in camel case.","line":106,"column":17,"nodeType":"Identifier","source":"            var room_color = ROOM_COLORS[i];"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":122,"column":29,"nodeType":"Property","source":"            hasChanged: true","fix":{"range":[4469,4469],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_color' is not in camel case.","line":129,"column":35,"nodeType":"Identifier","source":"                {ROOM_COLORS.map((room_color, i) => {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":130,"column":21,"nodeType":"VariableDeclaration","source":"                    var selected;","fix":{"range":[4663,4666],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":138,"column":21,"nodeType":"VariableDeclaration","source":"                    var boundClick = this._onColorSchemeChanged.bind(this, i);","fix":{"range":[5039,5042],"text":"let"}},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":138,"column":38,"nodeType":"MemberExpression","source":"                    var boundClick = this._onColorSchemeChanged.bind(this, i);"},{"ruleId":"max-len","severity":1,"message":"Line 145 exceeds the maximum line length of 90.","line":145,"column":1,"nodeType":"Program","source":"                            <div className=\"mx_RoomSettings_roomColorPrimary\" style={{ backgroundColor: room_color[0] }}></div>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":151,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[5655,5655],"text":","}}],"errorCount":9,"warningCount":21,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar q = require(\"q\");\nvar React = require('react');\n\nvar sdk = require('../../../index');\nvar Tinter = require('../../../Tinter');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar Modal = require(\"../../../Modal\");\n\nvar ROOM_COLORS = [\n    // magic room default values courtesy of Ribot\n    [\"#76cfa6\", \"#eaf5f0\"],\n    [\"#81bddb\", \"#eaf1f4\"],\n    [\"#bd79cb\", \"#f3eaf5\"],\n    [\"#c65d94\", \"#f5eaef\"],\n    [\"#e55e5e\", \"#f5eaea\"],\n    [\"#eca46f\", \"#f5eeea\"],\n    [\"#dad658\", \"#f5f4ea\"],\n    [\"#80c553\", \"#eef5ea\"],\n    [\"#bb814e\", \"#eee8e3\"],\n    [\"#595959\", \"#ececec\"],\n];\n\nmodule.exports = React.createClass({\n    displayName: 'ColorSettings',\n\n    propTypes: {\n        room: React.PropTypes.object.isRequired\n    },\n\n    getInitialState: function() {\n        var data = {\n            index: 0,\n            primary_color: ROOM_COLORS[0].primary_color,\n            secondary_color: ROOM_COLORS[0].secondary_color,\n            hasChanged: false\n        };\n        var event = this.props.room.getAccountData(\"org.matrix.room.color_scheme\");\n        if (!event) {\n            return data;\n        }\n        var scheme = event.getContent();\n        data.primary_color = scheme.primary_color;\n        data.secondary_color = scheme.secondary_color;\n        data.index = this._getColorIndex(data);\n\n        if (data.index === -1) {\n            // append the unrecognised colours to our palette\n            data.index = ROOM_COLORS.length;\n            ROOM_COLORS.push([\n                scheme.primary_color, scheme.secondary_color\n            ]);\n        }\n        return data;\n    },\n\n    saveSettings: function() { // : Promise\n        if (!this.state.hasChanged) {\n            return q(); // They didn't explicitly give a color to save.\n        }\n        var originalState = this.getInitialState();\n        if (originalState.primary_color !== this.state.primary_color ||\n                originalState.secondary_color !== this.state.secondary_color) {\n            console.log(\"ColorSettings: Saving new color\");\n            // We would like guests to be able to set room colour but currently\n            // they can't, so we still send the request but display a sensible\n            // error if it fails.\n            return MatrixClientPeg.get().setRoomAccountData(\n                this.props.room.roomId, \"org.matrix.room.color_scheme\", {\n                    primary_color: this.state.primary_color,\n                    secondary_color: this.state.secondary_color\n                }\n            ).catch(function(err) {\n                if (err.errcode == 'M_GUEST_ACCESS_FORBIDDEN') {\n                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");\n                    Modal.createDialog(NeedToRegisterDialog, {\n                        title: \"Please Register\",\n                        description: \"Saving room color settings is only available to registered users\"\n                    });\n                }\n            });\n        }\n        return q(); // no color diff\n    },\n\n    _getColorIndex: function(scheme) {\n        if (!scheme || !scheme.primary_color || !scheme.secondary_color) {\n            return -1;\n        }\n        // XXX: we should validate these values\n        for (var i = 0; i < ROOM_COLORS.length; i++) {\n            var room_color = ROOM_COLORS[i];\n            if (room_color[0] === String(scheme.primary_color).toLowerCase() &&\n                    room_color[1] === String(scheme.secondary_color).toLowerCase()) {\n                return i;\n            }\n        }\n        return -1;\n    },\n\n    _onColorSchemeChanged: function(index) {\n        // preview what the user just changed the scheme to.\n        Tinter.tint(ROOM_COLORS[index][0], ROOM_COLORS[index][1]);\n        this.setState({\n            index: index,\n            primary_color: ROOM_COLORS[index][0],\n            secondary_color: ROOM_COLORS[index][1],\n            hasChanged: true\n        });\n    },\n\n    render: function() {\n        return (\n            <div className=\"mx_RoomSettings_roomColors\">\n                {ROOM_COLORS.map((room_color, i) => {\n                    var selected;\n                    if (i === this.state.index) {\n                        selected = (\n                            <div className=\"mx_RoomSettings_roomColor_selected\">\n                                <img src=\"img/tick.svg\" width=\"17\" height=\"14\" alt=\"./\"/>\n                            </div>\n                        );\n                    }\n                    var boundClick = this._onColorSchemeChanged.bind(this, i);\n                    return (\n                        <div className=\"mx_RoomSettings_roomColor\"\n                              key={ \"room_color_\" + i }\n                              style={{ backgroundColor: room_color[1] }}\n                              onClick={ boundClick }>\n                            { selected }\n                            <div className=\"mx_RoomSettings_roomColorPrimary\" style={{ backgroundColor: room_color[0] }}></div>\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/room_settings/UrlPreviewSettings.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'q' is assigned a value but never used.","line":17,"column":5,"nodeType":"Identifier","source":"var q = require(\"q\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[584,587],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require(\"../../../index\");","fix":{"range":[673,676],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'sdk' is assigned a value but never used.","line":20,"column":5,"nodeType":"Identifier","source":"var sdk = require(\"../../../index\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[710,713],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is assigned a value but never used.","line":21,"column":5,"nodeType":"Identifier","source":"var Modal = require(\"../../../Modal\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var UserSettingsStore = require('../../../UserSettingsStore');","fix":{"range":[749,752],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[996,999],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'cli' is assigned a value but never used.","line":33,"column":13,"nodeType":"Identifier","source":"        var cli = MatrixClientPeg.get();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":9,"nodeType":"VariableDeclaration","source":"        var roomState = this.props.room.currentState;","fix":{"range":[1037,1040],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'roomState' is assigned a value but never used.","line":34,"column":13,"nodeType":"Identifier","source":"        var roomState = this.props.room.currentState;"},{"ruleId":"max-len","severity":1,"message":"Line 36 exceeds the maximum line length of 90.","line":36,"column":1,"nodeType":"Program","source":"        var roomPreviewUrls = this.props.room.currentState.getStateEvents('org.matrix.room.preview_urls', '');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":9,"nodeType":"VariableDeclaration","source":"        var roomPreviewUrls = this.props.room.currentState.getStateEvents('org.matrix.room.preview_urls', '');","fix":{"range":[1092,1095],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 37 exceeds the maximum line length of 90.","line":37,"column":1,"nodeType":"Program","source":"        var userPreviewUrls = this.props.room.getAccountData(\"org.matrix.room.preview_urls\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":9,"nodeType":"VariableDeclaration","source":"        var userPreviewUrls = this.props.room.getAccountData(\"org.matrix.room.preview_urls\");","fix":{"range":[1203,1206],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 40 exceeds the maximum line length of 90.","line":40,"column":1,"nodeType":"Program","source":"            globalDisableUrlPreview: (roomPreviewUrls && roomPreviewUrls.getContent().disable) || false,"},{"ruleId":"max-len","severity":1,"message":"Line 41 exceeds the maximum line length of 90.","line":41,"column":1,"nodeType":"Program","source":"            userDisableUrlPreview: (userPreviewUrls && (userPreviewUrls.getContent().disable === true)) || false,"},{"ruleId":"max-len","severity":1,"message":"Line 42 exceeds the maximum line length of 90.","line":42,"column":1,"nodeType":"Program","source":"            userEnableUrlPreview: (userPreviewUrls && (userPreviewUrls.getContent().disable === false)) || false,"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":51,"column":9,"nodeType":"VariableDeclaration","source":"        var promises = [];","fix":{"range":[1802,1805],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 53 exceeds the maximum line length of 90.","line":53,"column":1,"nodeType":"Program","source":"        if (this.state.globalDisableUrlPreview !== this.originalState.globalDisableUrlPreview) {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":58,"column":68,"nodeType":"Property","source":"                        disable: this.state.globalDisableUrlPreview","fix":{"range":[2234,2234],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":59,"column":26,"nodeType":"Literal","source":"                    }, \"\"","fix":{"range":[2260,2260],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":60,"column":18,"nodeType":"CallExpression","source":"                )","fix":{"range":[2278,2278],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":64,"column":9,"nodeType":"VariableDeclaration","source":"        var content = undefined;","fix":{"range":[2313,2316],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 65 exceeds the maximum line length of 90.","line":65,"column":1,"nodeType":"Program","source":"        if (this.state.userDisableUrlPreview !== this.originalState.userDisableUrlPreview) {"},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'disable'.","line":67,"column":60,"nodeType":"Identifier","source":"            content = this.state.userDisableUrlPreview ? { disable : true } : {};","fix":{"range":[2584,2585],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'disable'.","line":73,"column":63,"nodeType":"Identifier","source":"                content = this.state.userEnableUrlPreview ? { disable : false } : {};","fix":{"range":[2918,2919],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":80,"column":84,"nodeType":"Identifier","source":"                    this.props.room.roomId, \"org.matrix.room.preview_urls\", content","fix":{"range":[3151,3151],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":81,"column":18,"nodeType":"CallExpression","source":"                )","fix":{"range":[3169,3169],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 92 exceeds the maximum line length of 90.","line":92,"column":1,"nodeType":"Program","source":"            globalDisableUrlPreview: this.refs.globalDisableUrlPreview.checked ? true : false,"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":111,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[3984,3987],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'self' is assigned a value but never used.","line":111,"column":13,"nodeType":"Identifier","source":"        var self = this;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":112,"column":9,"nodeType":"VariableDeclaration","source":"        var roomState = this.props.room.currentState;","fix":{"range":[4009,4012],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":113,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[4063,4066],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 115 exceeds the maximum line length of 90.","line":115,"column":1,"nodeType":"Program","source":"        var maySetRoomPreviewUrls = roomState.mayClientSendStateEvent('org.matrix.room.preview_urls', cli);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":115,"column":9,"nodeType":"VariableDeclaration","source":"        var maySetRoomPreviewUrls = roomState.mayClientSendStateEvent('org.matrix.room.preview_urls', cli);","fix":{"range":[4105,4108],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":116,"column":9,"nodeType":"VariableDeclaration","source":"        var disableRoomPreviewUrls;","fix":{"range":[4213,4216],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":125,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4683,4692],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 129 exceeds the maximum line length of 90.","line":129,"column":1,"nodeType":"Program","source":"                    URL previews are { this.state.globalDisableUrlPreview ? \"disabled\" : \"enabled\" } by default for participants in this room."},{"ruleId":"max-len","severity":1,"message":"Line 138 exceeds the maximum line length of 90.","line":138,"column":1,"nodeType":"Program","source":"                    You have <a href=\"#/settings\">{ UserSettingsStore.getUrlPreviewsDisabled() ? 'disabled' : 'enabled' }</a> URL previews by default."},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":156,"column":5,"nodeType":"BlockStatement","source":"    }","fix":{"range":[6006,6008],"text":"\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":156,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[6013,6013],"text":","}}],"errorCount":12,"warningCount":32,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar q = require(\"q\");\nvar React = require('react');\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar sdk = require(\"../../../index\");\nvar Modal = require(\"../../../Modal\");\nvar UserSettingsStore = require('../../../UserSettingsStore');\n\n\nmodule.exports = React.createClass({\n    displayName: 'UrlPreviewSettings',\n\n    propTypes: {\n        room: React.PropTypes.object,\n    },\n\n    getInitialState: function() {\n        var cli = MatrixClientPeg.get();\n        var roomState = this.props.room.currentState;\n\n        var roomPreviewUrls = this.props.room.currentState.getStateEvents('org.matrix.room.preview_urls', '');\n        var userPreviewUrls = this.props.room.getAccountData(\"org.matrix.room.preview_urls\");\n\n        return {\n            globalDisableUrlPreview: (roomPreviewUrls && roomPreviewUrls.getContent().disable) || false,\n            userDisableUrlPreview: (userPreviewUrls && (userPreviewUrls.getContent().disable === true)) || false,\n            userEnableUrlPreview: (userPreviewUrls && (userPreviewUrls.getContent().disable === false)) || false,\n        };\n    },\n\n    componentDidMount: function() {\n        this.originalState = Object.assign({}, this.state);\n    },\n\n    saveSettings: function() {\n        var promises = [];\n\n        if (this.state.globalDisableUrlPreview !== this.originalState.globalDisableUrlPreview) {\n            console.log(\"UrlPreviewSettings: Updating room's preview_urls state event\");\n            promises.push(\n                MatrixClientPeg.get().sendStateEvent(\n                    this.props.room.roomId, \"org.matrix.room.preview_urls\", {\n                        disable: this.state.globalDisableUrlPreview\n                    }, \"\"\n                )\n            );\n        }\n\n        var content = undefined;\n        if (this.state.userDisableUrlPreview !== this.originalState.userDisableUrlPreview) {\n            console.log(\"UrlPreviewSettings: Disabling user's per-room preview_urls\");\n            content = this.state.userDisableUrlPreview ? { disable : true } : {};\n        }\n\n        if (this.state.userEnableUrlPreview !== this.originalState.userEnableUrlPreview) {\n            console.log(\"UrlPreviewSettings: Enabling user's per-room preview_urls\");\n            if (!content || content.disable === undefined) {\n                content = this.state.userEnableUrlPreview ? { disable : false } : {};\n            }\n        }\n\n        if (content) {\n            promises.push(\n                MatrixClientPeg.get().setRoomAccountData(\n                    this.props.room.roomId, \"org.matrix.room.preview_urls\", content\n                )\n            );\n        }\n\n        console.log(\"UrlPreviewSettings: saveSettings: \" + JSON.stringify(promises));\n\n        return promises;\n    },\n\n    onGlobalDisableUrlPreviewChange: function() {\n        this.setState({\n            globalDisableUrlPreview: this.refs.globalDisableUrlPreview.checked ? true : false,\n        });\n    },\n\n    onUserEnableUrlPreviewChange: function() {\n        this.setState({\n            userDisableUrlPreview: false,\n            userEnableUrlPreview: this.refs.userEnableUrlPreview.checked ? true : false,\n        });\n    },\n\n    onUserDisableUrlPreviewChange: function() {\n        this.setState({\n            userDisableUrlPreview: this.refs.userDisableUrlPreview.checked ? true : false,\n            userEnableUrlPreview: false,\n        });\n    },\n\n    render: function() {\n        var self = this;\n        var roomState = this.props.room.currentState;\n        var cli = MatrixClientPeg.get();\n\n        var maySetRoomPreviewUrls = roomState.mayClientSendStateEvent('org.matrix.room.preview_urls', cli);\n        var disableRoomPreviewUrls;\n        if (maySetRoomPreviewUrls) {\n            disableRoomPreviewUrls =\n                <label>\n                    <input type=\"checkbox\" ref=\"globalDisableUrlPreview\"\n                           onChange={ this.onGlobalDisableUrlPreviewChange }\n                           checked={ this.state.globalDisableUrlPreview } />\n                    Disable URL previews by default for participants in this room\n                </label>;\n        }\n        else {\n            disableRoomPreviewUrls =\n                <label>\n                    URL previews are { this.state.globalDisableUrlPreview ? \"disabled\" : \"enabled\" } by default for participants in this room.\n                </label>;\n        }\n\n        return (\n            <div className=\"mx_RoomSettings_toggles\">\n                <h3>URL Previews</h3>\n\n                <label>\n                    You have <a href=\"#/settings\">{ UserSettingsStore.getUrlPreviewsDisabled() ? 'disabled' : 'enabled' }</a> URL previews by default.\n                </label>\n                { disableRoomPreviewUrls }\n                <label>\n                    <input type=\"checkbox\" ref=\"userEnableUrlPreview\"\n                           onChange={ this.onUserEnableUrlPreviewChange }\n                           checked={ this.state.userEnableUrlPreview } />\n                    Enable URL previews for this room (affects only you)\n                </label>\n                <label>\n                    <input type=\"checkbox\" ref=\"userDisableUrlPreview\"\n                           onChange={ this.onUserDisableUrlPreviewChange }\n                           checked={ this.state.userDisableUrlPreview } />\n                    Disable URL previews for this room (affects only you)\n                </label>\n            </div>\n        );\n\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/Autocomplete.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'SelectionRange' is defined but never used.","line":7,"column":26,"nodeType":"Identifier","source":"import type {Completion, SelectionRange} from '../../../autocomplete/Autocompleter';"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":61,"column":53,"nodeType":"ArrowFunctionExpression","source":"        const completionList = flatMap(completions, provider => provider.completions);","fix":{"range":[1943,1951],"text":"(provider)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":72,"column":17,"nodeType":"ArrowFunctionExpression","source":"                completion => completion.completion === currentSelection);","fix":{"range":[2539,2549],"text":"(completion)"}},{"ruleId":"max-len","severity":1,"message":"Line 85 exceeds the maximum line length of 90.","line":85,"column":1,"nodeType":"Program","source":"        const oldMatches = this.state.completions.map(completion => !!completion.command.command),"},{"ruleId":"one-var","severity":1,"message":"Split 'const' declarations into multiple statements.","line":85,"column":9,"nodeType":"VariableDeclaration","source":"        const oldMatches = this.state.completions.map(completion => !!completion.command.command),"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":85,"column":55,"nodeType":"ArrowFunctionExpression","source":"        const oldMatches = this.state.completions.map(completion => !!completion.command.command),","fix":{"range":[3153,3163],"text":"(completion)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":86,"column":42,"nodeType":"ArrowFunctionExpression","source":"            newMatches = completions.map(completion => !!completion.command.command);","fix":{"range":[3239,3249],"text":"(completion)"}},{"ruleId":"max-len","severity":1,"message":"Line 116 exceeds the maximum line length of 90.","line":116,"column":1,"nodeType":"Program","source":"        return selectionOffset === COMPOSER_SELECTED ? null : this.state.completionList[selectionOffset - 1];"},{"ruleId":"max-len","severity":1,"message":"Line 128 exceeds the maximum line length of 90.","line":128,"column":1,"nodeType":"Program","source":"        return selectionOffset === COMPOSER_SELECTED ? null : this.state.completionList[selectionOffset - 1];"},{"ruleId":"max-len","severity":1,"message":"Line 161 exceeds the maximum line length of 90.","line":161,"column":1,"nodeType":"Program","source":"        if (this.countCompletions() === 0 || this.state.selectionOffset === COMPOSER_SELECTED) {"},{"ruleId":"prefer-const","severity":1,"message":"'renderedCompletions' is never reassigned. Use 'const' instead.","line":192,"column":13,"nodeType":"Identifier","source":"        let renderedCompletions = this.state.completions.map((completionResult, i) => {","fix":{"range":[6712,6715],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'completions' is never reassigned. Use 'const' instead.","line":193,"column":17,"nodeType":"Identifier","source":"            let completions = completionResult.completions.map((completion, i) => {","fix":{"range":[6804,6807],"text":"const"}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":193,"column":83,"nodeType":"BlockStatement","source":"            let completions = completionResult.completions.map((completion, i) => {","fix":{"range":[6875,6877],"text":"\n"}},{"ruleId":"prefer-const","severity":1,"message":"'componentPosition' is never reassigned. Use 'const' instead.","line":198,"column":21,"nodeType":"Identifier","source":"                let componentPosition = position;","fix":{"range":[7063,7066],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'onMouseOver' is never reassigned. Use 'const' instead.","line":201,"column":21,"nodeType":"Identifier","source":"                let onMouseOver = () => this.setSelection(componentPosition);","fix":{"range":[7142,7145],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'onClick' is never reassigned. Use 'const' instead.","line":202,"column":21,"nodeType":"Identifier","source":"                let onClick = () => {","fix":{"range":[7220,7223],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 219 exceeds the maximum line length of 90.","line":219,"column":1,"nodeType":"Program","source":"                    <EmojiText element=\"div\" className=\"mx_Autocomplete_provider_name\">{completionResult.provider.getName()}</EmojiText>"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":223,"column":19,"nodeType":"ArrowFunctionExpression","source":"        }).filter(completion => !!completion);","fix":{"range":[8046,8056],"text":"(completion)"}}],"errorCount":1,"warningCount":17,"source":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport flatMap from 'lodash/flatMap';\nimport isEqual from 'lodash/isEqual';\nimport sdk from '../../../index';\nimport type {Completion, SelectionRange} from '../../../autocomplete/Autocompleter';\nimport Q from 'q';\n\nimport {getCompletions} from '../../../autocomplete/Autocompleter';\n\nconst COMPOSER_SELECTED = 0;\n\nexport default class Autocomplete extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.completionPromise = null;\n        this.hide = this.hide.bind(this);\n        this.onCompletionClicked = this.onCompletionClicked.bind(this);\n\n        this.state = {\n            // list of completionResults, each containing completions\n            completions: [],\n\n            // array of completions, so we can look up current selection by offset quickly\n            completionList: [],\n\n            // how far down the completion list we are (THIS IS 1-INDEXED!)\n            selectionOffset: COMPOSER_SELECTED,\n\n            // whether we should show completions if they're available\n            shouldShowCompletions: true,\n\n            hide: false,\n\n            forceComplete: false,\n        };\n    }\n\n    async componentWillReceiveProps(props, state) {\n        if (props.query === this.props.query) {\n            return null;\n        }\n\n        return await this.complete(props.query, props.selection);\n    }\n\n    async complete(query, selection) {\n        let forceComplete = this.state.forceComplete;\n        const completionPromise = getCompletions(query, selection, forceComplete);\n        this.completionPromise = completionPromise;\n        const completions = await this.completionPromise;\n\n        // There's a newer completion request, so ignore results.\n        if (completionPromise !== this.completionPromise) {\n            return;\n        }\n\n        const completionList = flatMap(completions, provider => provider.completions);\n\n        // Reset selection when completion list becomes empty.\n        let selectionOffset = COMPOSER_SELECTED;\n        if (completionList.length > 0) {\n            /* If the currently selected completion is still in the completion list,\n             try to find it and jump to it. If not, select composer.\n             */\n            const currentSelection = this.state.selectionOffset === 0 ? null :\n                this.state.completionList[this.state.selectionOffset - 1].completion;\n            selectionOffset = completionList.findIndex(\n                completion => completion.completion === currentSelection);\n            if (selectionOffset === -1) {\n                selectionOffset = COMPOSER_SELECTED;\n            } else {\n                selectionOffset++; // selectionOffset is 1-indexed!\n            }\n        } else {\n            // If no completions were returned, we should turn off force completion.\n            forceComplete = false;\n        }\n\n        let hide = this.state.hide;\n        // These are lists of booleans that indicate whether whether the corresponding provider had a matching pattern\n        const oldMatches = this.state.completions.map(completion => !!completion.command.command),\n            newMatches = completions.map(completion => !!completion.command.command);\n\n        // So, essentially, we re-show autocomplete if any provider finds a new pattern or stops finding an old one\n        if (!isEqual(oldMatches, newMatches)) {\n            hide = false;\n        }\n\n        this.setState({\n            completions,\n            completionList,\n            selectionOffset,\n            hide,\n            forceComplete,\n        });\n    }\n\n    countCompletions(): number {\n        return this.state.completionList.length;\n    }\n\n    // called from MessageComposerInput\n    onUpArrow(): ?Completion {\n        const completionCount = this.countCompletions();\n        // completionCount + 1, since 0 means composer is selected\n        const selectionOffset = (completionCount + 1 + this.state.selectionOffset - 1)\n            % (completionCount + 1);\n        if (!completionCount) {\n            return null;\n        }\n        this.setSelection(selectionOffset);\n        return selectionOffset === COMPOSER_SELECTED ? null : this.state.completionList[selectionOffset - 1];\n    }\n\n    // called from MessageComposerInput\n    onDownArrow(): ?Completion {\n        const completionCount = this.countCompletions();\n        // completionCount + 1, since 0 means composer is selected\n        const selectionOffset = (this.state.selectionOffset + 1) % (completionCount + 1);\n        if (!completionCount) {\n            return null;\n        }\n        this.setSelection(selectionOffset);\n        return selectionOffset === COMPOSER_SELECTED ? null : this.state.completionList[selectionOffset - 1];\n    }\n\n    onEscape(e): boolean {\n        const completionCount = this.countCompletions();\n        if (completionCount === 0) {\n            // autocomplete is already empty, so don't preventDefault\n            return;\n        }\n\n        e.preventDefault();\n\n        // selectionOffset = 0, so we don't end up completing when autocomplete is hidden\n        this.hide();\n    }\n\n    hide() {\n        this.setState({hide: true, selectionOffset: 0});\n    }\n\n    forceComplete() {\n        const done = Q.defer();\n        this.setState({\n            forceComplete: true,\n        }, () => {\n            this.complete(this.props.query, this.props.selection).then(() => {\n                done.resolve();\n            });\n        });\n        return done.promise;\n    }\n\n    onCompletionClicked(): boolean {\n        if (this.countCompletions() === 0 || this.state.selectionOffset === COMPOSER_SELECTED) {\n            return false;\n        }\n\n        this.props.onConfirm(this.state.completionList[this.state.selectionOffset - 1]);\n        this.hide();\n\n        return true;\n    }\n\n    setSelection(selectionOffset: number) {\n        this.setState({selectionOffset});\n    }\n\n    componentDidUpdate() {\n        // this is the selected completion, so scroll it into view if needed\n        const selectedCompletion = this.refs[`completion${this.state.selectionOffset}`];\n        if (selectedCompletion && this.container) {\n            const domNode = ReactDOM.findDOMNode(selectedCompletion);\n            const offsetTop = domNode && domNode.offsetTop;\n            if (offsetTop > this.container.scrollTop + this.container.offsetHeight ||\n                offsetTop < this.container.scrollTop) {\n                this.container.scrollTop = offsetTop - this.container.offsetTop;\n            }\n        }\n    }\n\n    render() {\n        const EmojiText = sdk.getComponent('views.elements.EmojiText');\n\n        let position = 1;\n        let renderedCompletions = this.state.completions.map((completionResult, i) => {\n            let completions = completionResult.completions.map((completion, i) => {\n\n                const className = classNames('mx_Autocomplete_Completion', {\n                    'selected': position === this.state.selectionOffset,\n                });\n                let componentPosition = position;\n                position++;\n\n                let onMouseOver = () => this.setSelection(componentPosition);\n                let onClick = () => {\n                    this.setSelection(componentPosition);\n                    this.onCompletionClicked();\n                };\n\n                return React.cloneElement(completion.component, {\n                    key: i,\n                    ref: `completion${position - 1}`,\n                    className,\n                    onMouseOver,\n                    onClick,\n                });\n            });\n\n\n            return completions.length > 0 ? (\n                <div key={i} className=\"mx_Autocomplete_ProviderSection\">\n                    <EmojiText element=\"div\" className=\"mx_Autocomplete_provider_name\">{completionResult.provider.getName()}</EmojiText>\n                    {completionResult.provider.renderCompletions(completions)}\n                </div>\n            ) : null;\n        }).filter(completion => !!completion);\n\n        return !this.state.hide && renderedCompletions.length > 0 ? (\n            <div className=\"mx_Autocomplete\" ref={(e) => this.container = e}>\n                {renderedCompletions}\n            </div>\n        ) : null;\n    }\n}\n\nAutocomplete.propTypes = {\n    // the query string for which to show autocomplete suggestions\n    query: React.PropTypes.string.isRequired,\n\n    // method invoked with range and text content when completion is confirmed\n    onConfirm: React.PropTypes.func.isRequired,\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/AuxPanel.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[598,601],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[657,660],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[694,697],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var ObjectUtils = require('../../../ObjectUtils');","fix":{"range":[736,739],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":71,"column":9,"nodeType":"VariableDeclaration","source":"        var CallView = sdk.getComponent(\"voip.CallView\");","fix":{"range":[2283,2286],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":72,"column":9,"nodeType":"VariableDeclaration","source":"        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");","fix":{"range":[2341,2344],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":74,"column":9,"nodeType":"VariableDeclaration","source":"        var fileDropTarget = null;","fix":{"range":[2410,2413],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":88,"column":9,"nodeType":"VariableDeclaration","source":"        var conferenceCallNotification = null;","fix":{"range":[2933,2936],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":90,"column":13,"nodeType":"VariableDeclaration","source":"            var supportedText, joinText;","fix":{"range":[3038,3041],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":90,"column":13,"nodeType":"VariableDeclaration","source":"            var supportedText, joinText;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":93,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[3187,3200],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 96 exceeds the maximum line length of 90.","line":96,"column":1,"nodeType":"Program","source":"                    Join as <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'voice');}}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":96,"column":32,"nodeType":"JSXAttribute","source":"                    Join as <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'voice');}}"},{"ruleId":"max-len","severity":1,"message":"Line 97 exceeds the maximum line length of 90.","line":97,"column":1,"nodeType":"Program","source":"                               href=\"#\">voice</a> or <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'video'); }}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":97,"column":57,"nodeType":"JSXAttribute","source":"                               href=\"#\">voice</a> or <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'video'); }}"},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":101,"column":13,"nodeType":"BlockStatement","source":"            }","fix":{"range":[3554,3556],"text":"\n"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":109,"column":9,"nodeType":"VariableDeclaration","source":"        var callView = (","fix":{"range":[3819,3822],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 118 exceeds the maximum line length of 90.","line":118,"column":1,"nodeType":"Program","source":"            <div className=\"mx_RoomView_auxPanel\" style={{maxHeight: this.props.maxHeight}} >"}],"errorCount":2,"warningCount":17,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar sdk = require('../../../index');\nvar dis = require(\"../../../dispatcher\");\nvar ObjectUtils = require('../../../ObjectUtils');\n\nmodule.exports = React.createClass({\n    displayName: 'AuxPanel',\n\n    propTypes: {\n        // js-sdk room object\n        room: React.PropTypes.object.isRequired,\n\n        // Conference Handler implementation\n        conferenceHandler: React.PropTypes.object,\n\n        // set to true to show the file drop target\n        draggingFile: React.PropTypes.bool,\n\n        // set to true to show the 'active conf call' banner\n        displayConfCallNotification: React.PropTypes.bool,\n\n        // maxHeight attribute for the aux panel and the video\n        // therein\n        maxHeight: React.PropTypes.number,\n\n        // a callback which is called when the content of the aux panel changes\n        // content in a way that is likely to make it change size.\n        onResize: React.PropTypes.func,\n    },\n\n    shouldComponentUpdate: function(nextProps, nextState) {\n        return (!ObjectUtils.shallowEqual(this.props, nextProps) ||\n                !ObjectUtils.shallowEqual(this.state, nextState));\n    },\n\n    componentDidUpdate: function(prevProps, prevState) {\n        // most changes are likely to cause a resize\n        if (this.props.onResize) {\n            this.props.onResize();\n        }\n    },\n\n    onConferenceNotificationClick: function(ev, type) {\n        dis.dispatch({\n            action: 'place_call',\n            type: type,\n            room_id: this.props.room.roomId,\n        });\n        ev.stopPropagation();\n        ev.preventDefault();\n    },\n\n    render: function() {\n        var CallView = sdk.getComponent(\"voip.CallView\");\n        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");\n\n        var fileDropTarget = null;\n        if (this.props.draggingFile) {\n            fileDropTarget = (\n                <div className=\"mx_RoomView_fileDropTarget\">\n                    <div className=\"mx_RoomView_fileDropTargetLabel\"\n                      title=\"Drop File Here\">\n                        <TintableSvg src=\"img/upload-big.svg\" width=\"45\" height=\"59\"/>\n                        <br/>\n                        Drop file here to upload\n                    </div>\n                </div>\n            );\n        }\n\n        var conferenceCallNotification = null;\n        if (this.props.displayConfCallNotification) {\n            var supportedText, joinText;\n            if (!MatrixClientPeg.get().supportsVoip()) {\n                supportedText = \" (unsupported)\";\n            }\n            else {\n                joinText = (<span>\n                    Join as <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'voice');}}\n                               href=\"#\">voice</a> or <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'video'); }}\n                               href=\"#\">video</a>.\n                </span>);\n\n            }\n            conferenceCallNotification = (\n                <div className=\"mx_RoomView_ongoingConfCallNotification\">\n                    Ongoing conference call{ supportedText }. { joinText }\n                </div>\n            );\n        }\n\n        var callView = (\n            <CallView ref=\"callView\" room={this.props.room}\n                ConferenceHandler={this.props.conferenceHandler}\n                onResize={this.props.onResize}\n                maxVideoHeight={this.props.maxHeight}\n            />\n        );\n\n        return (\n            <div className=\"mx_RoomView_auxPanel\" style={{maxHeight: this.props.maxHeight}} >\n                { fileDropTarget }\n                { callView }\n                { conferenceCallNotification }\n                { this.props.children }\n            </div>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/EntityTile.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MatrixClientPeg' is assigned a value but never used.","line":21,"column":5,"nodeType":"Identifier","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[673,676],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var PRESENCE_CLASS = {","fix":{"range":[773,776],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":29,"column":47,"nodeType":"Property","source":"    \"unavailable\": \"mx_EntityTile_unavailable\"","fix":{"range":[920,920],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":64,"column":46,"nodeType":"Property","source":"        suppressOnHover: React.PropTypes.bool","fix":{"range":[2130,2130],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":75,"column":35,"nodeType":"Property","source":"            suppressOnHover: false","fix":{"range":[2488,2488],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":81,"column":25,"nodeType":"Property","source":"            hover: false","fix":{"range":[2583,2583],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":100,"column":71,"nodeType":"MemberExpression","source":"            this.props.presenceState, this.props.presenceLastActiveAgo","fix":{"range":[3115,3115],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":103,"column":9,"nodeType":"VariableDeclaration","source":"        var mainClassName = \"mx_EntityTile \";","fix":{"range":[3136,3139],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 104 exceeds the maximum line length of 90.","line":104,"column":1,"nodeType":"Program","source":"        mainClassName += presenceClass + (this.props.className ? (\" \" + this.props.className) : \"\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":105,"column":9,"nodeType":"VariableDeclaration","source":"        var nameEl;","fix":{"range":[3283,3286],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":110,"column":13,"nodeType":"VariableDeclaration","source":"            var activeAgo = this.props.presenceLastActiveAgo ?","fix":{"range":[3472,3475],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 111 exceeds the maximum line length of 90.","line":111,"column":1,"nodeType":"Program","source":"                (Date.now() - (this.props.presenceLastTs - this.props.presenceLastActiveAgo)) : -1;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":114,"column":13,"nodeType":"VariableDeclaration","source":"            var PresenceLabel = sdk.getComponent(\"rooms.PresenceLabel\");","fix":{"range":[3689,3692],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 117 exceeds the maximum line length of 90.","line":117,"column":1,"nodeType":"Program","source":"                    <img className=\"mx_EntityTile_chevron\" src=\"img/member_chevron.png\" width=\"8\" height=\"12\"/>"},{"ruleId":"max-len","severity":1,"message":"Line 118 exceeds the maximum line length of 90.","line":118,"column":1,"nodeType":"Program","source":"                    <EmojiText element=\"div\" className=\"mx_EntityTile_name_hover\">{name}</EmojiText>"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":124,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4293,4302],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":131,"column":9,"nodeType":"VariableDeclaration","source":"        var inviteButton;","fix":{"range":[4457,4460],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":140,"column":9,"nodeType":"VariableDeclaration","source":"        var power;","fix":{"range":[4729,4732],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":141,"column":9,"nodeType":"VariableDeclaration","source":"        var powerLevel = this.props.powerLevel;","fix":{"range":[4748,4751],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 143 exceeds the maximum line length of 90.","line":143,"column":1,"nodeType":"Program","source":"            power = <img src=\"img/mod.svg\" className=\"mx_EntityTile_power\" width=\"16\" height=\"17\" alt=\"Mod\"/>;"},{"ruleId":"max-len","severity":1,"message":"Line 146 exceeds the maximum line length of 90.","line":146,"column":1,"nodeType":"Program","source":"            power = <img src=\"img/admin.svg\" className=\"mx_EntityTile_power\" width=\"16\" height=\"17\" alt=\"Admin\"/>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":150,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');","fix":{"range":[5127,5130],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MemberAvatar' is assigned a value but never used.","line":150,"column":13,"nodeType":"Identifier","source":"        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":151,"column":9,"nodeType":"VariableDeclaration","source":"        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');","fix":{"range":[5196,5199],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 153 exceeds the maximum line length of 90.","line":153,"column":1,"nodeType":"Program","source":"        var av = this.props.avatarJsx || <BaseAvatar name={this.props.name} width={36} height={36} />;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":153,"column":9,"nodeType":"VariableDeclaration","source":"        var av = this.props.avatarJsx || <BaseAvatar name={this.props.name} width={36} height={36} />;","fix":{"range":[5262,5265],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":167,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[5839,5839],"text":","}}],"errorCount":8,"warningCount":22,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar sdk = require('../../../index');\nimport AccessibleButton from '../elements/AccessibleButton';\n\n\nvar PRESENCE_CLASS = {\n    \"offline\": \"mx_EntityTile_offline\",\n    \"online\": \"mx_EntityTile_online\",\n    \"unavailable\": \"mx_EntityTile_unavailable\"\n};\n\n\nfunction presenceClassForMember(presenceState, lastActiveAgo) {\n    // offline is split into two categories depending on whether we have\n    // a last_active_ago for them.\n    if (presenceState == 'offline') {\n        if (lastActiveAgo) {\n            return PRESENCE_CLASS['offline'] + '_beenactive';\n        } else {\n            return PRESENCE_CLASS['offline'] + '_neveractive';\n        }\n    } else if (presenceState) {\n        return PRESENCE_CLASS[presenceState];\n    } else {\n        return PRESENCE_CLASS['offline'] + '_neveractive';\n    }\n}\n\nmodule.exports = React.createClass({\n    displayName: 'EntityTile',\n\n    propTypes: {\n        name: React.PropTypes.string,\n        title: React.PropTypes.string,\n        avatarJsx: React.PropTypes.any, // <BaseAvatar />\n        className: React.PropTypes.string,\n        presenceState: React.PropTypes.string,\n        presenceLastActiveAgo: React.PropTypes.number,\n        presenceLastTs: React.PropTypes.number,\n        presenceCurrentlyActive: React.PropTypes.bool,\n        showInviteButton: React.PropTypes.bool,\n        shouldComponentUpdate: React.PropTypes.func,\n        onClick: React.PropTypes.func,\n        suppressOnHover: React.PropTypes.bool\n    },\n\n    getDefaultProps: function() {\n        return {\n            shouldComponentUpdate: function(nextProps, nextState) { return true; },\n            onClick: function() {},\n            presenceState: \"offline\",\n            presenceLastActiveAgo: 0,\n            presenceLastTs: 0,\n            showInviteButton: false,\n            suppressOnHover: false\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            hover: false\n        };\n    },\n\n    shouldComponentUpdate: function(nextProps, nextState) {\n        if (this.state.hover !== nextState.hover) return true;\n        return this.props.shouldComponentUpdate(nextProps, nextState);\n    },\n\n    mouseEnter: function(e) {\n        this.setState({ 'hover': true });\n    },\n\n    mouseLeave: function(e) {\n        this.setState({ 'hover': false });\n    },\n\n    render: function() {\n        const presenceClass = presenceClassForMember(\n            this.props.presenceState, this.props.presenceLastActiveAgo\n        );\n\n        var mainClassName = \"mx_EntityTile \";\n        mainClassName += presenceClass + (this.props.className ? (\" \" + this.props.className) : \"\");\n        var nameEl;\n        const {name} = this.props;\n\n        const EmojiText = sdk.getComponent('elements.EmojiText');\n        if (this.state.hover && !this.props.suppressOnHover) {\n            var activeAgo = this.props.presenceLastActiveAgo ?\n                (Date.now() - (this.props.presenceLastTs - this.props.presenceLastActiveAgo)) : -1;\n\n            mainClassName += \" mx_EntityTile_hover\";\n            var PresenceLabel = sdk.getComponent(\"rooms.PresenceLabel\");\n            nameEl = (\n                <div className=\"mx_EntityTile_details\">\n                    <img className=\"mx_EntityTile_chevron\" src=\"img/member_chevron.png\" width=\"8\" height=\"12\"/>\n                    <EmojiText element=\"div\" className=\"mx_EntityTile_name_hover\">{name}</EmojiText>\n                    <PresenceLabel activeAgo={ activeAgo }\n                        currentlyActive={this.props.presenceCurrentlyActive}\n                        presenceState={this.props.presenceState} />\n                </div>\n            );\n        }\n        else {\n            nameEl = (\n                <EmojiText element=\"div\" className=\"mx_EntityTile_name\">{name}</EmojiText>\n            );\n        }\n\n        var inviteButton;\n        if (this.props.showInviteButton) {\n            inviteButton = (\n                <div className=\"mx_EntityTile_invite\">\n                    <img src=\"img/plus.svg\" width=\"16\" height=\"16\" />\n                </div>\n            );\n        }\n\n        var power;\n        var powerLevel = this.props.powerLevel;\n        if (powerLevel >= 50 && powerLevel < 99) {\n            power = <img src=\"img/mod.svg\" className=\"mx_EntityTile_power\" width=\"16\" height=\"17\" alt=\"Mod\"/>;\n        }\n        if (powerLevel >= 99) {\n            power = <img src=\"img/admin.svg\" className=\"mx_EntityTile_power\" width=\"16\" height=\"17\" alt=\"Admin\"/>;\n        }\n\n\n        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');\n        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');\n\n        var av = this.props.avatarJsx || <BaseAvatar name={this.props.name} width={36} height={36} />;\n\n        return (\n            <AccessibleButton className={mainClassName} title={ this.props.title }\n                    onClick={ this.props.onClick } onMouseEnter={ this.mouseEnter }\n                    onMouseLeave={ this.mouseLeave }>\n                <div className=\"mx_EntityTile_avatar\">\n                    { av }\n                    { power }\n                </div>\n                { nameEl }\n                { inviteButton }\n            </AccessibleButton>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/EventTile.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var classNames = require(\"classnames\");","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require('../../../Modal');","fix":{"range":[653,656],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[693,696],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var TextForEvent = require('../../../TextForEvent');","fix":{"range":[730,733],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var ContextualMenu = require('../../structures/ContextualMenu');","fix":{"range":[851,854],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var dispatcher = require(\"../../../dispatcher\");","fix":{"range":[916,919],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","source":"var ObjectUtils = require('../../../ObjectUtils');","fix":{"range":[966,969],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":32,"column":1,"nodeType":"VariableDeclaration","source":"var bounce = false;","fix":{"range":[1018,1021],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'bounce' is assigned a value but never used.","line":32,"column":5,"nodeType":"Identifier","source":"var bounce = false;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":40,"column":1,"nodeType":"VariableDeclaration","source":"var eventTileTypes = {","fix":{"range":[1171,1174],"text":"let"}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'm.room.member'.","line":42,"column":5,"nodeType":"Literal","source":"    'm.room.member' : 'messages.TextualEvent',","fix":{"range":[1260,1261],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'm.call.invite'.","line":43,"column":5,"nodeType":"Literal","source":"    'm.call.invite' : 'messages.TextualEvent',","fix":{"range":[1307,1308],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'm.call.answer'.","line":44,"column":5,"nodeType":"Literal","source":"    'm.call.answer' : 'messages.TextualEvent',","fix":{"range":[1354,1355],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'm.call.hangup'.","line":45,"column":5,"nodeType":"Literal","source":"    'm.call.hangup' : 'messages.TextualEvent',","fix":{"range":[1401,1402],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'm.room.name'.","line":46,"column":5,"nodeType":"Literal","source":"    'm.room.name'   : 'messages.TextualEvent',","fix":{"range":[1446,1449],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'm.room.topic'.","line":47,"column":5,"nodeType":"Literal","source":"    'm.room.topic'  : 'messages.TextualEvent',","fix":{"range":[1494,1496],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'm.room.third_party_invite'.","line":48,"column":5,"nodeType":"Literal","source":"    'm.room.third_party_invite' : 'messages.TextualEvent',","fix":{"range":[1554,1555],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'm.room.history_visibility'.","line":49,"column":5,"nodeType":"Literal","source":"    'm.room.history_visibility' : 'messages.TextualEvent',","fix":{"range":[1613,1614],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'm.room.encryption'.","line":50,"column":5,"nodeType":"Literal","source":"    'm.room.encryption' : 'messages.TextualEvent',","fix":{"range":[1664,1665],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":53,"column":1,"nodeType":"VariableDeclaration","source":"var MAX_READ_AVATARS = 5;","fix":{"range":[1696,1699],"text":"let"}},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":66,"column":18,"nodeType":"CallExpression","source":"module.exports = WithMatrixClient(React.createClass({"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":171,"column":9,"nodeType":"VariableDeclaration","source":"        var client = this.props.matrixClient;","fix":{"range":[6077,6080],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":192,"column":9,"nodeType":"VariableDeclaration","source":"        var verified = null;","fix":{"range":[6794,6797],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":199,"column":31,"nodeType":"Property","source":"            verified: verified","fix":{"range":[6997,6997],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":204,"column":9,"nodeType":"VariableDeclaration","source":"        var keysA = Object.keys(objA);","fix":{"range":[7066,7069],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":205,"column":9,"nodeType":"VariableDeclaration","source":"        var keysB = Object.keys(objB);","fix":{"range":[7105,7108],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":211,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < keysA.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":212,"column":13,"nodeType":"VariableDeclaration","source":"            var key = keysA[i];","fix":{"range":[7280,7283],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":220,"column":17,"nodeType":"VariableDeclaration","source":"                var rA = objA[key];","fix":{"range":[7497,7500],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":221,"column":17,"nodeType":"VariableDeclaration","source":"                var rB = objB[key];","fix":{"range":[7533,7536],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":233,"column":22,"nodeType":"VariableDeclaration","source":"                for (var j = 0; j < rA.length; j++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":248,"column":9,"nodeType":"VariableDeclaration","source":"        var actions = this.props.matrixClient.getPushActionsForEvent(this.props.mxEvent);","fix":{"range":[8247,8250],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":253,"column":9,"nodeType":"Punctuator","source":"        {","fix":{"range":[8545,8554],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":261,"column":9,"nodeType":"VariableDeclaration","source":"        var MessageContextMenu = sdk.getComponent('context_menus.MessageContextMenu');","fix":{"range":[8683,8686],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":262,"column":9,"nodeType":"VariableDeclaration","source":"        var buttonRect = e.target.getBoundingClientRect();","fix":{"range":[8770,8773],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":265,"column":9,"nodeType":"VariableDeclaration","source":"        var x = buttonRect.right + window.pageXOffset;","fix":{"range":[8914,8917],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":266,"column":9,"nodeType":"VariableDeclaration","source":"        var y = (buttonRect.top + (buttonRect.height / 2) + window.pageYOffset) - 19;","fix":{"range":[8969,8972],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":267,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[9055,9058],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 273 exceeds the maximum line length of 90.","line":273,"column":1,"nodeType":"Program","source":"            eventTileOps: this.refs.tile && this.refs.tile.getEventTileOps ? this.refs.tile.getEventTileOps() : undefined,"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":276,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[9460,9460],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":283,"column":55,"nodeType":"Property","source":"            allReadAvatars: !this.state.allReadAvatars","fix":{"range":[9635,9635],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":288,"column":9,"nodeType":"VariableDeclaration","source":"        var ReadReceiptMarker = sdk.getComponent('rooms.ReadReceiptMarker');","fix":{"range":[9697,9700],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":289,"column":9,"nodeType":"VariableDeclaration","source":"        var avatars = [];","fix":{"range":[9774,9777],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":290,"column":9,"nodeType":"VariableDeclaration","source":"        var left = 0;","fix":{"range":[9800,9803],"text":"let"}},{"ruleId":"prefer-const","severity":1,"message":"'dayAfterEvent' is never reassigned. Use 'const' instead.","line":295,"column":13,"nodeType":"Identifier","source":"        let dayAfterEvent = new Date(this.props.mxEvent.getTs());","fix":{"range":[10025,10028],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'dayAfterEventTime' is never reassigned. Use 'const' instead.","line":300,"column":13,"nodeType":"Identifier","source":"        let dayAfterEventTime = dayAfterEvent.getTime();","fix":{"range":[10260,10263],"text":"const"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":302,"column":9,"nodeType":"VariableDeclaration","source":"        var receipts = this.props.readReceipts || [];","fix":{"range":[10318,10321],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":303,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < receipts.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":304,"column":13,"nodeType":"VariableDeclaration","source":"            var receipt = receipts[i];","fix":{"range":[10428,10431],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":306,"column":13,"nodeType":"VariableDeclaration","source":"            var hidden = true;","fix":{"range":[10468,10471],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":311,"column":13,"nodeType":"VariableDeclaration","source":"            var userId = receipt.roomMember.userId;","fix":{"range":[10617,10620],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":312,"column":13,"nodeType":"VariableDeclaration","source":"            var readReceiptInfo;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":333,"column":19,"nodeType":"JSXElement","source":"                />","fix":{"range":[11798,11798],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":342,"column":9,"nodeType":"VariableDeclaration","source":"        var remText;","fix":{"range":[12053,12056],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":344,"column":13,"nodeType":"VariableDeclaration","source":"            var remainder = receipts.length - MAX_READ_AVATARS;","fix":{"range":[12120,12123],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":361,"column":9,"nodeType":"VariableDeclaration","source":"        var mxEvent = this.props.mxEvent;","fix":{"range":[12658,12661],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 364 exceeds the maximum line length of 90.","line":364,"column":1,"nodeType":"Program","source":"            displayname: (mxEvent.sender ? mxEvent.sender.name : mxEvent.getSender()).replace(' (IRC)', ''),"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":369,"column":9,"nodeType":"VariableDeclaration","source":"        var event = this.props.mxEvent;","fix":{"range":[12936,12939],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":379,"column":9,"nodeType":"VariableDeclaration","source":"        var MessageTimestamp = sdk.getComponent('messages.MessageTimestamp');","fix":{"range":[13194,13197],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":380,"column":9,"nodeType":"VariableDeclaration","source":"        var SenderProfile = sdk.getComponent('messages.SenderProfile');","fix":{"range":[13272,13275],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":381,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');","fix":{"range":[13344,13347],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":385,"column":9,"nodeType":"VariableDeclaration","source":"        var content = this.props.mxEvent.getContent();","fix":{"range":[13534,13537],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":386,"column":9,"nodeType":"VariableDeclaration","source":"        var msgtype = content.msgtype;","fix":{"range":[13589,13592],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":387,"column":9,"nodeType":"VariableDeclaration","source":"        var eventType = this.props.mxEvent.getType();","fix":{"range":[13628,13631],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":391,"column":9,"nodeType":"VariableDeclaration","source":"        var isInfoMessage = (eventType !== 'm.room.message');","fix":{"range":[13799,13802],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":393,"column":9,"nodeType":"VariableDeclaration","source":"        var EventTileType = sdk.getComponent(eventTileTypes[eventType]);","fix":{"range":[13862,13865],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 400 exceeds the maximum line length of 90.","line":400,"column":1,"nodeType":"Program","source":"        var e2eEnabled = this.props.matrixClient.isRoomEncrypted(this.props.mxEvent.getRoomId());"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":400,"column":9,"nodeType":"VariableDeclaration","source":"        var e2eEnabled = this.props.matrixClient.isRoomEncrypted(this.props.mxEvent.getRoomId());","fix":{"range":[14155,14158],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 401 exceeds the maximum line length of 90.","line":401,"column":1,"nodeType":"Program","source":"        var isSending = (['sending', 'queued', 'encrypting'].indexOf(this.props.eventSendStatus) !== -1);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":401,"column":9,"nodeType":"VariableDeclaration","source":"        var isSending = (['sending', 'queued', 'encrypting'].indexOf(this.props.eventSendStatus) !== -1);","fix":{"range":[14253,14256],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":403,"column":9,"nodeType":"VariableDeclaration","source":"        var classes = classNames({","fix":{"range":[14360,14363],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 409 exceeds the maximum line length of 90.","line":409,"column":1,"nodeType":"Program","source":"            mx_EventTile_highlight: this.props.tileShape == 'notif' ? false : this.shouldHighlight(),"},{"ruleId":"max-len","severity":1,"message":"Line 411 exceeds the maximum line length of 90.","line":411,"column":1,"nodeType":"Program","source":"            mx_EventTile_continuation: this.props.tileShape ? '' : this.props.continuation,"},{"ruleId":"max-len","severity":1,"message":"Line 417 exceeds the maximum line length of 90.","line":417,"column":1,"nodeType":"Program","source":"            mx_EventTile_bad: this.props.mxEvent.getContent().msgtype === 'm.bad.encrypted',"},{"ruleId":"max-len","severity":1,"message":"Line 419 exceeds the maximum line length of 90.","line":419,"column":1,"nodeType":"Program","source":"        var permalink = \"#/room/\" + this.props.mxEvent.getRoomId() +\"/\"+ this.props.mxEvent.getId();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":419,"column":9,"nodeType":"VariableDeclaration","source":"        var permalink = \"#/room/\" + this.props.mxEvent.getRoomId() +\"/\"+ this.props.mxEvent.getId();","fix":{"range":[15311,15314],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":421,"column":9,"nodeType":"VariableDeclaration","source":"        var readAvatars = this.getReadAvatars();","fix":{"range":[15413,15416],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":423,"column":9,"nodeType":"VariableDeclaration","source":"        var avatar, sender;","fix":{"range":[15463,15466],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":423,"column":9,"nodeType":"VariableDeclaration","source":"        var avatar, sender;"},{"ruleId":"max-len","severity":1,"message":"Line 461 exceeds the maximum line length of 90.","line":461,"column":1,"nodeType":"Program","source":"                sender = <SenderProfile onClick={ this.onSenderProfileClick } mxEvent={this.props.mxEvent} aux={aux} />;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":462,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[17022,17035],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":468,"column":9,"nodeType":"VariableDeclaration","source":"        var editButton = (","fix":{"range":[17148,17151],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 469 exceeds the maximum line length of 90.","line":469,"column":1,"nodeType":"Program","source":"            <span className=\"mx_EventTile_editButton\" title=\"Options\" onClick={this.onEditClicked} />"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":472,"column":9,"nodeType":"VariableDeclaration","source":"        var e2e;","fix":{"range":[17289,17292],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 474 exceeds the maximum line length of 90.","line":474,"column":1,"nodeType":"Program","source":"        if ((e2eEnabled && this.props.eventSendStatus) || this.props.mxEvent.getType() === 'm.room.encryption') {"},{"ruleId":"max-len","severity":1,"message":"Line 475 exceeds the maximum line length of 90.","line":475,"column":1,"nodeType":"Program","source":"            e2e = <img style={{ cursor: 'initial', marginLeft: '-1px' }} className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\" />;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":476,"column":9,"nodeType":"Punctuator","source":"        }"},{"ruleId":"max-len","severity":1,"message":"Line 478 exceeds the maximum line length of 90.","line":478,"column":1,"nodeType":"Program","source":"        else if (this.props.mxEvent.isEncrypted() || (e2eEnabled && this.props.eventSendStatus)) {"},{"ruleId":"max-len","severity":1,"message":"Line 480 exceeds the maximum line length of 90.","line":480,"column":1,"nodeType":"Program","source":"                e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-blocked.svg\" width=\"12\" height=\"12\" style={{ marginLeft: \"-1px\" }} />;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":481,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[18007,18020],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 482 exceeds the maximum line length of 90.","line":482,"column":1,"nodeType":"Program","source":"            else if (this.state.verified == true || (e2eEnabled && this.props.eventSendStatus)) {"},{"ruleId":"max-len","severity":1,"message":"Line 483 exceeds the maximum line length of 90.","line":483,"column":1,"nodeType":"Program","source":"                e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\"/>;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":484,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[18265,18278],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 486 exceeds the maximum line length of 90.","line":486,"column":1,"nodeType":"Program","source":"                e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-warning.svg\" width=\"15\" height=\"12\" style={{ marginLeft: \"-2px\" }}/>;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":488,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[18484,18493],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 490 exceeds the maximum line length of 90.","line":490,"column":1,"nodeType":"Program","source":"            e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-unencrypted.svg\" width=\"12\" height=\"12\"/>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":494,"column":13,"nodeType":"VariableDeclaration","source":"            var room = this.props.matrixClient.getRoom(this.props.mxEvent.getRoomId());","fix":{"range":[18732,18735],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":520,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[19923,19932],"text":"        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":541,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[20955,20964],"text":"        "}}],"errorCount":5,"warningCount":95,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar classNames = require(\"classnames\");\nvar Modal = require('../../../Modal');\n\nvar sdk = require('../../../index');\nvar TextForEvent = require('../../../TextForEvent');\nimport WithMatrixClient from '../../../wrappers/WithMatrixClient';\n\nvar ContextualMenu = require('../../structures/ContextualMenu');\nvar dispatcher = require(\"../../../dispatcher\");\n\nvar ObjectUtils = require('../../../ObjectUtils');\n\nvar bounce = false;\ntry {\n    if (global.localStorage) {\n        bounce = global.localStorage.getItem('avatar_bounce') == 'true';\n    }\n} catch (e) {\n}\n\nvar eventTileTypes = {\n    'm.room.message': 'messages.MessageEvent',\n    'm.room.member' : 'messages.TextualEvent',\n    'm.call.invite' : 'messages.TextualEvent',\n    'm.call.answer' : 'messages.TextualEvent',\n    'm.call.hangup' : 'messages.TextualEvent',\n    'm.room.name'   : 'messages.TextualEvent',\n    'm.room.topic'  : 'messages.TextualEvent',\n    'm.room.third_party_invite' : 'messages.TextualEvent',\n    'm.room.history_visibility' : 'messages.TextualEvent',\n    'm.room.encryption' : 'messages.TextualEvent',\n};\n\nvar MAX_READ_AVATARS = 5;\n\n// Our component structure for EventTiles on the timeline is:\n//\n// .-EventTile------------------------------------------------.\n// | MemberAvatar (SenderProfile)                   TimeStamp |\n// |    .-{Message,Textual}Event---------------. Read Avatars |\n// |    |   .-MFooBody-------------------.     |              |\n// |    |   |  (only if MessageEvent)    |     |              |\n// |    |   '----------------------------'     |              |\n// |    '--------------------------------------'              |\n// '----------------------------------------------------------'\n\nmodule.exports = WithMatrixClient(React.createClass({\n    displayName: 'EventTile',\n\n    propTypes: {\n        /* MatrixClient instance for sender verification etc */\n        matrixClient: React.PropTypes.object.isRequired,\n\n        /* the MatrixEvent to show */\n        mxEvent: React.PropTypes.object.isRequired,\n\n        /* true if this is a continuation of the previous event (which has the\n         * effect of not showing another avatar/displayname\n         */\n        continuation: React.PropTypes.bool,\n\n        /* true if this is the last event in the timeline (which has the effect\n         * of always showing the timestamp)\n         */\n        last: React.PropTypes.bool,\n\n        /* true if this is search context (which has the effect of greying out\n         * the text\n         */\n        contextual: React.PropTypes.bool,\n\n        /* a list of words to highlight, ordered by longest first */\n        highlights: React.PropTypes.array,\n\n        /* link URL for the highlights */\n        highlightLink: React.PropTypes.string,\n\n        /* should show URL previews for this event */\n        showUrlPreview: React.PropTypes.bool,\n\n        /* is this the focused event */\n        isSelectedEvent: React.PropTypes.bool,\n\n        /* callback called when dynamic content in events are loaded */\n        onWidgetLoad: React.PropTypes.func,\n\n        /* a list of read-receipts we should show. Each object has a 'roomMember' and 'ts'. */\n        readReceipts: React.PropTypes.arrayOf(React.PropTypes.object),\n\n        /* opaque readreceipt info for each userId; used by ReadReceiptMarker\n         * to manage its animations. Should be an empty object when the room\n         * first loads\n         */\n        readReceiptMap: React.PropTypes.object,\n\n        /* A function which is used to check if the parent panel is being\n         * unmounted, to avoid unnecessary work. Should return true if we\n         * are being unmounted.\n         */\n        checkUnmounting: React.PropTypes.func,\n\n        /* the status of this event - ie, mxEvent.status. Denormalised to here so\n         * that we can tell when it changes. */\n        eventSendStatus: React.PropTypes.string,\n\n        /* the shape of the tile. by default, the layout is intended for the\n         * normal room timeline.  alternative values are: \"file_list\", \"file_grid\"\n         * and \"notif\".  This could be done by CSS, but it'd be horribly inefficient.\n         * It could also be done by subclassing EventTile, but that'd be quite\n         * boiilerplatey.  So just make the necessary render decisions conditional\n         * for now.\n         */\n        tileShape: React.PropTypes.string,\n    },\n\n    getInitialState: function() {\n        return {menu: false, allReadAvatars: false, verified: null};\n    },\n\n    componentWillMount: function() {\n        // don't do RR animations until we are mounted\n        this._suppressReadReceiptAnimation = true;\n        this._verifyEvent(this.props.mxEvent);\n    },\n\n    componentDidMount: function() {\n        this._suppressReadReceiptAnimation = false;\n        this.props.matrixClient.on(\"deviceVerificationChanged\",\n                                 this.onDeviceVerificationChanged);\n        this.props.mxEvent.on(\"Event.decrypted\", this._onDecrypted);\n    },\n\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.mxEvent !== this.props.mxEvent) {\n            this._verifyEvent(nextProps.mxEvent);\n        }\n    },\n\n    shouldComponentUpdate: function(nextProps, nextState) {\n        if (!ObjectUtils.shallowEqual(this.state, nextState)) {\n            return true;\n        }\n\n        if (!this._propsEqual(this.props, nextProps)) {\n            return true;\n        }\n\n        return false;\n    },\n\n    componentWillUnmount: function() {\n        var client = this.props.matrixClient;\n        client.removeListener(\"deviceVerificationChanged\",\n                              this.onDeviceVerificationChanged);\n        this.props.mxEvent.removeListener(\"Event.decrypted\", this._onDecrypted);\n    },\n\n    /** called when the event is decrypted after we show it.\n     */\n    _onDecrypted: function() {\n        // we need to re-verify the sending device.\n        this._verifyEvent(this.props.mxEvent);\n        this.forceUpdate();\n    },\n\n    onDeviceVerificationChanged: function(userId, device) {\n        if (userId == this.props.mxEvent.getSender()) {\n            this._verifyEvent(this.props.mxEvent);\n        }\n    },\n\n    _verifyEvent: function(mxEvent) {\n        var verified = null;\n\n        if (mxEvent.isEncrypted()) {\n            verified = this.props.matrixClient.isEventSenderVerified(mxEvent);\n        }\n\n        this.setState({\n            verified: verified\n        });\n    },\n\n    _propsEqual: function(objA, objB) {\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n\n        if (keysA.length !== keysB.length) {\n            return false;\n        }\n\n        for (var i = 0; i < keysA.length; i++) {\n            var key = keysA[i];\n\n            if (!objB.hasOwnProperty(key)) {\n                return false;\n            }\n\n            // need to deep-compare readReceipts\n            if (key == 'readReceipts') {\n                var rA = objA[key];\n                var rB = objB[key];\n                if (rA === rB) {\n                    continue;\n                }\n\n                if (!rA || !rB) {\n                    return false;\n                }\n\n                if (rA.length !== rB.length) {\n                    return false;\n                }\n                for (var j = 0; j < rA.length; j++) {\n                    if (rA[j].roomMember.userId !== rB[j].roomMember.userId) {\n                        return false;\n                    }\n                }\n            } else {\n                if (objA[key] !== objB[key]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    },\n\n    shouldHighlight: function() {\n        var actions = this.props.matrixClient.getPushActionsForEvent(this.props.mxEvent);\n        if (!actions || !actions.tweaks) { return false; }\n\n        // don't show self-highlights from another of our clients\n        if (this.props.mxEvent.getSender() === this.props.matrixClient.credentials.userId)\n        {\n            return false;\n        }\n\n        return actions.tweaks.highlight;\n    },\n\n    onEditClicked: function(e) {\n        var MessageContextMenu = sdk.getComponent('context_menus.MessageContextMenu');\n        var buttonRect = e.target.getBoundingClientRect();\n\n        // The window X and Y offsets are to adjust position when zoomed in to page\n        var x = buttonRect.right + window.pageXOffset;\n        var y = (buttonRect.top + (buttonRect.height / 2) + window.pageYOffset) - 19;\n        var self = this;\n        ContextualMenu.createMenu(MessageContextMenu, {\n            chevronOffset: 10,\n            mxEvent: this.props.mxEvent,\n            left: x,\n            top: y,\n            eventTileOps: this.refs.tile && this.refs.tile.getEventTileOps ? this.refs.tile.getEventTileOps() : undefined,\n            onFinished: function() {\n                self.setState({menu: false});\n            }\n        });\n        this.setState({menu: true});\n    },\n\n    toggleAllReadAvatars: function() {\n        this.setState({\n            allReadAvatars: !this.state.allReadAvatars\n        });\n    },\n\n    getReadAvatars: function() {\n        var ReadReceiptMarker = sdk.getComponent('rooms.ReadReceiptMarker');\n        var avatars = [];\n        var left = 0;\n\n        // It's possible that the receipt was sent several days AFTER the event.\n        // If it is, we want to display the complete date along with the HH:MM:SS,\n        // rather than just HH:MM:SS.\n        let dayAfterEvent = new Date(this.props.mxEvent.getTs());\n        dayAfterEvent.setDate(dayAfterEvent.getDate() + 1);\n        dayAfterEvent.setHours(0);\n        dayAfterEvent.setMinutes(0);\n        dayAfterEvent.setSeconds(0);\n        let dayAfterEventTime = dayAfterEvent.getTime();\n\n        var receipts = this.props.readReceipts || [];\n        for (var i = 0; i < receipts.length; ++i) {\n            var receipt = receipts[i];\n\n            var hidden = true;\n            if ((i < MAX_READ_AVATARS) || this.state.allReadAvatars) {\n                hidden = false;\n            }\n\n            var userId = receipt.roomMember.userId;\n            var readReceiptInfo;\n\n            if (this.props.readReceiptMap) {\n                readReceiptInfo = this.props.readReceiptMap[userId];\n                if (!readReceiptInfo) {\n                    readReceiptInfo = {};\n                    this.props.readReceiptMap[userId] = readReceiptInfo;\n                }\n            }\n\n            //console.log(\"i = \" + i + \", MAX_READ_AVATARS = \" + MAX_READ_AVATARS + \", allReadAvatars = \" + this.state.allReadAvatars + \" visibility = \" + style.visibility);\n            // add to the start so the most recent is on the end (ie. ends up rightmost)\n            avatars.unshift(\n                <ReadReceiptMarker key={userId} member={receipt.roomMember}\n                    leftOffset={left} hidden={hidden}\n                    readReceiptInfo={readReceiptInfo}\n                    checkUnmounting={this.props.checkUnmounting}\n                    suppressAnimation={this._suppressReadReceiptAnimation}\n                    onClick={this.toggleAllReadAvatars}\n                    timestamp={receipt.ts}\n                    showFullTimestamp={receipt.ts >= dayAfterEventTime}\n                />\n            );\n\n            // TODO: we keep the extra read avatars in the dom to make animation simpler\n            // we could optimise this to reduce the dom size.\n            if (!hidden) {\n                left -= 15;\n            }\n        }\n        var remText;\n        if (!this.state.allReadAvatars) {\n            var remainder = receipts.length - MAX_READ_AVATARS;\n            if (remainder > 0) {\n                remText = <span className=\"mx_EventTile_readAvatarRemainder\"\n                    onClick={this.toggleAllReadAvatars}\n                    style={{ left: left }}>{ remainder }+\n                </span>;\n                left -= 15;\n            }\n        }\n\n        return <span className=\"mx_EventTile_readAvatars\">\n            { remText }\n            { avatars }\n        </span>;\n    },\n\n    onSenderProfileClick: function(event) {\n        var mxEvent = this.props.mxEvent;\n        dispatcher.dispatch({\n            action: 'insert_displayname',\n            displayname: (mxEvent.sender ? mxEvent.sender.name : mxEvent.getSender()).replace(' (IRC)', ''),\n        });\n    },\n\n    onCryptoClicked: function(e) {\n        var event = this.props.mxEvent;\n\n        Modal.createDialogAsync((cb) => {\n            require(['../../../async-components/views/dialogs/EncryptedEventDialog'], cb);\n        }, {\n            event: event,\n        });\n    },\n\n    render: function() {\n        var MessageTimestamp = sdk.getComponent('messages.MessageTimestamp');\n        var SenderProfile = sdk.getComponent('messages.SenderProfile');\n        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');\n\n        //console.log(\"EventTile showUrlPreview for %s is %s\", this.props.mxEvent.getId(), this.props.showUrlPreview);\n\n        var content = this.props.mxEvent.getContent();\n        var msgtype = content.msgtype;\n        var eventType = this.props.mxEvent.getType();\n\n        // Info messages are basically information about commands processed on a\n        // room, or emote messages\n        var isInfoMessage = (eventType !== 'm.room.message');\n\n        var EventTileType = sdk.getComponent(eventTileTypes[eventType]);\n        // This shouldn't happen: the caller should check we support this type\n        // before trying to instantiate us\n        if (!EventTileType) {\n            throw new Error(\"Event type not supported\");\n        }\n\n        var e2eEnabled = this.props.matrixClient.isRoomEncrypted(this.props.mxEvent.getRoomId());\n        var isSending = (['sending', 'queued', 'encrypting'].indexOf(this.props.eventSendStatus) !== -1);\n\n        var classes = classNames({\n            mx_EventTile: true,\n            mx_EventTile_info: isInfoMessage,\n            mx_EventTile_encrypting: this.props.eventSendStatus == 'encrypting',\n            mx_EventTile_sending: isSending,\n            mx_EventTile_notSent: this.props.eventSendStatus == 'not_sent',\n            mx_EventTile_highlight: this.props.tileShape == 'notif' ? false : this.shouldHighlight(),\n            mx_EventTile_selected: this.props.isSelectedEvent,\n            mx_EventTile_continuation: this.props.tileShape ? '' : this.props.continuation,\n            mx_EventTile_last: this.props.last,\n            mx_EventTile_contextual: this.props.contextual,\n            menu: this.state.menu,\n            mx_EventTile_verified: this.state.verified == true,\n            mx_EventTile_unverified: this.state.verified == false,\n            mx_EventTile_bad: this.props.mxEvent.getContent().msgtype === 'm.bad.encrypted',\n        });\n        var permalink = \"#/room/\" + this.props.mxEvent.getRoomId() +\"/\"+ this.props.mxEvent.getId();\n\n        var readAvatars = this.getReadAvatars();\n\n        var avatar, sender;\n        let avatarSize;\n        let needsSenderProfile;\n\n        if (this.props.tileShape === \"notif\") {\n            avatarSize = 24;\n            needsSenderProfile = true;\n        } else if (isInfoMessage) {\n            // a small avatar, with no sender profile, for\n            // joins/parts/etc\n            avatarSize = 14;\n            needsSenderProfile = false;\n        } else if (this.props.continuation && this.props.tileShape !== \"file_grid\") {\n            // no avatar or sender profile for continuation messages\n            avatarSize = 0;\n            needsSenderProfile = false;\n        } else {\n            avatarSize = 30;\n            needsSenderProfile = true;\n        }\n\n        if (this.props.mxEvent.sender && avatarSize) {\n            avatar = (\n                    <div className=\"mx_EventTile_avatar\">\n                        <MemberAvatar member={this.props.mxEvent.sender}\n                            width={avatarSize} height={avatarSize}\n                            viewUserOnClick={true}\n                        />\n                    </div>\n            );\n        }\n\n        if (needsSenderProfile) {\n            let aux = null;\n            if (!this.props.tileShape) {\n                if (msgtype === 'm.image') aux = \"sent an image\";\n                else if (msgtype === 'm.video') aux = \"sent a video\";\n                else if (msgtype === 'm.file') aux = \"uploaded a file\";\n                sender = <SenderProfile onClick={ this.onSenderProfileClick } mxEvent={this.props.mxEvent} aux={aux} />;\n            }\n            else {\n                sender = <SenderProfile mxEvent={this.props.mxEvent} />;\n            }\n        }\n\n        var editButton = (\n            <span className=\"mx_EventTile_editButton\" title=\"Options\" onClick={this.onEditClicked} />\n        );\n\n        var e2e;\n        // cosmetic padlocks:\n        if ((e2eEnabled && this.props.eventSendStatus) || this.props.mxEvent.getType() === 'm.room.encryption') {\n            e2e = <img style={{ cursor: 'initial', marginLeft: '-1px' }} className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\" />;\n        }\n        // real padlocks\n        else if (this.props.mxEvent.isEncrypted() || (e2eEnabled && this.props.eventSendStatus)) {\n            if (this.props.mxEvent.getContent().msgtype === 'm.bad.encrypted') {\n                e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-blocked.svg\" width=\"12\" height=\"12\" style={{ marginLeft: \"-1px\" }} />;\n            }\n            else if (this.state.verified == true || (e2eEnabled && this.props.eventSendStatus)) {\n                e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\"/>;\n            }\n            else {\n                e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-warning.svg\" width=\"15\" height=\"12\" style={{ marginLeft: \"-2px\" }}/>;\n            }\n        }\n        else if (e2eEnabled) {\n            e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-unencrypted.svg\" width=\"12\" height=\"12\"/>;\n        }\n\n        if (this.props.tileShape === \"notif\") {\n            var room = this.props.matrixClient.getRoom(this.props.mxEvent.getRoomId());\n\n            return (\n                <div className={classes}>\n                    <div className=\"mx_EventTile_roomName\">\n                        <a href={ permalink }>\n                            { room ? room.name : '' }\n                        </a>\n                    </div>\n                    <div className=\"mx_EventTile_senderDetails\">\n                        { avatar }\n                        <a href={ permalink }>\n                            { sender }\n                            <MessageTimestamp ts={this.props.mxEvent.getTs()} />\n                        </a>\n                    </div>\n                    <div className=\"mx_EventTile_line\" >\n                        <EventTileType ref=\"tile\"\n                            mxEvent={this.props.mxEvent}\n                            highlights={this.props.highlights}\n                            highlightLink={this.props.highlightLink}\n                            showUrlPreview={this.props.showUrlPreview}\n                            onWidgetLoad={this.props.onWidgetLoad} />\n                    </div>\n                </div>\n            );\n        }\n        else if (this.props.tileShape === \"file_grid\") {\n            return (\n                <div className={classes}>\n                    <div className=\"mx_EventTile_line\" >\n                        <EventTileType ref=\"tile\"\n                            mxEvent={this.props.mxEvent}\n                            highlights={this.props.highlights}\n                            highlightLink={this.props.highlightLink}\n                            showUrlPreview={this.props.showUrlPreview}\n                            tileShape={this.props.tileShape}\n                            onWidgetLoad={this.props.onWidgetLoad} />\n                    </div>\n                    <a className=\"mx_EventTile_senderDetailsLink\" href={ permalink }>\n                        <div className=\"mx_EventTile_senderDetails\">\n                                { sender }\n                                <MessageTimestamp ts={this.props.mxEvent.getTs()} />\n                        </div>\n                    </a>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className={classes}>\n                    <div className=\"mx_EventTile_msgOption\">\n                        { readAvatars }\n                    </div>\n                    { avatar }\n                    { sender }\n                    <div className=\"mx_EventTile_line\">\n                        <a href={ permalink }>\n                            <MessageTimestamp ts={this.props.mxEvent.getTs()} />\n                        </a>\n                        { e2e }\n                        <EventTileType ref=\"tile\"\n                            mxEvent={this.props.mxEvent}\n                            highlights={this.props.highlights}\n                            highlightLink={this.props.highlightLink}\n                            showUrlPreview={this.props.showUrlPreview}\n                            onWidgetLoad={this.props.onWidgetLoad} />\n                        { editButton }\n                    </div>\n                </div>\n            );\n        }\n    },\n}));\n\nmodule.exports.haveTileForEvent = function(e) {\n    if (e.isRedacted()) return false;\n    if (eventTileTypes[e.getType()] == undefined) return false;\n    if (eventTileTypes[e.getType()] == 'messages.TextualEvent') {\n        return TextForEvent.textForEvent(e) !== '';\n    } else {\n        return true;\n    }\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/LinkPreviewWidget.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[577,580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[608,611],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[645,648],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var ImageUtils = require('../../../ImageUtils');","fix":{"range":[704,707],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require('../../../Modal');","fix":{"range":[753,756],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var linkify = require('linkifyjs');","fix":{"range":[793,796],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var linkifyElement = require('linkifyjs/element');","fix":{"range":[829,832],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var linkifyMatrix = require('../../../linkify-matrix');","fix":{"range":[880,883],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":43,"column":26,"nodeType":"Property","source":"            preview: null","fix":{"range":[1508,1508],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 49 exceeds the maximum line length of 90.","line":49,"column":1,"nodeType":"Program","source":"        MatrixClientPeg.get().getUrlPreview(this.props.link, this.props.mxEvent.getTs()).then((res)=>{"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":55,"column":40,"nodeType":"MemberExpression","source":"                this.props.onWidgetLoad","fix":{"range":[1872,1872],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":79,"column":9,"nodeType":"VariableDeclaration","source":"        var p = this.state.preview;","fix":{"range":[2476,2479],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":82,"column":9,"nodeType":"VariableDeclaration","source":"        var ImageView = sdk.getComponent(\"elements.ImageView\");","fix":{"range":[2591,2594],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":84,"column":9,"nodeType":"VariableDeclaration","source":"        var src = p[\"og:image\"];","fix":{"range":[2656,2659],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":89,"column":9,"nodeType":"VariableDeclaration","source":"        var params = {","fix":{"range":[2806,2809],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":102,"column":9,"nodeType":"VariableDeclaration","source":"        var p = this.state.preview;","fix":{"range":[3203,3206],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":106,"column":9,"nodeType":"VariableDeclaration","source":"        var image = p[\"og:image\"];","fix":{"range":[3393,3396],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":107,"column":9,"nodeType":"VariableDeclaration","source":"        var imageMaxWidth = 100, imageMaxHeight = 100;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":107,"column":9,"nodeType":"VariableDeclaration","source":"        var imageMaxWidth = 100, imageMaxHeight = 100;","fix":{"range":[3428,3431],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 109 exceeds the maximum line length of 90.","line":109,"column":1,"nodeType":"Program","source":"            image = MatrixClientPeg.get().mxcUrlToHttp(image, imageMaxWidth, imageMaxHeight);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":112,"column":9,"nodeType":"VariableDeclaration","source":"        var thumbHeight = imageMaxHeight;","fix":{"range":[3639,3642],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 114 exceeds the maximum line length of 90.","line":114,"column":1,"nodeType":"Program","source":"            thumbHeight = ImageUtils.thumbHeight(p[\"og:image:width\"], p[\"og:image:height\"], imageMaxWidth, imageMaxHeight);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":117,"column":9,"nodeType":"VariableDeclaration","source":"        var img;","fix":{"range":[3875,3878],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 119 exceeds the maximum line length of 90.","line":119,"column":1,"nodeType":"Program","source":"            img = <div className=\"mx_LinkPreviewWidget_image\" style={{ height: thumbHeight }}>"},{"ruleId":"max-len","severity":1,"message":"Line 120 exceeds the maximum line length of 90.","line":120,"column":1,"nodeType":"Program","source":"                    <img style={{ maxWidth: imageMaxWidth, maxHeight: imageMaxHeight }} src={ image } onClick={ this.onImageClick }/>"},{"ruleId":"max-len","severity":1,"message":"Line 128 exceeds the maximum line length of 90.","line":128,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_LinkPreviewWidget_title\"><a href={ this.props.link } target=\"_blank\" rel=\"noopener\">{ p[\"og:title\"] }</a></div>"},{"ruleId":"max-len","severity":1,"message":"Line 129 exceeds the maximum line length of 90.","line":129,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_LinkPreviewWidget_siteName\">{ p[\"og:site_name\"] ? (\" - \" + p[\"og:site_name\"]) : null }</div>"},{"ruleId":"max-len","severity":1,"message":"Line 134 exceeds the maximum line length of 90.","line":134,"column":1,"nodeType":"Program","source":"                <img className=\"mx_LinkPreviewWidget_cancel\" src=\"img/cancel.svg\" width=\"18\" height=\"18\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":138,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[4997,4997],"text":","}}],"errorCount":3,"warningCount":26,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nvar sdk = require('../../../index');\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar ImageUtils = require('../../../ImageUtils');\nvar Modal = require('../../../Modal');\n\nvar linkify = require('linkifyjs');\nvar linkifyElement = require('linkifyjs/element');\nvar linkifyMatrix = require('../../../linkify-matrix');\nlinkifyMatrix(linkify);\n\nmodule.exports = React.createClass({\n    displayName: 'LinkPreviewWidget',\n\n    propTypes: {\n        link: React.PropTypes.string.isRequired, // the URL being previewed\n        mxEvent: React.PropTypes.object.isRequired, // the Event associated with the preview\n        onCancelClick: React.PropTypes.func, // called when the preview's cancel ('hide') button is clicked\n        onWidgetLoad: React.PropTypes.func, // called when the preview's contents has loaded\n    },\n\n    getInitialState: function() {\n        return {\n            preview: null\n        };\n    },\n\n    componentWillMount: function() {\n        this.unmounted = false;\n        MatrixClientPeg.get().getUrlPreview(this.props.link, this.props.mxEvent.getTs()).then((res)=>{\n            if (this.unmounted) {\n                return;\n            }\n            this.setState(\n                { preview: res },\n                this.props.onWidgetLoad\n            );\n        }, (error)=>{\n            console.error(\"Failed to get preview for \" + this.props.link + \" \" + error);\n        }).done();\n    },\n\n    componentDidMount: function() {\n        if (this.refs.description) {\n            linkifyElement(this.refs.description, linkifyMatrix.options);\n        }\n    },\n\n    componentDidUpdate: function() {\n        if (this.refs.description) {\n            linkifyElement(this.refs.description, linkifyMatrix.options);\n        }\n    },\n\n    componentWillUnmount: function() {\n        this.unmounted = true;\n    },\n\n    onImageClick: function(ev) {\n        var p = this.state.preview;\n        if (ev.button != 0 || ev.metaKey) return;\n        ev.preventDefault();\n        var ImageView = sdk.getComponent(\"elements.ImageView\");\n\n        var src = p[\"og:image\"];\n        if (src && src.startsWith(\"mxc://\")) {\n            src = MatrixClientPeg.get().mxcUrlToHttp(src);\n        }\n\n        var params = {\n            src: src,\n            width: p[\"og:image:width\"],\n            height: p[\"og:image:height\"],\n            name: p[\"og:title\"] || p[\"og:description\"] || this.props.link,\n            fileSize: p[\"matrix:image:size\"],\n            link: this.props.link,\n        };\n\n        Modal.createDialog(ImageView, params, \"mx_Dialog_lightbox\");\n    },\n\n    render: function() {\n        var p = this.state.preview;\n        if (!p) return <div/>;\n\n        // FIXME: do we want to factor out all image displaying between this and MImageBody - especially for lightboxing?\n        var image = p[\"og:image\"];\n        var imageMaxWidth = 100, imageMaxHeight = 100;\n        if (image && image.startsWith(\"mxc://\")) {\n            image = MatrixClientPeg.get().mxcUrlToHttp(image, imageMaxWidth, imageMaxHeight);\n        }\n\n        var thumbHeight = imageMaxHeight;\n        if (p[\"og:image:width\"] && p[\"og:image:height\"]) {\n            thumbHeight = ImageUtils.thumbHeight(p[\"og:image:width\"], p[\"og:image:height\"], imageMaxWidth, imageMaxHeight);\n        }\n\n        var img;\n        if (image) {\n            img = <div className=\"mx_LinkPreviewWidget_image\" style={{ height: thumbHeight }}>\n                    <img style={{ maxWidth: imageMaxWidth, maxHeight: imageMaxHeight }} src={ image } onClick={ this.onImageClick }/>\n                  </div>;\n        }\n\n        return (\n            <div className=\"mx_LinkPreviewWidget\" >\n                { img }\n                <div className=\"mx_LinkPreviewWidget_caption\">\n                    <div className=\"mx_LinkPreviewWidget_title\"><a href={ this.props.link } target=\"_blank\" rel=\"noopener\">{ p[\"og:title\"] }</a></div>\n                    <div className=\"mx_LinkPreviewWidget_siteName\">{ p[\"og:site_name\"] ? (\" - \" + p[\"og:site_name\"]) : null }</div>\n                    <div className=\"mx_LinkPreviewWidget_description\" ref=\"description\">\n                        { p[\"og:description\"] }\n                    </div>\n                </div>\n                <img className=\"mx_LinkPreviewWidget_cancel\" src=\"img/cancel.svg\" width=\"18\" height=\"18\"\n                     onClick={ this.props.onCancelClick }/>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/MemberDeviceInfo.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":9,"nodeType":"VariableDeclaration","source":"        var indicator = null;","fix":{"range":[711,714],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":9,"nodeType":"VariableDeclaration","source":"        var DeviceVerifyButtons = sdk.getComponent('elements.DeviceVerifyButtons');","fix":{"range":[741,744],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 28 exceeds the maximum line length of 90.","line":28,"column":1,"nodeType":"Program","source":"                    <img src=\"img/e2e-blocked.svg\" width=\"12\" height=\"12\" style={{ marginLeft: \"-1px\" }} alt=\"Blacklisted\"/>"},{"ruleId":"max-len","severity":1,"message":"Line 34 exceeds the maximum line length of 90.","line":34,"column":1,"nodeType":"Program","source":"                    <img src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\" alt=\"Verified\"/>"},{"ruleId":"max-len","severity":1,"message":"Line 40 exceeds the maximum line length of 90.","line":40,"column":1,"nodeType":"Program","source":"                    <img src=\"img/e2e-warning.svg\" width=\"15\" height=\"12\" style={{ marginLeft: \"-2px\" }} alt=\"Unverified\"/>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":45,"column":9,"nodeType":"VariableDeclaration","source":"        var deviceName = this.props.device.ambiguous ?","fix":{"range":[1703,1706],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 46 exceeds the maximum line length of 90.","line":46,"column":1,"nodeType":"Program","source":"            (this.props.device.getDisplayName() ? this.props.device.getDisplayName() : \"\") + \" (\" + this.props.device.deviceId + \")\" :"},{"ruleId":"max-len","severity":1,"message":"Line 59 exceeds the maximum line length of 90.","line":59,"column":1,"nodeType":"Program","source":"                <DeviceVerifyButtons userId={this.props.userId} device={this.props.device} />"}],"errorCount":0,"warningCount":8,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport sdk from '../../../index';\n\nexport default class MemberDeviceInfo extends React.Component {\n    render() {\n        var indicator = null;\n        var DeviceVerifyButtons = sdk.getComponent('elements.DeviceVerifyButtons');\n\n        if (this.props.device.isBlocked()) {\n            indicator = (\n                    <div className=\"mx_MemberDeviceInfo_blacklisted\">\n                    <img src=\"img/e2e-blocked.svg\" width=\"12\" height=\"12\" style={{ marginLeft: \"-1px\" }} alt=\"Blacklisted\"/>\n                    </div>\n            );\n        } else if (this.props.device.isVerified()) {\n            indicator = (\n                    <div className=\"mx_MemberDeviceInfo_verified\">\n                    <img src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\" alt=\"Verified\"/>\n                    </div>\n            );\n        } else {\n            indicator = (\n                    <div className=\"mx_MemberDeviceInfo_unverified\">\n                    <img src=\"img/e2e-warning.svg\" width=\"15\" height=\"12\" style={{ marginLeft: \"-2px\" }} alt=\"Unverified\"/>\n                    </div>\n            );\n        }\n\n        var deviceName = this.props.device.ambiguous ?\n            (this.props.device.getDisplayName() ? this.props.device.getDisplayName() : \"\") + \" (\" + this.props.device.deviceId + \")\" :\n            this.props.device.getDisplayName();\n\n        // add the deviceId as a titletext to help with debugging\n        return (\n            <div className=\"mx_MemberDeviceInfo\"\n                    title={\"device id: \" + this.props.device.deviceId} >\n                <div className=\"mx_MemberDeviceInfo_deviceInfo\">\n                    <div className=\"mx_MemberDeviceInfo_deviceId\">\n                        {deviceName}\n                        {indicator}\n                    </div>\n                </div>\n                <DeviceVerifyButtons userId={this.props.userId} device={this.props.device} />\n            </div>\n        );\n    }\n}\n\nMemberDeviceInfo.displayName = 'MemberDeviceInfo';\nMemberDeviceInfo.propTypes = {\n    userId: React.PropTypes.string.isRequired,\n    device: React.PropTypes.object.isRequired,\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/MemberInfo.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[740,743],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var classNames = require('classnames');","fix":{"range":[770,773],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[810,813],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[852,855],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":32,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[891,894],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":1,"nodeType":"VariableDeclaration","source":"var createRoom = require('../../../createRoom');","fix":{"range":[928,931],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":1,"nodeType":"VariableDeclaration","source":"var DMRoomMap = require('../../../utils/DMRoomMap');","fix":{"range":[977,980],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":35,"column":1,"nodeType":"VariableDeclaration","source":"var Unread = require('../../../Unread');","fix":{"range":[1030,1033],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":1,"nodeType":"VariableDeclaration","source":"var Receipt = require('../../../utils/Receipt');","fix":{"range":[1071,1074],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":1,"nodeType":"VariableDeclaration","source":"var WithMatrixClient = require('../../../wrappers/WithMatrixClient');","fix":{"range":[1120,1123],"text":"let"}},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":40,"column":18,"nodeType":"CallExpression","source":"module.exports = WithMatrixClient(React.createClass({"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":51,"column":38,"nodeType":"Property","source":"            onFinished: function() {}","fix":{"range":[1601,1601],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":61,"column":35,"nodeType":"Property","source":"                modifyLevel: false","fix":{"range":[1811,1811],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":100,"column":9,"nodeType":"VariableDeclaration","source":"        var client = this.props.matrixClient;","fix":{"range":[3093,3096],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 102 exceeds the maximum line length of 90.","line":102,"column":1,"nodeType":"Program","source":"            client.removeListener(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":118,"column":9,"nodeType":"VariableDeclaration","source":"        var names = Object.create(null);","fix":{"range":[3968,3971],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":119,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < devices.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":120,"column":13,"nodeType":"VariableDeclaration","source":"            var name = devices[i].getDisplayName();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":121,"column":13,"nodeType":"VariableDeclaration","source":"            var indexList = names[name] || [];","fix":{"range":[4116,4119],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":142,"column":13,"nodeType":"VariableDeclaration","source":"            var devices = this.props.matrixClient.getStoredDevicesForUser(userId);","fix":{"range":[4738,4741],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 167 exceeds the maximum line length of 90.","line":167,"column":1,"nodeType":"Program","source":"        if (Receipt.findReadReceiptFromUserId(receiptEvent, this.props.matrixClient.credentials.userId)) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":187,"column":9,"nodeType":"VariableDeclaration","source":"        var newState = this._calculateOpsPermissions(member);","fix":{"range":[5909,5912],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":205,"column":9,"nodeType":"VariableDeclaration","source":"        var cancelled = false;","fix":{"range":[6369,6372],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":208,"column":9,"nodeType":"VariableDeclaration","source":"        var client = this.props.matrixClient;","fix":{"range":[6468,6471],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":209,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[6514,6517],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":217,"column":13,"nodeType":"VariableDeclaration","source":"            var devices = client.getStoredDevicesForUser(member.userId);","fix":{"range":[6824,6827],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":227,"column":9,"nodeType":"VariableDeclaration","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[7194,7197],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":228,"column":9,"nodeType":"VariableDeclaration","source":"        var roomId = this.props.member.roomId;","fix":{"range":[7261,7264],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":229,"column":9,"nodeType":"VariableDeclaration","source":"        var target = this.props.member.userId;","fix":{"range":[7308,7311],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":238,"column":45,"nodeType":"Property","source":"                    description: err.message","fix":{"range":[7837,7837],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":240,"column":14,"nodeType":"FunctionExpression","source":"            }","fix":{"range":[7871,7871],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":248,"column":9,"nodeType":"VariableDeclaration","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[8047,8050],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":249,"column":9,"nodeType":"VariableDeclaration","source":"        var roomId = this.props.member.roomId;","fix":{"range":[8114,8117],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":250,"column":9,"nodeType":"VariableDeclaration","source":"        var target = this.props.member.userId;","fix":{"range":[8161,8164],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":260,"column":45,"nodeType":"Property","source":"                    description: err.message","fix":{"range":[8700,8700],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":262,"column":14,"nodeType":"FunctionExpression","source":"            }","fix":{"range":[8734,8734],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":270,"column":9,"nodeType":"VariableDeclaration","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[8917,8920],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":271,"column":9,"nodeType":"VariableDeclaration","source":"        var roomId = this.props.member.roomId;","fix":{"range":[8984,8987],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":272,"column":9,"nodeType":"VariableDeclaration","source":"        var target = this.props.member.userId;","fix":{"range":[9031,9034],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":273,"column":9,"nodeType":"VariableDeclaration","source":"        var room = this.props.matrixClient.getRoom(roomId);","fix":{"range":[9078,9081],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":278,"column":9,"nodeType":"VariableDeclaration","source":"        var powerLevelEvent = room.currentState.getStateEvents(","fix":{"range":[9226,9229],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":279,"column":38,"nodeType":"Literal","source":"            \"m.room.power_levels\", \"\"","fix":{"range":[9319,9319],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":285,"column":9,"nodeType":"VariableDeclaration","source":"        var isMuted = this.state.muted;","fix":{"range":[9438,9441],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":286,"column":9,"nodeType":"VariableDeclaration","source":"        var powerLevels = powerLevelEvent.getContent();","fix":{"range":[9478,9481],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":287,"column":9,"nodeType":"VariableDeclaration","source":"        var levelToSend = (","fix":{"range":[9534,9537],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":291,"column":9,"nodeType":"VariableDeclaration","source":"        var level;","fix":{"range":[9694,9697],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":294,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[9780,9789],"text":"        "}},{"ruleId":"use-isnan","severity":2,"message":"Use the isNaN function to compare with NaN.","line":300,"column":13,"nodeType":"BinaryExpression","source":"        if (level !== NaN) {"},{"ruleId":"max-len","severity":1,"message":"Line 302 exceeds the maximum line length of 90.","line":302,"column":1,"nodeType":"Program","source":"            this.props.matrixClient.setPowerLevel(roomId, target, level, powerLevelEvent).then("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":310,"column":49,"nodeType":"Property","source":"                        description: err.message","fix":{"range":[10497,10497],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":312,"column":18,"nodeType":"FunctionExpression","source":"                }","fix":{"range":[10539,10539],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":321,"column":9,"nodeType":"VariableDeclaration","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[10743,10746],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":322,"column":9,"nodeType":"VariableDeclaration","source":"        var roomId = this.props.member.roomId;","fix":{"range":[10810,10813],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":323,"column":9,"nodeType":"VariableDeclaration","source":"        var target = this.props.member.userId;","fix":{"range":[10857,10860],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":324,"column":9,"nodeType":"VariableDeclaration","source":"        var room = this.props.matrixClient.getRoom(roomId);","fix":{"range":[10904,10907],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":329,"column":9,"nodeType":"VariableDeclaration","source":"        var powerLevelEvent = room.currentState.getStateEvents(","fix":{"range":[11052,11055],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":330,"column":38,"nodeType":"Literal","source":"            \"m.room.power_levels\", \"\"","fix":{"range":[11145,11145],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":336,"column":9,"nodeType":"VariableDeclaration","source":"        var me = room.getMember(this.props.matrixClient.credentials.userId);","fix":{"range":[11264,11267],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":341,"column":9,"nodeType":"VariableDeclaration","source":"        var defaultLevel = powerLevelEvent.getContent().users_default;","fix":{"range":[11427,11430],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":342,"column":9,"nodeType":"VariableDeclaration","source":"        var modLevel = me.powerLevel - 1;","fix":{"range":[11498,11501],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":345,"column":9,"nodeType":"VariableDeclaration","source":"        var newLevel = this.state.isTargetMod ? defaultLevel : modLevel;","fix":{"range":[11678,11681],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 347 exceeds the maximum line length of 90.","line":347,"column":1,"nodeType":"Program","source":"        this.props.matrixClient.setPowerLevel(roomId, target, parseInt(newLevel), powerLevelEvent).then("},{"ruleId":"max-len","severity":1,"message":"Line 354 exceeds the maximum line length of 90.","line":354,"column":1,"nodeType":"Program","source":"                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":354,"column":21,"nodeType":"VariableDeclaration","source":"                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");","fix":{"range":[12248,12251],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 357 exceeds the maximum line length of 90.","line":357,"column":1,"nodeType":"Program","source":"                        description: \"This action cannot be performed by a guest user. Please register to be able to do this.\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":357,"column":127,"nodeType":"Property","source":"                        description: \"This action cannot be performed by a guest user. Please register to be able to do this.\"","fix":{"range":[12564,12564],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":362,"column":49,"nodeType":"Property","source":"                        description: err.message","fix":{"range":[12773,12773],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":365,"column":14,"nodeType":"FunctionExpression","source":"            }","fix":{"range":[12829,12829],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 374 exceeds the maximum line length of 90.","line":374,"column":1,"nodeType":"Program","source":"        this.props.matrixClient.setPowerLevel(roomId, target, parseInt(powerLevel), powerLevelEvent).then("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":383,"column":45,"nodeType":"Property","source":"                    description: err.message","fix":{"range":[13707,13707],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":385,"column":14,"nodeType":"FunctionExpression","source":"            }","fix":{"range":[13741,13741],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":393,"column":9,"nodeType":"VariableDeclaration","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[13942,13945],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorDialog' is assigned a value but never used.","line":393,"column":13,"nodeType":"Identifier","source":"        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":394,"column":9,"nodeType":"VariableDeclaration","source":"        var roomId = this.props.member.roomId;","fix":{"range":[14009,14012],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":395,"column":9,"nodeType":"VariableDeclaration","source":"        var target = this.props.member.userId;","fix":{"range":[14056,14059],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":396,"column":9,"nodeType":"VariableDeclaration","source":"        var room = this.props.matrixClient.getRoom(roomId);","fix":{"range":[14103,14106],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":397,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[14163,14166],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":402,"column":9,"nodeType":"VariableDeclaration","source":"        var powerLevelEvent = room.currentState.getStateEvents(","fix":{"range":[14276,14279],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":403,"column":38,"nodeType":"Literal","source":"            \"m.room.power_levels\", \"\"","fix":{"range":[14369,14369],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 410 exceeds the maximum line length of 90.","line":410,"column":1,"nodeType":"Program","source":"            var myPower = powerLevelEvent.getContent().users[this.props.matrixClient.credentials.userId];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":410,"column":13,"nodeType":"VariableDeclaration","source":"            var myPower = powerLevelEvent.getContent().users[this.props.matrixClient.credentials.userId];","fix":{"range":[14542,14545],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":412,"column":17,"nodeType":"VariableDeclaration","source":"                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[14714,14717],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 417 exceeds the maximum line length of 90.","line":417,"column":1,"nodeType":"Program","source":"                            You will not be able to undo this change as you are promoting the user to have the same power level as yourself.<br/>"},{"ruleId":"max-len","severity":1,"message":"Line 423 exceeds the maximum line length of 90.","line":423,"column":1,"nodeType":"Program","source":"                            self._applyPowerChange(roomId, target, powerLevel, powerLevelEvent);"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":424,"column":25,"nodeType":"Punctuator","source":"                        }","fix":{"range":[15410,15435],"text":"                        "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":430,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[15577,15590],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":434,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[15705,15714],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":457,"column":9,"nodeType":"VariableDeclaration","source":"        var defaultPerms = {","fix":{"range":[16361,16364],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":460,"column":31,"nodeType":"Property","source":"            modifyLevel: false","fix":{"range":[16459,16459],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":462,"column":9,"nodeType":"VariableDeclaration","source":"        var room = this.props.matrixClient.getRoom(member.roomId);","fix":{"range":[16479,16482],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":466,"column":9,"nodeType":"VariableDeclaration","source":"        var powerLevels = room.currentState.getStateEvents(","fix":{"range":[16610,16613],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":467,"column":38,"nodeType":"Literal","source":"            \"m.room.power_levels\", \"\"","fix":{"range":[16699,16699],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":472,"column":9,"nodeType":"VariableDeclaration","source":"        var me = room.getMember(this.props.matrixClient.credentials.userId);","fix":{"range":[16790,16793],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":476,"column":9,"nodeType":"VariableDeclaration","source":"        var them = member;","fix":{"range":[16929,16932],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":479,"column":51,"nodeType":"CallExpression","source":"                me, them, powerLevels.getContent()","fix":{"range":[17063,17063],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":482,"column":82,"nodeType":"Property","source":"            isTargetMod: them.powerLevel > powerLevels.getContent().users_default","fix":{"range":[17226,17226],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":487,"column":9,"nodeType":"VariableDeclaration","source":"        var can = {","fix":{"range":[17318,17321],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":491,"column":31,"nodeType":"Property","source":"            modifyLevel: false","fix":{"range":[17434,17434],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":493,"column":9,"nodeType":"VariableDeclaration","source":"        var canAffectUser = them.powerLevel < me.powerLevel;","fix":{"range":[17454,17457],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":498,"column":9,"nodeType":"VariableDeclaration","source":"        var editPowerLevel = (","fix":{"range":[17670,17673],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":502,"column":9,"nodeType":"VariableDeclaration","source":"        var levelToSend = (","fix":{"range":[17837,17840],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":519,"column":9,"nodeType":"VariableDeclaration","source":"        var levelToSend = (","fix":{"range":[18467,18470],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 520 exceeds the maximum line length of 90.","line":520,"column":1,"nodeType":"Program","source":"            (powerLevelContent.events ? powerLevelContent.events[\"m.room.message\"] : null) ||"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":529,"column":25,"nodeType":"Property","source":"            member: null","fix":{"range":[18801,18801],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 534 exceeds the maximum line length of 90.","line":534,"column":1,"nodeType":"Program","source":"        var avatarUrl = this.props.member.user ? this.props.member.user.avatarUrl : this.props.member.events.member.getContent().avatar_url;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":534,"column":9,"nodeType":"VariableDeclaration","source":"        var avatarUrl = this.props.member.user ? this.props.member.user.avatarUrl : this.props.member.events.member.getContent().avatar_url;","fix":{"range":[18868,18871],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":537,"column":9,"nodeType":"VariableDeclaration","source":"        var httpUrl = this.props.matrixClient.mxcUrlToHttp(avatarUrl);","fix":{"range":[19041,19044],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":538,"column":9,"nodeType":"VariableDeclaration","source":"        var ImageView = sdk.getComponent(\"elements.ImageView\");","fix":{"range":[19112,19115],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":539,"column":9,"nodeType":"VariableDeclaration","source":"        var params = {","fix":{"range":[19176,19179],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":541,"column":41,"nodeType":"Property","source":"            name: this.props.member.name","fix":{"range":[19257,19257],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":552,"column":9,"nodeType":"VariableDeclaration","source":"        var devices = this.state.devices;","fix":{"range":[19460,19463],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":553,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberDeviceInfo = sdk.getComponent('rooms.MemberDeviceInfo');","fix":{"range":[19502,19505],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":554,"column":9,"nodeType":"VariableDeclaration","source":"        var Spinner = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[19577,19580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":556,"column":9,"nodeType":"VariableDeclaration","source":"        var devComponents;","fix":{"range":[19638,19641],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":566,"column":18,"nodeType":"VariableDeclaration","source":"            for (var i = 0; i < devices.length; i++) {"},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":584,"column":9,"nodeType":"VariableDeclaration","source":"        var startChat, kickButton, banButton, muteButton, giveModButton, spinner;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":584,"column":9,"nodeType":"VariableDeclaration","source":"        var startChat, kickButton, banButton, muteButton, giveModButton, spinner;","fix":{"range":[20541,20544],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":607,"column":27,"nodeType":"JSXElement","source":"                        />","fix":{"range":[21781,21781],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":634,"column":13,"nodeType":"VariableDeclaration","source":"            var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[22617,22620],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 666 exceeds the maximum line length of 90.","line":666,"column":1,"nodeType":"Program","source":"            var giveOpLabel = this.state.isTargetMod ? \"Revoke Moderator\" : \"Make Moderator\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":666,"column":13,"nodeType":"VariableDeclaration","source":"            var giveOpLabel = this.state.isTargetMod ? \"Revoke Moderator\" : \"Make Moderator\";","fix":{"range":[23811,23814],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 667 exceeds the maximum line length of 90.","line":667,"column":1,"nodeType":"Program","source":"            giveModButton = <AccessibleButton className=\"mx_MemberInfo_field\" onClick={this.onModToggle}>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":675,"column":9,"nodeType":"VariableDeclaration","source":"        var adminTools;","fix":{"range":[24268,24271],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":692,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');","fix":{"range":[24775,24778],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":693,"column":9,"nodeType":"VariableDeclaration","source":"        var PowerSelector = sdk.getComponent('elements.PowerSelector');","fix":{"range":[24844,24847],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 697 exceeds the maximum line length of 90.","line":697,"column":1,"nodeType":"Program","source":"                <AccessibleButton className=\"mx_MemberInfo_cancel\" onClick={this.onCancel}> <img src=\"img/cancel.svg\" width=\"18\" height=\"18\"/></AccessibleButton>"},{"ruleId":"max-len","severity":1,"message":"Line 699 exceeds the maximum line length of 90.","line":699,"column":1,"nodeType":"Program","source":"                    <MemberAvatar onClick={this.onMemberAvatarClick} member={this.props.member} width={48} height={48} />"},{"ruleId":"max-len","severity":1,"message":"Line 709 exceeds the maximum line length of 90.","line":709,"column":1,"nodeType":"Program","source":"                        Level: <b><PowerSelector controlled={true} value={ parseInt(this.props.member.powerLevel) } disabled={ !this.state.can.modifyLevel } onChange={ this.onPowerChange }/></b>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":722,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[26145,26145],"text":","}}],"errorCount":27,"warningCount":102,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\n * State vars:\n * 'can': {\n *   kick: boolean,\n *   ban: boolean,\n *   mute: boolean,\n *   modifyLevel: boolean\n * },\n * 'muted': boolean,\n * 'isTargetMod': boolean\n */\nvar React = require('react');\nvar classNames = require('classnames');\nvar dis = require(\"../../../dispatcher\");\nvar Modal = require(\"../../../Modal\");\nvar sdk = require('../../../index');\nvar createRoom = require('../../../createRoom');\nvar DMRoomMap = require('../../../utils/DMRoomMap');\nvar Unread = require('../../../Unread');\nvar Receipt = require('../../../utils/Receipt');\nvar WithMatrixClient = require('../../../wrappers/WithMatrixClient');\nimport AccessibleButton from '../elements/AccessibleButton';\n\nmodule.exports = WithMatrixClient(React.createClass({\n    displayName: 'MemberInfo',\n\n    propTypes: {\n        matrixClient: React.PropTypes.object.isRequired,\n        member: React.PropTypes.object.isRequired,\n        onFinished: React.PropTypes.func,\n    },\n\n    getDefaultProps: function() {\n        return {\n            onFinished: function() {}\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            can: {\n                kick: false,\n                ban: false,\n                mute: false,\n                modifyLevel: false\n            },\n            muted: false,\n            isTargetMod: false,\n            updating: 0,\n            devicesLoading: true,\n            devices: null,\n        };\n    },\n\n    componentWillMount: function() {\n        this._cancelDeviceList = null;\n\n        // only display the devices list if our client supports E2E\n        this._enableDevices = this.props.matrixClient.isCryptoEnabled();\n\n        const cli = this.props.matrixClient;\n        cli.on(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);\n        cli.on(\"Room\", this.onRoom);\n        cli.on(\"deleteRoom\", this.onDeleteRoom);\n        cli.on(\"Room.timeline\", this.onRoomTimeline);\n        cli.on(\"Room.name\", this.onRoomName);\n        cli.on(\"Room.receipt\", this.onRoomReceipt);\n        cli.on(\"RoomState.events\", this.onRoomStateEvents);\n        cli.on(\"RoomMember.name\", this.onRoomMemberName);\n        cli.on(\"accountData\", this.onAccountData);\n    },\n\n    componentDidMount: function() {\n        this._updateStateForNewMember(this.props.member);\n    },\n\n    componentWillReceiveProps: function(newProps) {\n        if (this.props.member.userId != newProps.member.userId) {\n            this._updateStateForNewMember(newProps.member);\n        }\n    },\n\n    componentWillUnmount: function() {\n        var client = this.props.matrixClient;\n        if (client) {\n            client.removeListener(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);\n            client.removeListener(\"Room\", this.onRoom);\n            client.removeListener(\"deleteRoom\", this.onDeleteRoom);\n            client.removeListener(\"Room.timeline\", this.onRoomTimeline);\n            client.removeListener(\"Room.name\", this.onRoomName);\n            client.removeListener(\"Room.receipt\", this.onRoomReceipt);\n            client.removeListener(\"RoomState.events\", this.onRoomStateEvents);\n            client.removeListener(\"RoomMember.name\", this.onRoomMemberName);\n            client.removeListener(\"accountData\", this.onAccountData);\n        }\n        if (this._cancelDeviceList) {\n            this._cancelDeviceList();\n        }\n    },\n\n    _disambiguateDevices: function(devices) {\n        var names = Object.create(null);\n        for (var i = 0; i < devices.length; i++) {\n            var name = devices[i].getDisplayName();\n            var indexList = names[name] || [];\n            indexList.push(i);\n            names[name] = indexList;\n        }\n        for (name in names) {\n            if (names[name].length > 1) {\n                names[name].forEach((j)=>{\n                    devices[j].ambiguous = true;\n                });\n            }\n        }\n    },\n\n    onDeviceVerificationChanged: function(userId, device) {\n        if (!this._enableDevices) {\n            return;\n        }\n\n        if (userId == this.props.member.userId) {\n            // no need to re-download the whole thing; just update our copy of\n            // the list.\n            var devices = this.props.matrixClient.getStoredDevicesForUser(userId);\n            this.setState({devices: devices});\n        }\n    },\n\n    onRoom: function(room) {\n        this.forceUpdate();\n    },\n\n    onDeleteRoom: function(roomId) {\n        this.forceUpdate();\n    },\n\n    onRoomTimeline: function(ev, room, toStartOfTimeline) {\n        if (toStartOfTimeline) return;\n        this.forceUpdate();\n    },\n\n    onRoomName: function(room) {\n        this.forceUpdate();\n    },\n\n    onRoomReceipt: function(receiptEvent, room) {\n        // because if we read a notification, it will affect notification count\n        // only bother updating if there's a receipt from us\n        if (Receipt.findReadReceiptFromUserId(receiptEvent, this.props.matrixClient.credentials.userId)) {\n            this.forceUpdate();\n        }\n    },\n\n    onRoomStateEvents: function(ev, state) {\n        this.forceUpdate();\n    },\n\n    onRoomMemberName: function(ev, member) {\n        this.forceUpdate();\n    },\n\n    onAccountData: function(ev) {\n        if (ev.getType() == 'm.direct') {\n            this.forceUpdate();\n        }\n    },\n\n    _updateStateForNewMember: function(member) {\n        var newState = this._calculateOpsPermissions(member);\n        newState.devicesLoading = true;\n        newState.devices = null;\n        this.setState(newState);\n\n        if (this._cancelDeviceList) {\n            this._cancelDeviceList();\n            this._cancelDeviceList = null;\n        }\n\n        this._downloadDeviceList(member);\n    },\n\n    _downloadDeviceList: function(member) {\n        if (!this._enableDevices) {\n            return;\n        }\n\n        var cancelled = false;\n        this._cancelDeviceList = function() { cancelled = true; };\n\n        var client = this.props.matrixClient;\n        var self = this;\n        client.downloadKeys([member.userId], true).finally(function() {\n            self._cancelDeviceList = null;\n        }).done(function() {\n            if (cancelled) {\n                // we got cancelled - presumably a different user now\n                return;\n            }\n            var devices = client.getStoredDevicesForUser(member.userId);\n            self._disambiguateDevices(devices);\n            self.setState({devicesLoading: false, devices: devices});\n        }, function(err) {\n            console.log(\"Error downloading devices\", err);\n            self.setState({devicesLoading: false});\n        });\n    },\n\n    onKick: function() {\n        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n        var roomId = this.props.member.roomId;\n        var target = this.props.member.userId;\n        this.setState({ updating: this.state.updating + 1 });\n        this.props.matrixClient.kick(roomId, target).then(function() {\n                // NO-OP; rely on the m.room.member event coming down else we could\n                // get out of sync if we force setState here!\n                console.log(\"Kick success\");\n            }, function(err) {\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Kick error\",\n                    description: err.message\n                });\n            }\n        ).finally(()=>{\n            this.setState({ updating: this.state.updating - 1 });\n        });\n        this.props.onFinished();\n    },\n\n    onBan: function() {\n        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n        var roomId = this.props.member.roomId;\n        var target = this.props.member.userId;\n        this.setState({ updating: this.state.updating + 1 });\n        this.props.matrixClient.ban(roomId, target).then(\n            function() {\n                // NO-OP; rely on the m.room.member event coming down else we could\n                // get out of sync if we force setState here!\n                console.log(\"Ban success\");\n            }, function(err) {\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Ban error\",\n                    description: err.message\n                });\n            }\n        ).finally(()=>{\n            this.setState({ updating: this.state.updating - 1 });\n        });\n        this.props.onFinished();\n    },\n\n    onMuteToggle: function() {\n        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n        var roomId = this.props.member.roomId;\n        var target = this.props.member.userId;\n        var room = this.props.matrixClient.getRoom(roomId);\n        if (!room) {\n            this.props.onFinished();\n            return;\n        }\n        var powerLevelEvent = room.currentState.getStateEvents(\n            \"m.room.power_levels\", \"\"\n        );\n        if (!powerLevelEvent) {\n            this.props.onFinished();\n            return;\n        }\n        var isMuted = this.state.muted;\n        var powerLevels = powerLevelEvent.getContent();\n        var levelToSend = (\n            (powerLevels.events ? powerLevels.events[\"m.room.message\"] : null) ||\n            powerLevels.events_default\n        );\n        var level;\n        if (isMuted) { // unmute\n            level = levelToSend;\n        }\n        else { // mute\n            level = levelToSend - 1;\n        }\n        level = parseInt(level);\n\n        if (level !== NaN) {\n            this.setState({ updating: this.state.updating + 1 });\n            this.props.matrixClient.setPowerLevel(roomId, target, level, powerLevelEvent).then(\n                function() {\n                    // NO-OP; rely on the m.room.member event coming down else we could\n                    // get out of sync if we force setState here!\n                    console.log(\"Mute toggle success\");\n                }, function(err) {\n                    Modal.createDialog(ErrorDialog, {\n                        title: \"Mute error\",\n                        description: err.message\n                    });\n                }\n            ).finally(()=>{\n                this.setState({ updating: this.state.updating - 1 });\n            });\n        }\n        this.props.onFinished();\n    },\n\n    onModToggle: function() {\n        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n        var roomId = this.props.member.roomId;\n        var target = this.props.member.userId;\n        var room = this.props.matrixClient.getRoom(roomId);\n        if (!room) {\n            this.props.onFinished();\n            return;\n        }\n        var powerLevelEvent = room.currentState.getStateEvents(\n            \"m.room.power_levels\", \"\"\n        );\n        if (!powerLevelEvent) {\n            this.props.onFinished();\n            return;\n        }\n        var me = room.getMember(this.props.matrixClient.credentials.userId);\n        if (!me) {\n            this.props.onFinished();\n            return;\n        }\n        var defaultLevel = powerLevelEvent.getContent().users_default;\n        var modLevel = me.powerLevel - 1;\n        if (modLevel > 50 && defaultLevel < 50) modLevel = 50; // try to stick with the vector level defaults\n        // toggle the level\n        var newLevel = this.state.isTargetMod ? defaultLevel : modLevel;\n        this.setState({ updating: this.state.updating + 1 });\n        this.props.matrixClient.setPowerLevel(roomId, target, parseInt(newLevel), powerLevelEvent).then(\n            function() {\n                // NO-OP; rely on the m.room.member event coming down else we could\n                // get out of sync if we force setState here!\n                console.log(\"Mod toggle success\");\n            }, function(err) {\n                if (err.errcode == 'M_GUEST_ACCESS_FORBIDDEN') {\n                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");\n                    Modal.createDialog(NeedToRegisterDialog, {\n                        title: \"Please Register\",\n                        description: \"This action cannot be performed by a guest user. Please register to be able to do this.\"\n                    });\n                } else {\n                    Modal.createDialog(ErrorDialog, {\n                        title: \"Moderator toggle error\",\n                        description: err.message\n                    });\n                }\n            }\n        ).finally(()=>{\n            this.setState({ updating: this.state.updating - 1 });\n        });\n        this.props.onFinished();\n    },\n\n    _applyPowerChange: function(roomId, target, powerLevel, powerLevelEvent) {\n        this.setState({ updating: this.state.updating + 1 });\n        this.props.matrixClient.setPowerLevel(roomId, target, parseInt(powerLevel), powerLevelEvent).then(\n            function() {\n                // NO-OP; rely on the m.room.member event coming down else we could\n                // get out of sync if we force setState here!\n                console.log(\"Power change success\");\n            }, function(err) {\n                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Failure to change power level\",\n                    description: err.message\n                });\n            }\n        ).finally(()=>{\n            this.setState({ updating: this.state.updating - 1 });\n        }).done();\n        this.props.onFinished();\n    },\n\n    onPowerChange: function(powerLevel) {\n        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n        var roomId = this.props.member.roomId;\n        var target = this.props.member.userId;\n        var room = this.props.matrixClient.getRoom(roomId);\n        var self = this;\n        if (!room) {\n            this.props.onFinished();\n            return;\n        }\n        var powerLevelEvent = room.currentState.getStateEvents(\n            \"m.room.power_levels\", \"\"\n        );\n        if (!powerLevelEvent) {\n            this.props.onFinished();\n            return;\n        }\n        if (powerLevelEvent.getContent().users) {\n            var myPower = powerLevelEvent.getContent().users[this.props.matrixClient.credentials.userId];\n            if (parseInt(myPower) === parseInt(powerLevel)) {\n                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n                Modal.createDialog(QuestionDialog, {\n                    title: \"Warning\",\n                    description:\n                        <div>\n                            You will not be able to undo this change as you are promoting the user to have the same power level as yourself.<br/>\n                            Are you sure?\n                        </div>,\n                    button: \"Continue\",\n                    onFinished: function(confirmed) {\n                        if (confirmed) {\n                            self._applyPowerChange(roomId, target, powerLevel, powerLevelEvent);\n                        }\n                        else {\n                            self.props.onFinished();\n                        }\n                    },\n                });\n            }\n            else {\n                this._applyPowerChange(roomId, target, powerLevel, powerLevelEvent);\n            }\n        }\n        else {\n            this._applyPowerChange(roomId, target, powerLevel, powerLevelEvent);\n        }\n    },\n\n    onNewDMClick: function() {\n        this.setState({ updating: this.state.updating + 1 });\n        createRoom({dmUserId: this.props.member.userId}).finally(() => {\n            this.props.onFinished();\n            this.setState({ updating: this.state.updating - 1 });\n        }).done();\n    },\n\n    onLeaveClick: function() {\n        dis.dispatch({\n            action: 'leave_room',\n            room_id: this.props.member.roomId,\n        });\n        this.props.onFinished();\n    },\n\n    _calculateOpsPermissions: function(member) {\n        var defaultPerms = {\n            can: {},\n            muted: false,\n            modifyLevel: false\n        };\n        var room = this.props.matrixClient.getRoom(member.roomId);\n        if (!room) {\n            return defaultPerms;\n        }\n        var powerLevels = room.currentState.getStateEvents(\n            \"m.room.power_levels\", \"\"\n        );\n        if (!powerLevels) {\n            return defaultPerms;\n        }\n        var me = room.getMember(this.props.matrixClient.credentials.userId);\n        if (!me) {\n            return defaultPerms;\n        }\n        var them = member;\n        return {\n            can: this._calculateCanPermissions(\n                me, them, powerLevels.getContent()\n            ),\n            muted: this._isMuted(them, powerLevels.getContent()),\n            isTargetMod: them.powerLevel > powerLevels.getContent().users_default\n        };\n    },\n\n    _calculateCanPermissions: function(me, them, powerLevels) {\n        var can = {\n            kick: false,\n            ban: false,\n            mute: false,\n            modifyLevel: false\n        };\n        var canAffectUser = them.powerLevel < me.powerLevel;\n        if (!canAffectUser) {\n            //console.log(\"Cannot affect user: %s >= %s\", them.powerLevel, me.powerLevel);\n            return can;\n        }\n        var editPowerLevel = (\n            (powerLevels.events ? powerLevels.events[\"m.room.power_levels\"] : null) ||\n            powerLevels.state_default\n        );\n        var levelToSend = (\n            (powerLevels.events ? powerLevels.events[\"m.room.message\"] : null) ||\n            powerLevels.events_default\n        );\n\n        can.kick = me.powerLevel >= powerLevels.kick;\n        can.ban = me.powerLevel >= powerLevels.ban;\n        can.mute = me.powerLevel >= editPowerLevel;\n        can.toggleMod = me.powerLevel > them.powerLevel && them.powerLevel >= levelToSend;\n        can.modifyLevel = me.powerLevel > them.powerLevel;\n        return can;\n    },\n\n    _isMuted: function(member, powerLevelContent) {\n        if (!powerLevelContent || !member) {\n            return false;\n        }\n        var levelToSend = (\n            (powerLevelContent.events ? powerLevelContent.events[\"m.room.message\"] : null) ||\n            powerLevelContent.events_default\n        );\n        return member.powerLevel < levelToSend;\n    },\n\n    onCancel: function(e) {\n        dis.dispatch({\n            action: \"view_user\",\n            member: null\n        });\n    },\n\n    onMemberAvatarClick: function() {\n        var avatarUrl = this.props.member.user ? this.props.member.user.avatarUrl : this.props.member.events.member.getContent().avatar_url;\n        if(!avatarUrl) return;\n\n        var httpUrl = this.props.matrixClient.mxcUrlToHttp(avatarUrl);\n        var ImageView = sdk.getComponent(\"elements.ImageView\");\n        var params = {\n            src: httpUrl,\n            name: this.props.member.name\n        };\n\n        Modal.createDialog(ImageView, params, \"mx_Dialog_lightbox\");\n    },\n\n    _renderDevices: function() {\n        if (!this._enableDevices) {\n            return null;\n        }\n\n        var devices = this.state.devices;\n        var MemberDeviceInfo = sdk.getComponent('rooms.MemberDeviceInfo');\n        var Spinner = sdk.getComponent(\"elements.Spinner\");\n\n        var devComponents;\n        if (this.state.devicesLoading) {\n            // still loading\n            devComponents = <Spinner />;\n        } else if (devices === null) {\n            devComponents = \"Unable to load device list\";\n        } else if (devices.length === 0) {\n            devComponents = \"No registered devices\";\n        } else {\n            devComponents = [];\n            for (var i = 0; i < devices.length; i++) {\n                devComponents.push(<MemberDeviceInfo key={i}\n                                       userId={this.props.member.userId}\n                                       device={devices[i]}/>);\n            }\n        }\n\n        return (\n            <div>\n                <h3>Devices</h3>\n                <div className=\"mx_MemberInfo_devices\">\n                    {devComponents}\n                </div>\n            </div>\n        );\n    },\n\n    render: function() {\n        var startChat, kickButton, banButton, muteButton, giveModButton, spinner;\n        if (this.props.member.userId !== this.props.matrixClient.credentials.userId) {\n            const dmRoomMap = new DMRoomMap(this.props.matrixClient);\n            const dmRooms = dmRoomMap.getDMRoomsForUserId(this.props.member.userId);\n\n            const RoomTile = sdk.getComponent(\"rooms.RoomTile\");\n\n            const tiles = [];\n            for (const roomId of dmRooms) {\n                const room = this.props.matrixClient.getRoom(roomId);\n                if (room) {\n                    const me = room.getMember(this.props.matrixClient.credentials.userId);\n                    const highlight = (\n                        room.getUnreadNotificationCount('highlight') > 0 ||\n                        me.membership == \"invite\"\n                    );\n                    tiles.push(\n                        <RoomTile key={room.roomId} room={room}\n                            collapsed={false}\n                            selected={false}\n                            unread={Unread.doesRoomHaveUnreadMessages(room)}\n                            highlight={highlight}\n                            isInvite={me.membership == \"invite\"}\n                        />\n                    );\n                }\n            }\n\n            const labelClasses = classNames({\n                mx_MemberInfo_createRoom_label: true,\n                mx_RoomTile_name: true,\n            });\n            const startNewChat = <AccessibleButton\n                className=\"mx_MemberInfo_createRoom\"\n                onClick={this.onNewDMClick}\n            >\n                <div className=\"mx_RoomTile_avatar\">\n                    <img src=\"img/create-big.svg\" width=\"26\" height=\"26\" />\n                </div>\n                <div className={labelClasses}><i>Start new chat</i></div>\n            </AccessibleButton>;\n\n            startChat = <div>\n                <h3>Direct chats</h3>\n                {tiles}\n                {startNewChat}\n            </div>;\n        }\n\n        if (this.state.updating) {\n            var Loader = sdk.getComponent(\"elements.Spinner\");\n            spinner = <Loader imgClassName=\"mx_ContextualMenu_spinner\"/>;\n        }\n\n        if (this.state.can.kick) {\n            const membership = this.props.member.membership;\n            const kickLabel = membership === \"invite\" ? \"Disinvite\" : \"Kick\";\n            kickButton = (\n                <AccessibleButton className=\"mx_MemberInfo_field\"\n                        onClick={this.onKick}>\n                    {kickLabel}\n                </AccessibleButton>\n            );\n        }\n        if (this.state.can.ban) {\n            banButton = (\n                <AccessibleButton className=\"mx_MemberInfo_field\"\n                        onClick={this.onBan}>\n                    Ban\n                </AccessibleButton>\n            );\n        }\n        if (this.state.can.mute) {\n            const muteLabel = this.state.muted ? \"Unmute\" : \"Mute\";\n            muteButton = (\n                <AccessibleButton className=\"mx_MemberInfo_field\"\n                        onClick={this.onMuteToggle}>\n                    {muteLabel}\n                </AccessibleButton>\n            );\n        }\n        if (this.state.can.toggleMod) {\n            var giveOpLabel = this.state.isTargetMod ? \"Revoke Moderator\" : \"Make Moderator\";\n            giveModButton = <AccessibleButton className=\"mx_MemberInfo_field\" onClick={this.onModToggle}>\n                {giveOpLabel}\n            </AccessibleButton>;\n        }\n\n        // TODO: we should have an invite button if this MemberInfo is showing a user who isn't actually in the current room yet\n        // e.g. clicking on a linkified userid in a room\n\n        var adminTools;\n        if (kickButton || banButton || muteButton || giveModButton) {\n            adminTools =\n                <div>\n                    <h3>Admin tools</h3>\n\n                    <div className=\"mx_MemberInfo_buttons\">\n                        {muteButton}\n                        {kickButton}\n                        {banButton}\n                        {giveModButton}\n                    </div>\n                </div>;\n        }\n\n        const memberName = this.props.member.name;\n\n        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');\n        var PowerSelector = sdk.getComponent('elements.PowerSelector');\n        const EmojiText = sdk.getComponent('elements.EmojiText');\n        return (\n            <div className=\"mx_MemberInfo\">\n                <AccessibleButton className=\"mx_MemberInfo_cancel\" onClick={this.onCancel}> <img src=\"img/cancel.svg\" width=\"18\" height=\"18\"/></AccessibleButton>\n                <div className=\"mx_MemberInfo_avatar\">\n                    <MemberAvatar onClick={this.onMemberAvatarClick} member={this.props.member} width={48} height={48} />\n                </div>\n\n                <EmojiText element=\"h2\">{memberName}</EmojiText>\n\n                <div className=\"mx_MemberInfo_profile\">\n                    <div className=\"mx_MemberInfo_profileField\">\n                        { this.props.member.userId }\n                    </div>\n                    <div className=\"mx_MemberInfo_profileField\">\n                        Level: <b><PowerSelector controlled={true} value={ parseInt(this.props.member.powerLevel) } disabled={ !this.state.can.modifyLevel } onChange={ this.onPowerChange }/></b>\n                    </div>\n                </div>\n\n                { adminTools }\n\n                { startChat }\n\n                { this._renderDevices() }\n\n                { spinner }\n            </div>\n        );\n    }\n}));\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/MemberList.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[567,570],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var classNames = require('classnames');","fix":{"range":[597,600],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'classNames' is assigned a value but never used.","line":17,"column":5,"nodeType":"Identifier","source":"var classNames = require('classnames');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var Matrix = require(\"matrix-js-sdk\");","fix":{"range":[637,640],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Matrix' is assigned a value but never used.","line":18,"column":5,"nodeType":"Identifier","source":"var Matrix = require(\"matrix-js-sdk\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var q = require('q');","fix":{"range":[676,679],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'q' is assigned a value but never used.","line":19,"column":5,"nodeType":"Identifier","source":"var q = require('q');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[698,701],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[757,760],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is assigned a value but never used.","line":21,"column":5,"nodeType":"Identifier","source":"var Modal = require(\"../../../Modal\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var Entities = require(\"../../../Entities\");","fix":{"range":[796,799],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Entities' is assigned a value but never used.","line":22,"column":5,"nodeType":"Identifier","source":"var Entities = require(\"../../../Entities\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[841,844],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var GeminiScrollbar = require('react-gemini-scrollbar');","fix":{"range":[878,881],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var rate_limited_func = require('../../../ratelimitedfunc');","fix":{"range":[935,938],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'rate_limited_func' is not in camel case.","line":25,"column":5,"nodeType":"Identifier","source":"var rate_limited_func = require('../../../ratelimitedfunc');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var CallHandler = require(\"../../../CallHandler\");","fix":{"range":[996,999],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var Invite = require(\"../../../Invite\");","fix":{"range":[1047,1050],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Invite' is assigned a value but never used.","line":27,"column":5,"nodeType":"Identifier","source":"var Invite = require(\"../../../Invite\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var INITIAL_LOAD_NUM_MEMBERS = 30;","fix":{"range":[1089,1092],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","source":"var SHARE_HISTORY_WARNING =","fix":{"range":[1124,1127],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'SHARE_HISTORY_WARNING' is assigned a value but never used.","line":30,"column":5,"nodeType":"Identifier","source":"var SHARE_HISTORY_WARNING ="},{"ruleId":"max-len","severity":1,"message":"Line 33 exceeds the maximum line length of 90.","line":33,"column":1,"nodeType":"Program","source":"        If you'd prefer invited users not to see messages that were sent before they joined, <br/>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":41,"column":9,"nodeType":"VariableDeclaration","source":"        var state = {","fix":{"range":[1544,1547],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[1850,1853],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":50,"column":9,"nodeType":"VariableDeclaration","source":"        var room = cli.getRoom(this.props.roomId);","fix":{"range":[1891,1894],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":60,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[2136,2139],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":73,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[2783,2786],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":120,"column":9,"nodeType":"VariableDeclaration","source":"        var tile = this.refs[user.userId];","fix":{"range":[4978,4981],"text":"let"}},{"ruleId":"new-cap","severity":1,"message":"A constructor name should not start with a lowercase letter.","line":150,"column":22,"nodeType":"NewExpression","source":"    _updateList: new rate_limited_func(function() {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":152,"column":9,"nodeType":"ThisExpression","source":"        this.memberDict = this.getMemberDict();"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":152,"column":27,"nodeType":"ThisExpression","source":"        this.memberDict = this.getMemberDict();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":154,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[5956,5959],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":154,"column":20,"nodeType":"ThisExpression","source":"        var self = this;"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":155,"column":9,"nodeType":"ThisExpression","source":"        this.setState({"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":156,"column":40,"nodeType":"Property","source":"            members: self.roomMembers()","fix":{"range":[6036,6036],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":162,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[6146,6149],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":163,"column":9,"nodeType":"VariableDeclaration","source":"        var room = cli.getRoom(this.props.roomId);","fix":{"range":[6187,6190],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":166,"column":9,"nodeType":"VariableDeclaration","source":"        var all_members = room.currentState.members;","fix":{"range":[6269,6272],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'all_members' is not in camel case.","line":166,"column":13,"nodeType":"Identifier","source":"        var all_members = room.currentState.members;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'all_members' is not in camel case.","line":180,"column":16,"nodeType":"Identifier","source":"        return all_members;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":184,"column":9,"nodeType":"VariableDeclaration","source":"        var all_members = this.memberDict || {};","fix":{"range":[6971,6974],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'all_members' is not in camel case.","line":184,"column":13,"nodeType":"Identifier","source":"        var all_members = this.memberDict || {};"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":185,"column":9,"nodeType":"VariableDeclaration","source":"        var all_user_ids = Object.keys(all_members);","fix":{"range":[7020,7023],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'all_user_ids' is not in camel case.","line":185,"column":13,"nodeType":"Identifier","source":"        var all_user_ids = Object.keys(all_members);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":186,"column":9,"nodeType":"VariableDeclaration","source":"        var ConferenceHandler = CallHandler.getConferenceHandler();","fix":{"range":[7073,7076],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":190,"column":9,"nodeType":"VariableDeclaration","source":"        var to_display = [];","fix":{"range":[7187,7190],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'to_display' is not in camel case.","line":190,"column":13,"nodeType":"Identifier","source":"        var to_display = [];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":191,"column":9,"nodeType":"VariableDeclaration","source":"        var count = 0;","fix":{"range":[7216,7219],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'count' is assigned a value but never used.","line":191,"column":13,"nodeType":"Identifier","source":"        var count = 0;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":192,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < all_user_ids.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":193,"column":13,"nodeType":"VariableDeclaration","source":"            var user_id = all_user_ids[i];","fix":{"range":[7299,7302],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":193,"column":17,"nodeType":"Identifier","source":"            var user_id = all_user_ids[i];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":194,"column":13,"nodeType":"VariableDeclaration","source":"            var m = all_members[user_id];","fix":{"range":[7342,7345],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 197 exceeds the maximum line length of 90.","line":197,"column":1,"nodeType":"Program","source":"                if ((ConferenceHandler && !ConferenceHandler.isConferenceUser(user_id)) || !ConferenceHandler) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'to_display' is not in camel case.","line":203,"column":16,"nodeType":"Identifier","source":"        return to_display;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":208,"column":9,"nodeType":"VariableDeclaration","source":"        var EntityTile = sdk.getComponent(\"rooms.EntityTile\");","fix":{"range":[7871,7874],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":209,"column":9,"nodeType":"VariableDeclaration","source":"        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");","fix":{"range":[7934,7937],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 210 exceeds the maximum line length of 90.","line":210,"column":1,"nodeType":"Program","source":"        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":210,"column":9,"nodeType":"VariableDeclaration","source":"        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";","fix":{"range":[7999,8002],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":221,"column":27,"nodeType":"Property","source":"            truncateAt: -1","fix":{"range":[8491,8491],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":228,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[8610,8619],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 230 exceeds the maximum line length of 90.","line":230,"column":1,"nodeType":"Program","source":"            return \"(\" + member.name + \", \" + member.powerLevel + \", \" + member.user.lastActiveAgo + \", \" + member.user.currentlyActive + \")\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":243,"column":13,"nodeType":"VariableDeclaration","source":"            var memberA = this.memberDict[userIdA];","fix":{"range":[9227,9230],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":244,"column":13,"nodeType":"VariableDeclaration","source":"            var memberB = this.memberDict[userIdB];","fix":{"range":[9279,9282],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":245,"column":13,"nodeType":"VariableDeclaration","source":"            var userA = memberA.user;","fix":{"range":[9331,9334],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":246,"column":13,"nodeType":"VariableDeclaration","source":"            var userB = memberB.user;","fix":{"range":[9369,9372],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 264 exceeds the maximum line length of 90.","line":264,"column":1,"nodeType":"Program","source":"                        var nameA = memberA.name[0] === '@' ? memberA.name.substr(1) : memberA.name;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":264,"column":25,"nodeType":"VariableDeclaration","source":"                        var nameA = memberA.name[0] === '@' ? memberA.name.substr(1) : memberA.name;","fix":{"range":[10331,10334],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 265 exceeds the maximum line length of 90.","line":265,"column":1,"nodeType":"Program","source":"                        var nameB = memberB.name[0] === '@' ? memberB.name.substr(1) : memberB.name;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":265,"column":25,"nodeType":"VariableDeclaration","source":"                        var nameB = memberB.name[0] === '@' ? memberB.name.substr(1) : memberB.name;","fix":{"range":[10432,10435],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":267,"column":21,"nodeType":"Punctuator","source":"                    }","fix":{"range":[10589,10610],"text":"                    "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":271,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[10690,10707],"text":"                "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":291,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberTile = sdk.getComponent(\"rooms.MemberTile\");","fix":{"range":[11492,11495],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":294,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[11601,11604],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":296,"column":9,"nodeType":"VariableDeclaration","source":"        var memberList = self.state.members.filter(function(userId) {","fix":{"range":[11627,11630],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":297,"column":13,"nodeType":"VariableDeclaration","source":"            var m = self.memberDict[userId];","fix":{"range":[11701,11704],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":310,"column":13,"nodeType":"VariableDeclaration","source":"            var m = self.memberDict[userId];","fix":{"range":[12131,12134],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":322,"column":13,"nodeType":"VariableDeclaration","source":"            var room = MatrixClientPeg.get().getRoom(this.props.roomId);","fix":{"range":[12716,12719],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":323,"column":13,"nodeType":"VariableDeclaration","source":"            var EntityTile = sdk.getComponent(\"rooms.EntityTile\");","fix":{"range":[12789,12792],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 328 exceeds the maximum line length of 90.","line":328,"column":1,"nodeType":"Program","source":"                    var required_keys = ['key_validity_url', 'public_key', 'display_name'];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":328,"column":21,"nodeType":"VariableDeclaration","source":"                    var required_keys = ['key_validity_url', 'public_key', 'display_name'];","fix":{"range":[13104,13107],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'required_keys' is not in camel case.","line":328,"column":25,"nodeType":"Identifier","source":"                    var required_keys = ['key_validity_url', 'public_key', 'display_name'];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":329,"column":26,"nodeType":"VariableDeclaration","source":"                    for (var i = 0; i < required_keys.length; ++i) {"},{"ruleId":"max-len","severity":1,"message":"Line 335 exceeds the maximum line length of 90.","line":335,"column":1,"nodeType":"Program","source":"                    var memberEvent = room.currentState.getInviteForThreePidToken(e.getStateKey());"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":335,"column":21,"nodeType":"VariableDeclaration","source":"                    var memberEvent = room.currentState.getInviteForThreePidToken(e.getStateKey());","fix":{"range":[13503,13506],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 340 exceeds the maximum line length of 90.","line":340,"column":1,"nodeType":"Program","source":"                        <EntityTile key={e.getStateKey()} name={e.getContent().display_name} />"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":340,"column":96,"nodeType":"JSXElement","source":"                        <EntityTile key={e.getStateKey()} name={e.getContent().display_name} />","fix":{"range":[13808,13808],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":350,"column":9,"nodeType":"VariableDeclaration","source":"        var invitedSection = null;","fix":{"range":[13945,13948],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":351,"column":9,"nodeType":"VariableDeclaration","source":"        var invitedMemberTiles = this.makeMemberTiles('invite', this.state.searchQuery);","fix":{"range":[13980,13983],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":363,"column":9,"nodeType":"VariableDeclaration","source":"        var inputBox = (","fix":{"range":[14419,14422],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 365 exceeds the maximum line length of 90.","line":365,"column":1,"nodeType":"Program","source":"                <input className=\"mx_MemberList_query\" id=\"mx_MemberList_query\" type=\"text\""},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":371,"column":9,"nodeType":"VariableDeclaration","source":"        var TruncatedList = sdk.getComponent(\"elements.TruncatedList\");","fix":{"range":[14751,14754],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 375 exceeds the maximum line length of 90.","line":375,"column":1,"nodeType":"Program","source":"                <GeminiScrollbar autoshow={true} className=\"mx_MemberList_joined mx_MemberList_outerWrapper\">"},{"ruleId":"max-len","severity":1,"message":"Line 376 exceeds the maximum line length of 90.","line":376,"column":1,"nodeType":"Program","source":"                    <TruncatedList className=\"mx_MemberList_wrapper\" truncateAt={this.state.truncateAt}"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":384,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[15420,15420],"text":","}}],"errorCount":16,"warningCount":80,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar React = require('react');\nvar classNames = require('classnames');\nvar Matrix = require(\"matrix-js-sdk\");\nvar q = require('q');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar Modal = require(\"../../../Modal\");\nvar Entities = require(\"../../../Entities\");\nvar sdk = require('../../../index');\nvar GeminiScrollbar = require('react-gemini-scrollbar');\nvar rate_limited_func = require('../../../ratelimitedfunc');\nvar CallHandler = require(\"../../../CallHandler\");\nvar Invite = require(\"../../../Invite\");\n\nvar INITIAL_LOAD_NUM_MEMBERS = 30;\nvar SHARE_HISTORY_WARNING =\n    <span>\n        Newly invited users will see the history of this room. <br/>\n        If you'd prefer invited users not to see messages that were sent before they joined, <br/>\n        turn off, 'Share message history with new users' in the settings for this room.\n    </span>;\n\nmodule.exports = React.createClass({\n    displayName: 'MemberList',\n\n    getInitialState: function() {\n        var state = {\n            members: [],\n            // ideally we'd size this to the page height, but\n            // in practice I find that a little constraining\n            truncateAt: INITIAL_LOAD_NUM_MEMBERS,\n            searchQuery: \"\",\n        };\n        if (!this.props.roomId) return state;\n        var cli = MatrixClientPeg.get();\n        var room = cli.getRoom(this.props.roomId);\n        if (!room) return state;\n\n        this.memberDict = this.getMemberDict();\n\n        state.members = this.roomMembers();\n        return state;\n    },\n\n    componentWillMount: function() {\n        var cli = MatrixClientPeg.get();\n        cli.on(\"RoomState.members\", this.onRoomStateMember);\n        cli.on(\"RoomMember.name\", this.onRoomMemberName);\n        cli.on(\"RoomState.events\", this.onRoomStateEvent);\n        cli.on(\"Room\", this.onRoom); // invites\n        // We listen for changes to the lastPresenceTs which is essentially\n        // listening for all presence events (we display most of not all of\n        // the information contained in presence events).\n        cli.on(\"User.lastPresenceTs\", this.onUserLastPresenceTs);\n        // cli.on(\"Room.timeline\", this.onRoomTimeline);\n    },\n\n    componentWillUnmount: function() {\n        var cli = MatrixClientPeg.get();\n        if (cli) {\n            cli.removeListener(\"RoomState.members\", this.onRoomStateMember);\n            cli.removeListener(\"RoomMember.name\", this.onRoomMemberName);\n            cli.removeListener(\"RoomState.events\", this.onRoomStateEvent);\n            cli.removeListener(\"Room\", this.onRoom);\n            cli.removeListener(\"User.lastPresenceTs\", this.onUserLastPresenceTs);\n            // cli.removeListener(\"Room.timeline\", this.onRoomTimeline);\n        }\n\n        // cancel any pending calls to the rate_limited_funcs\n        this._updateList.cancelPendingCall();\n    },\n\n/*\n    onRoomTimeline: function(ev, room, toStartOfTimeline, removed, data) {\n        // ignore anything but real-time updates at the end of the room:\n        // updates from pagination will happen when the paginate completes.\n        if (toStartOfTimeline || !data || !data.liveEvent) return;\n\n        // treat any activity from a user as implicit presence to update the\n        // ordering of the list whenever someone says something.\n        // Except right now we're not tiebreaking \"active now\" users in this way\n        // so don't bother for now.\n        if (ev.getSender()) {\n            // console.log(\"implicit presence from \" + ev.getSender());\n\n            var tile = this.refs[ev.getSender()];\n            if (tile) {\n                // work around a race where you might have a room member object\n                // before the user object exists.  XXX: why does this ever happen?\n                var all_members = room.currentState.members;\n                var userId = ev.getSender();\n                if (all_members[userId].user === null) {\n                    all_members[userId].user = MatrixClientPeg.get().getUser(userId);\n                }\n                this._updateList(); // reorder the membership list\n            }\n        }\n    },\n*/\n\n    onUserLastPresenceTs(event, user) {\n        // Attach a SINGLE listener for global presence changes then locate the\n        // member tile and re-render it. This is more efficient than every tile\n        // evar attaching their own listener.\n        // console.log(\"explicit presence from \" + user.userId);\n        var tile = this.refs[user.userId];\n        if (tile) {\n            this._updateList(); // reorder the membership list\n        }\n    },\n\n    onRoom: function(room) {\n        if (room.roomId !== this.props.roomId) {\n            return;\n        }\n        // We listen for room events because when we accept an invite\n        // we need to wait till the room is fully populated with state\n        // before refreshing the member list else we get a stale list.\n        this._updateList();\n    },\n\n    onRoomStateMember: function(ev, state, member) {\n        this._updateList();\n    },\n\n    onRoomMemberName: function(ev, member) {\n        this._updateList();\n    },\n\n    onRoomStateEvent: function(event, state) {\n        if (event.getType() === \"m.room.third_party_invite\") {\n            this._updateList();\n        }\n    },\n\n    _updateList: new rate_limited_func(function() {\n        // console.log(\"Updating memberlist\");\n        this.memberDict = this.getMemberDict();\n\n        var self = this;\n        this.setState({\n            members: self.roomMembers()\n        });\n    }, 500),\n\n    getMemberDict: function() {\n        if (!this.props.roomId) return {};\n        var cli = MatrixClientPeg.get();\n        var room = cli.getRoom(this.props.roomId);\n        if (!room) return {};\n\n        var all_members = room.currentState.members;\n\n        Object.keys(all_members).map(function(userId) {\n            // work around a race where you might have a room member object\n            // before the user object exists.  This may or may not cause\n            // https://github.com/vector-im/vector-web/issues/186\n            if (all_members[userId].user === null) {\n                all_members[userId].user = MatrixClientPeg.get().getUser(userId);\n            }\n\n            // XXX: this user may have no lastPresenceTs value!\n            // the right solution here is to fix the race rather than leave it as 0\n        });\n\n        return all_members;\n    },\n\n    roomMembers: function() {\n        var all_members = this.memberDict || {};\n        var all_user_ids = Object.keys(all_members);\n        var ConferenceHandler = CallHandler.getConferenceHandler();\n\n        all_user_ids.sort(this.memberSort);\n\n        var to_display = [];\n        var count = 0;\n        for (var i = 0; i < all_user_ids.length; ++i) {\n            var user_id = all_user_ids[i];\n            var m = all_members[user_id];\n\n            if (m.membership == 'join' || m.membership == 'invite') {\n                if ((ConferenceHandler && !ConferenceHandler.isConferenceUser(user_id)) || !ConferenceHandler) {\n                    to_display.push(user_id);\n                    ++count;\n                }\n            }\n        }\n        return to_display;\n    },\n\n    _createOverflowTile: function(overflowCount, totalCount) {\n        // For now we'll pretend this is any entity. It should probably be a separate tile.\n        var EntityTile = sdk.getComponent(\"rooms.EntityTile\");\n        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");\n        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";\n        return (\n            <EntityTile className=\"mx_EntityTile_ellipsis\" avatarJsx={\n                <BaseAvatar url=\"img/ellipsis.svg\" name=\"...\" width={36} height={36} />\n            } name={text} presenceState=\"online\" suppressOnHover={true}\n            onClick={this._showFullMemberList} />\n        );\n    },\n\n    _showFullMemberList: function() {\n        this.setState({\n            truncateAt: -1\n        });\n    },\n\n    memberString: function(member) {\n        if (!member) {\n            return \"(null)\";\n        }\n        else {\n            return \"(\" + member.name + \", \" + member.powerLevel + \", \" + member.user.lastActiveAgo + \", \" + member.user.currentlyActive + \")\";\n        }\n    },\n\n    // returns negative if a comes before b,\n    // returns 0 if a and b are equivalent in ordering\n    // returns positive if a comes after b.\n    memberSort: function(userIdA, userIdB) {\n            // order by last active, with \"active now\" first.\n            // ...and then by power\n            // ...and then alphabetically.\n            // We could tiebreak instead by \"last recently spoken in this room\" if we wanted to.\n\n            var memberA = this.memberDict[userIdA];\n            var memberB = this.memberDict[userIdB];\n            var userA = memberA.user;\n            var userB = memberB.user;\n\n            // if (!userA || !userB) {\n            //     console.log(\"comparing \" + memberA.name + \" user=\" + memberA.user + \" with \" + memberB.name + \" user=\" + memberB.user);\n            // }\n\n            if (!userA && !userB) return 0;\n            if (userA && !userB) return -1;\n            if (!userA && userB) return 1;\n\n            // console.log(\"comparing \" + this.memberString(memberA) + \" and \" + this.memberString(memberB));\n\n            if (userA.currentlyActive && userB.currentlyActive) {\n                // console.log(memberA.name + \" and \" + memberB.name + \" are both active\");\n                if (memberA.powerLevel === memberB.powerLevel) {\n                    // console.log(memberA + \" and \" + memberB + \" have same power level\");\n                    if (memberA.name && memberB.name) {\n                        // console.log(\"comparing names: \" + memberA.name + \" and \" + memberB.name);\n                        var nameA = memberA.name[0] === '@' ? memberA.name.substr(1) : memberA.name;\n                        var nameB = memberB.name[0] === '@' ? memberB.name.substr(1) : memberB.name;\n                        return nameA.localeCompare(nameB);\n                    }\n                    else {\n                        return 0;\n                    }\n                }\n                else {\n                    // console.log(\"comparing power: \" + memberA.powerLevel + \" and \" + memberB.powerLevel);\n                    return memberB.powerLevel - memberA.powerLevel;\n                }\n            }\n\n            if (userA.currentlyActive && !userB.currentlyActive) return -1;\n            if (!userA.currentlyActive && userB.currentlyActive) return 1;\n\n            // For now, let's just order things by timestamp. It's really annoying\n            // that a user disappears from sight just because they temporarily go offline\n            return userB.getLastActiveTs() - userA.getLastActiveTs();\n    },\n\n    onSearchQueryChanged: function(ev) {\n        this.setState({ searchQuery: ev.target.value });\n    },\n\n    makeMemberTiles: function(membership, query) {\n        var MemberTile = sdk.getComponent(\"rooms.MemberTile\");\n        query = (query || \"\").toLowerCase();\n\n        var self = this;\n\n        var memberList = self.state.members.filter(function(userId) {\n            var m = self.memberDict[userId];\n\n            if (query) {\n                const matchesName = m.name.toLowerCase().indexOf(query) !== -1;\n                const matchesId = m.userId.toLowerCase().indexOf(query) !== -1;\n\n                if (!matchesName && !matchesId) {\n                    return false;\n                }\n            }\n\n            return m.membership == membership;\n        }).map(function(userId) {\n            var m = self.memberDict[userId];\n            return (\n                <MemberTile key={userId} member={m} ref={userId} />\n            );\n        });\n\n        // XXX: surely this is not the right home for this logic.\n        if (membership === \"invite\") {\n            // include 3pid invites (m.room.third_party_invite) state events.\n            // The HS may have already converted these into m.room.member invites so\n            // we shouldn't add them if the 3pid invite state key (token) is in the\n            // member invite (content.third_party_invite.signed.token)\n            var room = MatrixClientPeg.get().getRoom(this.props.roomId);\n            var EntityTile = sdk.getComponent(\"rooms.EntityTile\");\n            if (room) {\n                room.currentState.getStateEvents(\"m.room.third_party_invite\").forEach(\n                function(e) {\n                    // any events without these keys are not valid 3pid invites, so we ignore them\n                    var required_keys = ['key_validity_url', 'public_key', 'display_name'];\n                    for (var i = 0; i < required_keys.length; ++i) {\n                        if (e.getContent()[required_keys[i]] === undefined) return;\n                    }\n\n                    // discard all invites which have a m.room.member event since we've\n                    // already added them.\n                    var memberEvent = room.currentState.getInviteForThreePidToken(e.getStateKey());\n                    if (memberEvent) {\n                        return;\n                    }\n                    memberList.push(\n                        <EntityTile key={e.getStateKey()} name={e.getContent().display_name} />\n                    );\n                });\n            }\n        }\n\n        return memberList;\n    },\n\n    render: function() {\n        var invitedSection = null;\n        var invitedMemberTiles = this.makeMemberTiles('invite', this.state.searchQuery);\n        if (invitedMemberTiles.length > 0) {\n            invitedSection = (\n                <div className=\"mx_MemberList_invited\">\n                    <h2>Invited</h2>\n                    <div className=\"mx_MemberList_wrapper\">\n                        {invitedMemberTiles}\n                    </div>\n                </div>\n            );\n        }\n\n        var inputBox = (\n            <form autoComplete=\"off\">\n                <input className=\"mx_MemberList_query\" id=\"mx_MemberList_query\" type=\"text\"\n                    onChange={this.onSearchQueryChanged} value={this.state.searchQuery}\n                    placeholder=\"Filter room members\" />\n            </form>\n        );\n\n        var TruncatedList = sdk.getComponent(\"elements.TruncatedList\");\n        return (\n            <div className=\"mx_MemberList\">\n                { inputBox }\n                <GeminiScrollbar autoshow={true} className=\"mx_MemberList_joined mx_MemberList_outerWrapper\">\n                    <TruncatedList className=\"mx_MemberList_wrapper\" truncateAt={this.state.truncateAt}\n                            createOverflowElement={this._createOverflowTile}>\n                        {this.makeMemberTiles('join', this.state.searchQuery)}\n                    </TruncatedList>\n                    {invitedSection}\n                </GeminiScrollbar>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/MemberTile.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MatrixClientPeg' is assigned a value but never used.","line":21,"column":5,"nodeType":"Identifier","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[673,676],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require('../../../dispatcher');","fix":{"range":[710,713],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[752,755],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is assigned a value but never used.","line":24,"column":5,"nodeType":"Identifier","source":"var Modal = require(\"../../../Modal\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":70,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');","fix":{"range":[1934,1937],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":71,"column":9,"nodeType":"VariableDeclaration","source":"        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');","fix":{"range":[2003,2006],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'BaseAvatar' is assigned a value but never used.","line":71,"column":13,"nodeType":"Identifier","source":"        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":72,"column":9,"nodeType":"VariableDeclaration","source":"        var EntityTile = sdk.getComponent('rooms.EntityTile');","fix":{"range":[2068,2071],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":74,"column":9,"nodeType":"VariableDeclaration","source":"        var member = this.props.member;","fix":{"range":[2132,2135],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":75,"column":9,"nodeType":"VariableDeclaration","source":"        var name = this._getDisplayName();","fix":{"range":[2172,2175],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":76,"column":9,"nodeType":"VariableDeclaration","source":"        var active = -1;","fix":{"range":[2215,2218],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'active' is assigned a value but never used.","line":76,"column":13,"nodeType":"Identifier","source":"        var active = -1;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":77,"column":9,"nodeType":"VariableDeclaration","source":"        var presenceState = member.user ? member.user.presence : null;","fix":{"range":[2240,2243],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":79,"column":9,"nodeType":"VariableDeclaration","source":"        var av = (","fix":{"range":[2312,2315],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 92 exceeds the maximum line length of 90.","line":92,"column":1,"nodeType":"Program","source":"                presenceCurrentlyActive={ member.user ? member.user.currentlyActive : false }"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":96,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[3109,3109],"text":","}}],"errorCount":5,"warningCount":14,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar sdk = require('../../../index');\nvar dis = require('../../../dispatcher');\nvar Modal = require(\"../../../Modal\");\n\nmodule.exports = React.createClass({\n    displayName: 'MemberTile',\n\n    propTypes: {\n        member: React.PropTypes.any.isRequired, // RoomMember\n    },\n\n    getInitialState: function() {\n        return {};\n    },\n\n    shouldComponentUpdate: function(nextProps, nextState) {\n        if (\n            this.member_last_modified_time === undefined ||\n            this.member_last_modified_time < nextProps.member.getLastModifiedTime()\n        ) {\n            return true;\n        }\n        if (\n            nextProps.member.user &&\n            (this.user_last_modified_time === undefined ||\n            this.user_last_modified_time < nextProps.member.user.getLastModifiedTime())\n        ) {\n            return true;\n        }\n        return false;\n    },\n\n    onClick: function(e) {\n        dis.dispatch({\n            action: 'view_user',\n            member: this.props.member,\n        });\n    },\n\n    _getDisplayName: function() {\n        return this.props.member.name;\n    },\n\n    getPowerLabel: function() {\n        return this.props.member.userId + \" (power \" + this.props.member.powerLevel + \")\";\n    },\n\n    render: function() {\n        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');\n        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');\n        var EntityTile = sdk.getComponent('rooms.EntityTile');\n\n        var member = this.props.member;\n        var name = this._getDisplayName();\n        var active = -1;\n        var presenceState = member.user ? member.user.presence : null;\n\n        var av = (\n            <MemberAvatar member={member} width={36} height={36} />\n        );\n\n        if (member.user) {\n            this.user_last_modified_time = member.user.getLastModifiedTime();\n        }\n        this.member_last_modified_time = member.getLastModifiedTime();\n\n        return (\n            <EntityTile {...this.props} presenceState={presenceState}\n                presenceLastActiveAgo={ member.user ? member.user.lastActiveAgo : 0 }\n                presenceLastTs={ member.user ? member.user.lastPresenceTs : 0 }\n                presenceCurrentlyActive={ member.user ? member.user.currentlyActive : false }\n                avatarJsx={av} title={this.getPowerLabel()} onClick={this.onClick}\n                name={name} powerLevel={this.props.member.powerLevel} />\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/MessageComposer.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[567,570],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var CallHandler = require('../../../CallHandler');","fix":{"range":[598,601],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[649,652],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require('../../../Modal');","fix":{"range":[708,711],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[747,750],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require('../../../dispatcher');","fix":{"range":[784,787],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 53 exceeds the maximum line length of 90.","line":53,"column":1,"nodeType":"Program","source":"                isRichtextEnabled: UserSettingsStore.getSyncedSetting('MessageComposerInput.isRichTextEnabled', true),"},{"ruleId":"max-len","severity":1,"message":"Line 56 exceeds the maximum line length of 90.","line":56,"column":1,"nodeType":"Program","source":"            showFormatting: UserSettingsStore.getSyncedSetting('MessageComposer.showFormatting', false),"},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":59,"column":5,"nodeType":"BlockStatement","source":"    }","fix":{"range":[2470,2472],"text":"\n"}},{"ruleId":"prefer-const","severity":1,"message":"'NeedToRegisterDialog' is never reassigned. Use 'const' instead.","line":83,"column":17,"nodeType":"Identifier","source":"            let NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");","fix":{"range":[3304,3307],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'files' is never reassigned. Use 'const' instead.","line":95,"column":13,"nodeType":"Identifier","source":"        let files = ev.target.files;","fix":{"range":[3701,3704],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'QuestionDialog' is never reassigned. Use 'const' instead.","line":97,"column":13,"nodeType":"Identifier","source":"        let QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[3739,3742],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'TintableSvg' is never reassigned. Use 'const' instead.","line":98,"column":13,"nodeType":"Identifier","source":"        let TintableSvg = sdk.getComponent(\"elements.TintableSvg\");","fix":{"range":[3812,3815],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'fileList' is never reassigned. Use 'const' instead.","line":100,"column":13,"nodeType":"Identifier","source":"        let fileList = [];","fix":{"range":[3881,3884],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 103 exceeds the maximum line length of 90.","line":103,"column":1,"nodeType":"Program","source":"                <TintableSvg key={i} src=\"img/files.svg\" width=\"16\" height=\"16\" /> {files[i].name}"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":121,"column":29,"nodeType":"VariableDeclaration","source":"                        for(var i=0; i<files.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":133,"column":9,"nodeType":"VariableDeclaration","source":"        var call = CallHandler.getCallForRoom(this.props.room.roomId);","fix":{"range":[5022,5025],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 194 exceeds the maximum line length of 90.","line":194,"column":1,"nodeType":"Program","source":"    onFormatButtonClicked(name: \"bold\" | \"italic\" | \"strike\" | \"code\" | \"underline\" | \"quote\" | \"bullet\" | \"numbullet\", event) {"},{"ruleId":"max-len","severity":1,"message":"Line 200 exceeds the maximum line length of 90.","line":200,"column":1,"nodeType":"Program","source":"        UserSettingsStore.setSyncedSetting('MessageComposer.showFormatting', !this.state.showFormatting);"},{"ruleId":"max-len","severity":1,"message":"Line 206 exceeds the maximum line length of 90.","line":206,"column":1,"nodeType":"Program","source":"        this.messageComposerInput.enableRichtext(!this.state.inputState.isRichtextEnabled);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":210,"column":9,"nodeType":"VariableDeclaration","source":"        var me = this.props.room.getMember(MatrixClientPeg.get().credentials.userId);","fix":{"range":[7289,7292],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":211,"column":9,"nodeType":"VariableDeclaration","source":"        var uploadInputStyle = {display: 'none'};","fix":{"range":[7375,7378],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":212,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');","fix":{"range":[7425,7428],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":213,"column":9,"nodeType":"VariableDeclaration","source":"        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");","fix":{"range":[7494,7497],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":214,"column":9,"nodeType":"VariableDeclaration","source":"        var MessageComposerInput = sdk.getComponent(\"rooms.MessageComposerInput\" +","fix":{"range":[7562,7565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":217,"column":9,"nodeType":"VariableDeclaration","source":"        var controls = [];","fix":{"range":[7730,7733],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":222,"column":19,"nodeType":"JSXElement","source":"            </div>","fix":{"range":[7937,7937],"text":","}},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":225,"column":9,"nodeType":"VariableDeclaration","source":"        let e2eImg, e2eTitle, e2eClass;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":241,"column":15,"nodeType":"JSXElement","source":"            />","fix":{"range":[8650,8650],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":243,"column":9,"nodeType":"VariableDeclaration","source":"        var callButton, videoCallButton, hangupButton;","fix":{"range":[8670,8673],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":243,"column":9,"nodeType":"VariableDeclaration","source":"        var callButton, videoCallButton, hangupButton;"},{"ruleId":"max-len","severity":1,"message":"Line 246 exceeds the maximum line length of 90.","line":246,"column":1,"nodeType":"Program","source":"                <div key=\"controls_hangup\" className=\"mx_MessageComposer_hangup\" onClick={this.onHangupClick}>"},{"ruleId":"max-len","severity":1,"message":"Line 247 exceeds the maximum line length of 90.","line":247,"column":1,"nodeType":"Program","source":"                    <img src=\"img/hangup.svg\" alt=\"Hangup\" title=\"Hangup\" width=\"25\" height=\"26\"/>"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":249,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[9059,9068],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 252 exceeds the maximum line length of 90.","line":252,"column":1,"nodeType":"Program","source":"                <div key=\"controls_call\" className=\"mx_MessageComposer_voicecall\" onClick={this.onVoiceCallClick} title=\"Voice call\">"},{"ruleId":"max-len","severity":1,"message":"Line 256 exceeds the maximum line length of 90.","line":256,"column":1,"nodeType":"Program","source":"                <div key=\"controls_videocall\" className=\"mx_MessageComposer_videocall\" onClick={this.onCallClick} title=\"Video call\">"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":261,"column":9,"nodeType":"VariableDeclaration","source":"        var canSendMessages = this.props.room.currentState.maySendMessage(","fix":{"range":[9631,9634],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":268,"column":13,"nodeType":"VariableDeclaration","source":"            var uploadButton = (","fix":{"range":[10006,10009],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 285 exceeds the maximum line length of 90.","line":285,"column":1,"nodeType":"Program","source":"                       !UserSettingsStore.isFeatureEnabled('rich_text_editor') ? 'hidden' : 'visible'}}"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":291,"column":26,"nodeType":"ArrowFunctionExpression","source":"                    ref={c => this.messageComposerInput = c}","fix":{"range":[11119,11120],"text":"(c)"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":305,"column":32,"nodeType":"Identifier","source":"                videoCallButton","fix":{"range":[11836,11836],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":311,"column":23,"nodeType":"JSXElement","source":"                </div>","fix":{"range":[12073,12073],"text":","}},{"ruleId":"no-unused-vars","severity":2,"message":"'autoComplete' is assigned a value but never used.","line":315,"column":13,"nodeType":"Identifier","source":"        let autoComplete;"},{"ruleId":"max-len","severity":1,"message":"Line 328 exceeds the maximum line length of 90.","line":328,"column":1,"nodeType":"Program","source":"        const formatButtons = [\"bold\", \"italic\", \"strike\", \"underline\", \"code\", \"quote\", \"bullet\", \"numbullet\"].map("},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":329,"column":13,"nodeType":"ArrowFunctionExpression","source":"            name => {","fix":{"range":[12742,12746],"text":"(name)"}},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":332,"column":47,"nodeType":"MemberExpression","source":"                const onFormatButtonClicked = this.onFormatButtonClicked.bind(this, name);"},{"ruleId":"max-len","severity":1,"message":"Line 333 exceeds the maximum line length of 90.","line":333,"column":1,"nodeType":"Program","source":"                const disabled = !this.state.inputState.isRichtextEnabled && 'underline' === name;"},{"ruleId":"max-len","severity":1,"message":"Line 348 exceeds the maximum line length of 90.","line":348,"column":1,"nodeType":"Program","source":"            <div className=\"mx_MessageComposer mx_fadable\" style={{ opacity: this.props.opacity }}>"},{"ruleId":"max-len","severity":1,"message":"Line 356 exceeds the maximum line length of 90.","line":356,"column":1,"nodeType":"Program","source":"                        <div className=\"mx_MessageComposer_formatbar\" style={this.state.showFormatting ? {} : {display: 'none'}}>"},{"ruleId":"max-len","severity":1,"message":"Line 359 exceeds the maximum line length of 90.","line":359,"column":1,"nodeType":"Program","source":"                            <img title={`Turn Markdown ${this.state.inputState.isRichtextEnabled ? 'on' : 'off'}`}"},{"ruleId":"max-len","severity":1,"message":"Line 361 exceeds the maximum line length of 90.","line":361,"column":1,"nodeType":"Program","source":"                                className=\"mx_MessageComposer_formatbar_markdown mx_filterFlipColor\""},{"ruleId":"max-len","severity":1,"message":"Line 362 exceeds the maximum line length of 90.","line":362,"column":1,"nodeType":"Program","source":"                                src={`img/button-md-${!this.state.inputState.isRichtextEnabled}.png`} />"},{"ruleId":"max-len","severity":1,"message":"Line 365 exceeds the maximum line length of 90.","line":365,"column":1,"nodeType":"Program","source":"                                 className=\"mx_MessageComposer_formatbar_cancel mx_filterFlipColor\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":392,"column":36,"nodeType":"Property","source":"    opacity: React.PropTypes.number","fix":{"range":[15745,15745],"text":","}}],"errorCount":7,"warningCount":47,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar React = require('react');\n\nvar CallHandler = require('../../../CallHandler');\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar Modal = require('../../../Modal');\nvar sdk = require('../../../index');\nvar dis = require('../../../dispatcher');\nimport Autocomplete from './Autocomplete';\nimport classNames from 'classnames';\n\nimport UserSettingsStore from '../../../UserSettingsStore';\n\n\nexport default class MessageComposer extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.onCallClick = this.onCallClick.bind(this);\n        this.onHangupClick = this.onHangupClick.bind(this);\n        this.onUploadClick = this.onUploadClick.bind(this);\n        this.onUploadFileSelected = this.onUploadFileSelected.bind(this);\n        this.onVoiceCallClick = this.onVoiceCallClick.bind(this);\n        this.onInputContentChanged = this.onInputContentChanged.bind(this);\n        this.onUpArrow = this.onUpArrow.bind(this);\n        this.onDownArrow = this.onDownArrow.bind(this);\n        this._tryComplete = this._tryComplete.bind(this);\n        this._onAutocompleteConfirm = this._onAutocompleteConfirm.bind(this);\n        this.onToggleFormattingClicked = this.onToggleFormattingClicked.bind(this);\n        this.onToggleMarkdownClicked = this.onToggleMarkdownClicked.bind(this);\n        this.onInputStateChanged = this.onInputStateChanged.bind(this);\n        this.onEvent = this.onEvent.bind(this);\n\n        this.state = {\n            autocompleteQuery: '',\n            selection: null,\n            inputState: {\n                style: [],\n                blockType: null,\n                isRichtextEnabled: UserSettingsStore.getSyncedSetting('MessageComposerInput.isRichTextEnabled', true),\n                wordCount: 0,\n            },\n            showFormatting: UserSettingsStore.getSyncedSetting('MessageComposer.showFormatting', false),\n        };\n\n    }\n\n    componentDidMount() {\n        // N.B. using 'event' rather than 'RoomEvents' otherwise the crypto handler\n        // for 'event' fires *after* 'RoomEvent', and our room won't have yet been\n        // marked as encrypted.\n        // XXX: fragile as all hell - fixme somehow, perhaps with a dedicated Room.encryption event or something.\n        MatrixClientPeg.get().on(\"event\", this.onEvent);\n    }\n\n    componentWillUnmount() {\n        if (MatrixClientPeg.get()) {\n            MatrixClientPeg.get().removeListener(\"event\", this.onEvent);\n        }\n    }\n\n    onEvent(event) {\n        if (event.getType() !== 'm.room.encryption') return;\n        if (event.getRoomId() !== this.props.room.roomId) return;\n        this.forceUpdate();\n    }\n\n    onUploadClick(ev) {\n        if (MatrixClientPeg.get().isGuest()) {\n            let NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");\n            Modal.createDialog(NeedToRegisterDialog, {\n                title: \"Please Register\",\n                description: \"Guest users can't upload files. Please register to upload.\",\n            });\n            return;\n        }\n\n        this.refs.uploadInput.click();\n    }\n\n    onUploadFileSelected(ev) {\n        let files = ev.target.files;\n\n        let QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n        let TintableSvg = sdk.getComponent(\"elements.TintableSvg\");\n\n        let fileList = [];\n        for (let i=0; i<files.length; i++) {\n            fileList.push(<li key={i}>\n                <TintableSvg key={i} src=\"img/files.svg\" width=\"16\" height=\"16\" /> {files[i].name}\n            </li>);\n        }\n\n        Modal.createDialog(QuestionDialog, {\n            title: \"Upload Files\",\n            description: (\n                <div>\n                    <p>Are you sure you want upload the following files?</p>\n                    <ul style={{listStyle: 'none', textAlign: 'left'}}>\n                        {fileList}\n                    </ul>\n                </div>\n            ),\n            onFinished: (shouldUpload) => {\n                if(shouldUpload) {\n                    // MessageComposer shouldn't have to rely on its parent passing in a callback to upload a file\n                    if (files) {\n                        for(var i=0; i<files.length; i++) {\n                            this.props.uploadFile(files[i]);\n                        }\n                    }\n                }\n\n                this.refs.uploadInput.value = null;\n            },\n        });\n    }\n\n    onHangupClick() {\n        var call = CallHandler.getCallForRoom(this.props.room.roomId);\n        //var call = CallHandler.getAnyActiveCall();\n        if (!call) {\n            return;\n        }\n        dis.dispatch({\n            action: 'hangup',\n            // hangup the call for this room, which may not be the room in props\n            // (e.g. conferences which will hangup the 1:1 room instead)\n            room_id: call.roomId,\n        });\n    }\n\n    onCallClick(ev) {\n        dis.dispatch({\n            action: 'place_call',\n            type: ev.shiftKey ? \"screensharing\" : \"video\",\n            room_id: this.props.room.roomId,\n        });\n    }\n\n    onVoiceCallClick(ev) {\n        dis.dispatch({\n            action: 'place_call',\n            type: 'voice',\n            room_id: this.props.room.roomId,\n        });\n    }\n\n    onInputContentChanged(content: string, selection: {start: number, end: number}) {\n        this.setState({\n            autocompleteQuery: content,\n            selection,\n        });\n    }\n\n    onInputStateChanged(inputState) {\n        this.setState({inputState});\n    }\n\n    onUpArrow() {\n       return this.refs.autocomplete.onUpArrow();\n    }\n\n    onDownArrow() {\n        return this.refs.autocomplete.onDownArrow();\n    }\n\n    _tryComplete(): boolean {\n        if (this.refs.autocomplete) {\n            return this.refs.autocomplete.onCompletionClicked();\n        }\n        return false;\n    }\n\n    _onAutocompleteConfirm(range, completion) {\n        if (this.messageComposerInput) {\n            this.messageComposerInput.setDisplayedCompletion(range, completion);\n        }\n    }\n\n    onFormatButtonClicked(name: \"bold\" | \"italic\" | \"strike\" | \"code\" | \"underline\" | \"quote\" | \"bullet\" | \"numbullet\", event) {\n        event.preventDefault();\n        this.messageComposerInput.onFormatButtonClicked(name, event);\n    }\n\n    onToggleFormattingClicked() {\n        UserSettingsStore.setSyncedSetting('MessageComposer.showFormatting', !this.state.showFormatting);\n        this.setState({showFormatting: !this.state.showFormatting});\n    }\n\n    onToggleMarkdownClicked(e) {\n        e.preventDefault(); // don't steal focus from the editor!\n        this.messageComposerInput.enableRichtext(!this.state.inputState.isRichtextEnabled);\n    }\n\n    render() {\n        var me = this.props.room.getMember(MatrixClientPeg.get().credentials.userId);\n        var uploadInputStyle = {display: 'none'};\n        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');\n        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");\n        var MessageComposerInput = sdk.getComponent(\"rooms.MessageComposerInput\" +\n            (UserSettingsStore.isFeatureEnabled('rich_text_editor') ? \"\" : \"Old\"));\n\n        var controls = [];\n\n        controls.push(\n            <div key=\"controls_avatar\" className=\"mx_MessageComposer_avatar\">\n                <MemberAvatar member={me} width={24} height={24} />\n            </div>\n        );\n\n        let e2eImg, e2eTitle, e2eClass;\n\n        if (MatrixClientPeg.get().isRoomEncrypted(this.props.room.roomId)) {\n            // FIXME: show a /!\\ if there are untrusted devices in the room...\n            e2eImg = 'img/e2e-verified.svg';\n            e2eTitle = 'Encrypted room';\n            e2eClass = 'mx_MessageComposer_e2eIcon';\n        } else {\n            e2eImg = 'img/e2e-unencrypted.svg';\n            e2eTitle = 'Unencrypted room';\n            e2eClass = 'mx_MessageComposer_e2eIcon mx_filterFlipColor';\n        }\n\n        controls.push(\n            <img key=\"e2eIcon\" className={e2eClass} src={e2eImg} width=\"12\" height=\"12\"\n                alt={e2eTitle} title={e2eTitle}\n            />\n        );\n        var callButton, videoCallButton, hangupButton;\n        if (this.props.callState && this.props.callState !== 'ended') {\n            hangupButton =\n                <div key=\"controls_hangup\" className=\"mx_MessageComposer_hangup\" onClick={this.onHangupClick}>\n                    <img src=\"img/hangup.svg\" alt=\"Hangup\" title=\"Hangup\" width=\"25\" height=\"26\"/>\n                </div>;\n        }\n        else {\n            callButton =\n                <div key=\"controls_call\" className=\"mx_MessageComposer_voicecall\" onClick={this.onVoiceCallClick} title=\"Voice call\">\n                    <TintableSvg src=\"img/icon-call.svg\" width=\"35\" height=\"35\"/>\n                </div>;\n            videoCallButton =\n                <div key=\"controls_videocall\" className=\"mx_MessageComposer_videocall\" onClick={this.onCallClick} title=\"Video call\">\n                    <TintableSvg src=\"img/icons-video.svg\" width=\"35\" height=\"35\"/>\n                </div>;\n        }\n\n        var canSendMessages = this.props.room.currentState.maySendMessage(\n            MatrixClientPeg.get().credentials.userId);\n\n        if (canSendMessages) {\n            // This also currently includes the call buttons. Really we should\n            // check separately for whether we can call, but this is slightly\n            // complex because of conference calls.\n            var uploadButton = (\n                <div key=\"controls_upload\" className=\"mx_MessageComposer_upload\"\n                        onClick={this.onUploadClick} title=\"Upload file\">\n                    <TintableSvg src=\"img/icons-upload.svg\" width=\"35\" height=\"35\"/>\n                    <input ref=\"uploadInput\" type=\"file\"\n                        style={uploadInputStyle}\n                        multiple\n                        onChange={this.onUploadFileSelected} />\n                </div>\n            );\n\n            const formattingButton = (\n                <img className=\"mx_MessageComposer_formatting\"\n                     title=\"Show Text Formatting Toolbar\"\n                     src=\"img/button-text-formatting.svg\"\n                     onClick={this.onToggleFormattingClicked}\n                     style={{visibility: this.state.showFormatting ||\n                       !UserSettingsStore.isFeatureEnabled('rich_text_editor') ? 'hidden' : 'visible'}}\n                     key=\"controls_formatting\" />\n            );\n\n            controls.push(\n                <MessageComposerInput\n                    ref={c => this.messageComposerInput = c}\n                    key=\"controls_input\"\n                    onResize={this.props.onResize}\n                    room={this.props.room}\n                    tryComplete={this._tryComplete}\n                    onUpArrow={this.onUpArrow}\n                    onDownArrow={this.onDownArrow}\n                    tabComplete={this.props.tabComplete} // used for old messagecomposerinput/tabcomplete\n                    onContentChanged={this.onInputContentChanged}\n                    onInputStateChanged={this.onInputStateChanged} />,\n                formattingButton,\n                uploadButton,\n                hangupButton,\n                callButton,\n                videoCallButton\n            );\n        } else {\n            controls.push(\n                <div key=\"controls_error\" className=\"mx_MessageComposer_noperm_error\">\n                    You do not have permission to post to this room\n                </div>\n            );\n        }\n\n        let autoComplete;\n        if (UserSettingsStore.isFeatureEnabled('rich_text_editor')) {\n            autoComplete = <div className=\"mx_MessageComposer_autocomplete_wrapper\">\n                <Autocomplete\n                    ref=\"autocomplete\"\n                    onConfirm={this._onAutocompleteConfirm}\n                    query={this.state.autocompleteQuery}\n                    selection={this.state.selection} />\n            </div>;\n        }\n\n\n        const {style, blockType} = this.state.inputState;\n        const formatButtons = [\"bold\", \"italic\", \"strike\", \"underline\", \"code\", \"quote\", \"bullet\", \"numbullet\"].map(\n            name => {\n                const active = style.includes(name) || blockType === name;\n                const suffix = active ? '-o-n' : '';\n                const onFormatButtonClicked = this.onFormatButtonClicked.bind(this, name);\n                const disabled = !this.state.inputState.isRichtextEnabled && 'underline' === name;\n                const className = classNames(\"mx_MessageComposer_format_button\", {\n                    mx_MessageComposer_format_button_disabled: disabled,\n                    mx_filterFlipColor: true,\n                });\n                return <img className={className}\n                            title={name}\n                            onMouseDown={disabled ? null : onFormatButtonClicked}\n                            key={name}\n                            src={`img/button-text-${name}${suffix}.svg`}\n                            height=\"17\" />;\n            },\n        );\n\n        return (\n            <div className=\"mx_MessageComposer mx_fadable\" style={{ opacity: this.props.opacity }}>\n                <div className=\"mx_MessageComposer_wrapper\">\n                    <div className=\"mx_MessageComposer_row\">\n                        {controls}\n                    </div>\n                </div>\n                {UserSettingsStore.isFeatureEnabled('rich_text_editor') ?\n                    <div className=\"mx_MessageComposer_formatbar_wrapper\">\n                        <div className=\"mx_MessageComposer_formatbar\" style={this.state.showFormatting ? {} : {display: 'none'}}>\n                            {formatButtons}\n                            <div style={{flex: 1}}></div>\n                            <img title={`Turn Markdown ${this.state.inputState.isRichtextEnabled ? 'on' : 'off'}`}\n                                 onMouseDown={this.onToggleMarkdownClicked}\n                                className=\"mx_MessageComposer_formatbar_markdown mx_filterFlipColor\"\n                                src={`img/button-md-${!this.state.inputState.isRichtextEnabled}.png`} />\n                            <img title=\"Hide Text Formatting Toolbar\"\n                                 onClick={this.onToggleFormattingClicked}\n                                 className=\"mx_MessageComposer_formatbar_cancel mx_filterFlipColor\"\n                                 src=\"img/icon-text-cancel.svg\" />\n                        </div>\n                    </div>: null\n                }\n            </div>\n        );\n    }\n}\n\nMessageComposer.propTypes = {\n    tabComplete: React.PropTypes.any,\n\n    // a callback which is called when the height of the composer is\n    // changed due to a change in content.\n    onResize: React.PropTypes.func,\n\n    // js-sdk Room object\n    room: React.PropTypes.object.isRequired,\n\n    // string representing the current voip call state\n    callState: React.PropTypes.string,\n\n    // callback when a file to upload is chosen\n    uploadFile: React.PropTypes.func.isRequired,\n\n    // opacity for dynamic UI fading effects\n    opacity: React.PropTypes.number\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/MessageComposerInput.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'EditorChangeType' is defined but never used.","line":20,"column":45,"nodeType":"Identifier","source":"    convertFromRaw, convertToRaw, Modifier, EditorChangeType,"},{"ruleId":"max-len","severity":1,"message":"Line 21 exceeds the maximum line length of 90.","line":21,"column":1,"nodeType":"Program","source":"    getDefaultKeyBinding, KeyBindingUtil, ContentState, ContentBlock, SelectionState} from 'draft-js';"},{"ruleId":"no-unused-vars","severity":2,"message":"'KeyCode' is defined but never used.","line":35,"column":8,"nodeType":"Identifier","source":"import KeyCode from '../../../KeyCode';"},{"ruleId":"one-var","severity":1,"message":"Split 'const' declarations into multiple statements.","line":44,"column":1,"nodeType":"VariableDeclaration","source":"const TYPING_USER_TIMEOUT = 10000, TYPING_SERVER_TIMEOUT = 30000;"},{"ruleId":"max-len","severity":1,"message":"Line 95 exceeds the maximum line length of 90.","line":95,"column":1,"nodeType":"Program","source":"        const isRichtextEnabled = UserSettingsStore.getSyncedSetting('MessageComposerInput.isRichTextEnabled', true);"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":121,"column":9,"nodeType":"VariableDeclaration","source":"        let decorators = richText ? RichText.getScopedRTDecorators(this.props) :"},{"ruleId":"prefer-const","severity":1,"message":"'decorators' is never reassigned. Use 'const' instead.","line":121,"column":13,"nodeType":"Identifier","source":"        let decorators = richText ? RichText.getScopedRTDecorators(this.props) :"},{"ruleId":"prefer-const","severity":1,"message":"'compositeDecorator' is never reassigned. Use 'const' instead.","line":123,"column":13,"nodeType":"Identifier","source":"            compositeDecorator = new CompositeDecorator(decorators);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":153,"column":17,"nodeType":"VariableDeclaration","source":"                var storedData = window.sessionStorage.getItem(","fix":{"range":[5720,5723],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":154,"column":59,"nodeType":"BinaryExpression","source":"                    \"mx_messagecomposer_history_\" + roomId","fix":{"range":[5826,5826],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":169,"column":46,"nodeType":"CallExpression","source":"                    JSON.stringify(this.data)","fix":{"range":[6356,6356],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":181,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[6820,6837],"text":"                "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":193,"column":17,"nodeType":"VariableDeclaration","source":"                var newPosition = this.position + offset;","fix":{"range":[7263,7266],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":201,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[7651,7668],"text":"                "}},{"ruleId":"max-len","severity":1,"message":"Line 214 exceeds the maximum line length of 90.","line":214,"column":1,"nodeType":"Program","source":"                let contentJSON = JSON.stringify(convertToRaw(component.state.editorState.getCurrentContent()));"},{"ruleId":"prefer-const","severity":1,"message":"'contentJSON' is never reassigned. Use 'const' instead.","line":214,"column":21,"nodeType":"Identifier","source":"                let contentJSON = JSON.stringify(convertToRaw(component.state.editorState.getCurrentContent()));","fix":{"range":[8166,8169],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 215 exceeds the maximum line length of 90.","line":215,"column":1,"nodeType":"Program","source":"                window.sessionStorage.setItem(\"mx_messagecomposer_input_\" + this.roomId, contentJSON);"},{"ruleId":"max-len","severity":1,"message":"Line 219 exceeds the maximum line length of 90.","line":219,"column":1,"nodeType":"Program","source":"                let contentJSON = window.sessionStorage.getItem(\"mx_messagecomposer_input_\" + this.roomId);"},{"ruleId":"prefer-const","severity":1,"message":"'contentJSON' is never reassigned. Use 'const' instead.","line":219,"column":21,"nodeType":"Identifier","source":"                let contentJSON = window.sessionStorage.getItem(\"mx_messagecomposer_input_\" + this.roomId);","fix":{"range":[8441,8444],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'content' is never reassigned. Use 'const' instead.","line":221,"column":25,"nodeType":"Identifier","source":"                    let content = convertFromRaw(JSON.parse(contentJSON));","fix":{"range":[8588,8591],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 222 exceeds the maximum line length of 90.","line":222,"column":1,"nodeType":"Program","source":"                    component.setEditorState(component.createEditorState(component.state.isRichtextEnabled, content));"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":232,"column":35,"nodeType":"MemberExpression","source":"            this.props.room.roomId","fix":{"range":[8992,8992],"text":","}},{"ruleId":"prefer-const","severity":1,"message":"'editor' is never reassigned. Use 'const' instead.","line":251,"column":13,"nodeType":"Identifier","source":"        let editor = this.refs.editor;","fix":{"range":[9580,9583],"text":"const"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":265,"column":47,"nodeType":"TemplateLiteral","source":"                    `${payload.displayname}: `","fix":{"range":[10109,10109],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 267 exceeds the maximum line length of 90.","line":267,"column":1,"nodeType":"Program","source":"                let editorState = EditorState.push(this.state.editorState, contentState, 'insert-characters');"},{"ruleId":"max-len","severity":1,"message":"Line 268 exceeds the maximum line length of 90.","line":268,"column":1,"nodeType":"Program","source":"                editorState = EditorState.forceSelection(editorState, contentState.getSelectionAfter());"},{"ruleId":"prefer-const","severity":1,"message":"'body' is never reassigned. Use 'const' instead.","line":275,"column":22,"nodeType":"Identifier","source":"                let {body, formatted_body} = payload.event.getContent();"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'formatted_body' is not in camel case.","line":276,"column":17,"nodeType":"Identifier","source":"                formatted_body = formatted_body || escape(body);"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'formatted_body' is not in camel case.","line":276,"column":34,"nodeType":"Identifier","source":"                formatted_body = formatted_body || escape(body);"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'formatted_body' is not in camel case.","line":277,"column":21,"nodeType":"Identifier","source":"                if (formatted_body) {"},{"ruleId":"max-len","severity":1,"message":"Line 278 exceeds the maximum line length of 90.","line":278,"column":1,"nodeType":"Program","source":"                    let content = RichText.HTMLtoContentState(`<blockquote>${formatted_body}</blockquote>`);"},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":278,"column":44,"nodeType":"CallExpression","source":"                    let content = RichText.HTMLtoContentState(`<blockquote>${formatted_body}</blockquote>`);"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'formatted_body' is not in camel case.","line":278,"column":78,"nodeType":"Identifier","source":"                    let content = RichText.HTMLtoContentState(`<blockquote>${formatted_body}</blockquote>`);"},{"ruleId":"max-len","severity":1,"message":"Line 284 exceeds the maximum line length of 90.","line":284,"column":1,"nodeType":"Program","source":"                    let startSelection = SelectionState.createEmpty(contentState.getFirstBlock().getKey());"},{"ruleId":"max-len","severity":1,"message":"Line 286 exceeds the maximum line length of 90.","line":286,"column":1,"nodeType":"Program","source":"                    startSelection = SelectionState.createEmpty(contentState.getFirstBlock().getKey());"},{"ruleId":"max-len","severity":1,"message":"Line 290 exceeds the maximum line length of 90.","line":290,"column":1,"nodeType":"Program","source":"                    startSelection = SelectionState.createEmpty(contentState.getFirstBlock().getKey());"},{"ruleId":"max-len","severity":1,"message":"Line 292 exceeds the maximum line length of 90.","line":292,"column":1,"nodeType":"Program","source":"                        contentState = Modifier.setBlockType(contentState, startSelection, 'blockquote');"},{"ruleId":"max-len","severity":1,"message":"Line 294 exceeds the maximum line length of 90.","line":294,"column":1,"nodeType":"Program","source":"                    let editorState = EditorState.push(this.state.editorState, contentState, 'insert-characters');"},{"ruleId":"prefer-const","severity":1,"message":"'editorState' is never reassigned. Use 'const' instead.","line":294,"column":25,"nodeType":"Identifier","source":"                    let editorState = EditorState.push(this.state.editorState, contentState, 'insert-characters');","fix":{"range":[11770,11773],"text":"const"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":321,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[12493,12496],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":338,"column":13,"nodeType":"VariableDeclaration","source":"            var self = this;","fix":{"range":[12977,12980],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":358,"column":49,"nodeType":"Identifier","source":"            this.isTyping, TYPING_SERVER_TIMEOUT","fix":{"range":[13603,13603],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 370 exceeds the maximum line length of 90.","line":370,"column":1,"nodeType":"Program","source":"    onEditorContentChanged(editorState: EditorState, didRespondToUserInput: boolean = true) {"},{"ruleId":"max-len","severity":1,"message":"Line 377 exceeds the maximum line length of 90.","line":377,"column":1,"nodeType":"Program","source":"            originalEditorState: didRespondToUserInput ? null : this.state.originalEditorState,"},{"ruleId":"max-len","severity":1,"message":"Line 388 exceeds the maximum line length of 90.","line":388,"column":1,"nodeType":"Program","source":"            const selection = RichText.selectionStateToTextOffsets(editorState.getSelection(),"},{"ruleId":"max-len","severity":1,"message":"Line 403 exceeds the maximum line length of 90.","line":403,"column":1,"nodeType":"Program","source":"            const md = new Markdown(this.state.editorState.getCurrentContent().getPlainText());"},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":404,"column":37,"nodeType":"CallExpression","source":"            contentState = RichText.HTMLtoContentState(md.toHTML());"},{"ruleId":"max-len","severity":1,"message":"Line 418 exceeds the maximum line length of 90.","line":418,"column":1,"nodeType":"Program","source":"            UserSettingsStore.setSyncedSetting('MessageComposerInput.isRichTextEnabled', enabled);"},{"ruleId":"max-len","severity":1,"message":"Line 433 exceeds the maximum line length of 90.","line":433,"column":1,"nodeType":"Program","source":"            const blockCommands = ['code-block', 'blockquote', 'unordered-list-item', 'ordered-list-item'];"},{"ruleId":"max-len","severity":1,"message":"Line 436 exceeds the maximum line length of 90.","line":436,"column":1,"nodeType":"Program","source":"                this.setEditorState(RichUtils.toggleBlockType(this.state.editorState, command));"},{"ruleId":"max-len","severity":1,"message":"Line 439 exceeds the maximum line length of 90.","line":439,"column":1,"nodeType":"Program","source":"                this.setEditorState(RichUtils.toggleInlineStyle(this.state.editorState, 'STRIKETHROUGH'));"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":442,"column":13,"nodeType":"VariableDeclaration","source":"            let contentState = this.state.editorState.getCurrentContent(),"},{"ruleId":"prefer-const","severity":1,"message":"'contentState' is never reassigned. Use 'const' instead.","line":442,"column":17,"nodeType":"Identifier","source":"            let contentState = this.state.editorState.getCurrentContent(),"},{"ruleId":"prefer-const","severity":1,"message":"'selection' is never reassigned. Use 'const' instead.","line":443,"column":17,"nodeType":"Identifier","source":"                selection = this.state.editorState.getSelection();"},{"ruleId":"prefer-const","severity":1,"message":"'modifyFn' is never reassigned. Use 'const' instead.","line":445,"column":17,"nodeType":"Identifier","source":"            let modifyFn = {","fix":{"range":[17125,17128],"text":"const"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":446,"column":25,"nodeType":"ArrowFunctionExpression","source":"                'bold': text => `**${text}**`,","fix":{"range":[17166,17170],"text":"(text)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":447,"column":27,"nodeType":"ArrowFunctionExpression","source":"                'italic': text => `*${text}*`,","fix":{"range":[17215,17219],"text":"(text)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":448,"column":30,"nodeType":"ArrowFunctionExpression","source":"                'underline': text => `_${text}_`, // there's actually no valid underline in Markdown, but *shrug*","fix":{"range":[17265,17269],"text":"(text)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":449,"column":27,"nodeType":"ArrowFunctionExpression","source":"                'strike': text => `~~${text}~~`,","fix":{"range":[17376,17380],"text":"(text)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":450,"column":25,"nodeType":"ArrowFunctionExpression","source":"                'code': text => `\\`${text}\\``,","fix":{"range":[17423,17427],"text":"(text)"}},{"ruleId":"max-len","severity":1,"message":"Line 451 exceeds the maximum line length of 90.","line":451,"column":1,"nodeType":"Program","source":"                'blockquote': text => text.split('\\n').map(line => `> ${line}\\n`).join(''),"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":451,"column":31,"nodeType":"ArrowFunctionExpression","source":"                'blockquote': text => text.split('\\n').map(line => `> ${line}\\n`).join(''),","fix":{"range":[17476,17480],"text":"(text)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":451,"column":60,"nodeType":"ArrowFunctionExpression","source":"                'blockquote': text => text.split('\\n').map(line => `> ${line}\\n`).join(''),","fix":{"range":[17505,17509],"text":"(line)"}},{"ruleId":"max-len","severity":1,"message":"Line 452 exceeds the maximum line length of 90.","line":452,"column":1,"nodeType":"Program","source":"                'unordered-list-item': text => text.split('\\n').map(line => `- ${line}\\n`).join(''),"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":452,"column":40,"nodeType":"ArrowFunctionExpression","source":"                'unordered-list-item': text => text.split('\\n').map(line => `- ${line}\\n`).join(''),","fix":{"range":[17577,17581],"text":"(text)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":452,"column":69,"nodeType":"ArrowFunctionExpression","source":"                'unordered-list-item': text => text.split('\\n').map(line => `- ${line}\\n`).join(''),","fix":{"range":[17606,17610],"text":"(line)"}},{"ruleId":"max-len","severity":1,"message":"Line 453 exceeds the maximum line length of 90.","line":453,"column":1,"nodeType":"Program","source":"                'ordered-list-item': text => text.split('\\n').map((line, i) => `${i+1}. ${line}\\n`).join(''),"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":453,"column":38,"nodeType":"ArrowFunctionExpression","source":"                'ordered-list-item': text => text.split('\\n').map((line, i) => `${i+1}. ${line}\\n`).join(''),","fix":{"range":[17676,17680],"text":"(text)"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":460,"column":40,"nodeType":"Literal","source":"                    'insert-characters'","fix":{"range":[18006,18006],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 479 exceeds the maximum line length of 90.","line":479,"column":1,"nodeType":"Program","source":"            this.onEditorContentChanged(RichUtils.insertSoftNewline(this.state.editorState));"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":489,"column":9,"nodeType":"VariableDeclaration","source":"        let contentText = contentState.getPlainText(), contentHTML;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":491,"column":9,"nodeType":"VariableDeclaration","source":"        var cmd = SlashCommands.processInput(this.props.room.roomId, contentText);","fix":{"range":[18724,18727],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":495,"column":58,"nodeType":"Property","source":"                    editorState: this.createEditorState()","fix":{"range":[18937,18937],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":503,"column":21,"nodeType":"VariableDeclaration","source":"                    var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[19220,19223],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":506,"column":49,"nodeType":"Property","source":"                        description: err.message","fix":{"range":[19428,19428],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":509,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[19486,19499],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":512,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[19579,19582],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":515,"column":43,"nodeType":"Property","source":"                    description: cmd.error","fix":{"range":[19774,19774],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":523,"column":58,"nodeType":"CallExpression","source":"                RichText.contentStateToHTML(contentState)","fix":{"range":[19999,19999],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":550,"column":78,"nodeType":"Identifier","source":"                this.client, this.props.room.roomId, contentText, contentHTML","fix":{"range":[21042,21042],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 553 exceeds the maximum line length of 90.","line":553,"column":1,"nodeType":"Program","source":"            sendMessagePromise = sendTextFn.call(this.client, this.props.room.roomId, contentText);"},{"ruleId":"max-len","severity":1,"message":"Line 612 exceeds the maximum line length of 90.","line":612,"column":1,"nodeType":"Program","source":"        const activeEditorState = this.state.originalEditorState || this.state.editorState;"},{"ruleId":"prefer-const","severity":1,"message":"'contentState' is never reassigned. Use 'const' instead.","line":623,"column":13,"nodeType":"Identifier","source":"        let contentState = Modifier.replaceText(","fix":{"range":[23336,23339],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 625 exceeds the maximum line length of 90.","line":625,"column":1,"nodeType":"Program","source":"            RichText.textOffsetsToSelectionState(range, activeEditorState.getCurrentContent().getBlocksAsArray()),"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":626,"column":23,"nodeType":"Identifier","source":"            completion","fix":{"range":[23565,23565],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 629 exceeds the maximum line length of 90.","line":629,"column":1,"nodeType":"Program","source":"        let editorState = EditorState.push(activeEditorState, contentState, 'insert-characters');"},{"ruleId":"max-len","severity":1,"message":"Line 630 exceeds the maximum line length of 90.","line":630,"column":1,"nodeType":"Program","source":"        editorState = EditorState.forceSelection(editorState, contentState.getSelectionAfter());"},{"ruleId":"max-len","severity":1,"message":"Line 641 exceeds the maximum line length of 90.","line":641,"column":1,"nodeType":"Program","source":"    onFormatButtonClicked(name: \"bold\" | \"italic\" | \"strike\" | \"code\" | \"underline\" | \"quote\" | \"bullet\" | \"numbullet\", e) {"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":664,"column":22,"nodeType":"ArrowFunctionExpression","source":"                .map(style => styleName[style] || null)","fix":{"range":[25007,25012],"text":"(style)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":665,"column":25,"nodeType":"ArrowFunctionExpression","source":"                .filter(styleName => !!styleName);","fix":{"range":[25066,25075],"text":"(styleName)"}},{"ruleId":"max-len","severity":1,"message":"Line 690 exceeds the maximum line length of 90.","line":690,"column":1,"nodeType":"Program","source":"        const activeEditorState = this.state.originalEditorState || this.state.editorState;"},{"ruleId":"max-len","severity":1,"message":"Line 709 exceeds the maximum line length of 90.","line":709,"column":1,"nodeType":"Program","source":"        const selection = RichText.selectionStateToTextOffsets(activeEditorState.getSelection(),"},{"ruleId":"max-len","severity":1,"message":"Line 722 exceeds the maximum line length of 90.","line":722,"column":1,"nodeType":"Program","source":"                    <img className=\"mx_MessageComposer_input_markdownIndicator mx_filterFlipColor\""},{"ruleId":"max-len","severity":1,"message":"Line 724 exceeds the maximum line length of 90.","line":724,"column":1,"nodeType":"Program","source":"                         title={`Markdown is ${this.state.isRichtextEnabled ? 'disabled' : 'enabled'}`}"}],"errorCount":14,"warningCount":80,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nimport type SyntheticKeyboardEvent from 'react/lib/SyntheticKeyboardEvent';\n\nimport {Editor, EditorState, RichUtils, CompositeDecorator,\n    convertFromRaw, convertToRaw, Modifier, EditorChangeType,\n    getDefaultKeyBinding, KeyBindingUtil, ContentState, ContentBlock, SelectionState} from 'draft-js';\n\nimport {stateToMarkdown as __stateToMarkdown} from 'draft-js-export-markdown';\nimport classNames from 'classnames';\nimport escape from 'lodash/escape';\nimport Q from 'q';\n\nimport MatrixClientPeg from '../../../MatrixClientPeg';\nimport type {MatrixClient} from 'matrix-js-sdk/lib/matrix';\nimport SlashCommands from '../../../SlashCommands';\nimport Modal from '../../../Modal';\nimport sdk from '../../../index';\n\nimport dis from '../../../dispatcher';\nimport KeyCode from '../../../KeyCode';\nimport UserSettingsStore from '../../../UserSettingsStore';\n\nimport * as RichText from '../../../RichText';\nimport * as HtmlUtils from '../../../HtmlUtils';\nimport Autocomplete from './Autocomplete';\nimport {Completion} from \"../../../autocomplete/Autocompleter\";\nimport Markdown from '../../../Markdown';\n\nconst TYPING_USER_TIMEOUT = 10000, TYPING_SERVER_TIMEOUT = 30000;\n\nconst KEY_M = 77;\n\nconst ZWS_CODE = 8203;\nconst ZWS = String.fromCharCode(ZWS_CODE); // zero width space\nfunction stateToMarkdown(state) {\n    return __stateToMarkdown(state)\n        .replace(\n            ZWS, // draft-js-export-markdown adds these\n            ''); // this is *not* a zero width space, trust me :)\n}\n\n/*\n * The textInput part of the MessageComposer\n */\nexport default class MessageComposerInput extends React.Component {\n    static getKeyBinding(e: SyntheticKeyboardEvent): string {\n        // C-m => Toggles between rich text and markdown modes\n        if (e.keyCode === KEY_M && KeyBindingUtil.isCtrlKeyCommand(e)) {\n            return 'toggle-mode';\n        }\n\n        return getDefaultKeyBinding(e);\n    }\n\n    static getBlockStyle(block: ContentBlock): ?string {\n        if (block.getType() === 'strikethrough') {\n            return 'mx_Markdown_STRIKETHROUGH';\n        }\n\n        return null;\n    }\n\n    client: MatrixClient;\n    autocomplete: Autocomplete;\n\n    constructor(props, context) {\n        super(props, context);\n        this.onAction = this.onAction.bind(this);\n        this.handleReturn = this.handleReturn.bind(this);\n        this.handleKeyCommand = this.handleKeyCommand.bind(this);\n        this.onEditorContentChanged = this.onEditorContentChanged.bind(this);\n        this.setEditorState = this.setEditorState.bind(this);\n        this.onUpArrow = this.onUpArrow.bind(this);\n        this.onDownArrow = this.onDownArrow.bind(this);\n        this.onTab = this.onTab.bind(this);\n        this.onEscape = this.onEscape.bind(this);\n        this.setDisplayedCompletion = this.setDisplayedCompletion.bind(this);\n        this.onMarkdownToggleClicked = this.onMarkdownToggleClicked.bind(this);\n\n        const isRichtextEnabled = UserSettingsStore.getSyncedSetting('MessageComposerInput.isRichTextEnabled', true);\n\n        this.state = {\n            // whether we're in rich text or markdown mode\n            isRichtextEnabled,\n\n            // the currently displayed editor state (note: this is always what is modified on input)\n            editorState: null,\n\n            // the original editor state, before we started tabbing through completions\n            originalEditorState: null,\n        };\n\n        // bit of a hack, but we need to do this here since createEditorState needs isRichtextEnabled\n        /* eslint react/no-direct-mutation-state:0 */\n        this.state.editorState = this.createEditorState();\n\n        this.client = MatrixClientPeg.get();\n    }\n\n    /*\n     * \"Does the right thing\" to create an EditorState, based on:\n     * - whether we've got rich text mode enabled\n     * - contentState was passed in\n     */\n    createEditorState(richText: boolean, contentState: ?ContentState): EditorState {\n        let decorators = richText ? RichText.getScopedRTDecorators(this.props) :\n                                    RichText.getScopedMDDecorators(this.props),\n            compositeDecorator = new CompositeDecorator(decorators);\n\n        let editorState = null;\n        if (contentState) {\n            editorState = EditorState.createWithContent(contentState, compositeDecorator);\n        } else {\n            editorState = EditorState.createEmpty(compositeDecorator);\n        }\n\n        return EditorState.moveFocusToEnd(editorState);\n    }\n\n    componentWillMount() {\n        const component = this;\n        this.sentHistory = {\n            // The list of typed messages. Index 0 is more recent\n            data: [],\n            // The position in data currently displayed\n            position: -1,\n            // The room the history is for.\n            roomId: null,\n            // The original text before they hit UP\n            originalText: null,\n            // The textarea element to set text to.\n            element: null,\n\n            init: function(element, roomId) {\n                this.roomId = roomId;\n                this.element = element;\n                this.position = -1;\n                var storedData = window.sessionStorage.getItem(\n                    \"mx_messagecomposer_history_\" + roomId\n                );\n                if (storedData) {\n                    this.data = JSON.parse(storedData);\n                }\n                if (this.roomId) {\n                    this.setLastTextEntry();\n                }\n            },\n\n            push: function(text) {\n                // store a message in the sent history\n                this.data.unshift(text);\n                window.sessionStorage.setItem(\n                    \"mx_messagecomposer_history_\" + this.roomId,\n                    JSON.stringify(this.data)\n                );\n                // reset history position\n                this.position = -1;\n                this.originalText = null;\n            },\n\n            // move in the history. Returns true if we managed to move.\n            next: function(offset) {\n                if (this.position === -1) {\n                    // user is going into the history, save the current line.\n                    this.originalText = this.element.value;\n                }\n                else {\n                    // user may have modified this line in the history; remember it.\n                    this.data[this.position] = this.element.value;\n                }\n\n                if (offset > 0 && this.position === (this.data.length - 1)) {\n                    // we've run out of history\n                    return false;\n                }\n\n                // retrieve the next item (bounded).\n                var newPosition = this.position + offset;\n                newPosition = Math.max(-1, newPosition);\n                newPosition = Math.min(newPosition, this.data.length - 1);\n                this.position = newPosition;\n\n                if (this.position !== -1) {\n                    // show the message\n                    this.element.value = this.data[this.position];\n                }\n                else if (this.originalText !== undefined) {\n                    // restore the original text the user was typing.\n                    this.element.value = this.originalText;\n                }\n\n                return true;\n            },\n\n            saveLastTextEntry: function() {\n                // save the currently entered text in order to restore it later.\n                // NB: This isn't 'originalText' because we want to restore\n                // sent history items too!\n                let contentJSON = JSON.stringify(convertToRaw(component.state.editorState.getCurrentContent()));\n                window.sessionStorage.setItem(\"mx_messagecomposer_input_\" + this.roomId, contentJSON);\n            },\n\n            setLastTextEntry: function() {\n                let contentJSON = window.sessionStorage.getItem(\"mx_messagecomposer_input_\" + this.roomId);\n                if (contentJSON) {\n                    let content = convertFromRaw(JSON.parse(contentJSON));\n                    component.setEditorState(component.createEditorState(component.state.isRichtextEnabled, content));\n                }\n            },\n        };\n    }\n\n    componentDidMount() {\n        this.dispatcherRef = dis.register(this.onAction);\n        this.sentHistory.init(\n            this.refs.editor,\n            this.props.room.roomId\n        );\n    }\n\n    componentWillUnmount() {\n        dis.unregister(this.dispatcherRef);\n        this.sentHistory.saveLastTextEntry();\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        // this is dirty, but moving all this state to MessageComposer is dirtier\n        if (this.props.onInputStateChanged && nextState !== this.state) {\n            const state = this.getSelectionInfo(nextState.editorState);\n            state.isRichtextEnabled = nextState.isRichtextEnabled;\n            this.props.onInputStateChanged(state);\n        }\n    }\n\n    onAction(payload) {\n        let editor = this.refs.editor;\n        let contentState = this.state.editorState.getCurrentContent();\n\n        switch (payload.action) {\n            case 'focus_composer':\n                editor.focus();\n                break;\n\n            // TODO change this so we insert a complete user alias\n\n            case 'insert_displayname': {\n                contentState = Modifier.replaceText(\n                    contentState,\n                    this.state.editorState.getSelection(),\n                    `${payload.displayname}: `\n                );\n                let editorState = EditorState.push(this.state.editorState, contentState, 'insert-characters');\n                editorState = EditorState.forceSelection(editorState, contentState.getSelectionAfter());\n                this.onEditorContentChanged(editorState);\n                editor.focus();\n            }\n            break;\n\n            case 'quote': {\n                let {body, formatted_body} = payload.event.getContent();\n                formatted_body = formatted_body || escape(body);\n                if (formatted_body) {\n                    let content = RichText.HTMLtoContentState(`<blockquote>${formatted_body}</blockquote>`);\n                    if (!this.state.isRichtextEnabled) {\n                        content = ContentState.createFromText(stateToMarkdown(content));\n                    }\n\n                    const blockMap = content.getBlockMap();\n                    let startSelection = SelectionState.createEmpty(contentState.getFirstBlock().getKey());\n                    contentState = Modifier.splitBlock(contentState, startSelection);\n                    startSelection = SelectionState.createEmpty(contentState.getFirstBlock().getKey());\n                    contentState = Modifier.replaceWithFragment(contentState,\n                        startSelection,\n                        blockMap);\n                    startSelection = SelectionState.createEmpty(contentState.getFirstBlock().getKey());\n                    if (this.state.isRichtextEnabled) {\n                        contentState = Modifier.setBlockType(contentState, startSelection, 'blockquote');\n                    }\n                    let editorState = EditorState.push(this.state.editorState, contentState, 'insert-characters');\n                    this.onEditorContentChanged(editorState);\n                    editor.focus();\n                }\n            }\n            break;\n        }\n    }\n\n    onTypingActivity() {\n        this.isTyping = true;\n        if (!this.userTypingTimer) {\n            this.sendTyping(true);\n        }\n        this.startUserTypingTimer();\n        this.startServerTypingTimer();\n    }\n\n    onFinishedTyping() {\n        this.isTyping = false;\n        this.sendTyping(false);\n        this.stopUserTypingTimer();\n        this.stopServerTypingTimer();\n    }\n\n    startUserTypingTimer() {\n        this.stopUserTypingTimer();\n        var self = this;\n        this.userTypingTimer = setTimeout(function() {\n            self.isTyping = false;\n            self.sendTyping(self.isTyping);\n            self.userTypingTimer = null;\n        }, TYPING_USER_TIMEOUT);\n    }\n\n    stopUserTypingTimer() {\n        if (this.userTypingTimer) {\n            clearTimeout(this.userTypingTimer);\n            this.userTypingTimer = null;\n        }\n    }\n\n    startServerTypingTimer() {\n        if (!this.serverTypingTimer) {\n            var self = this;\n            this.serverTypingTimer = setTimeout(function() {\n                if (self.isTyping) {\n                    self.sendTyping(self.isTyping);\n                    self.startServerTypingTimer();\n                }\n            }, TYPING_SERVER_TIMEOUT / 2);\n        }\n    }\n\n    stopServerTypingTimer() {\n        if (this.serverTypingTimer) {\n            clearTimeout(this.servrTypingTimer);\n            this.serverTypingTimer = null;\n        }\n    }\n\n    sendTyping(isTyping) {\n        MatrixClientPeg.get().sendTyping(\n            this.props.room.roomId,\n            this.isTyping, TYPING_SERVER_TIMEOUT\n        ).done();\n    }\n\n    refreshTyping() {\n        if (this.typingTimeout) {\n            clearTimeout(this.typingTimeout);\n            this.typingTimeout = null;\n        }\n    }\n\n    // Called by Draft to change editor contents, and by setEditorState\n    onEditorContentChanged(editorState: EditorState, didRespondToUserInput: boolean = true) {\n        editorState = RichText.attachImmutableEntitiesToEmoji(editorState);\n\n        const contentChanged = Q.defer();\n        /* If a modification was made, set originalEditorState to null, since newState is now our original */\n        this.setState({\n            editorState,\n            originalEditorState: didRespondToUserInput ? null : this.state.originalEditorState,\n        }, () => contentChanged.resolve());\n\n        if (editorState.getCurrentContent().hasText()) {\n            this.onTypingActivity();\n        } else {\n            this.onFinishedTyping();\n        }\n\n        if (this.props.onContentChanged) {\n            const textContent = editorState.getCurrentContent().getPlainText();\n            const selection = RichText.selectionStateToTextOffsets(editorState.getSelection(),\n                editorState.getCurrentContent().getBlocksAsArray());\n\n            this.props.onContentChanged(textContent, selection);\n        }\n        return contentChanged.promise;\n    }\n\n    setEditorState(editorState: EditorState) {\n        return this.onEditorContentChanged(editorState, false);\n    }\n\n    enableRichtext(enabled: boolean) {\n        let contentState = null;\n        if (enabled) {\n            const md = new Markdown(this.state.editorState.getCurrentContent().getPlainText());\n            contentState = RichText.HTMLtoContentState(md.toHTML());\n        } else {\n            let markdown = stateToMarkdown(this.state.editorState.getCurrentContent());\n            if (markdown[markdown.length - 1] === '\\n') {\n                markdown = markdown.substring(0, markdown.length - 1); // stateToMarkdown tacks on an extra newline (?!?)\n            }\n            contentState = ContentState.createFromText(markdown);\n        }\n\n        this.setEditorState(this.createEditorState(enabled, contentState)).then(() => {\n            this.setState({\n                isRichtextEnabled: enabled,\n            });\n\n            UserSettingsStore.setSyncedSetting('MessageComposerInput.isRichTextEnabled', enabled);\n        });\n    }\n\n    handleKeyCommand(command: string): boolean {\n        if (command === 'toggle-mode') {\n            this.enableRichtext(!this.state.isRichtextEnabled);\n            return true;\n        }\n\n        let newState: ?EditorState = null;\n\n        // Draft handles rich text mode commands by default but we need to do it ourselves for Markdown.\n        if (this.state.isRichtextEnabled) {\n            // These are block types, not handled by RichUtils by default.\n            const blockCommands = ['code-block', 'blockquote', 'unordered-list-item', 'ordered-list-item'];\n\n            if (blockCommands.includes(command)) {\n                this.setEditorState(RichUtils.toggleBlockType(this.state.editorState, command));\n            } else if (command === 'strike') {\n                // this is the only inline style not handled by Draft by default\n                this.setEditorState(RichUtils.toggleInlineStyle(this.state.editorState, 'STRIKETHROUGH'));\n            }\n        } else {\n            let contentState = this.state.editorState.getCurrentContent(),\n                selection = this.state.editorState.getSelection();\n\n            let modifyFn = {\n                'bold': text => `**${text}**`,\n                'italic': text => `*${text}*`,\n                'underline': text => `_${text}_`, // there's actually no valid underline in Markdown, but *shrug*\n                'strike': text => `~~${text}~~`,\n                'code': text => `\\`${text}\\``,\n                'blockquote': text => text.split('\\n').map(line => `> ${line}\\n`).join(''),\n                'unordered-list-item': text => text.split('\\n').map(line => `- ${line}\\n`).join(''),\n                'ordered-list-item': text => text.split('\\n').map((line, i) => `${i+1}. ${line}\\n`).join(''),\n            }[command];\n\n            if (modifyFn) {\n                newState = EditorState.push(\n                    this.state.editorState,\n                    RichText.modifyText(contentState, selection, modifyFn),\n                    'insert-characters'\n                );\n            }\n        }\n\n        if (newState == null) {\n            newState = RichUtils.handleKeyCommand(this.state.editorState, command);\n        }\n\n        if (newState != null) {\n            this.setEditorState(newState);\n            return true;\n        }\n\n        return false;\n    }\n\n    handleReturn(ev) {\n        if (ev.shiftKey) {\n            this.onEditorContentChanged(RichUtils.insertSoftNewline(this.state.editorState));\n            return true;\n        }\n\n        const contentState = this.state.editorState.getCurrentContent();\n        if (!contentState.hasText()) {\n            return true;\n        }\n\n\n        let contentText = contentState.getPlainText(), contentHTML;\n\n        var cmd = SlashCommands.processInput(this.props.room.roomId, contentText);\n        if (cmd) {\n            if (!cmd.error) {\n                this.setState({\n                    editorState: this.createEditorState()\n                });\n            }\n            if (cmd.promise) {\n                cmd.promise.then(function() {\n                    console.log(\"Command success.\");\n                }, function(err) {\n                    console.error(\"Command failure: %s\", err);\n                    var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                    Modal.createDialog(ErrorDialog, {\n                        title: \"Server error\",\n                        description: err.message\n                    });\n                });\n            }\n            else if (cmd.error) {\n                console.error(cmd.error);\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Command error\",\n                    description: cmd.error\n                });\n            }\n            return true;\n        }\n\n        if (this.state.isRichtextEnabled) {\n            contentHTML = HtmlUtils.stripParagraphs(\n                RichText.contentStateToHTML(contentState)\n            );\n        } else {\n            const md = new Markdown(contentText);\n            if (md.isPlainText()) {\n                contentText = md.toPlaintext();\n            } else {\n                contentHTML = md.toHTML();\n            }\n        }\n\n        let sendHtmlFn = this.client.sendHtmlMessage;\n        let sendTextFn = this.client.sendTextMessage;\n\n        if (contentText.startsWith('/me')) {\n            contentText = contentText.replace('/me', '');\n            // bit of a hack, but the alternative would be quite complicated\n            if (contentHTML) contentHTML = contentHTML.replace('/me', '');\n            sendHtmlFn = this.client.sendHtmlEmote;\n            sendTextFn = this.client.sendEmoteMessage;\n        }\n\n        // XXX: We don't actually seem to use this history?\n        this.sentHistory.push(contentHTML || contentText);\n        let sendMessagePromise;\n        if (contentHTML) {\n            sendMessagePromise = sendHtmlFn.call(\n                this.client, this.props.room.roomId, contentText, contentHTML\n            );\n        } else {\n            sendMessagePromise = sendTextFn.call(this.client, this.props.room.roomId, contentText);\n        }\n\n        sendMessagePromise.then(() => {\n            dis.dispatch({\n                action: 'message_sent',\n            });\n        }, () => {\n            dis.dispatch({\n                action: 'message_send_failed',\n            });\n        });\n\n        this.setState({\n            editorState: this.createEditorState(),\n        });\n\n        this.autocomplete.hide();\n\n        return true;\n    }\n\n    async onUpArrow(e) {\n        const completion = this.autocomplete.onUpArrow();\n        if (completion != null) {\n            e.preventDefault();\n        }\n        return await this.setDisplayedCompletion(completion);\n    }\n\n    async onDownArrow(e) {\n        const completion = this.autocomplete.onDownArrow();\n        e.preventDefault();\n        return await this.setDisplayedCompletion(completion);\n    }\n\n    // tab and shift-tab are mapped to down and up arrow respectively\n    async onTab(e) {\n        e.preventDefault(); // we *never* want tab's default to happen, but we do want up/down sometimes\n        const didTab = await (e.shiftKey ? this.onUpArrow : this.onDownArrow)(e);\n        if (!didTab && this.autocomplete) {\n            this.autocomplete.forceComplete().then(() => {\n                this.onDownArrow(e);\n            });\n        }\n    }\n\n    onEscape(e) {\n        e.preventDefault();\n        if (this.autocomplete) {\n            this.autocomplete.onEscape(e);\n        }\n        this.setDisplayedCompletion(null); // restore originalEditorState\n    }\n\n    /* If passed null, restores the original editor content from state.originalEditorState.\n     * If passed a non-null displayedCompletion, modifies state.originalEditorState to compute new state.editorState.\n     */\n    async setDisplayedCompletion(displayedCompletion: ?Completion): boolean {\n        const activeEditorState = this.state.originalEditorState || this.state.editorState;\n\n        if (displayedCompletion == null) {\n            if (this.state.originalEditorState) {\n                this.setEditorState(this.state.originalEditorState);\n            }\n            return false;\n        }\n\n        const {range = {}, completion = ''} = displayedCompletion;\n\n        let contentState = Modifier.replaceText(\n            activeEditorState.getCurrentContent(),\n            RichText.textOffsetsToSelectionState(range, activeEditorState.getCurrentContent().getBlocksAsArray()),\n            completion\n        );\n\n        let editorState = EditorState.push(activeEditorState, contentState, 'insert-characters');\n        editorState = EditorState.forceSelection(editorState, contentState.getSelectionAfter());\n        const originalEditorState = activeEditorState;\n\n        await this.setEditorState(editorState);\n        this.setState({originalEditorState});\n\n        // for some reason, doing this right away does not update the editor :(\n        setTimeout(() => this.refs.editor.focus(), 50);\n        return true;\n    }\n\n    onFormatButtonClicked(name: \"bold\" | \"italic\" | \"strike\" | \"code\" | \"underline\" | \"quote\" | \"bullet\" | \"numbullet\", e) {\n        e.preventDefault(); // don't steal focus from the editor!\n        const command = {\n            code: 'code-block',\n            quote: 'blockquote',\n            bullet: 'unordered-list-item',\n            numbullet: 'ordered-list-item',\n        }[name] || name;\n        this.handleKeyCommand(command);\n    }\n\n    /* returns inline style and block type of current SelectionState so MessageComposer can render formatting\n    buttons. */\n    getSelectionInfo(editorState: EditorState) {\n        const styleName = {\n            BOLD: 'bold',\n            ITALIC: 'italic',\n            STRIKETHROUGH: 'strike',\n            UNDERLINE: 'underline',\n        };\n\n        const originalStyle = editorState.getCurrentInlineStyle().toArray();\n        const style = originalStyle\n                .map(style => styleName[style] || null)\n                .filter(styleName => !!styleName);\n\n        const blockName = {\n            'code-block': 'code',\n            'blockquote': 'quote',\n            'unordered-list-item': 'bullet',\n            'ordered-list-item': 'numbullet',\n        };\n        const originalBlockType = editorState.getCurrentContent()\n            .getBlockForKey(editorState.getSelection().getStartKey())\n            .getType();\n        const blockType = blockName[originalBlockType] || null;\n\n        return {\n            style,\n            blockType,\n        };\n    }\n\n    onMarkdownToggleClicked(e) {\n        e.preventDefault(); // don't steal focus from the editor!\n        this.handleKeyCommand('toggle-mode');\n    }\n\n    render() {\n        const activeEditorState = this.state.originalEditorState || this.state.editorState;\n\n        // From https://github.com/facebook/draft-js/blob/master/examples/rich/rich.html#L92\n        // If the user changes block type before entering any text, we can\n        // either style the placeholder or hide it.\n        let hidePlaceholder = false;\n        const contentState = activeEditorState.getCurrentContent();\n        if (!contentState.hasText()) {\n            if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n                hidePlaceholder = true;\n            }\n        }\n\n        const className = classNames('mx_MessageComposer_input', {\n                mx_MessageComposer_input_empty: hidePlaceholder,\n        });\n\n        const content = activeEditorState.getCurrentContent();\n        const contentText = content.getPlainText();\n        const selection = RichText.selectionStateToTextOffsets(activeEditorState.getSelection(),\n            activeEditorState.getCurrentContent().getBlocksAsArray());\n\n        return (\n            <div className=\"mx_MessageComposer_input_wrapper\">\n                <div className=\"mx_MessageComposer_autocomplete_wrapper\">\n                    <Autocomplete\n                        ref={(e) => this.autocomplete = e}\n                        onConfirm={this.setDisplayedCompletion}\n                        query={contentText}\n                        selection={selection} />\n                </div>\n                <div className={className}>\n                    <img className=\"mx_MessageComposer_input_markdownIndicator mx_filterFlipColor\"\n                         onMouseDown={this.onMarkdownToggleClicked}\n                         title={`Markdown is ${this.state.isRichtextEnabled ? 'disabled' : 'enabled'}`}\n                         src={`img/button-md-${!this.state.isRichtextEnabled}.png`} />\n                    <Editor ref=\"editor\"\n                            placeholder=\"Type a message…\"\n                            editorState={this.state.editorState}\n                            onChange={this.onEditorContentChanged}\n                            blockStyleFn={MessageComposerInput.getBlockStyle}\n                            keyBindingFn={MessageComposerInput.getKeyBinding}\n                            handleKeyCommand={this.handleKeyCommand}\n                            handleReturn={this.handleReturn}\n                            stripPastedStyles={!this.state.isRichtextEnabled}\n                            onTab={this.onTab}\n                            onUpArrow={this.onUpArrow}\n                            onDownArrow={this.onDownArrow}\n                            onEscape={this.onEscape}\n                            spellCheck={true} />\n                </div>\n            </div>\n        );\n    }\n}\n\nMessageComposerInput.propTypes = {\n    tabComplete: React.PropTypes.any,\n\n    // a callback which is called when the height of the composer is\n    // changed due to a change in content.\n    onResize: React.PropTypes.func,\n\n    // js-sdk Room object\n    room: React.PropTypes.object.isRequired,\n\n    // called with current plaintext content (as a string) whenever it changes\n    onContentChanged: React.PropTypes.func,\n\n    onUpArrow: React.PropTypes.func,\n\n    onDownArrow: React.PropTypes.func,\n\n    // attempts to confirm currently selected completion, returns whether actually confirmed\n    tryComplete: React.PropTypes.func,\n\n    onInputStateChanged: React.PropTypes.func,\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/MessageComposerInputOld.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var React = require(\"react\");","fix":{"range":[574,577],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[605,608],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var SlashCommands = require(\"../../../SlashCommands\");","fix":{"range":[664,667],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[719,722],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MemberEntry = require(\"../../../TabCompleteEntries\").MemberEntry;","fix":{"range":[758,761],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MemberEntry' is assigned a value but never used.","line":21,"column":5,"nodeType":"Identifier","source":"var MemberEntry = require(\"../../../TabCompleteEntries\").MemberEntry;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[828,831],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[866,869],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var KeyCode = require(\"../../../KeyCode\");","fix":{"range":[908,911],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var Markdown = require(\"../../../Markdown\");","fix":{"range":[951,954],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var TYPING_USER_TIMEOUT = 10000;","fix":{"range":[997,1000],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var TYPING_SERVER_TIMEOUT = 30000;","fix":{"range":[1030,1033],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","source":"var MARKDOWN_ENABLED = true;","fix":{"range":[1065,1068],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":57,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[1757,1760],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":74,"column":17,"nodeType":"VariableDeclaration","source":"                var storedData = window.sessionStorage.getItem(","fix":{"range":[2383,2386],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":75,"column":40,"nodeType":"BinaryExpression","source":"                    \"history_\" + roomId","fix":{"range":[2470,2470],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":90,"column":46,"nodeType":"CallExpression","source":"                    JSON.stringify(this.data)","fix":{"range":[2981,2981],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":102,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[3445,3462],"text":"                "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":114,"column":17,"nodeType":"VariableDeclaration","source":"                var newPosition = this.position + offset;","fix":{"range":[3888,3891],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":122,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[4276,4293],"text":"                "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":136,"column":17,"nodeType":"VariableDeclaration","source":"                var text = this.element.value;","fix":{"range":[4827,4830],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":141,"column":17,"nodeType":"VariableDeclaration","source":"                var text = window.sessionStorage.getItem(\"input_\" + this.roomId);","fix":{"range":[5010,5013],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":146,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[5222,5222],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":154,"column":35,"nodeType":"MemberExpression","source":"            this.props.room.roomId","fix":{"range":[5433,5433],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":168,"column":9,"nodeType":"VariableDeclaration","source":"        var textarea = this.refs.textarea;","fix":{"range":[5776,5779],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":175,"column":21,"nodeType":"VariableDeclaration","source":"                    var left = textarea.value.substring(0, textarea.selectionStart);","fix":{"range":[6041,6044],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":176,"column":21,"nodeType":"VariableDeclaration","source":"                    var right = textarea.value.substring(textarea.selectionEnd);","fix":{"range":[6126,6129],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":179,"column":21,"nodeType":"Punctuator","source":"                    }","fix":{"range":[6301,6322],"text":"                    "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":186,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[6612,6629],"text":"                "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":197,"column":13,"nodeType":"VariableDeclaration","source":"            var input = this.refs.textarea.value;","fix":{"range":[6900,6903],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":204,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[7132,7141],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":206,"column":13,"nodeType":"VariableDeclaration","source":"            var oldSelectionStart = this.refs.textarea.selectionStart;","fix":{"range":[7222,7225],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":208,"column":13,"nodeType":"VariableDeclaration","source":"            var keyCode = ev.keyCode;","fix":{"range":[7376,7379],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":223,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[7932,7935],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":237,"column":9,"nodeType":"VariableDeclaration","source":"        var newHeight = Math.min(this.refs.textarea.scrollHeight,","fix":{"range":[8525,8528],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":252,"column":9,"nodeType":"Punctuator","source":"        {","fix":{"range":[9089,9098],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":258,"column":9,"nodeType":"VariableDeclaration","source":"        var contentText = this.refs.textarea.value;","fix":{"range":[9186,9189],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":267,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[9635,9648],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":270,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[9762,9775],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":272,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":275,"column":59,"nodeType":"Property","source":"                    description: \"Usage: /markdown on|off\"","fix":{"range":[10011,10011],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":281,"column":9,"nodeType":"VariableDeclaration","source":"        var cmd = SlashCommands.processInput(this.props.room.roomId, contentText);","fix":{"range":[10085,10088],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":292,"column":21,"nodeType":"VariableDeclaration","source":"                    var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[10551,10554],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":295,"column":49,"nodeType":"Property","source":"                        description: err.message","fix":{"range":[10759,10759],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":298,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[10817,10830],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":301,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");"},{"ruleId":"no-redeclare","severity":2,"message":"'ErrorDialog' is already defined.","line":301,"column":21,"nodeType":"Identifier","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":304,"column":43,"nodeType":"Property","source":"                    description: cmd.error","fix":{"range":[11105,11105],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":310,"column":9,"nodeType":"VariableDeclaration","source":"        var isEmote = /^\\/me( |$)/i.test(contentText);","fix":{"range":[11179,11182],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":311,"column":9,"nodeType":"VariableDeclaration","source":"        var sendMessagePromise;","fix":{"range":[11234,11237],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":315,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[11343,11352],"text":"        "}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'send_markdown' is not in camel case.","line":320,"column":13,"nodeType":"Identifier","source":"        let send_markdown = false;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'send_markdown' is not in camel case.","line":324,"column":13,"nodeType":"Identifier","source":"            send_markdown = !mdown.isPlainText();"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'send_markdown' is not in camel case.","line":327,"column":13,"nodeType":"Identifier","source":"        if (send_markdown) {"},{"ruleId":"max-len","severity":1,"message":"Line 330 exceeds the maximum line length of 90.","line":330,"column":1,"nodeType":"Program","source":"                MatrixClientPeg.get().sendHtmlEmote(this.props.room.roomId, contentText, htmlText) :"},{"ruleId":"max-len","severity":1,"message":"Line 331 exceeds the maximum line length of 90.","line":331,"column":1,"nodeType":"Program","source":"                MatrixClientPeg.get().sendHtmlMessage(this.props.room.roomId, contentText, htmlText);"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":332,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[11977,11986],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 336 exceeds the maximum line length of 90.","line":336,"column":1,"nodeType":"Program","source":"                MatrixClientPeg.get().sendEmoteMessage(this.props.room.roomId, contentText) :"},{"ruleId":"max-len","severity":1,"message":"Line 337 exceeds the maximum line length of 90.","line":337,"column":1,"nodeType":"Program","source":"                MatrixClientPeg.get().sendTextMessage(this.props.room.roomId, contentText);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":342,"column":39,"nodeType":"Property","source":"                action: 'message_sent'","fix":{"range":[12396,12396],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":346,"column":46,"nodeType":"Property","source":"                action: 'message_send_failed'","fix":{"range":[12509,12509],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":372,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[13136,13139],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":389,"column":13,"nodeType":"VariableDeclaration","source":"            var self = this;","fix":{"range":[13642,13645],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":409,"column":49,"nodeType":"Identifier","source":"            this.isTyping, TYPING_SERVER_TIMEOUT","fix":{"range":[14290,14290],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 427 exceeds the maximum line length of 90.","line":427,"column":1,"nodeType":"Program","source":"                <textarea autoFocus ref=\"textarea\" rows=\"1\" onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} placeholder=\"Type a message...\" />"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":430,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[14870,14870],"text":","}}],"errorCount":13,"warningCount":53,"source":"/*\n Copyright 2015, 2016 OpenMarket Ltd\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\nvar React = require(\"react\");\n\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar SlashCommands = require(\"../../../SlashCommands\");\nvar Modal = require(\"../../../Modal\");\nvar MemberEntry = require(\"../../../TabCompleteEntries\").MemberEntry;\nvar sdk = require('../../../index');\n\nvar dis = require(\"../../../dispatcher\");\nvar KeyCode = require(\"../../../KeyCode\");\nvar Markdown = require(\"../../../Markdown\");\n\nvar TYPING_USER_TIMEOUT = 10000;\nvar TYPING_SERVER_TIMEOUT = 30000;\nvar MARKDOWN_ENABLED = true;\n\n/*\n * The textInput part of the MessageComposer\n */\nmodule.exports = React.createClass({\n    displayName: 'MessageComposerInput',\n\n    statics: {\n        // the height we limit the composer to\n        MAX_HEIGHT: 100,\n    },\n\n    propTypes: {\n        tabComplete: React.PropTypes.any,\n\n        // a callback which is called when the height of the composer is\n        // changed due to a change in content.\n        onResize: React.PropTypes.func,\n\n        // js-sdk Room object\n        room: React.PropTypes.object.isRequired,\n    },\n\n    componentWillMount: function() {\n        this.oldScrollHeight = 0;\n        this.markdownEnabled = MARKDOWN_ENABLED;\n        var self = this;\n        this.sentHistory = {\n            // The list of typed messages. Index 0 is more recent\n            data: [],\n            // The position in data currently displayed\n            position: -1,\n            // The room the history is for.\n            roomId: null,\n            // The original text before they hit UP\n            originalText: null,\n            // The textarea element to set text to.\n            element: null,\n\n            init: function(element, roomId) {\n                this.roomId = roomId;\n                this.element = element;\n                this.position = -1;\n                var storedData = window.sessionStorage.getItem(\n                    \"history_\" + roomId\n                );\n                if (storedData) {\n                    this.data = JSON.parse(storedData);\n                }\n                if (this.roomId) {\n                    this.setLastTextEntry();\n                }\n            },\n\n            push: function(text) {\n                // store a message in the sent history\n                this.data.unshift(text);\n                window.sessionStorage.setItem(\n                    \"history_\" + this.roomId,\n                    JSON.stringify(this.data)\n                );\n                // reset history position\n                this.position = -1;\n                this.originalText = null;\n            },\n\n            // move in the history. Returns true if we managed to move.\n            next: function(offset) {\n                if (this.position === -1) {\n                    // user is going into the history, save the current line.\n                    this.originalText = this.element.value;\n                }\n                else {\n                    // user may have modified this line in the history; remember it.\n                    this.data[this.position] = this.element.value;\n                }\n\n                if (offset > 0 && this.position === (this.data.length - 1)) {\n                    // we've run out of history\n                    return false;\n                }\n\n                // retrieve the next item (bounded).\n                var newPosition = this.position + offset;\n                newPosition = Math.max(-1, newPosition);\n                newPosition = Math.min(newPosition, this.data.length - 1);\n                this.position = newPosition;\n\n                if (this.position !== -1) {\n                    // show the message\n                    this.element.value = this.data[this.position];\n                }\n                else if (this.originalText !== undefined) {\n                    // restore the original text the user was typing.\n                    this.element.value = this.originalText;\n                }\n\n                self.resizeInput();\n                return true;\n            },\n\n            saveLastTextEntry: function() {\n                // save the currently entered text in order to restore it later.\n                // NB: This isn't 'originalText' because we want to restore\n                // sent history items too!\n                var text = this.element.value;\n                window.sessionStorage.setItem(\"input_\" + this.roomId, text);\n            },\n\n            setLastTextEntry: function() {\n                var text = window.sessionStorage.getItem(\"input_\" + this.roomId);\n                if (text) {\n                    this.element.value = text;\n                    self.resizeInput();\n                }\n            }\n        };\n    },\n\n    componentDidMount: function() {\n        this.dispatcherRef = dis.register(this.onAction);\n        this.sentHistory.init(\n            this.refs.textarea,\n            this.props.room.roomId\n        );\n        this.resizeInput();\n        if (this.props.tabComplete) {\n            this.props.tabComplete.setTextArea(this.refs.textarea);\n        }\n    },\n\n    componentWillUnmount: function() {\n        dis.unregister(this.dispatcherRef);\n        this.sentHistory.saveLastTextEntry();\n    },\n\n    onAction: function(payload) {\n        var textarea = this.refs.textarea;\n        switch (payload.action) {\n            case 'focus_composer':\n                textarea.focus();\n                break;\n            case 'insert_displayname':\n                if (textarea.value.length) {\n                    var left = textarea.value.substring(0, textarea.selectionStart);\n                    var right = textarea.value.substring(textarea.selectionEnd);\n                    if (right.length) {\n                        left += payload.displayname;\n                    }\n                    else {\n                        left = left.replace(/( ?)$/, \" \" + payload.displayname);\n                    }\n                    textarea.value = left + right;\n                    textarea.focus();\n                    textarea.setSelectionRange(left.length, left.length);\n                }\n                else {\n                    textarea.value = payload.displayname + \": \";\n                    textarea.focus();\n                }\n                break;\n        }\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === KeyCode.ENTER && !ev.shiftKey) {\n            var input = this.refs.textarea.value;\n            if (input.length === 0) {\n                ev.preventDefault();\n                return;\n            }\n            this.sentHistory.push(input);\n            this.onEnter(ev);\n        }\n        else if (ev.keyCode === KeyCode.UP || ev.keyCode === KeyCode.DOWN) {\n            var oldSelectionStart = this.refs.textarea.selectionStart;\n            // Remember the keyCode because React will recycle the synthetic event\n            var keyCode = ev.keyCode;\n            // set a callback so we can see if the cursor position changes as\n            // a result of this event. If it doesn't, we cycle history.\n            setTimeout(() => {\n                if (this.refs.textarea.selectionStart == oldSelectionStart) {\n                    this.sentHistory.next(keyCode === KeyCode.UP ? 1 : -1);\n                    this.resizeInput();\n                }\n            }, 0);\n        }\n\n        if (this.props.tabComplete) {\n            this.props.tabComplete.onKeyDown(ev);\n        }\n\n        var self = this;\n        setTimeout(function() {\n            if (self.refs.textarea && self.refs.textarea.value != '') {\n                self.onTypingActivity();\n            } else {\n                self.onFinishedTyping();\n            }\n        }, 10); // XXX: what is this 10ms setTimeout doing?  Looks hacky :(\n    },\n\n    resizeInput: function() {\n        // scrollHeight is at least equal to clientHeight, so we have to\n        // temporarily crimp clientHeight to 0 to get an accurate scrollHeight value\n        this.refs.textarea.style.height = \"20px\"; // 20 hardcoded from CSS\n        var newHeight = Math.min(this.refs.textarea.scrollHeight,\n            this.constructor.MAX_HEIGHT);\n        this.refs.textarea.style.height = Math.ceil(newHeight) + \"px\";\n        this.oldScrollHeight = this.refs.textarea.scrollHeight;\n\n        if (this.props.onResize) {\n            // kick gemini-scrollbar to re-layout\n            this.props.onResize();\n        }\n    },\n\n    onKeyUp: function(ev) {\n        if (this.refs.textarea.scrollHeight !== this.oldScrollHeight ||\n            ev.keyCode === KeyCode.DELETE ||\n            ev.keyCode === KeyCode.BACKSPACE)\n        {\n            this.resizeInput();\n        }\n    },\n\n    onEnter: function(ev) {\n        var contentText = this.refs.textarea.value;\n\n        // bodge for now to set markdown state on/off. We probably want a separate\n        // area for \"local\" commands which don't hit out to the server.\n        if (contentText.indexOf(\"/markdown\") === 0) {\n            ev.preventDefault();\n            this.refs.textarea.value = '';\n            if (contentText.indexOf(\"/markdown on\") === 0) {\n                this.markdownEnabled = true;\n            }\n            else if (contentText.indexOf(\"/markdown off\") === 0) {\n                this.markdownEnabled = false;\n            }\n            else {\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Unknown command\",\n                    description: \"Usage: /markdown on|off\"\n                });\n            }\n            return;\n        }\n\n        var cmd = SlashCommands.processInput(this.props.room.roomId, contentText);\n        if (cmd) {\n            ev.preventDefault();\n            if (!cmd.error) {\n                this.refs.textarea.value = '';\n            }\n            if (cmd.promise) {\n                cmd.promise.done(function() {\n                    console.log(\"Command success.\");\n                }, function(err) {\n                    console.error(\"Command failure: %s\", err);\n                    var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                    Modal.createDialog(ErrorDialog, {\n                        title: \"Server error\",\n                        description: err.message\n                    });\n                });\n            }\n            else if (cmd.error) {\n                console.error(cmd.error);\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Command error\",\n                    description: cmd.error\n                });\n            }\n            return;\n        }\n\n        var isEmote = /^\\/me( |$)/i.test(contentText);\n        var sendMessagePromise;\n\n        if (isEmote) {\n            contentText = contentText.substring(4);\n        }\n        else if (contentText[0] === '/') {\n            contentText = contentText.substring(1);\n        }\n\n        let send_markdown = false;\n        let mdown;\n        if (this.markdownEnabled) {\n            mdown = new Markdown(contentText);\n            send_markdown = !mdown.isPlainText();\n        }\n\n        if (send_markdown) {\n            const htmlText = mdown.toHTML();\n            sendMessagePromise = isEmote ?\n                MatrixClientPeg.get().sendHtmlEmote(this.props.room.roomId, contentText, htmlText) :\n                MatrixClientPeg.get().sendHtmlMessage(this.props.room.roomId, contentText, htmlText);\n        }\n        else {\n            const contentText = mdown.toPlaintext();\n            sendMessagePromise = isEmote ?\n                MatrixClientPeg.get().sendEmoteMessage(this.props.room.roomId, contentText) :\n                MatrixClientPeg.get().sendTextMessage(this.props.room.roomId, contentText);\n        }\n\n        sendMessagePromise.done(function() {\n            dis.dispatch({\n                action: 'message_sent'\n            });\n        }, function() {\n            dis.dispatch({\n                action: 'message_send_failed'\n            });\n        });\n        this.refs.textarea.value = '';\n        this.resizeInput();\n        ev.preventDefault();\n    },\n\n    onTypingActivity: function() {\n        this.isTyping = true;\n        if (!this.userTypingTimer) {\n            this.sendTyping(true);\n        }\n        this.startUserTypingTimer();\n        this.startServerTypingTimer();\n    },\n\n    onFinishedTyping: function() {\n        this.isTyping = false;\n        this.sendTyping(false);\n        this.stopUserTypingTimer();\n        this.stopServerTypingTimer();\n    },\n\n    startUserTypingTimer: function() {\n        this.stopUserTypingTimer();\n        var self = this;\n        this.userTypingTimer = setTimeout(function() {\n            self.isTyping = false;\n            self.sendTyping(self.isTyping);\n            self.userTypingTimer = null;\n        }, TYPING_USER_TIMEOUT);\n    },\n\n    stopUserTypingTimer: function() {\n        if (this.userTypingTimer) {\n            clearTimeout(this.userTypingTimer);\n            this.userTypingTimer = null;\n        }\n    },\n\n    startServerTypingTimer: function() {\n        if (!this.serverTypingTimer) {\n            var self = this;\n            this.serverTypingTimer = setTimeout(function() {\n                if (self.isTyping) {\n                    self.sendTyping(self.isTyping);\n                    self.startServerTypingTimer();\n                }\n            }, TYPING_SERVER_TIMEOUT / 2);\n        }\n    },\n\n    stopServerTypingTimer: function() {\n        if (this.serverTypingTimer) {\n            clearTimeout(this.servrTypingTimer);\n            this.serverTypingTimer = null;\n        }\n    },\n\n    sendTyping: function(isTyping) {\n        MatrixClientPeg.get().sendTyping(\n            this.props.room.roomId,\n            this.isTyping, TYPING_SERVER_TIMEOUT\n        ).done();\n    },\n\n    refreshTyping: function() {\n        if (this.typingTimeout) {\n            clearTimeout(this.typingTimeout);\n            this.typingTimeout = null;\n        }\n    },\n\n    onInputClick: function(ev) {\n        this.refs.textarea.focus();\n    },\n\n    render: function() {\n        return (\n            <div className=\"mx_MessageComposer_input\" onClick={ this.onInputClick }>\n                <textarea autoFocus ref=\"textarea\" rows=\"1\" onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} placeholder=\"Type a message...\" />\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/PresenceLabel.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MatrixClientPeg' is assigned a value but never used.","line":21,"column":5,"nodeType":"Identifier","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[673,676],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'sdk' is assigned a value but never used.","line":22,"column":5,"nodeType":"Identifier","source":"var sdk = require('../../../index');"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":37,"column":46,"nodeType":"Property","source":"        presenceState: React.PropTypes.string","fix":{"range":[1155,1155],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":43,"column":32,"nodeType":"Property","source":"            presenceState: null","fix":{"range":[1267,1267],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":9,"nodeType":"VariableDeclaration","source":"        var t = parseInt(time / 1000);","fix":{"range":[1356,1359],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":50,"column":9,"nodeType":"VariableDeclaration","source":"        var s = t % 60;","fix":{"range":[1395,1398],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":51,"column":9,"nodeType":"VariableDeclaration","source":"        var m = parseInt(t / 60) % 60;","fix":{"range":[1419,1422],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":52,"column":9,"nodeType":"VariableDeclaration","source":"        var h = parseInt(t / (60 * 60)) % 24;","fix":{"range":[1458,1461],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":53,"column":9,"nodeType":"VariableDeclaration","source":"        var d = parseInt(t / (60 * 60 * 24));","fix":{"range":[1504,1507],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 78 exceeds the maximum line length of 90.","line":78,"column":1,"nodeType":"Program","source":"            var ago = this.props.currentlyActive ? \"now\" : (this.getDuration(this.props.activeAgo) + \" ago\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":78,"column":13,"nodeType":"VariableDeclaration","source":"            var ago = this.props.currentlyActive ? \"now\" : (this.getDuration(this.props.activeAgo) + \" ago\");","fix":{"range":[2187,2190],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":86,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2624,2633],"text":"        "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":94,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2838,2838],"text":","}}],"errorCount":5,"warningCount":11,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar sdk = require('../../../index');\n\nmodule.exports = React.createClass({\n    displayName: 'PresenceLabel',\n\n    propTypes: {\n        // number of milliseconds ago this user was last active.\n        // zero = unknown\n        activeAgo: React.PropTypes.number,\n\n        // if true, activeAgo is an approximation and \"Now\" should\n        // be shown instead\n        currentlyActive: React.PropTypes.bool,\n\n        // offline, online, etc\n        presenceState: React.PropTypes.string\n    },\n\n    getDefaultProps: function() {\n        return {\n            ago: -1,\n            presenceState: null\n        };\n    },\n\n    getDuration: function(time) {\n        if (!time) return;\n        var t = parseInt(time / 1000);\n        var s = t % 60;\n        var m = parseInt(t / 60) % 60;\n        var h = parseInt(t / (60 * 60)) % 24;\n        var d = parseInt(t / (60 * 60 * 24));\n        if (t < 60) {\n            if (t < 0) {\n                return \"0s\";\n            }\n            return s + \"s\";\n        }\n        if (t < 60 * 60) {\n            return m + \"m\";\n        }\n        if (t < 24 * 60 * 60) {\n            return h + \"h\";\n        }\n        return d + \"d \";\n    },\n\n    getPrettyPresence: function(presence) {\n        if (presence === \"online\") return \"Online\";\n        if (presence === \"unavailable\") return \"Idle\"; // XXX: is this actually right?\n        if (presence === \"offline\") return \"Offline\";\n        return \"Unknown\";\n    },\n\n    render: function() {\n        if (this.props.activeAgo >= 0) {\n            var ago = this.props.currentlyActive ? \"now\" : (this.getDuration(this.props.activeAgo) + \" ago\");\n            // var ago = this.getDuration(this.props.activeAgo) + \" ago\";\n            // if (this.props.currentlyActive) ago += \" (now?)\";\n            return (\n                <div className=\"mx_PresenceLabel\">\n                    { this.getPrettyPresence(this.props.presenceState) } { ago }\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className=\"mx_PresenceLabel\">\n                    { this.getPrettyPresence(this.props.presenceState) }\n                </div>\n            );\n        }\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/ReadReceiptMarker.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[577,580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require('react-dom');","fix":{"range":[607,610],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[645,648],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var Velociraptor = require('../../../Velociraptor');","fix":{"range":[683,686],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var bounce = false;","fix":{"range":[773,776],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":90,"column":9,"nodeType":"VariableDeclaration","source":"        var rrInfo = this.props.readReceiptInfo;","fix":{"range":[2819,2822],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":102,"column":9,"nodeType":"VariableDeclaration","source":"        var avatarNode = ReactDOM.findDOMNode(this);","fix":{"range":[3220,3223],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":115,"column":9,"nodeType":"VariableDeclaration","source":"        var oldTop = -15;","fix":{"range":[3667,3670],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":117,"column":9,"nodeType":"VariableDeclaration","source":"        var oldInfo = this.props.readReceiptInfo;","fix":{"range":[3694,3697],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":122,"column":9,"nodeType":"VariableDeclaration","source":"        var newElement = ReactDOM.findDOMNode(this);","fix":{"range":[3875,3878],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":123,"column":9,"nodeType":"VariableDeclaration","source":"        var startTopOffset = oldTop - newElement.offsetParent.getBoundingClientRect().top;","fix":{"range":[3928,3931],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":125,"column":9,"nodeType":"VariableDeclaration","source":"        var startStyles = [];","fix":{"range":[4020,4023],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":126,"column":9,"nodeType":"VariableDeclaration","source":"        var enterTransitionOpts = [];","fix":{"range":[4050,4053],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":131,"column":13,"nodeType":"VariableDeclaration","source":"            var leftOffset = oldInfo.left;","fix":{"range":[4193,4196],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'leftOffset' is assigned a value but never used.","line":131,"column":17,"nodeType":"Identifier","source":"            var leftOffset = oldInfo.left;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":135,"column":13,"nodeType":"VariableDeclaration","source":"            var reorderTransitionOpts = {","fix":{"range":[4353,4356],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":137,"column":34,"nodeType":"Property","source":"                easing: 'easeOut'","fix":{"range":[4447,4447],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 147 exceeds the maximum line length of 90.","line":147,"column":1,"nodeType":"Program","source":"            duration: bounce ? Math.min(Math.log(Math.abs(startTopOffset)) * 200, 3000) : 300,"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":160,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');","fix":{"range":[5126,5129],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":165,"column":9,"nodeType":"VariableDeclaration","source":"        var style = {","fix":{"range":[5275,5278],"text":"let"}},{"ruleId":"prefer-const","severity":1,"message":"'suffix' is never reassigned. Use 'const' instead.","line":173,"column":17,"nodeType":"Identifier","source":"            let suffix = \" (\" + this.props.member.userId + \")\";","fix":{"range":[5504,5507],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'ts' is never reassigned. Use 'const' instead.","line":174,"column":17,"nodeType":"Identifier","source":"            let ts = new Date(this.props.timestamp);","fix":{"range":[5568,5571],"text":"const"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":178,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[5788,5801],"text":"            "}}],"errorCount":2,"warningCount":21,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\n\nvar sdk = require('../../../index');\n\nvar Velociraptor = require('../../../Velociraptor');\nrequire('../../../VelocityBounce');\n\nvar bounce = false;\ntry {\n    if (global.localStorage) {\n        bounce = global.localStorage.getItem('avatar_bounce') == 'true';\n    }\n} catch (e) {\n}\n\nmodule.exports = React.createClass({\n    displayName: 'ReadReceiptMarker',\n\n    propTypes: {\n        // the RoomMember to show the RR for\n        member: React.PropTypes.object.isRequired,\n\n        // number of pixels to offset the avatar from the right of its parent;\n        // typically a negative value.\n        leftOffset: React.PropTypes.number,\n\n        // true to hide the avatar (it will still be animated)\n        hidden: React.PropTypes.bool,\n\n        // don't animate this RR into position\n        suppressAnimation: React.PropTypes.bool,\n\n        // an opaque object for storing information about this user's RR in\n        // this room\n        readReceiptInfo: React.PropTypes.object,\n\n        // A function which is used to check if the parent panel is being\n        // unmounted, to avoid unnecessary work. Should return true if we\n        // are being unmounted.\n        checkUnmounting: React.PropTypes.func,\n\n        // callback for clicks on this RR\n        onClick: React.PropTypes.func,\n\n        // Timestamp when the receipt was read\n        timestamp: React.PropTypes.number,\n\n        // True to show the full date/time rather than just the time\n        showFullTimestamp: React.PropTypes.bool,\n    },\n\n    getDefaultProps: function() {\n        return {\n            leftOffset: 0,\n        };\n    },\n\n    getInitialState: function() {\n        // if we are going to animate the RR, we don't show it on first render,\n        // and instead just add a placeholder to the DOM; once we've been\n        // mounted, we start an animation which moves the RR from its old\n        // position.\n        return {\n            suppressDisplay: !this.props.suppressAnimation,\n        };\n    },\n\n    componentWillUnmount: function() {\n        // before we remove the rr, store its location in the map, so that if\n        // it reappears, it can be animated from the right place.\n        var rrInfo = this.props.readReceiptInfo;\n        if (!rrInfo) {\n            return;\n        }\n\n        // checking the DOM properties can force a re-layout, which can be\n        // quite expensive; so if the parent messagepanel is being unmounted,\n        // then don't bother with this.\n        if (this.props.checkUnmounting && this.props.checkUnmounting()) {\n            return;\n        }\n\n        var avatarNode = ReactDOM.findDOMNode(this);\n        rrInfo.top = avatarNode.offsetTop;\n        rrInfo.left = avatarNode.offsetLeft;\n        rrInfo.parent = avatarNode.offsetParent;\n    },\n\n    componentDidMount: function() {\n        if (!this.state.suppressDisplay) {\n            // we've already done our display - nothing more to do.\n            return;\n        }\n\n        // treat new RRs as though they were off the top of the screen\n        var oldTop = -15;\n\n        var oldInfo = this.props.readReceiptInfo;\n        if (oldInfo && oldInfo.parent) {\n            oldTop = oldInfo.top + oldInfo.parent.getBoundingClientRect().top;\n        }\n\n        var newElement = ReactDOM.findDOMNode(this);\n        var startTopOffset = oldTop - newElement.offsetParent.getBoundingClientRect().top;\n\n        var startStyles = [];\n        var enterTransitionOpts = [];\n\n        if (oldInfo && oldInfo.left) {\n            // start at the old height and in the old h pos\n\n            var leftOffset = oldInfo.left;\n            startStyles.push({ top: startTopOffset+\"px\",\n                               left: oldInfo.left+\"px\" });\n\n            var reorderTransitionOpts = {\n                duration: 100,\n                easing: 'easeOut'\n            };\n\n            enterTransitionOpts.push(reorderTransitionOpts);\n        }\n\n        // then shift to the rightmost column,\n        // and then it will drop down to its resting position\n        startStyles.push({ top: startTopOffset+'px', left: '0px' });\n        enterTransitionOpts.push({\n            duration: bounce ? Math.min(Math.log(Math.abs(startTopOffset)) * 200, 3000) : 300,\n            easing: bounce ? 'easeOutBounce' : 'easeOutCubic',\n        });\n\n        this.setState({\n            suppressDisplay: false,\n            startStyles: startStyles,\n            enterTransitionOpts: enterTransitionOpts,\n        });\n    },\n\n\n    render: function() {\n        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');\n        if (this.state.suppressDisplay) {\n            return <div/>;\n        }\n\n        var style = {\n            left: this.props.leftOffset+'px',\n            top: '0px',\n            visibility: this.props.hidden ? 'hidden' : 'visible',\n        };\n\n        let title;\n        if (this.props.timestamp) {\n            let suffix = \" (\" + this.props.member.userId + \")\";\n            let ts = new Date(this.props.timestamp);\n            if (this.props.showFullTimestamp) {\n                // \"15/12/2016, 7:05:45 PM (@alice:matrix.org)\"\n                title = ts.toLocaleString() + suffix;\n            }\n            else {\n                // \"7:05:45 PM (@alice:matrix.org)\"\n                title = ts.toLocaleTimeString() + suffix;\n            }\n        }\n\n        return (\n            <Velociraptor\n                    startStyles={this.state.startStyles}\n                    enterTransitionOpts={this.state.enterTransitionOpts} >\n                <MemberAvatar\n                    member={this.props.member}\n                    aria-hidden=\"true\"\n                    width={14} height={14} resizeMethod=\"crop\"\n                    style={style}\n                    title={title}\n                />\n            </Velociraptor>\n        );\n        /* onClick={this.props.onClick} */\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/RoomHeader.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[650,653],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[709,712],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[748,751],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var rate_limited_func = require('../../../ratelimitedfunc');","fix":{"range":[790,793],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'rate_limited_func' is not in camel case.","line":24,"column":5,"nodeType":"Identifier","source":"var rate_limited_func = require('../../../ratelimitedfunc');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var linkify = require('linkifyjs');","fix":{"range":[852,855],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var linkifyElement = require('linkifyjs/element');","fix":{"range":[888,891],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var linkifyMatrix = require('../../../linkify-matrix');","fix":{"range":[939,942],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":58,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[1830,1833],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":79,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[2544,2547],"text":"let"}},{"ruleId":"new-cap","severity":1,"message":"A constructor name should not start with a lowercase letter.","line":94,"column":29,"nodeType":"NewExpression","source":"    _rateLimitedUpdate: new rate_limited_func(function() {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":95,"column":9,"nodeType":"ThisExpression","source":"        this.forceUpdate();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":109,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[3299,3302],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'self' is assigned a value but never used.","line":109,"column":13,"nodeType":"Identifier","source":"        var self = this;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":110,"column":9,"nodeType":"VariableDeclaration","source":"        var changeAvatar = this.refs.changeAvatar;","fix":{"range":[3324,3327],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":116,"column":13,"nodeType":"VariableDeclaration","source":"            var errMsg = (typeof err === \"string\") ? err : (err.error || \"\");","fix":{"range":[3572,3575],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":117,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[3650,3653],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":120,"column":63,"nodeType":"Property","source":"                description: \"Failed to set avatar. \" + errMsg","fix":{"range":[3849,3849],"text":","}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":129,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":135,"column":9,"nodeType":"VariableDeclaration","source":"        var newName;","fix":{"range":[4188,4191],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":142,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":148,"column":9,"nodeType":"VariableDeclaration","source":"        var newTopic;","fix":{"range":[4538,4541],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":156,"column":9,"nodeType":"VariableDeclaration","source":"        var RoomAvatar = sdk.getComponent(\"avatars.RoomAvatar\");","fix":{"range":[4722,4725],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":157,"column":9,"nodeType":"VariableDeclaration","source":"        var ChangeAvatar = sdk.getComponent(\"settings.ChangeAvatar\");","fix":{"range":[4787,4790],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":158,"column":9,"nodeType":"VariableDeclaration","source":"        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");","fix":{"range":[4857,4860],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":161,"column":9,"nodeType":"VariableDeclaration","source":"        var header;","fix":{"range":[4992,4995],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":162,"column":9,"nodeType":"VariableDeclaration","source":"        var name = null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":163,"column":9,"nodeType":"VariableDeclaration","source":"        var searchStatus = null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":164,"column":9,"nodeType":"VariableDeclaration","source":"        var topic_el = null;","fix":{"range":[5070,5073],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'topic_el' is not in camel case.","line":164,"column":13,"nodeType":"Identifier","source":"        var topic_el = null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":165,"column":9,"nodeType":"VariableDeclaration","source":"        var cancel_button = null;","fix":{"range":[5099,5102],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'cancel_button' is not in camel case.","line":165,"column":13,"nodeType":"Identifier","source":"        var cancel_button = null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":166,"column":9,"nodeType":"VariableDeclaration","source":"        var spinner = null;","fix":{"range":[5133,5136],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":167,"column":9,"nodeType":"VariableDeclaration","source":"        var save_button = null;","fix":{"range":[5161,5164],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'save_button' is not in camel case.","line":167,"column":13,"nodeType":"Identifier","source":"        var save_button = null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":168,"column":9,"nodeType":"VariableDeclaration","source":"        var settings_button = null;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'settings_button' is not in camel case.","line":168,"column":13,"nodeType":"Identifier","source":"        var settings_button = null;"},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":169,"column":33,"nodeType":"BlockStatement","source":"        if (this.props.editing) {","fix":{"range":[5254,5256],"text":"\n"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":172,"column":13,"nodeType":"VariableDeclaration","source":"            var user_id = MatrixClientPeg.get().credentials.userId;","fix":{"range":[5354,5357],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":172,"column":17,"nodeType":"Identifier","source":"            var user_id = MatrixClientPeg.get().credentials.userId;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":174,"column":13,"nodeType":"VariableDeclaration","source":"            var can_set_room_name = this.props.room.currentState.maySendStateEvent("},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_set_room_name' is not in camel case.","line":174,"column":17,"nodeType":"Identifier","source":"            var can_set_room_name = this.props.room.currentState.maySendStateEvent("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":175,"column":39,"nodeType":"Identifier","source":"                'm.room.name', user_id","fix":{"range":[5533,5533],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":177,"column":13,"nodeType":"VariableDeclaration","source":"            var can_set_room_avatar = this.props.room.currentState.maySendStateEvent("},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_set_room_avatar' is not in camel case.","line":177,"column":17,"nodeType":"Identifier","source":"            var can_set_room_avatar = this.props.room.currentState.maySendStateEvent("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":178,"column":41,"nodeType":"Identifier","source":"                'm.room.avatar', user_id","fix":{"range":[5675,5675],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":180,"column":13,"nodeType":"VariableDeclaration","source":"            var can_set_room_topic = this.props.room.currentState.maySendStateEvent("},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_set_room_topic' is not in camel case.","line":180,"column":17,"nodeType":"Identifier","source":"            var can_set_room_topic = this.props.room.currentState.maySendStateEvent("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":181,"column":40,"nodeType":"Identifier","source":"                'm.room.topic', user_id","fix":{"range":[5815,5815],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":183,"column":13,"nodeType":"VariableDeclaration","source":"            var can_set_room_name = this.props.room.currentState.maySendStateEvent("},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_set_room_name' is not in camel case.","line":183,"column":17,"nodeType":"Identifier","source":"            var can_set_room_name = this.props.room.currentState.maySendStateEvent("},{"ruleId":"no-redeclare","severity":2,"message":"'can_set_room_name' is already defined.","line":183,"column":17,"nodeType":"Identifier","source":"            var can_set_room_name = this.props.room.currentState.maySendStateEvent("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":184,"column":39,"nodeType":"Identifier","source":"                'm.room.name', user_id","fix":{"range":[5953,5953],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 187 exceeds the maximum line length of 90.","line":187,"column":1,"nodeType":"Program","source":"            save_button = <AccessibleButton className=\"mx_RoomHeader_textButton\" onClick={this.props.onSaveClick}>Save</AccessibleButton>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'save_button' is not in camel case.","line":187,"column":13,"nodeType":"Identifier","source":"            save_button = <AccessibleButton className=\"mx_RoomHeader_textButton\" onClick={this.props.onSaveClick}>Save</AccessibleButton>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'cancel_button' is not in camel case.","line":188,"column":13,"nodeType":"Identifier","source":"            cancel_button = <CancelButton onClick={this.props.onCancelClick}/>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":192,"column":13,"nodeType":"VariableDeclaration","source":"            var Spinner = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[6245,6248],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_set_room_name' is not in camel case.","line":196,"column":13,"nodeType":"Identifier","source":"        if (can_set_room_name) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":197,"column":13,"nodeType":"VariableDeclaration","source":"            var RoomNameEditor = sdk.getComponent(\"rooms.RoomNameEditor\");","fix":{"range":[6432,6435],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":199,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[6583,6592],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":201,"column":13,"nodeType":"VariableDeclaration","source":"            var searchStatus;"},{"ruleId":"no-redeclare","severity":2,"message":"'searchStatus' is already defined.","line":201,"column":17,"nodeType":"Identifier","source":"            var searchStatus;"},{"ruleId":"max-len","severity":1,"message":"Line 204 exceeds the maximum line length of 90.","line":204,"column":1,"nodeType":"Program","source":"            if (this.props.searchInfo && this.props.searchInfo.searchCount !== undefined && this.props.searchInfo.searchCount !== null) {"},{"ruleId":"max-len","severity":1,"message":"Line 205 exceeds the maximum line length of 90.","line":205,"column":1,"nodeType":"Program","source":"                searchStatus = <div className=\"mx_RoomHeader_searchStatus\">&nbsp;(~{ this.props.searchInfo.searchCount } results)</div>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":209,"column":13,"nodeType":"VariableDeclaration","source":"            var settingsHint = false;","fix":{"range":[7169,7172],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 210 exceeds the maximum line length of 90.","line":210,"column":1,"nodeType":"Program","source":"            var members = this.props.room ? this.props.room.getJoinedMembers() : undefined;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":210,"column":13,"nodeType":"VariableDeclaration","source":"            var members = this.props.room ? this.props.room.getJoinedMembers() : undefined;","fix":{"range":[7207,7210],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 212 exceeds the maximum line length of 90.","line":212,"column":1,"nodeType":"Program","source":"                if (members.length === 1 && members[0].userId === MatrixClientPeg.get().credentials.userId) {"},{"ruleId":"max-len","severity":1,"message":"Line 213 exceeds the maximum line length of 90.","line":213,"column":1,"nodeType":"Program","source":"                    var name = this.props.room.currentState.getStateEvents('m.room.name', '');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":213,"column":21,"nodeType":"VariableDeclaration","source":"                    var name = this.props.room.currentState.getStateEvents('m.room.name', '');"},{"ruleId":"no-redeclare","severity":2,"message":"'name' is already defined.","line":213,"column":25,"nodeType":"Identifier","source":"                    var name = this.props.room.currentState.getStateEvents('m.room.name', '');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":220,"column":13,"nodeType":"VariableDeclaration","source":"            var roomName = 'Join Room';","fix":{"range":[7691,7694],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 230 exceeds the maximum line length of 90.","line":230,"column":1,"nodeType":"Program","source":"                    <EmojiText element=\"div\" className={ \"mx_RoomHeader_nametext \" + (settingsHint ? \"mx_RoomHeader_settingsHint\" : \"\") } title={ roomName }>{roomName}</EmojiText>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_set_room_topic' is not in camel case.","line":235,"column":13,"nodeType":"Identifier","source":"        if (can_set_room_topic) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":236,"column":13,"nodeType":"VariableDeclaration","source":"            var RoomTopicEditor = sdk.getComponent(\"rooms.RoomTopicEditor\");","fix":{"range":[8350,8353],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'topic_el' is not in camel case.","line":237,"column":13,"nodeType":"Identifier","source":"            topic_el = <RoomTopicEditor ref=\"topicEditor\" room={this.props.room} />;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":239,"column":13,"nodeType":"VariableDeclaration","source":"            var topic;","fix":{"range":[8529,8532],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":241,"column":17,"nodeType":"VariableDeclaration","source":"                var ev = this.props.room.currentState.getStateEvents('m.room.topic', '');","fix":{"range":[8591,8594],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 247 exceeds the maximum line length of 90.","line":247,"column":1,"nodeType":"Program","source":"                topic_el = <div className=\"mx_RoomHeader_topic\" ref=\"topic\" title={ topic }>{ topic }</div>;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'topic_el' is not in camel case.","line":247,"column":17,"nodeType":"Identifier","source":"                topic_el = <div className=\"mx_RoomHeader_topic\" ref=\"topic\" title={ topic }>{ topic }</div>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":251,"column":9,"nodeType":"VariableDeclaration","source":"        var roomAvatar = null;","fix":{"range":[8941,8944],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_set_room_avatar' is not in camel case.","line":252,"column":13,"nodeType":"Identifier","source":"        if (can_set_room_avatar) {"},{"ruleId":"max-len","severity":1,"message":"Line 256 exceeds the maximum line length of 90.","line":256,"column":1,"nodeType":"Program","source":"                        <ChangeAvatar ref=\"changeAvatar\" room={this.props.room} showUploadSection={false} width={48} height={48} />"},{"ruleId":"max-len","severity":1,"message":"Line 264 exceeds the maximum line length of 90.","line":264,"column":1,"nodeType":"Program","source":"                        <input id=\"avatarInput\" type=\"file\" onChange={ this.onAvatarSelected }/>"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":268,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[9840,9849],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 272 exceeds the maximum line length of 90.","line":272,"column":1,"nodeType":"Program","source":"                    <RoomAvatar room={this.props.room} width={48} height={48} oobData={this.props.oobData} />"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":277,"column":9,"nodeType":"VariableDeclaration","source":"        var settings_button;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'settings_button' is not in camel case.","line":277,"column":13,"nodeType":"Identifier","source":"        var settings_button;"},{"ruleId":"no-redeclare","severity":2,"message":"'settings_button' is already defined.","line":277,"column":13,"nodeType":"Identifier","source":"        var settings_button;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'settings_button' is not in camel case.","line":279,"column":13,"nodeType":"Identifier","source":"            settings_button ="},{"ruleId":"max-len","severity":1,"message":"Line 280 exceeds the maximum line length of 90.","line":280,"column":1,"nodeType":"Program","source":"                <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.props.onSettingsClick} title=\"Settings\">"},{"ruleId":"max-len","severity":1,"message":"Line 281 exceeds the maximum line length of 90.","line":281,"column":1,"nodeType":"Program","source":"                    <TintableSvg src=\"img/icons-settings-room.svg\" width=\"16\" height=\"16\"/>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":293,"column":9,"nodeType":"VariableDeclaration","source":"        var forget_button;","fix":{"range":[10871,10874],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'forget_button' is not in camel case.","line":293,"column":13,"nodeType":"Identifier","source":"        var forget_button;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'forget_button' is not in camel case.","line":295,"column":13,"nodeType":"Identifier","source":"            forget_button ="},{"ruleId":"max-len","severity":1,"message":"Line 296 exceeds the maximum line length of 90.","line":296,"column":1,"nodeType":"Program","source":"                <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.props.onForgetClick} title=\"Forget room\">"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":301,"column":9,"nodeType":"VariableDeclaration","source":"        var rightPanel_buttons;","fix":{"range":[11215,11218],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'rightPanel_buttons' is not in camel case.","line":301,"column":13,"nodeType":"Identifier","source":"        var rightPanel_buttons;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'rightPanel_buttons' is not in camel case.","line":303,"column":13,"nodeType":"Identifier","source":"            rightPanel_buttons ="},{"ruleId":"max-len","severity":1,"message":"Line 304 exceeds the maximum line length of 90.","line":304,"column":1,"nodeType":"Program","source":"                <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.onShowRhsClick} title=\"<\">"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":309,"column":9,"nodeType":"VariableDeclaration","source":"        var right_row;","fix":{"range":[11556,11559],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_row' is not in camel case.","line":309,"column":13,"nodeType":"Identifier","source":"        var right_row;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_row' is not in camel case.","line":311,"column":13,"nodeType":"Identifier","source":"            right_row ="},{"ruleId":"camelcase","severity":1,"message":"Identifier 'settings_button' is not in camel case.","line":313,"column":23,"nodeType":"Identifier","source":"                    { settings_button }"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'forget_button' is not in camel case.","line":314,"column":23,"nodeType":"Identifier","source":"                    { forget_button }"},{"ruleId":"max-len","severity":1,"message":"Line 315 exceeds the maximum line length of 90.","line":315,"column":1,"nodeType":"Program","source":"                    <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.props.onSearchClick} title=\"Search\">"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'rightPanel_buttons' is not in camel case.","line":318,"column":23,"nodeType":"Identifier","source":"                    { rightPanel_buttons }"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'topic_el' is not in camel case.","line":330,"column":27,"nodeType":"Identifier","source":"                        { topic_el }"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'save_button' is not in camel case.","line":334,"column":18,"nodeType":"Identifier","source":"                {save_button}"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'cancel_button' is not in camel case.","line":335,"column":18,"nodeType":"Identifier","source":"                {cancel_button}"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'right_row' is not in camel case.","line":336,"column":18,"nodeType":"Identifier","source":"                {right_row}"},{"ruleId":"max-len","severity":1,"message":"Line 340 exceeds the maximum line length of 90.","line":340,"column":1,"nodeType":"Program","source":"            <div className={ \"mx_RoomHeader \" + (this.props.editing ? \"mx_RoomHeader_editing\" : \"\") }>"}],"errorCount":11,"warningCount":103,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sdk = require('../../../index');\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar Modal = require(\"../../../Modal\");\nvar dis = require(\"../../../dispatcher\");\nvar rate_limited_func = require('../../../ratelimitedfunc');\n\nvar linkify = require('linkifyjs');\nvar linkifyElement = require('linkifyjs/element');\nvar linkifyMatrix = require('../../../linkify-matrix');\nimport AccessibleButton from '../elements/AccessibleButton';\nimport {CancelButton} from './SimpleRoomHeader';\n\nlinkifyMatrix(linkify);\n\nmodule.exports = React.createClass({\n    displayName: 'RoomHeader',\n\n    propTypes: {\n        room: React.PropTypes.object,\n        oobData: React.PropTypes.object,\n        editing: React.PropTypes.bool,\n        saving: React.PropTypes.bool,\n        collapsedRhs: React.PropTypes.bool,\n        onSettingsClick: React.PropTypes.func,\n        onSaveClick: React.PropTypes.func,\n        onSearchClick: React.PropTypes.func,\n        onLeaveClick: React.PropTypes.func,\n    },\n\n    getDefaultProps: function() {\n        return {\n            editing: false,\n            onSettingsClick: function() {},\n            onSaveClick: function() {},\n        };\n    },\n\n    componentDidMount: function() {\n        var cli = MatrixClientPeg.get();\n        cli.on(\"RoomState.events\", this._onRoomStateEvents);\n\n        // When a room name occurs, RoomState.events is fired *before*\n        // room.name is updated. So we have to listen to Room.name as well as\n        // RoomState.events.\n        if (this.props.room) {\n            this.props.room.on(\"Room.name\", this._onRoomNameChange);\n        }\n    },\n\n    componentDidUpdate: function() {\n        if (this.refs.topic) {\n            linkifyElement(this.refs.topic, linkifyMatrix.options);\n        }\n    },\n\n    componentWillUnmount: function() {\n        if (this.props.room) {\n            this.props.room.removeListener(\"Room.name\", this._onRoomNameChange);\n        }\n        var cli = MatrixClientPeg.get();\n        if (cli) {\n            cli.removeListener(\"RoomState.events\", this._onRoomStateEvents);\n        }\n    },\n\n    _onRoomStateEvents: function(event, state) {\n        if (!this.props.room || event.getRoomId() != this.props.room.roomId) {\n            return;\n        }\n\n        // redisplay the room name, topic, etc.\n        this._rateLimitedUpdate();\n    },\n\n    _rateLimitedUpdate: new rate_limited_func(function() {\n        this.forceUpdate();\n    }, 500),\n\n    _onRoomNameChange: function(room) {\n        this.forceUpdate();\n    },\n\n    onAvatarPickerClick: function(ev) {\n        if (this.refs.file_label) {\n            this.refs.file_label.click();\n        }\n    },\n\n    onAvatarSelected: function(ev) {\n        var self = this;\n        var changeAvatar = this.refs.changeAvatar;\n        if (!changeAvatar) {\n            console.error(\"No ChangeAvatar found to upload image to!\");\n            return;\n        }\n        changeAvatar.onFileSelected(ev).catch(function(err) {\n            var errMsg = (typeof err === \"string\") ? err : (err.error || \"\");\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Error\",\n                description: \"Failed to set avatar. \" + errMsg\n            });\n        }).done();\n    },\n\n    onShowRhsClick: function(ev) {\n        dis.dispatch({ action: 'show_right_panel' });\n    },\n\n    /**\n     * After editing the settings, get the new name for the room\n     *\n     * Returns undefined if we didn't let the user edit the room name\n     */\n    getEditedName: function() {\n        var newName;\n        if (this.refs.nameEditor) {\n            newName = this.refs.nameEditor.getRoomName();\n        }\n        return newName;\n    },\n\n    /**\n     * After editing the settings, get the new topic for the room\n     *\n     * Returns undefined if we didn't let the user edit the room topic\n     */\n    getEditedTopic: function() {\n        var newTopic;\n        if (this.refs.topicEditor) {\n            newTopic = this.refs.topicEditor.getTopic();\n        }\n        return newTopic;\n    },\n\n    render: function() {\n        var RoomAvatar = sdk.getComponent(\"avatars.RoomAvatar\");\n        var ChangeAvatar = sdk.getComponent(\"settings.ChangeAvatar\");\n        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");\n        const EmojiText = sdk.getComponent('elements.EmojiText');\n\n        var header;\n        var name = null;\n        var searchStatus = null;\n        var topic_el = null;\n        var cancel_button = null;\n        var spinner = null;\n        var save_button = null;\n        var settings_button = null;\n        if (this.props.editing) {\n\n            // calculate permissions.  XXX: this should be done on mount or something\n            var user_id = MatrixClientPeg.get().credentials.userId;\n\n            var can_set_room_name = this.props.room.currentState.maySendStateEvent(\n                'm.room.name', user_id\n            );\n            var can_set_room_avatar = this.props.room.currentState.maySendStateEvent(\n                'm.room.avatar', user_id\n            );\n            var can_set_room_topic = this.props.room.currentState.maySendStateEvent(\n                'm.room.topic', user_id\n            );\n            var can_set_room_name = this.props.room.currentState.maySendStateEvent(\n                'm.room.name', user_id\n            );\n\n            save_button = <AccessibleButton className=\"mx_RoomHeader_textButton\" onClick={this.props.onSaveClick}>Save</AccessibleButton>;\n            cancel_button = <CancelButton onClick={this.props.onCancelClick}/>;\n        }\n\n        if (this.props.saving) {\n            var Spinner = sdk.getComponent(\"elements.Spinner\");\n            spinner = <div className=\"mx_RoomHeader_spinner\"><Spinner/></div>;\n        }\n\n        if (can_set_room_name) {\n            var RoomNameEditor = sdk.getComponent(\"rooms.RoomNameEditor\");\n            name = <RoomNameEditor ref=\"nameEditor\" room={this.props.room} />;\n        }\n        else {\n            var searchStatus;\n            // don't display the search count until the search completes and\n            // gives us a valid (possibly zero) searchCount.\n            if (this.props.searchInfo && this.props.searchInfo.searchCount !== undefined && this.props.searchInfo.searchCount !== null) {\n                searchStatus = <div className=\"mx_RoomHeader_searchStatus\">&nbsp;(~{ this.props.searchInfo.searchCount } results)</div>;\n            }\n\n            // XXX: this is a bit inefficient - we could just compare room.name for 'Empty room'...\n            var settingsHint = false;\n            var members = this.props.room ? this.props.room.getJoinedMembers() : undefined;\n            if (members) {\n                if (members.length === 1 && members[0].userId === MatrixClientPeg.get().credentials.userId) {\n                    var name = this.props.room.currentState.getStateEvents('m.room.name', '');\n                    if (!name || !name.getContent().name) {\n                        settingsHint = true;\n                    }\n                }\n            }\n\n            var roomName = 'Join Room';\n            if (this.props.oobData && this.props.oobData.name) {\n                roomName = this.props.oobData.name;\n            } else if (this.props.room) {\n                roomName = this.props.room.name;\n            }\n\n\n            name =\n                <div className=\"mx_RoomHeader_name\" onClick={this.props.onSettingsClick}>\n                    <EmojiText element=\"div\" className={ \"mx_RoomHeader_nametext \" + (settingsHint ? \"mx_RoomHeader_settingsHint\" : \"\") } title={ roomName }>{roomName}</EmojiText>\n                    { searchStatus }\n                </div>;\n        }\n\n        if (can_set_room_topic) {\n            var RoomTopicEditor = sdk.getComponent(\"rooms.RoomTopicEditor\");\n            topic_el = <RoomTopicEditor ref=\"topicEditor\" room={this.props.room} />;\n        } else {\n            var topic;\n            if (this.props.room) {\n                var ev = this.props.room.currentState.getStateEvents('m.room.topic', '');\n                if (ev) {\n                    topic = ev.getContent().topic;\n                }\n            }\n            if (topic) {\n                topic_el = <div className=\"mx_RoomHeader_topic\" ref=\"topic\" title={ topic }>{ topic }</div>;\n            }\n        }\n\n        var roomAvatar = null;\n        if (can_set_room_avatar) {\n            roomAvatar = (\n                <div className=\"mx_RoomHeader_avatarPicker\">\n                    <div onClick={ this.onAvatarPickerClick }>\n                        <ChangeAvatar ref=\"changeAvatar\" room={this.props.room} showUploadSection={false} width={48} height={48} />\n                    </div>\n                    <div className=\"mx_RoomHeader_avatarPicker_edit\">\n                        <label htmlFor=\"avatarInput\" ref=\"file_label\">\n                            <img src=\"img/camera.svg\"\n                                alt=\"Upload avatar\" title=\"Upload avatar\"\n                                width=\"17\" height=\"15\" />\n                        </label>\n                        <input id=\"avatarInput\" type=\"file\" onChange={ this.onAvatarSelected }/>\n                    </div>\n                </div>\n            );\n        }\n        else if (this.props.room || (this.props.oobData && this.props.oobData.name)) {\n            roomAvatar = (\n                <div onClick={this.props.onSettingsClick}>\n                    <RoomAvatar room={this.props.room} width={48} height={48} oobData={this.props.oobData} />\n                </div>\n            );\n        }\n\n        var settings_button;\n        if (this.props.onSettingsClick) {\n            settings_button =\n                <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.props.onSettingsClick} title=\"Settings\">\n                    <TintableSvg src=\"img/icons-settings-room.svg\" width=\"16\" height=\"16\"/>\n                </AccessibleButton>;\n        }\n\n//        var leave_button;\n//        if (this.props.onLeaveClick) {\n//            leave_button =\n//                <div className=\"mx_RoomHeader_button\" onClick={this.props.onLeaveClick} title=\"Leave room\">\n//                    <TintableSvg src=\"img/leave.svg\" width=\"26\" height=\"20\"/>\n//                </div>;\n//        }\n\n        var forget_button;\n        if (this.props.onForgetClick) {\n            forget_button =\n                <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.props.onForgetClick} title=\"Forget room\">\n                    <TintableSvg src=\"img/leave.svg\" width=\"26\" height=\"20\"/>\n                </AccessibleButton>;\n        }\n\n        var rightPanel_buttons;\n        if (this.props.collapsedRhs) {\n            rightPanel_buttons =\n                <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.onShowRhsClick} title=\"<\">\n                    <TintableSvg src=\"img/minimise.svg\" width=\"10\" height=\"16\"/>\n                </AccessibleButton>;\n        }\n\n        var right_row;\n        if (!this.props.editing) {\n            right_row =\n                <div className=\"mx_RoomHeader_rightRow\">\n                    { settings_button }\n                    { forget_button }\n                    <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.props.onSearchClick} title=\"Search\">\n                        <TintableSvg src=\"img/icons-search.svg\" width=\"35\" height=\"35\"/>\n                    </AccessibleButton>\n                    { rightPanel_buttons }\n                </div>;\n        }\n\n        header =\n            <div className=\"mx_RoomHeader_wrapper\">\n                <div className=\"mx_RoomHeader_leftRow\">\n                    <div className=\"mx_RoomHeader_avatar\">\n                        { roomAvatar }\n                    </div>\n                    <div className=\"mx_RoomHeader_info\">\n                        { name }\n                        { topic_el }\n                    </div>\n                </div>\n                {spinner}\n                {save_button}\n                {cancel_button}\n                {right_row}\n            </div>;\n\n        return (\n            <div className={ \"mx_RoomHeader \" + (this.props.editing ? \"mx_RoomHeader_editing\" : \"\") }>\n                { header }\n            </div>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/RoomList.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var React = require(\"react\");","fix":{"range":[582,585],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[612,615],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var GeminiScrollbar = require('react-gemini-scrollbar');","fix":{"range":[649,652],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[706,709],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var CallHandler = require('../../../CallHandler');","fix":{"range":[765,768],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var RoomListSorter = require(\"../../../RoomListSorter\");","fix":{"range":[816,819],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'RoomListSorter' is assigned a value but never used.","line":23,"column":5,"nodeType":"Identifier","source":"var RoomListSorter = require(\"../../../RoomListSorter\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var Unread = require('../../../Unread');","fix":{"range":[873,876],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Unread' is assigned a value but never used.","line":24,"column":5,"nodeType":"Identifier","source":"var Unread = require('../../../Unread');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[914,917],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[956,959],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var rate_limited_func = require('../../../ratelimitedfunc');","fix":{"range":[993,996],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'rate_limited_func' is not in camel case.","line":27,"column":5,"nodeType":"Identifier","source":"var rate_limited_func = require('../../../ratelimitedfunc');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var Rooms = require('../../../Rooms');","fix":{"range":[1054,1057],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","source":"var Receipt = require('../../../utils/Receipt');","fix":{"range":[1143,1146],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":32,"column":1,"nodeType":"VariableDeclaration","source":"var HIDE_CONFERENCE_CHANS = true;","fix":{"range":[1193,1196],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":53,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[1720,1723],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":64,"column":9,"nodeType":"VariableDeclaration","source":"        var s = this.getRoomLists();","fix":{"range":[2215,2218],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":86,"column":17,"nodeType":"VariableDeclaration","source":"                var call = CallHandler.getCall(payload.room_id);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":89,"column":43,"nodeType":"Property","source":"                        incomingCall: call","fix":{"range":[3115,3115],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":92,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[3227,3244],"text":"                "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":95,"column":43,"nodeType":"Property","source":"                        incomingCall: null","fix":{"range":[3329,3329],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 111 exceeds the maximum line length of 90.","line":111,"column":1,"nodeType":"Program","source":"            MatrixClientPeg.get().removeListener(\"RoomState.events\", this.onRoomStateEvents);"},{"ruleId":"max-len","severity":1,"message":"Line 112 exceeds the maximum line length of 90.","line":112,"column":1,"nodeType":"Program","source":"            MatrixClientPeg.get().removeListener(\"RoomMember.name\", this.onRoomMemberName);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":129,"column":13,"nodeType":"VariableDeclaration","source":"            var self = this;","fix":{"range":[4695,4698],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 161 exceeds the maximum line length of 90.","line":161,"column":1,"nodeType":"Program","source":"        if (Receipt.findReadReceiptFromUserId(receiptEvent, MatrixClientPeg.get().credentials.userId)) {"},{"ruleId":"new-cap","severity":1,"message":"A constructor name should not start with a lowercase letter.","line":188,"column":34,"nodeType":"NewExpression","source":"    _delayedRefreshRoomList: new rate_limited_func(function() {"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":189,"column":9,"nodeType":"ThisExpression","source":"        this.refreshRoomList();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":208,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[7509,7512],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":209,"column":9,"nodeType":"VariableDeclaration","source":"        var s = { lists: {} };","fix":{"range":[7534,7537],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":231,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[8525,8538],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 232 exceeds the maximum line length of 90.","line":232,"column":1,"nodeType":"Program","source":"            else if (HIDE_CONFERENCE_CHANS && Rooms.isConfCallRoom(room, me, self.props.ConferenceHandler)) {"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":234,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[8716,8729],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 236 exceeds the maximum line length of 90.","line":236,"column":1,"nodeType":"Program","source":"                     (me.membership === \"leave\" && me.events.member.getSender() !== me.events.member.getStateKey()))"},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":237,"column":13,"nodeType":"Punctuator","source":"            {","fix":{"range":[8908,8921],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":239,"column":17,"nodeType":"VariableDeclaration","source":"                var tagNames = Object.keys(room.tags);","fix":{"range":[8987,8990],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":242,"column":26,"nodeType":"VariableDeclaration","source":"                    for (var i = 0; i < tagNames.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":243,"column":25,"nodeType":"VariableDeclaration","source":"                        var tagName = tagNames[i];","fix":{"range":[9154,9157],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":247,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[9344,9361],"text":"                "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":251,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[9598,9615],"text":"                "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":255,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[9718,9731],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":258,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[9845,9858],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 260 exceeds the maximum line length of 90.","line":260,"column":1,"nodeType":"Program","source":"                console.error(\"unrecognised membership: \" + me.membership + \" - this should never happen\");"},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":267,"column":9,"nodeType":"Punctuator","source":"        {","fix":{"range":[10183,10192],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":307,"column":9,"nodeType":"VariableDeclaration","source":"        var panel = ReactDOM.findDOMNode(this);","fix":{"range":[11868,11871],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":331,"column":9,"nodeType":"VariableDeclaration","source":"        var incomingCallBox = document.getElementById(\"incomingCallBox\");","fix":{"range":[12598,12601],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":333,"column":13,"nodeType":"VariableDeclaration","source":"            var scrollArea = this._getScrollNode();","fix":{"range":[12740,12743],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 336 exceeds the maximum line length of 90.","line":336,"column":1,"nodeType":"Program","source":"            var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":336,"column":13,"nodeType":"VariableDeclaration","source":"            var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;","fix":{"range":[12956,12959],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 339 exceeds the maximum line length of 90.","line":339,"column":1,"nodeType":"Program","source":"            var scrollAreaHeight = ReactDOM.findDOMNode(this).getBoundingClientRect().height;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":339,"column":13,"nodeType":"VariableDeclaration","source":"            var scrollAreaHeight = ReactDOM.findDOMNode(this).getBoundingClientRect().height;","fix":{"range":[13213,13216],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 341 exceeds the maximum line length of 90.","line":341,"column":1,"nodeType":"Program","source":"            var top = (incomingCallBox.parentElement.getBoundingClientRect().top + window.pageYOffset);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":341,"column":13,"nodeType":"VariableDeclaration","source":"            var top = (incomingCallBox.parentElement.getBoundingClientRect().top + window.pageYOffset);","fix":{"range":[13308,13311],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":345,"column":13,"nodeType":"VariableDeclaration","source":"            var bottomMargin = scrollAreaOffset + (scrollAreaHeight - 45);","fix":{"range":[13639,13642],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 349 exceeds the maximum line length of 90.","line":349,"column":1,"nodeType":"Program","source":"            incomingCallBox.style.left = scrollArea.offsetLeft + scrollArea.offsetWidth + 12 + \"px\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":356,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollArea = this._getScrollNode();","fix":{"range":[14137,14140],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 359 exceeds the maximum line length of 90.","line":359,"column":1,"nodeType":"Program","source":"        var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":359,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;","fix":{"range":[14341,14344],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":362,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollAreaHeight = ReactDOM.findDOMNode(this).getBoundingClientRect().height;","fix":{"range":[14586,14589],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 366 exceeds the maximum line length of 90.","line":366,"column":1,"nodeType":"Program","source":"            this.stickies = document.getElementsByClassName(\"mx_RoomSubList_labelContainer\");"},{"ruleId":"max-len","severity":1,"message":"Line 371 exceeds the maximum line length of 90.","line":371,"column":1,"nodeType":"Program","source":"            this.scrollAreaSufficient = (120 + (this.stickies[0].getBoundingClientRect().height * this.stickies.length)) < scrollAreaHeight;"},{"ruleId":"max-len","severity":1,"message":"Line 379 exceeds the maximum line length of 90.","line":379,"column":1,"nodeType":"Program","source":"                    sticky.dataset.originalPosition = sticky.offsetTop - scrollArea.offsetTop;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":382,"column":21,"nodeType":"VariableDeclaration","source":"                    var originalHeight = sticky.getBoundingClientRect().height;","fix":{"range":[15741,15744],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":391,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[16016,16019],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":392,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollStuckOffset = 0;","fix":{"range":[16041,16044],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":400,"column":13,"nodeType":"VariableDeclaration","source":"            var stickyPosition = sticky.dataset.originalPosition;","fix":{"range":[16531,16534],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":401,"column":13,"nodeType":"VariableDeclaration","source":"            var stickyHeight = sticky.dataset.originalHeight;","fix":{"range":[16597,16600],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":402,"column":13,"nodeType":"VariableDeclaration","source":"            var stickyHeader = sticky.childNodes[0];","fix":{"range":[16659,16662],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":403,"column":13,"nodeType":"VariableDeclaration","source":"            var topStuckHeight = stickyHeight * i;","fix":{"range":[16712,16715],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":404,"column":13,"nodeType":"VariableDeclaration","source":"            var bottomStuckHeight = stickyHeight * (stickyWrappers.length - i);","fix":{"range":[16763,16766],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 406 exceeds the maximum line length of 90.","line":406,"column":1,"nodeType":"Program","source":"            if (self.scrollAreaSufficient && stickyPosition < (scrollArea.scrollTop + topStuckHeight)) {"},{"ruleId":"max-len","severity":1,"message":"Line 412 exceeds the maximum line length of 90.","line":412,"column":1,"nodeType":"Program","source":"                if (scrollToPosition !== undefined && stickyPosition === scrollToPosition) {"},{"ruleId":"max-len","severity":1,"message":"Line 415 exceeds the maximum line length of 90.","line":415,"column":1,"nodeType":"Program","source":"            } else if (self.scrollAreaSufficient && stickyPosition > ((scrollArea.scrollTop + scrollAreaHeight) - bottomStuckHeight)) {"},{"ruleId":"max-len","severity":1,"message":"Line 419 exceeds the maximum line length of 90.","line":419,"column":1,"nodeType":"Program","source":"                stickyHeader.style.top = (scrollAreaOffset + scrollAreaHeight) - bottomStuckHeight + \"px\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":434,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[18335,18338],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":455,"column":9,"nodeType":"VariableDeclaration","source":"        var RoomSubList = sdk.getComponent('structures.RoomSubList');","fix":{"range":[19053,19056],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":456,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[19123,19126],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 510 exceeds the maximum line length of 90.","line":510,"column":1,"nodeType":"Program","source":"                    if (!tagName.match(/^(m\\.(favourite|lowpriority)|im\\.vector\\.fake\\.(invite|recent|direct|archived))$/)) {"},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":525,"column":21,"nodeType":"BlockStatement","source":"                    }","fix":{"range":[23014,23016],"text":"\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":557,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[24682,24682],"text":","}}],"errorCount":6,"warningCount":74,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nvar React = require(\"react\");\nvar ReactDOM = require(\"react-dom\");\nvar GeminiScrollbar = require('react-gemini-scrollbar');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar CallHandler = require('../../../CallHandler');\nvar RoomListSorter = require(\"../../../RoomListSorter\");\nvar Unread = require('../../../Unread');\nvar dis = require(\"../../../dispatcher\");\nvar sdk = require('../../../index');\nvar rate_limited_func = require('../../../ratelimitedfunc');\nvar Rooms = require('../../../Rooms');\nimport DMRoomMap from '../../../utils/DMRoomMap';\nvar Receipt = require('../../../utils/Receipt');\n\nvar HIDE_CONFERENCE_CHANS = true;\n\nmodule.exports = React.createClass({\n    displayName: 'RoomList',\n\n    propTypes: {\n        ConferenceHandler: React.PropTypes.any,\n        collapsed: React.PropTypes.bool.isRequired,\n        currentRoom: React.PropTypes.string,\n        searchFilter: React.PropTypes.string,\n    },\n\n    getInitialState: function() {\n        return {\n            isLoadingLeftRooms: false,\n            lists: {},\n            incomingCall: null,\n        };\n    },\n\n    componentWillMount: function() {\n        var cli = MatrixClientPeg.get();\n        cli.on(\"Room\", this.onRoom);\n        cli.on(\"deleteRoom\", this.onDeleteRoom);\n        cli.on(\"Room.timeline\", this.onRoomTimeline);\n        cli.on(\"Room.name\", this.onRoomName);\n        cli.on(\"Room.tags\", this.onRoomTags);\n        cli.on(\"Room.receipt\", this.onRoomReceipt);\n        cli.on(\"RoomState.events\", this.onRoomStateEvents);\n        cli.on(\"RoomMember.name\", this.onRoomMemberName);\n        cli.on(\"accountData\", this.onAccountData);\n\n        var s = this.getRoomLists();\n        this.setState(s);\n    },\n\n    componentDidMount: function() {\n        this.dispatcherRef = dis.register(this.onAction);\n        // Initialise the stickyHeaders when the component is created\n        this._updateStickyHeaders(true);\n    },\n\n    componentDidUpdate: function() {\n        // Reinitialise the stickyHeaders when the component is updated\n        this._updateStickyHeaders(true);\n        this._repositionIncomingCallBox(undefined, false);\n    },\n\n    onAction: function(payload) {\n        switch (payload.action) {\n            case 'view_tooltip':\n                this.tooltip = payload.tooltip;\n                break;\n            case 'call_state':\n                var call = CallHandler.getCall(payload.room_id);\n                if (call && call.call_state === 'ringing') {\n                    this.setState({\n                        incomingCall: call\n                    });\n                    this._repositionIncomingCallBox(undefined, true);\n                }\n                else {\n                    this.setState({\n                        incomingCall: null\n                    });\n                }\n                break;\n        }\n    },\n\n    componentWillUnmount: function() {\n        dis.unregister(this.dispatcherRef);\n        if (MatrixClientPeg.get()) {\n            MatrixClientPeg.get().removeListener(\"Room\", this.onRoom);\n            MatrixClientPeg.get().removeListener(\"deleteRoom\", this.onDeleteRoom);\n            MatrixClientPeg.get().removeListener(\"Room.timeline\", this.onRoomTimeline);\n            MatrixClientPeg.get().removeListener(\"Room.name\", this.onRoomName);\n            MatrixClientPeg.get().removeListener(\"Room.tags\", this.onRoomTags);\n            MatrixClientPeg.get().removeListener(\"Room.receipt\", this.onRoomReceipt);\n            MatrixClientPeg.get().removeListener(\"RoomState.events\", this.onRoomStateEvents);\n            MatrixClientPeg.get().removeListener(\"RoomMember.name\", this.onRoomMemberName);\n            MatrixClientPeg.get().removeListener(\"accountData\", this.onAccountData);\n        }\n        // cancel any pending calls to the rate_limited_funcs\n        this._delayedRefreshRoomList.cancelPendingCall();\n    },\n\n    onRoom: function(room) {\n        this._delayedRefreshRoomList();\n    },\n\n    onDeleteRoom: function(roomId) {\n        this._delayedRefreshRoomList();\n    },\n\n    onArchivedHeaderClick: function(isHidden, scrollToPosition) {\n        if (!isHidden) {\n            var self = this;\n            this.setState({ isLoadingLeftRooms: true });\n\n            // Try scrolling to position\n            this._updateStickyHeaders(true, scrollToPosition);\n\n            // we don't care about the response since it comes down via \"Room\"\n            // events.\n            MatrixClientPeg.get().syncLeftRooms().catch(function(err) {\n                console.error(\"Failed to sync left rooms: %s\", err);\n                console.error(err);\n            }).finally(function() {\n                self.setState({ isLoadingLeftRooms: false });\n            });\n        }\n    },\n\n    onSubListHeaderClick: function(isHidden, scrollToPosition) {\n        // The scroll area has expanded or contracted, so re-calculate sticky headers positions\n        this._updateStickyHeaders(true, scrollToPosition);\n    },\n\n    onRoomTimeline: function(ev, room, toStartOfTimeline, removed, data) {\n        if (toStartOfTimeline) return;\n        if (!room) return;\n        if (data.timeline.getTimelineSet() !== room.getUnfilteredTimelineSet()) return;\n        this._delayedRefreshRoomList();\n    },\n\n    onRoomReceipt: function(receiptEvent, room) {\n        // because if we read a notification, it will affect notification count\n        // only bother updating if there's a receipt from us\n        if (Receipt.findReadReceiptFromUserId(receiptEvent, MatrixClientPeg.get().credentials.userId)) {\n            this._delayedRefreshRoomList();\n        }\n    },\n\n    onRoomName: function(room) {\n        this._delayedRefreshRoomList();\n    },\n\n    onRoomTags: function(event, room) {\n        this._delayedRefreshRoomList();\n    },\n\n    onRoomStateEvents: function(ev, state) {\n        this._delayedRefreshRoomList();\n    },\n\n    onRoomMemberName: function(ev, member) {\n        this._delayedRefreshRoomList();\n    },\n\n    onAccountData: function(ev) {\n        if (ev.getType() == 'm.direct') {\n            this._delayedRefreshRoomList();\n        }\n    },\n\n    _delayedRefreshRoomList: new rate_limited_func(function() {\n        this.refreshRoomList();\n    }, 500),\n\n    refreshRoomList: function() {\n        // console.log(\"DEBUG: Refresh room list delta=%s ms\",\n        //     (!this._lastRefreshRoomListTs ? \"-\" : (Date.now() - this._lastRefreshRoomListTs))\n        // );\n\n        // TODO: rather than bluntly regenerating and re-sorting everything\n        // every time we see any kind of room change from the JS SDK\n        // we could do incremental updates on our copy of the state\n        // based on the room which has actually changed.  This would stop\n        // us re-rendering all the sublists every time anything changes anywhere\n        // in the state of the client.\n        this.setState(this.getRoomLists());\n        this._lastRefreshRoomListTs = Date.now();\n    },\n\n    getRoomLists: function() {\n        var self = this;\n        var s = { lists: {} };\n\n        s.lists[\"im.vector.fake.invite\"] = [];\n        s.lists[\"m.favourite\"] = [];\n        s.lists[\"im.vector.fake.recent\"] = [];\n        s.lists[\"im.vector.fake.direct\"] = [];\n        s.lists[\"m.lowpriority\"] = [];\n        s.lists[\"im.vector.fake.archived\"] = [];\n\n        const dmRoomMap = new DMRoomMap(MatrixClientPeg.get());\n\n        MatrixClientPeg.get().getRooms().forEach(function(room) {\n            const me = room.getMember(MatrixClientPeg.get().credentials.userId);\n            if (!me) return;\n\n            // console.log(\"room = \" + room.name + \", me.membership = \" + me.membership +\n            //             \", sender = \" + me.events.member.getSender() +\n            //             \", target = \" + me.events.member.getStateKey() +\n            //             \", prevMembership = \" + me.events.member.getPrevContent().membership);\n\n            if (me.membership == \"invite\") {\n                s.lists[\"im.vector.fake.invite\"].push(room);\n            }\n            else if (HIDE_CONFERENCE_CHANS && Rooms.isConfCallRoom(room, me, self.props.ConferenceHandler)) {\n                // skip past this room & don't put it in any lists\n            }\n            else if (me.membership == \"join\" || me.membership === \"ban\" ||\n                     (me.membership === \"leave\" && me.events.member.getSender() !== me.events.member.getStateKey()))\n            {\n                // Used to split rooms via tags\n                var tagNames = Object.keys(room.tags);\n\n                if (tagNames.length) {\n                    for (var i = 0; i < tagNames.length; i++) {\n                        var tagName = tagNames[i];\n                        s.lists[tagName] = s.lists[tagName] || [];\n                        s.lists[tagNames[i]].push(room);\n                    }\n                }\n                else if (dmRoomMap.getUserIdForRoomId(room.roomId)) {\n                    // \"Direct Message\" rooms (that we're still in and that aren't otherwise tagged)\n                    s.lists[\"im.vector.fake.direct\"].push(room);\n                }\n                else {\n                    s.lists[\"im.vector.fake.recent\"].push(room);\n                }\n            }\n            else if (me.membership === \"leave\") {\n                s.lists[\"im.vector.fake.archived\"].push(room);\n            }\n            else {\n                console.error(\"unrecognised membership: \" + me.membership + \" - this should never happen\");\n            }\n        });\n\n        if (s.lists[\"im.vector.fake.direct\"].length == 0 &&\n            MatrixClientPeg.get().getAccountData('m.direct') === undefined &&\n            !MatrixClientPeg.get().isGuest())\n        {\n            // scan through the 'recents' list for any rooms which look like DM rooms\n            // and make them DM rooms\n            const oldRecents = s.lists[\"im.vector.fake.recent\"];\n            s.lists[\"im.vector.fake.recent\"] = [];\n\n            for (const room of oldRecents) {\n                const me = room.getMember(MatrixClientPeg.get().credentials.userId);\n\n                if (me && Rooms.looksLikeDirectMessageRoom(room, me)) {\n                    s.lists[\"im.vector.fake.direct\"].push(room);\n                } else {\n                    s.lists[\"im.vector.fake.recent\"].push(room);\n                }\n            }\n\n            // save these new guessed DM rooms into the account data\n            const newMDirectEvent = {};\n            for (const room of s.lists[\"im.vector.fake.direct\"]) {\n                const me = room.getMember(MatrixClientPeg.get().credentials.userId);\n                const otherPerson = Rooms.getOnlyOtherMember(room, me);\n                if (!otherPerson) continue;\n\n                const roomList = newMDirectEvent[otherPerson.userId] || [];\n                roomList.push(room.roomId);\n                newMDirectEvent[otherPerson.userId] = roomList;\n            }\n\n            // if this fails, fine, we'll just do the same thing next time we get the room lists\n            MatrixClientPeg.get().setAccountData('m.direct', newMDirectEvent).done();\n        }\n\n        //console.log(\"calculated new roomLists; im.vector.fake.recent = \" + s.lists[\"im.vector.fake.recent\"]);\n\n        // we actually apply the sorting to this when receiving the prop in RoomSubLists.\n\n        return s;\n    },\n\n    _getScrollNode: function() {\n        var panel = ReactDOM.findDOMNode(this);\n        if (!panel) return null;\n\n        if (panel.classList.contains('gm-prevented')) {\n            return panel;\n        } else {\n            return panel.children[2]; // XXX: Fragile!\n        }\n    },\n\n    _whenScrolling: function(e) {\n        this._hideTooltip(e);\n        this._repositionIncomingCallBox(e, false);\n        this._updateStickyHeaders(false);\n    },\n\n    _hideTooltip: function(e) {\n        // Hide tooltip when scrolling, as we'll no longer be over the one we were on\n        if (this.tooltip && this.tooltip.style.display !== \"none\") {\n            this.tooltip.style.display = \"none\";\n        }\n    },\n\n    _repositionIncomingCallBox: function(e, firstTime) {\n        var incomingCallBox = document.getElementById(\"incomingCallBox\");\n        if (incomingCallBox && incomingCallBox.parentElement) {\n            var scrollArea = this._getScrollNode();\n            // Use the offset of the top of the scroll area from the window\n            // as this is used to calculate the CSS fixed top position for the stickies\n            var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;\n            // Use the offset of the top of the componet from the window\n            // as this is used to calculate the CSS fixed top position for the stickies\n            var scrollAreaHeight = ReactDOM.findDOMNode(this).getBoundingClientRect().height;\n\n            var top = (incomingCallBox.parentElement.getBoundingClientRect().top + window.pageYOffset);\n            // Make sure we don't go too far up, if the headers aren't sticky\n            top = (top < scrollAreaOffset) ? scrollAreaOffset : top;\n            // make sure we don't go too far down, if the headers aren't sticky\n            var bottomMargin = scrollAreaOffset + (scrollAreaHeight - 45);\n            top = (top > bottomMargin) ? bottomMargin : top;\n\n            incomingCallBox.style.top = top + \"px\";\n            incomingCallBox.style.left = scrollArea.offsetLeft + scrollArea.offsetWidth + 12 + \"px\";\n        }\n    },\n\n    // Doing the sticky headers as raw DOM, for speed, as it gets very stuttery if done\n    // properly through React\n    _initAndPositionStickyHeaders: function(initialise, scrollToPosition) {\n        var scrollArea = this._getScrollNode();\n        // Use the offset of the top of the scroll area from the window\n        // as this is used to calculate the CSS fixed top position for the stickies\n        var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;\n        // Use the offset of the top of the componet from the window\n        // as this is used to calculate the CSS fixed top position for the stickies\n        var scrollAreaHeight = ReactDOM.findDOMNode(this).getBoundingClientRect().height;\n\n        if (initialise) {\n            // Get a collection of sticky header containers references\n            this.stickies = document.getElementsByClassName(\"mx_RoomSubList_labelContainer\");\n\n            if (!this.stickies.length) return;\n\n            // Make sure there is sufficient space to do sticky headers: 120px plus all the sticky headers\n            this.scrollAreaSufficient = (120 + (this.stickies[0].getBoundingClientRect().height * this.stickies.length)) < scrollAreaHeight;\n\n            // Initialise the sticky headers\n            if (typeof this.stickies === \"object\" && this.stickies.length > 0) {\n                // Initialise the sticky headers\n                Array.prototype.forEach.call(this.stickies, function(sticky, i) {\n                    // Save the positions of all the stickies within scroll area.\n                    // These positions are relative to the LHS Panel top\n                    sticky.dataset.originalPosition = sticky.offsetTop - scrollArea.offsetTop;\n\n                    // Save and set the sticky heights\n                    var originalHeight = sticky.getBoundingClientRect().height;\n                    sticky.dataset.originalHeight = originalHeight;\n                    sticky.style.height = originalHeight;\n\n                    return sticky;\n                });\n            }\n        }\n\n        var self = this;\n        var scrollStuckOffset = 0;\n        // Scroll to the passed in position, i.e. a header was clicked and in a scroll to state\n        // rather than a collapsable one (see RoomSubList.isCollapsableOnClick method for details)\n        if (scrollToPosition !== undefined) {\n            scrollArea.scrollTop = scrollToPosition;\n        }\n        // Stick headers to top and bottom, or free them\n        Array.prototype.forEach.call(this.stickies, function(sticky, i, stickyWrappers) {\n            var stickyPosition = sticky.dataset.originalPosition;\n            var stickyHeight = sticky.dataset.originalHeight;\n            var stickyHeader = sticky.childNodes[0];\n            var topStuckHeight = stickyHeight * i;\n            var bottomStuckHeight = stickyHeight * (stickyWrappers.length - i);\n\n            if (self.scrollAreaSufficient && stickyPosition < (scrollArea.scrollTop + topStuckHeight)) {\n                // Top stickies\n                sticky.dataset.stuck = \"top\";\n                stickyHeader.classList.add(\"mx_RoomSubList_fixed\");\n                stickyHeader.style.top = scrollAreaOffset + topStuckHeight + \"px\";\n                // If stuck at top adjust the scroll back down to take account of all the stuck headers\n                if (scrollToPosition !== undefined && stickyPosition === scrollToPosition) {\n                    scrollStuckOffset = topStuckHeight;\n                }\n            } else if (self.scrollAreaSufficient && stickyPosition > ((scrollArea.scrollTop + scrollAreaHeight) - bottomStuckHeight)) {\n                /// Bottom stickies\n                sticky.dataset.stuck = \"bottom\";\n                stickyHeader.classList.add(\"mx_RoomSubList_fixed\");\n                stickyHeader.style.top = (scrollAreaOffset + scrollAreaHeight) - bottomStuckHeight + \"px\";\n            } else {\n                // Not sticky\n                sticky.dataset.stuck = \"none\";\n                stickyHeader.classList.remove(\"mx_RoomSubList_fixed\");\n                stickyHeader.style.top = null;\n            }\n        });\n        // Adjust the scroll to take account of top stuck headers\n        if (scrollToPosition !== undefined) {\n            scrollArea.scrollTop -= scrollStuckOffset;\n        }\n    },\n\n    _updateStickyHeaders: function(initialise, scrollToPosition) {\n        var self = this;\n\n        if (initialise) {\n            // Useing setTimeout to ensure that the code is run after the painting\n            // of the newly rendered object as using requestAnimationFrame caused\n            // artefacts to appear on screen briefly\n            window.setTimeout(function() {\n                self._initAndPositionStickyHeaders(initialise, scrollToPosition);\n            });\n        } else {\n            this._initAndPositionStickyHeaders(initialise, scrollToPosition);\n        }\n    },\n\n    onShowMoreRooms: function() {\n        // kick gemini in the balls to get it to wake up\n        // XXX: uuuuuuugh.\n        this.refs.gemscroll.forceUpdate();\n    },\n\n    render: function() {\n        var RoomSubList = sdk.getComponent('structures.RoomSubList');\n        var self = this;\n\n        return (\n            <GeminiScrollbar className=\"mx_RoomList_scrollbar\"\n                 autoshow={true} onScroll={ self._whenScrolling } ref=\"gemscroll\">\n            <div className=\"mx_RoomList\">\n                <RoomSubList list={ self.state.lists['im.vector.fake.invite'] }\n                             label=\"Invites\"\n                             editable={ false }\n                             order=\"recent\"\n                             selectedRoom={ self.props.selectedRoom }\n                             incomingCall={ self.state.incomingCall }\n                             collapsed={ self.props.collapsed }\n                             searchFilter={ self.props.searchFilter }\n                             onHeaderClick={ self.onSubListHeaderClick }\n                             onShowMoreRooms={ self.onShowMoreRooms } />\n\n                <RoomSubList list={ self.state.lists['m.favourite'] }\n                             label=\"Favourites\"\n                             tagName=\"m.favourite\"\n                             verb=\"favourite\"\n                             editable={ true }\n                             order=\"manual\"\n                             selectedRoom={ self.props.selectedRoom }\n                             incomingCall={ self.state.incomingCall }\n                             collapsed={ self.props.collapsed }\n                             searchFilter={ self.props.searchFilter }\n                             onHeaderClick={ self.onSubListHeaderClick }\n                             onShowMoreRooms={ self.onShowMoreRooms } />\n\n                <RoomSubList list={ self.state.lists['im.vector.fake.direct'] }\n                             label=\"People\"\n                             editable={ false }\n                             order=\"recent\"\n                             selectedRoom={ self.props.selectedRoom }\n                             incomingCall={ self.state.incomingCall }\n                             collapsed={ self.props.collapsed }\n                             searchFilter={ self.props.searchFilter }\n                             onHeaderClick={ self.onSubListHeaderClick }\n                             onShowMoreRooms={ self.onShowMoreRooms } />\n\n                <RoomSubList list={ self.state.lists['im.vector.fake.recent'] }\n                             label=\"Rooms\"\n                             editable={ true }\n                             verb=\"restore\"\n                             order=\"recent\"\n                             selectedRoom={ self.props.selectedRoom }\n                             incomingCall={ self.state.incomingCall }\n                             collapsed={ self.props.collapsed }\n                             searchFilter={ self.props.searchFilter }\n                             onHeaderClick={ self.onSubListHeaderClick }\n                             onShowMoreRooms={ self.onShowMoreRooms } />\n\n                { Object.keys(self.state.lists).map(function(tagName) {\n                    if (!tagName.match(/^(m\\.(favourite|lowpriority)|im\\.vector\\.fake\\.(invite|recent|direct|archived))$/)) {\n                        return <RoomSubList list={ self.state.lists[tagName] }\n                             key={ tagName }\n                             label={ tagName }\n                             tagName={ tagName }\n                             verb={ \"tag as \" + tagName }\n                             editable={ true }\n                             order=\"manual\"\n                             selectedRoom={ self.props.selectedRoom }\n                             incomingCall={ self.state.incomingCall }\n                             collapsed={ self.props.collapsed }\n                             searchFilter={ self.props.searchFilter }\n                             onHeaderClick={ self.onSubListHeaderClick }\n                             onShowMoreRooms={ self.onShowMoreRooms } />;\n\n                    }\n                }) }\n\n                <RoomSubList list={ self.state.lists['m.lowpriority'] }\n                             label=\"Low priority\"\n                             tagName=\"m.lowpriority\"\n                             verb=\"demote\"\n                             editable={ true }\n                             order=\"recent\"\n                             selectedRoom={ self.props.selectedRoom }\n                             incomingCall={ self.state.incomingCall }\n                             collapsed={ self.props.collapsed }\n                             searchFilter={ self.props.searchFilter }\n                             onHeaderClick={ self.onSubListHeaderClick }\n                             onShowMoreRooms={ self.onShowMoreRooms } />\n\n                <RoomSubList list={ self.state.lists['im.vector.fake.archived'] }\n                             label=\"Historical\"\n                             editable={ false }\n                             order=\"recent\"\n                             selectedRoom={ self.props.selectedRoom }\n                             collapsed={ self.props.collapsed }\n                             alwaysShowHeader={ true }\n                             startAsHidden={ true }\n                             showSpinner={ self.state.isLoadingLeftRooms }\n                             onHeaderClick= { self.onArchivedHeaderClick }\n                             incomingCall={ self.state.incomingCall }\n                             searchFilter={ self.props.searchFilter }\n                             onShowMoreRooms={ self.onShowMoreRooms } />\n            </div>\n            </GeminiScrollbar>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/RoomNameEditor.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[577,580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[607,610],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[644,647],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":9,"nodeType":"VariableDeclaration","source":"        var room = this.props.room;","fix":{"range":[896,899],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":32,"column":9,"nodeType":"VariableDeclaration","source":"        var name = room.currentState.getStateEvents('m.room.name', '');","fix":{"range":[932,935],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":9,"nodeType":"VariableDeclaration","source":"        var myId = MatrixClientPeg.get().credentials.userId;","fix":{"range":[1004,1007],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":9,"nodeType":"VariableDeclaration","source":"        var defaultName = room.getDefaultRoomName(myId);","fix":{"range":[1065,1068],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":9,"nodeType":"VariableDeclaration","source":"        var EditableText = sdk.getComponent(\"elements.EditableText\");","fix":{"range":[1483,1486],"text":"let"}}],"errorCount":0,"warningCount":8,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sdk = require('../../../index');\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\n\nmodule.exports = React.createClass({\n    displayName: 'RoomNameEditor',\n\n    propTypes: {\n        room: React.PropTypes.object.isRequired,\n    },\n\n    componentWillMount: function() {\n        var room = this.props.room;\n        var name = room.currentState.getStateEvents('m.room.name', '');\n        var myId = MatrixClientPeg.get().credentials.userId;\n        var defaultName = room.getDefaultRoomName(myId);\n\n        this._initialName = name ? name.getContent().name : '';\n\n        this._placeholderName = \"Unnamed Room\";\n        if (defaultName && defaultName !== 'Empty room') {\n            this._placeholderName += \" (\" + defaultName + \")\";\n        }\n    },\n\n    getRoomName: function() {\n        return this.refs.editor.getValue();\n    },\n\n    render: function() {\n        var EditableText = sdk.getComponent(\"elements.EditableText\");\n\n        return (\n                <div className=\"mx_RoomHeader_name\">\n                    <EditableText ref=\"editor\"\n                         className=\"mx_RoomHeader_nametext mx_RoomHeader_editable\"\n                         placeholderClassName=\"mx_RoomHeader_placeholder\"\n                         placeholder={ this._placeholderName }\n                         blurToCancel={ false }\n                         initialValue={ this._initialName }/>\n                </div>\n        );\n    },\n});\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/RoomPreviewBar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[650,653],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":60,"column":24,"nodeType":"Property","source":"            busy: false","fix":{"range":[1995,1995],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":71,"column":49,"nodeType":"MemberExpression","source":"                'email', this.props.invitedEmail","fix":{"range":[2447,2447],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":83,"column":9,"nodeType":"VariableDeclaration","source":"        var joinBlock, previewBlock;","fix":{"range":[2773,2776],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":83,"column":9,"nodeType":"VariableDeclaration","source":"        var joinBlock, previewBlock;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":86,"column":13,"nodeType":"VariableDeclaration","source":"            var Spinner = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[2868,2871],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":93,"column":13,"nodeType":"VariableDeclaration","source":"            var emailMatchBlock;","fix":{"range":[3086,3089],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 100 exceeds the maximum line length of 90.","line":100,"column":1,"nodeType":"Program","source":"                } else if (this.state.invitedEmailMxid != MatrixClientPeg.get().credentials.userId) {"},{"ruleId":"max-len","severity":1,"message":"Line 104 exceeds the maximum line length of 90.","line":104,"column":1,"nodeType":"Program","source":"                                <img src=\"img/warning.svg\" width=\"24\" height=\"23\" title= \"/!\\\\\" alt=\"/!\\\\\" />"},{"ruleId":"max-len","severity":1,"message":"Line 107 exceeds the maximum line length of 90.","line":107,"column":1,"nodeType":"Program","source":"                                This invitation was sent to <b><span className=\"email\">{this.props.invitedEmail}</span></b>, which is not associated with this account.<br/>"},{"ruleId":"max-len","severity":1,"message":"Line 108 exceeds the maximum line length of 90.","line":108,"column":1,"nodeType":"Program","source":"                                You may wish to login with a different account, or add this email to this account."},{"ruleId":"max-len","severity":1,"message":"Line 116 exceeds the maximum line length of 90.","line":116,"column":1,"nodeType":"Program","source":"                        You have been invited to join this room by <b>{ this.props.inviterName }</b>"},{"ruleId":"max-len","severity":1,"message":"Line 119 exceeds the maximum line length of 90.","line":119,"column":1,"nodeType":"Program","source":"                        Would you like to <a onClick={ this.props.onJoinClick }>accept</a> or <a onClick={ this.props.onRejectClick }>decline</a> this invitation?"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":125,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4922,4931],"text":"        "}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":125,"column":9,"nodeType":"BlockStatement","source":"        }","fix":{"range":[4911,4913],"text":"\n"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":127,"column":13,"nodeType":"VariableDeclaration","source":"            var name = this.props.roomAlias || \"This room\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":128,"column":13,"nodeType":"VariableDeclaration","source":"            var error;","fix":{"range":[5032,5035],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":141,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[5477,5486],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 143 exceeds the maximum line length of 90.","line":143,"column":1,"nodeType":"Program","source":"            var name = this.props.room ? this.props.room.name : (this.props.room_alias || \"\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":143,"column":13,"nodeType":"VariableDeclaration","source":"            var name = this.props.room ? this.props.room.name : (this.props.room_alias || \"\");"},{"ruleId":"no-redeclare","severity":2,"message":"'name' is already defined.","line":143,"column":17,"nodeType":"Identifier","source":"            var name = this.props.room ? this.props.room.name : (this.props.room_alias || \"\");"},{"ruleId":"max-len","severity":1,"message":"Line 149 exceeds the maximum line length of 90.","line":149,"column":1,"nodeType":"Program","source":"                        Would you like to <a onClick={ this.props.onJoinClick }>join</a> in order to participate in the discussion?"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":171,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[6552,6552],"text":","}}],"errorCount":4,"warningCount":21,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sdk = require('../../../index');\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\n\nmodule.exports = React.createClass({\n    displayName: 'RoomPreviewBar',\n\n    propTypes: {\n        onJoinClick: React.PropTypes.func,\n        onRejectClick: React.PropTypes.func,\n\n        // if inviterName is specified, the preview bar will shown an invite to the room.\n        // You should also specify onRejectClick if specifiying inviterName\n        inviterName: React.PropTypes.string,\n\n        // If invited by 3rd party invite, the email address the invite was sent to\n        invitedEmail: React.PropTypes.string,\n\n        // A standard client/server API error object. If supplied, indicates that the\n        // caller was unable to fetch details about the room for the given reason.\n        error: React.PropTypes.object,\n\n        canPreview: React.PropTypes.bool,\n        spinner: React.PropTypes.bool,\n        room: React.PropTypes.object,\n\n        // The alias that was used to access this room, if appropriate\n        // If given, this will be how the room is referred to (eg.\n        // in error messages).\n        roomAlias: React.PropTypes.object,\n    },\n\n    getDefaultProps: function() {\n        return {\n            onJoinClick: function() {},\n            canPreview: true,\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            busy: false\n        };\n    },\n\n    componentWillMount: function() {\n        // If this is an invite and we've been told what email\n        // address was invited, fetch the user's list of 3pids\n        // so we can check them against the one that was invited\n        if (this.props.inviterName && this.props.invitedEmail) {\n            this.setState({busy: true});\n            MatrixClientPeg.get().lookupThreePid(\n                'email', this.props.invitedEmail\n            ).finally(() => {\n                this.setState({busy: false});\n            }).done((result) => {\n                this.setState({invitedEmailMxid: result.mxid});\n            }, (err) => {\n                this.setState({threePidFetchError: err});\n            });\n        }\n    },\n\n    render: function() {\n        var joinBlock, previewBlock;\n\n        if (this.props.spinner || this.state.busy) {\n            var Spinner = sdk.getComponent(\"elements.Spinner\");\n            return (<div className=\"mx_RoomPreviewBar\">\n                <Spinner />\n            </div>);\n        }\n\n        if (this.props.inviterName) {\n            var emailMatchBlock;\n            if (this.props.invitedEmail) {\n                if (this.state.threePidFetchError) {\n                    emailMatchBlock = <div className=\"error\">\n                        Unable to ascertain that the address this invite was\n                        sent to matches one associated with your account.\n                    </div>;\n                } else if (this.state.invitedEmailMxid != MatrixClientPeg.get().credentials.userId) {\n                    emailMatchBlock =\n                        <div className=\"mx_RoomPreviewBar_warning\">\n                            <div className=\"mx_RoomPreviewBar_warningIcon\">\n                                <img src=\"img/warning.svg\" width=\"24\" height=\"23\" title= \"/!\\\\\" alt=\"/!\\\\\" />\n                            </div>\n                            <div className=\"mx_RoomPreviewBar_warningText\">\n                                This invitation was sent to <b><span className=\"email\">{this.props.invitedEmail}</span></b>, which is not associated with this account.<br/>\n                                You may wish to login with a different account, or add this email to this account.\n                            </div>\n                        </div>;\n                }\n            }\n            joinBlock = (\n                <div>\n                    <div className=\"mx_RoomPreviewBar_invite_text\">\n                        You have been invited to join this room by <b>{ this.props.inviterName }</b>\n                    </div>\n                    <div className=\"mx_RoomPreviewBar_join_text\">\n                        Would you like to <a onClick={ this.props.onJoinClick }>accept</a> or <a onClick={ this.props.onRejectClick }>decline</a> this invitation?\n                    </div>\n                    {emailMatchBlock}\n                </div>\n            );\n\n        }\n        else if (this.props.error) {\n            var name = this.props.roomAlias || \"This room\";\n            var error;\n            if (this.props.error.errcode == 'M_NOT_FOUND') {\n                error = name + \" does not exist\";\n            } else {\n                error = name + \" is not accessible at this time\";\n            }\n            joinBlock = (\n                <div>\n                    <div className=\"mx_RoomPreviewBar_join_text\">\n                        { error }\n                    </div>\n                </div>\n            );\n        }\n        else {\n            var name = this.props.room ? this.props.room.name : (this.props.room_alias || \"\");\n            name = name ? <b>{ name }</b> : \"a room\";\n            joinBlock = (\n                <div>\n                    <div className=\"mx_RoomPreviewBar_join_text\">\n                        You are trying to access { name }.<br/>\n                        Would you like to <a onClick={ this.props.onJoinClick }>join</a> in order to participate in the discussion?\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.props.canPreview) {\n            previewBlock = (\n                <div className=\"mx_RoomPreviewBar_preview_text\">\n                    This is a preview of this room. Room interactions have been disabled.\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"mx_RoomPreviewBar\">\n                <div className=\"mx_RoomPreviewBar_wrapper\">\n                    { joinBlock }\n                    { previewBlock }\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/RoomSettings.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[590,593],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[620,623],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var SdkConfig = require('../../../SdkConfig');","fix":{"range":[679,682],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'SdkConfig' is assigned a value but never used.","line":20,"column":5,"nodeType":"Identifier","source":"var SdkConfig = require('../../../SdkConfig');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[726,729],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require('../../../Modal');","fix":{"range":[763,766],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var ObjectUtils = require(\"../../../ObjectUtils\");","fix":{"range":[802,805],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[853,856],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var ScalarAuthClient = require(\"../../../ScalarAuthClient\");","fix":{"range":[895,898],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var ScalarMessaging = require('../../../ScalarMessaging');","fix":{"range":[956,959],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":5,"nodeType":"VariableDeclaration","source":"    var res = parseInt(val);","fix":{"range":[1177,1180],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":45,"column":9,"nodeType":"VariableDeclaration","source":"        var tags = {};","fix":{"range":[1515,1518],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 54 exceeds the maximum line length of 90.","line":54,"column":1,"nodeType":"Program","source":"            history_visibility: this._yankValueFromEvent(\"m.room.history_visibility\", \"history_visibility\"),"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":75,"column":35,"nodeType":"MemberExpression","source":"            this.props.room.roomId","fix":{"range":[3083,3083],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":88,"column":34,"nodeType":"Property","source":"                scalar_error: err","fix":{"range":[3588,3588],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":111,"column":23,"nodeType":"Property","source":"            name: name","fix":{"range":[4053,4053],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":117,"column":25,"nodeType":"Property","source":"            topic: topic","fix":{"range":[4154,4154],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":122,"column":9,"nodeType":"VariableDeclaration","source":"        var stateWasSetDefer = q.defer();","fix":{"range":[4206,4209],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":139,"column":9,"nodeType":"VariableDeclaration","source":"        var promises = this.saveAliases(); // returns Promise[]","fix":{"range":[4915,4918],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":140,"column":9,"nodeType":"VariableDeclaration","source":"        var originalState = this.getInitialState();","fix":{"range":[4979,4982],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":158,"column":19,"nodeType":"Literal","source":"                \"\"","fix":{"range":[5886,5886],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":165,"column":66,"nodeType":"ConditionalExpression","source":"                this.state.isRoomPublished ? \"public\" : \"private\"","fix":{"range":[6155,6155],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":173,"column":19,"nodeType":"Literal","source":"                \"\"","fix":{"range":[6427,6427],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":181,"column":19,"nodeType":"Literal","source":"                \"\"","fix":{"range":[6713,6713],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":187,"column":9,"nodeType":"VariableDeclaration","source":"        var powerLevels = this._getPowerLevels();","fix":{"range":[6774,6777],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":190,"column":63,"nodeType":"Literal","source":"                roomId, \"m.room.power_levels\", powerLevels, \"\"","fix":{"range":[6969,6969],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 196 exceeds the maximum line length of 90.","line":196,"column":1,"nodeType":"Program","source":"            var tagDiffs = ObjectUtils.getKeyValueArrayDiffs(originalState.tags, this.state.tags);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":196,"column":13,"nodeType":"VariableDeclaration","source":"            var tagDiffs = ObjectUtils.getKeyValueArrayDiffs(originalState.tags, this.state.tags);","fix":{"range":[7064,7067],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":202,"column":83,"nodeType":"CallExpression","source":"                            MatrixClientPeg.get().setRoomTag(roomId, diff.key, {})","fix":{"range":[7454,7454],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":207,"column":82,"nodeType":"CallExpression","source":"                            MatrixClientPeg.get().deleteRoomTag(roomId, diff.key)","fix":{"range":[7665,7665],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":218,"column":9,"nodeType":"VariableDeclaration","source":"        var p;","fix":{"range":[7941,7944],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":225,"column":9,"nodeType":"VariableDeclaration","source":"        var ps = this.saveUrlPreviewSettings();","fix":{"range":[8092,8095],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 236 exceeds the maximum line length of 90.","line":236,"column":1,"nodeType":"Program","source":"        console.log(\"Performing %s operations: %s\", promises.length, JSON.stringify(promises));"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":258,"column":9,"nodeType":"VariableDeclaration","source":"        var encrypt = this.refs.encrypt.checked;","fix":{"range":[9023,9026],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":261,"column":9,"nodeType":"VariableDeclaration","source":"        var roomId = this.props.room.roomId;","fix":{"range":[9111,9114],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":264,"column":50,"nodeType":"ObjectExpression","source":"            { algorithm: \"m.megolm.v1.aes-sha2\" }","fix":{"range":[9291,9291],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 279 exceeds the maximum line length of 90.","line":279,"column":1,"nodeType":"Program","source":"        var powerLevels = this.props.room.currentState.getStateEvents('m.room.power_levels', '');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":279,"column":9,"nodeType":"VariableDeclaration","source":"        var powerLevels = this.props.room.currentState.getStateEvents('m.room.power_levels', '');","fix":{"range":[9704,9707],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":282,"column":9,"nodeType":"VariableDeclaration","source":"        var newPowerLevels = {","fix":{"range":[9870,9873],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":299,"column":39,"nodeType":"Property","source":"            power_levels_changed: true","fix":{"range":[10570,10570],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":305,"column":9,"nodeType":"VariableDeclaration","source":"        var event = this.props.room.currentState.getStateEvents(stateEventType, '');","fix":{"range":[10765,10768],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":313,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[11025,11028],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":314,"column":9,"nodeType":"VariableDeclaration","source":"        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[11050,11053],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":318,"column":9,"nodeType":"VariableDeclaration","source":"        var value = ev.target.value;","fix":{"range":[11209,11212],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 324 exceeds the maximum line length of 90.","line":324,"column":1,"nodeType":"Program","source":"                    Changes to who can read history will only apply to future messages in this room.<br/>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":331,"column":50,"nodeType":"Property","source":"                        history_visibility: value","fix":{"range":[11769,11769],"text":","}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":338,"column":44,"nodeType":"BlockStatement","source":"    _onRoomAccessRadioToggle: function(ev) {","fix":{"range":[11891,11893],"text":"\n"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":377,"column":9,"nodeType":"VariableDeclaration","source":"        var state = {};","fix":{"range":[13490,13493],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":386,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[13816,13829],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":392,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[14024,14033],"text":"        "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":399,"column":31,"nodeType":"Property","source":"            tags_changed: true","fix":{"range":[14185,14185],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":404,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[14252,14255],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":405,"column":9,"nodeType":"VariableDeclaration","source":"        var roomState = this.props.room.currentState;","fix":{"range":[14293,14296],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":412,"column":9,"nodeType":"VariableDeclaration","source":"        var IntegrationsManager = sdk.getComponent(\"views.settings.IntegrationsManager\");","fix":{"range":[14574,14577],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 415 exceeds the maximum line length of 90.","line":415,"column":1,"nodeType":"Program","source":"                    this.scalarClient.getScalarInterfaceUrlForRoom(this.props.room.roomId) :"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":444,"column":13,"nodeType":"VariableDeclaration","source":"            var errCode = err.errcode || \"unknown error code\";","fix":{"range":[15699,15702],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":445,"column":13,"nodeType":"VariableDeclaration","source":"            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[15762,15765],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":448,"column":66,"nodeType":"Property","source":"                description: `Failed to forget room (${errCode})`","fix":{"range":[15964,15964],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":456,"column":9,"nodeType":"VariableDeclaration","source":"        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[16090,16093],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 463 exceeds the maximum line length of 90.","line":463,"column":1,"nodeType":"Program","source":"                    <p>Devices will <b>not</b> yet be able to decrypt history from before they joined the room.</p>"},{"ruleId":"max-len","severity":1,"message":"Line 464 exceeds the maximum line length of 90.","line":464,"column":1,"nodeType":"Program","source":"                    <p>Once encryption is enabled for a room it <b>cannot</b> be turned off again (for now).</p>"},{"ruleId":"max-len","severity":1,"message":"Line 465 exceeds the maximum line length of 90.","line":465,"column":1,"nodeType":"Program","source":"                    <p>Encrypted messages will not be visible on clients that do not yet implement encryption.</p>"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":468,"column":25,"nodeType":"ArrowFunctionExpression","source":"            onFinished: confirm=>{","fix":{"range":[16849,16856],"text":"(confirm)"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":477,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[17051,17054],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":478,"column":9,"nodeType":"VariableDeclaration","source":"        var roomState = this.props.room.currentState;","fix":{"range":[17092,17095],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":479,"column":9,"nodeType":"VariableDeclaration","source":"        var isEncrypted = cli.isRoomEncrypted(this.props.room.roomId);","fix":{"range":[17146,17149],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 485 exceeds the maximum line length of 90.","line":485,"column":1,"nodeType":"Program","source":"                    <input type=\"checkbox\" ref=\"encrypt\" onClick={ this.onEnableEncryptionClick }/>"},{"ruleId":"max-len","severity":1,"message":"Line 486 exceeds the maximum line length of 90.","line":486,"column":1,"nodeType":"Program","source":"                    <img className=\"mx_RoomSettings_e2eIcon\" src=\"img/e2e-unencrypted.svg\" width=\"12\" height=\"12\" />"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":490,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[17703,17712],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 495 exceeds the maximum line length of 90.","line":495,"column":1,"nodeType":"Program","source":"                  ? <img className=\"mx_RoomSettings_e2eIcon\" src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\" />"},{"ruleId":"max-len","severity":1,"message":"Line 496 exceeds the maximum line length of 90.","line":496,"column":1,"nodeType":"Program","source":"                  : <img className=\"mx_RoomSettings_e2eIcon\" src=\"img/e2e-unencrypted.svg\" width=\"12\" height=\"12\" />"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":508,"column":9,"nodeType":"VariableDeclaration","source":"        var AliasSettings = sdk.getComponent(\"room_settings.AliasSettings\");","fix":{"range":[18352,18355],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":509,"column":9,"nodeType":"VariableDeclaration","source":"        var ColorSettings = sdk.getComponent(\"room_settings.ColorSettings\");","fix":{"range":[18429,18432],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":510,"column":9,"nodeType":"VariableDeclaration","source":"        var UrlPreviewSettings = sdk.getComponent(\"room_settings.UrlPreviewSettings\");","fix":{"range":[18506,18509],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":511,"column":9,"nodeType":"VariableDeclaration","source":"        var EditableText = sdk.getComponent('elements.EditableText');","fix":{"range":[18593,18596],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'EditableText' is assigned a value but never used.","line":511,"column":13,"nodeType":"Identifier","source":"        var EditableText = sdk.getComponent('elements.EditableText');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":512,"column":9,"nodeType":"VariableDeclaration","source":"        var PowerSelector = sdk.getComponent('elements.PowerSelector');","fix":{"range":[18663,18666],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":513,"column":9,"nodeType":"VariableDeclaration","source":"        var Loader = sdk.getComponent(\"elements.Spinner\");","fix":{"range":[18735,18738],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Loader' is assigned a value but never used.","line":513,"column":13,"nodeType":"Identifier","source":"        var Loader = sdk.getComponent(\"elements.Spinner\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":515,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[18795,18798],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":516,"column":9,"nodeType":"VariableDeclaration","source":"        var roomState = this.props.room.currentState;","fix":{"range":[18836,18839],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":517,"column":9,"nodeType":"VariableDeclaration","source":"        var user_id = cli.credentials.userId;","fix":{"range":[18890,18893],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":517,"column":13,"nodeType":"Identifier","source":"        var user_id = cli.credentials.userId;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":519,"column":9,"nodeType":"VariableDeclaration","source":"        var power_level_event = roomState.getStateEvents('m.room.power_levels', '');","fix":{"range":[18937,18940],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'power_level_event' is not in camel case.","line":519,"column":13,"nodeType":"Identifier","source":"        var power_level_event = roomState.getStateEvents('m.room.power_levels', '');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":520,"column":9,"nodeType":"VariableDeclaration","source":"        var power_levels = power_level_event ? power_level_event.getContent() : {};","fix":{"range":[19022,19025],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'power_levels' is not in camel case.","line":520,"column":13,"nodeType":"Identifier","source":"        var power_levels = power_level_event ? power_level_event.getContent() : {};"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'power_level_event' is not in camel case.","line":520,"column":28,"nodeType":"Identifier","source":"        var power_levels = power_level_event ? power_level_event.getContent() : {};"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":521,"column":9,"nodeType":"VariableDeclaration","source":"        var events_levels = power_levels.events || {};","fix":{"range":[19106,19109],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'events_levels' is not in camel case.","line":521,"column":13,"nodeType":"Identifier","source":"        var events_levels = power_levels.events || {};"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":522,"column":9,"nodeType":"VariableDeclaration","source":"        var user_levels = power_levels.users || {};","fix":{"range":[19161,19164],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_levels' is not in camel case.","line":522,"column":13,"nodeType":"Identifier","source":"        var user_levels = power_levels.users || {};"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":524,"column":9,"nodeType":"VariableDeclaration","source":"        var ban_level = parseIntWithDefault(power_levels.ban, 50);","fix":{"range":[19214,19217],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'ban_level' is not in camel case.","line":524,"column":13,"nodeType":"Identifier","source":"        var ban_level = parseIntWithDefault(power_levels.ban, 50);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":525,"column":9,"nodeType":"VariableDeclaration","source":"        var kick_level = parseIntWithDefault(power_levels.kick, 50);","fix":{"range":[19281,19284],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'kick_level' is not in camel case.","line":525,"column":13,"nodeType":"Identifier","source":"        var kick_level = parseIntWithDefault(power_levels.kick, 50);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":526,"column":9,"nodeType":"VariableDeclaration","source":"        var redact_level = parseIntWithDefault(power_levels.redact, 50);","fix":{"range":[19350,19353],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'redact_level' is not in camel case.","line":526,"column":13,"nodeType":"Identifier","source":"        var redact_level = parseIntWithDefault(power_levels.redact, 50);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":527,"column":9,"nodeType":"VariableDeclaration","source":"        var invite_level = parseIntWithDefault(power_levels.invite, 50);","fix":{"range":[19423,19426],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'invite_level' is not in camel case.","line":527,"column":13,"nodeType":"Identifier","source":"        var invite_level = parseIntWithDefault(power_levels.invite, 50);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":528,"column":9,"nodeType":"VariableDeclaration","source":"        var send_level = parseIntWithDefault(power_levels.events_default, 0);","fix":{"range":[19496,19499],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'send_level' is not in camel case.","line":528,"column":13,"nodeType":"Identifier","source":"        var send_level = parseIntWithDefault(power_levels.events_default, 0);"},{"ruleId":"max-len","severity":1,"message":"Line 529 exceeds the maximum line length of 90.","line":529,"column":1,"nodeType":"Program","source":"        var state_level = power_level_event ? parseIntWithDefault(power_levels.state_default, 50) : 0;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":529,"column":9,"nodeType":"VariableDeclaration","source":"        var state_level = power_level_event ? parseIntWithDefault(power_levels.state_default, 50) : 0;","fix":{"range":[19574,19577],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'state_level' is not in camel case.","line":529,"column":13,"nodeType":"Identifier","source":"        var state_level = power_level_event ? parseIntWithDefault(power_levels.state_default, 50) : 0;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'power_level_event' is not in camel case.","line":529,"column":27,"nodeType":"Identifier","source":"        var state_level = power_level_event ? parseIntWithDefault(power_levels.state_default, 50) : 0;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":530,"column":9,"nodeType":"VariableDeclaration","source":"        var default_user_level = parseIntWithDefault(power_levels.users_default, 0);","fix":{"range":[19677,19680],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'default_user_level' is not in camel case.","line":530,"column":13,"nodeType":"Identifier","source":"        var default_user_level = parseIntWithDefault(power_levels.users_default, 0);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":532,"column":9,"nodeType":"VariableDeclaration","source":"        var current_user_level = user_levels[user_id];","fix":{"range":[19763,19766],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":532,"column":13,"nodeType":"Identifier","source":"        var current_user_level = user_levels[user_id];"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":533,"column":13,"nodeType":"Identifier","source":"        if (current_user_level === undefined) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":534,"column":13,"nodeType":"Identifier","source":"            current_user_level = default_user_level;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'default_user_level' is not in camel case.","line":534,"column":34,"nodeType":"Identifier","source":"            current_user_level = default_user_level;"},{"ruleId":"max-len","severity":1,"message":"Line 537 exceeds the maximum line length of 90.","line":537,"column":1,"nodeType":"Program","source":"        var can_change_levels = roomState.mayClientSendStateEvent(\"m.room.power_levels\", cli);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":537,"column":9,"nodeType":"VariableDeclaration","source":"        var can_change_levels = roomState.mayClientSendStateEvent(\"m.room.power_levels\", cli);","fix":{"range":[19930,19933],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_change_levels' is not in camel case.","line":537,"column":13,"nodeType":"Identifier","source":"        var can_change_levels = roomState.mayClientSendStateEvent(\"m.room.power_levels\", cli);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":539,"column":9,"nodeType":"VariableDeclaration","source":"        var canSetTag = !cli.isGuest();","fix":{"range":[20026,20029],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":541,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[20067,20070],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":543,"column":9,"nodeType":"VariableDeclaration","source":"        var userLevelsSection;","fix":{"range":[20093,20096],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 552 exceeds the maximum line length of 90.","line":552,"column":1,"nodeType":"Program","source":"                                    { user } is a <PowerSelector value={ user_levels[user] } disabled={true}/>"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":558,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[20791,20800],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 560 exceeds the maximum line length of 90.","line":560,"column":1,"nodeType":"Program","source":"            userLevelsSection = <div>No users have specific privileges in this room.</div>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":563,"column":9,"nodeType":"VariableDeclaration","source":"        var banned = this.props.room.getMembersWithMembership(\"ban\");","fix":{"range":[20918,20921],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":564,"column":9,"nodeType":"VariableDeclaration","source":"        var bannedUsersSection;","fix":{"range":[20988,20991],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":581,"column":9,"nodeType":"VariableDeclaration","source":"        var unfederatableSection;","fix":{"range":[21556,21559],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":590,"column":9,"nodeType":"VariableDeclaration","source":"        var leaveButton = null;","fix":{"range":[21888,21891],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":591,"column":9,"nodeType":"VariableDeclaration","source":"        var myMember = this.props.room.getMember(user_id);","fix":{"range":[21920,21923],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 595 exceeds the maximum line length of 90.","line":595,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_RoomSettings_leaveButton\" onClick={ this.onLeaveClick }>"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":599,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[22267,22280],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 602 exceeds the maximum line length of 90.","line":602,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_RoomSettings_leaveButton\" onClick={ this.onForgetClick }>"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":612,"column":9,"nodeType":"VariableDeclaration","source":"        var tags = [","fix":{"range":[22675,22678],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":623,"column":9,"nodeType":"VariableDeclaration","source":"        var tagsSection = null;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":625,"column":13,"nodeType":"VariableDeclaration","source":"            var tagsSection ="},{"ruleId":"no-redeclare","severity":2,"message":"'tagsSection' is already defined.","line":625,"column":17,"nodeType":"Identifier","source":"            var tagsSection ="},{"ruleId":"max-len","severity":1,"message":"Line 633 exceeds the maximum line length of 90.","line":633,"column":1,"nodeType":"Program","source":"                                               onChange={ self._onTagChange.bind(self, tag.name) }/>"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":633,"column":48,"nodeType":"JSXAttribute","source":"                                               onChange={ self._onTagChange.bind(self, tag.name) }/>"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":633,"column":59,"nodeType":"MemberExpression","source":"                                               onChange={ self._onTagChange.bind(self, tag.name) }/>"},{"ruleId":"max-len","severity":1,"message":"Line 636 exceeds the maximum line length of 90.","line":636,"column":1,"nodeType":"Program","source":"                        })) : (self.state.tags && self.state.tags.join) ? self.state.tags.join(\", \") : \"\""},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":643,"column":9,"nodeType":"VariableDeclaration","source":"        var historyVisibility = this.state.history_visibility || \"shared\";","fix":{"range":[24147,24150],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":645,"column":9,"nodeType":"VariableDeclaration","source":"        var addressWarning;","fix":{"range":[24223,24226],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 646 exceeds the maximum line length of 90.","line":646,"column":1,"nodeType":"Program","source":"        var aliasEvents = this.props.room.currentState.getStateEvents('m.room.aliases') || [];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":646,"column":9,"nodeType":"VariableDeclaration","source":"        var aliasEvents = this.props.room.currentState.getStateEvents('m.room.aliases') || [];","fix":{"range":[24251,24254],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":647,"column":9,"nodeType":"VariableDeclaration","source":"        var aliasCount = 0;","fix":{"range":[24346,24349],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":659,"column":9,"nodeType":"VariableDeclaration","source":"        var inviteGuestWarning;","fix":{"range":[24767,24770],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 660 exceeds the maximum line length of 90.","line":660,"column":1,"nodeType":"Program","source":"        if (this.state.join_rule !== \"public\" && this.state.guest_access === \"forbidden\") {"},{"ruleId":"max-len","severity":1,"message":"Line 663 exceeds the maximum line length of 90.","line":663,"column":1,"nodeType":"Program","source":"                    Guests cannot join this room even if explicitly invited. <a href=\"#\" onClick={ (e) => {"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":663,"column":90,"nodeType":"JSXAttribute","source":"                    Guests cannot join this room even if explicitly invited. <a href=\"#\" onClick={ (e) => {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":670,"column":9,"nodeType":"VariableDeclaration","source":"        var integrationsButton;","fix":{"range":[25305,25308],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":671,"column":9,"nodeType":"VariableDeclaration","source":"        var integrationsError;","fix":{"range":[25337,25340],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 683 exceeds the maximum line length of 90.","line":683,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_RoomSettings_integrationsButton\" onClick={ this.onManageIntegrations }>"},{"ruleId":"max-len","severity":1,"message":"Line 689 exceeds the maximum line length of 90.","line":689,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_RoomSettings_integrationsButton_error\" onClick={ this.onShowIntegrationsError }>"},{"ruleId":"max-len","severity":1,"message":"Line 696 exceeds the maximum line length of 90.","line":696,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_RoomSettings_integrationsButton\" style={{ opacity: 0.5 }}>"},{"ruleId":"max-len","severity":1,"message":"Line 725 exceeds the maximum line length of 90.","line":725,"column":1,"nodeType":"Program","source":"                                checked={this.state.join_rule === \"public\" && this.state.guest_access !== \"can_join\"}/>"},{"ruleId":"max-len","severity":1,"message":"Line 732 exceeds the maximum line length of 90.","line":732,"column":1,"nodeType":"Program","source":"                                checked={this.state.join_rule === \"public\" && this.state.guest_access === \"can_join\"}/>"},{"ruleId":"max-len","severity":1,"message":"Line 739 exceeds the maximum line length of 90.","line":739,"column":1,"nodeType":"Program","source":"                            <input type=\"checkbox\" disabled={ !roomState.mayClientSendStateEvent(\"m.room.aliases\", cli) }"},{"ruleId":"max-len","severity":1,"message":"Line 740 exceeds the maximum line length of 90.","line":740,"column":1,"nodeType":"Program","source":"                                   onChange={ this._onToggle.bind(this, \"isRoomPublished\", true, false)}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":740,"column":36,"nodeType":"JSXAttribute","source":"                                   onChange={ this._onToggle.bind(this, \"isRoomPublished\", true, false)}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":740,"column":47,"nodeType":"MemberExpression","source":"                                   onChange={ this._onToggle.bind(this, \"isRoomPublished\", true, false)}"},{"ruleId":"max-len","severity":1,"message":"Line 742 exceeds the maximum line length of 90.","line":742,"column":1,"nodeType":"Program","source":"                            List this room in { MatrixClientPeg.get().getDomain() }'s room directory?"},{"ruleId":"max-len","severity":1,"message":"Line 749 exceeds the maximum line length of 90.","line":749,"column":1,"nodeType":"Program","source":"                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }"},{"ruleId":"max-len","severity":1,"message":"Line 756 exceeds the maximum line length of 90.","line":756,"column":1,"nodeType":"Program","source":"                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }"},{"ruleId":"max-len","severity":1,"message":"Line 759 exceeds the maximum line length of 90.","line":759,"column":1,"nodeType":"Program","source":"                            Members only (since the point in time of selecting this option)"},{"ruleId":"max-len","severity":1,"message":"Line 763 exceeds the maximum line length of 90.","line":763,"column":1,"nodeType":"Program","source":"                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }"},{"ruleId":"max-len","severity":1,"message":"Line 770 exceeds the maximum line length of 90.","line":770,"column":1,"nodeType":"Program","source":"                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }"},{"ruleId":"max-len","severity":1,"message":"Line 788 exceeds the maximum line length of 90.","line":788,"column":1,"nodeType":"Program","source":"                    canSetCanonicalAlias={ roomState.mayClientSendStateEvent(\"m.room.canonical_alias\", cli) }"},{"ruleId":"max-len","severity":1,"message":"Line 793 exceeds the maximum line length of 90.","line":793,"column":1,"nodeType":"Program","source":"                    canonicalAliasEvent={this.props.room.currentState.getStateEvents('m.room.canonical_alias', '')}"},{"ruleId":"max-len","severity":1,"message":"Line 794 exceeds the maximum line length of 90.","line":794,"column":1,"nodeType":"Program","source":"                    aliasEvents={this.props.room.currentState.getStateEvents('m.room.aliases')} />"},{"ruleId":"max-len","severity":1,"message":"Line 801 exceeds the maximum line length of 90.","line":801,"column":1,"nodeType":"Program","source":"                        <span className=\"mx_RoomSettings_powerLevelKey\">The default role for new room members is </span>"},{"ruleId":"max-len","severity":1,"message":"Line 802 exceeds the maximum line length of 90.","line":802,"column":1,"nodeType":"Program","source":"                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'default_user_level' is not in camel case.","line":802,"column":67,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_change_levels' is not in camel case.","line":802,"column":117,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":802,"column":138,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'default_user_level' is not in camel case.","line":802,"column":159,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"max-len","severity":1,"message":"Line 805 exceeds the maximum line length of 90.","line":805,"column":1,"nodeType":"Program","source":"                        <span className=\"mx_RoomSettings_powerLevelKey\">To send messages, you must be a </span>"},{"ruleId":"max-len","severity":1,"message":"Line 806 exceeds the maximum line length of 90.","line":806,"column":1,"nodeType":"Program","source":"                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'send_level' is not in camel case.","line":806,"column":68,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_change_levels' is not in camel case.","line":806,"column":110,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":806,"column":131,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'send_level' is not in camel case.","line":806,"column":152,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"max-len","severity":1,"message":"Line 809 exceeds the maximum line length of 90.","line":809,"column":1,"nodeType":"Program","source":"                        <span className=\"mx_RoomSettings_powerLevelKey\">To invite users into the room, you must be a </span>"},{"ruleId":"max-len","severity":1,"message":"Line 810 exceeds the maximum line length of 90.","line":810,"column":1,"nodeType":"Program","source":"                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'invite_level' is not in camel case.","line":810,"column":60,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_change_levels' is not in camel case.","line":810,"column":104,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":810,"column":125,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'invite_level' is not in camel case.","line":810,"column":146,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"max-len","severity":1,"message":"Line 813 exceeds the maximum line length of 90.","line":813,"column":1,"nodeType":"Program","source":"                        <span className=\"mx_RoomSettings_powerLevelKey\">To configure the room, you must be a </span>"},{"ruleId":"max-len","severity":1,"message":"Line 814 exceeds the maximum line length of 90.","line":814,"column":1,"nodeType":"Program","source":"                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'state_level' is not in camel case.","line":814,"column":67,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_change_levels' is not in camel case.","line":814,"column":110,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":814,"column":131,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'state_level' is not in camel case.","line":814,"column":152,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"max-len","severity":1,"message":"Line 817 exceeds the maximum line length of 90.","line":817,"column":1,"nodeType":"Program","source":"                        <span className=\"mx_RoomSettings_powerLevelKey\">To kick users, you must be a </span>"},{"ruleId":"max-len","severity":1,"message":"Line 818 exceeds the maximum line length of 90.","line":818,"column":1,"nodeType":"Program","source":"                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'kick_level' is not in camel case.","line":818,"column":58,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_change_levels' is not in camel case.","line":818,"column":100,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":818,"column":121,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'kick_level' is not in camel case.","line":818,"column":142,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"max-len","severity":1,"message":"Line 821 exceeds the maximum line length of 90.","line":821,"column":1,"nodeType":"Program","source":"                        <span className=\"mx_RoomSettings_powerLevelKey\">To ban users, you must be a </span>"},{"ruleId":"max-len","severity":1,"message":"Line 822 exceeds the maximum line length of 90.","line":822,"column":1,"nodeType":"Program","source":"                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'ban_level' is not in camel case.","line":822,"column":57,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_change_levels' is not in camel case.","line":822,"column":98,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":822,"column":119,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'ban_level' is not in camel case.","line":822,"column":140,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"max-len","severity":1,"message":"Line 825 exceeds the maximum line length of 90.","line":825,"column":1,"nodeType":"Program","source":"                        <span className=\"mx_RoomSettings_powerLevelKey\">To redact messages, you must be a </span>"},{"ruleId":"max-len","severity":1,"message":"Line 826 exceeds the maximum line length of 90.","line":826,"column":1,"nodeType":"Program","source":"                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'redact_level' is not in camel case.","line":826,"column":60,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'can_change_levels' is not in camel case.","line":826,"column":104,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'current_user_level' is not in camel case.","line":826,"column":125,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'redact_level' is not in camel case.","line":826,"column":146,"nodeType":"Identifier","source":"                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'event_type' is not in camel case.","line":829,"column":62,"nodeType":"Identifier","source":"                    {Object.keys(events_levels).map(function(event_type, i) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'event_type' is not in camel case.","line":831,"column":78,"nodeType":"Identifier","source":"                            <div className=\"mx_RoomSettings_powerLevel\" key={event_type}>"},{"ruleId":"max-len","severity":1,"message":"Line 832 exceeds the maximum line length of 90.","line":832,"column":1,"nodeType":"Program","source":"                                <span className=\"mx_RoomSettings_powerLevelKey\">To send events of type <code>{ event_type }</code>, you must be a </span>"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'event_type' is not in camel case.","line":832,"column":112,"nodeType":"Identifier","source":"                                <span className=\"mx_RoomSettings_powerLevelKey\">To send events of type <code>{ event_type }</code>, you must be a </span>"},{"ruleId":"max-len","severity":1,"message":"Line 833 exceeds the maximum line length of 90.","line":833,"column":1,"nodeType":"Program","source":"                                <PowerSelector value={ events_levels[event_type] } controlled={false} disabled={true} onChange={self.onPowerLevelsChanged}/>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":851,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[36088,36088],"text":","}}],"errorCount":26,"warningCount":190,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar q = require(\"q\");\nvar React = require('react');\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar SdkConfig = require('../../../SdkConfig');\nvar sdk = require('../../../index');\nvar Modal = require('../../../Modal');\nvar ObjectUtils = require(\"../../../ObjectUtils\");\nvar dis = require(\"../../../dispatcher\");\nvar ScalarAuthClient = require(\"../../../ScalarAuthClient\");\nvar ScalarMessaging = require('../../../ScalarMessaging');\n\n// parse a string as an integer; if the input is undefined, or cannot be parsed\n// as an integer, return a default.\nfunction parseIntWithDefault(val, def) {\n    var res = parseInt(val);\n    return isNaN(res) ? def : res;\n}\n\nmodule.exports = React.createClass({\n    displayName: 'RoomSettings',\n\n    propTypes: {\n        room: React.PropTypes.object.isRequired,\n        onSaveClick: React.PropTypes.func,\n        onCancelClick: React.PropTypes.func,\n    },\n\n    getInitialState: function() {\n        var tags = {};\n        Object.keys(this.props.room.tags).forEach(function(tagName) {\n            tags[tagName] = ['yep'];\n        });\n\n        return {\n            name: this._yankValueFromEvent(\"m.room.name\", \"name\"),\n            topic: this._yankValueFromEvent(\"m.room.topic\", \"topic\"),\n            join_rule: this._yankValueFromEvent(\"m.room.join_rules\", \"join_rule\"),\n            history_visibility: this._yankValueFromEvent(\"m.room.history_visibility\", \"history_visibility\"),\n            guest_access: this._yankValueFromEvent(\"m.room.guest_access\", \"guest_access\"),\n            power_levels_changed: false,\n            tags_changed: false,\n            tags: tags,\n            // isRoomPublished is loaded async in componentWillMount so when the component\n            // inits, the saved value will always be undefined, however getInitialState()\n            // is also called from the saving code so we must return the correct value here\n            // if we have it (although this could race if the user saves before we load whether\n            // the room is published or not).\n            // Default to false if it's undefined, otherwise react complains about changing\n            // components from uncontrolled to controlled\n            isRoomPublished: this._originalIsRoomPublished || false,\n            scalar_error: null,\n            showIntegrationsError: false,\n        };\n    },\n\n    componentWillMount: function() {\n        ScalarMessaging.startListening();\n        MatrixClientPeg.get().getRoomDirectoryVisibility(\n            this.props.room.roomId\n        ).done((result) => {\n            this.setState({ isRoomPublished: result.visibility === \"public\" });\n            this._originalIsRoomPublished = result.visibility === \"public\";\n        }, (err) => {\n            console.error(\"Failed to get room visibility: \" + err);\n        });\n\n        this.scalarClient = new ScalarAuthClient();\n        this.scalarClient.connect().done(() => {\n            this.forceUpdate();\n        }, (err) => {\n            this.setState({\n                scalar_error: err\n            });\n        });\n\n        dis.dispatch({\n            action: 'ui_opacity',\n            sideOpacity: 0.3,\n            middleOpacity: 0.3,\n        });\n    },\n\n    componentWillUnmount: function() {\n        ScalarMessaging.stopListening();\n\n        dis.dispatch({\n            action: 'ui_opacity',\n            sideOpacity: 1.0,\n            middleOpacity: 1.0,\n        });\n    },\n\n    setName: function(name) {\n        this.setState({\n            name: name\n        });\n    },\n\n    setTopic: function(topic) {\n        this.setState({\n            topic: topic\n        });\n    },\n\n    save: function() {\n        var stateWasSetDefer = q.defer();\n        // the caller may have JUST called setState on stuff, so we need to re-render before saving\n        // else we won't use the latest values of things.\n        // We can be a bit cheeky here and set a loading flag, and listen for the callback on that\n        // to know when things have been set.\n        this.setState({ _loading: true}, () => {\n            stateWasSetDefer.resolve();\n            this.setState({ _loading: false});\n        });\n\n        return stateWasSetDefer.promise.then(() => {\n            return q.allSettled(this._calcSavePromises());\n        });\n    },\n\n    _calcSavePromises: function() {\n        const roomId = this.props.room.roomId;\n        var promises = this.saveAliases(); // returns Promise[]\n        var originalState = this.getInitialState();\n\n        // diff between original state and this.state to work out what has been changed\n        console.log(\"Original: %s\", JSON.stringify(originalState));\n        console.log(\"New: %s\", JSON.stringify(this.state));\n\n        // name and topic\n        if (this._hasDiff(this.state.name, originalState.name)) {\n            promises.push(MatrixClientPeg.get().setRoomName(roomId, this.state.name));\n        }\n        if (this._hasDiff(this.state.topic, originalState.topic)) {\n            promises.push(MatrixClientPeg.get().setRoomTopic(roomId, this.state.topic));\n        }\n\n        if (this.state.history_visibility !== originalState.history_visibility) {\n            promises.push(MatrixClientPeg.get().sendStateEvent(\n                roomId, \"m.room.history_visibility\",\n                { history_visibility: this.state.history_visibility },\n                \"\"\n            ));\n        }\n\n        if (this.state.isRoomPublished !== originalState.isRoomPublished) {\n            promises.push(MatrixClientPeg.get().setRoomDirectoryVisibility(\n                roomId,\n                this.state.isRoomPublished ? \"public\" : \"private\"\n            ));\n        }\n\n        if (this.state.join_rule !== originalState.join_rule) {\n            promises.push(MatrixClientPeg.get().sendStateEvent(\n                roomId, \"m.room.join_rules\",\n                { join_rule: this.state.join_rule },\n                \"\"\n            ));\n        }\n\n        if (this.state.guest_access !== originalState.guest_access) {\n            promises.push(MatrixClientPeg.get().sendStateEvent(\n                roomId, \"m.room.guest_access\",\n                { guest_access: this.state.guest_access },\n                \"\"\n            ));\n        }\n\n\n        // power levels\n        var powerLevels = this._getPowerLevels();\n        if (powerLevels) {\n            promises.push(MatrixClientPeg.get().sendStateEvent(\n                roomId, \"m.room.power_levels\", powerLevels, \"\"\n            ));\n        }\n\n        // tags\n        if (this.state.tags_changed) {\n            var tagDiffs = ObjectUtils.getKeyValueArrayDiffs(originalState.tags, this.state.tags);\n            // [ {place: add, key: \"m.favourite\", val: [\"yep\"]} ]\n            tagDiffs.forEach(function(diff) {\n                switch (diff.place) {\n                    case \"add\":\n                        promises.push(\n                            MatrixClientPeg.get().setRoomTag(roomId, diff.key, {})\n                        );\n                        break;\n                    case \"del\":\n                        promises.push(\n                            MatrixClientPeg.get().deleteRoomTag(roomId, diff.key)\n                        );\n                        break;\n                    default:\n                        console.error(\"Unknown tag operation: %s\", diff.place);\n                        break;\n                }\n            });\n        }\n\n        // color scheme\n        var p;\n        p = this.saveColor();\n        if (!q.isFulfilled(p)) {\n            promises.push(p);\n        }\n\n        // url preview settings\n        var ps = this.saveUrlPreviewSettings();\n        if (ps.length > 0) {\n            promises.push(ps);\n        }\n\n        // encryption\n        p = this.saveEncryption();\n        if (!q.isFulfilled(p)) {\n            promises.push(p);\n        }\n\n        console.log(\"Performing %s operations: %s\", promises.length, JSON.stringify(promises));\n        return promises;\n    },\n\n    saveAliases: function() {\n        if (!this.refs.alias_settings) { return [q()]; }\n        return this.refs.alias_settings.saveSettings();\n    },\n\n    saveColor: function() {\n        if (!this.refs.color_settings) { return q(); }\n        return this.refs.color_settings.saveSettings();\n    },\n\n    saveUrlPreviewSettings: function() {\n        if (!this.refs.url_preview_settings) { return q(); }\n        return this.refs.url_preview_settings.saveSettings();\n    },\n\n    saveEncryption: function() {\n        if (!this.refs.encrypt) { return q(); }\n\n        var encrypt = this.refs.encrypt.checked;\n        if (!encrypt) { return q(); }\n\n        var roomId = this.props.room.roomId;\n        return MatrixClientPeg.get().sendStateEvent(\n            roomId, \"m.room.encryption\",\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        );\n    },\n\n    _hasDiff: function(strA, strB) {\n        // treat undefined as an empty string because other components may blindly\n        // call setName(\"\") when there has been no diff made to the name!\n        strA = strA || \"\";\n        strB = strB || \"\";\n        return strA !== strB;\n    },\n\n    _getPowerLevels: function() {\n        if (!this.state.power_levels_changed) return undefined;\n\n        var powerLevels = this.props.room.currentState.getStateEvents('m.room.power_levels', '');\n        powerLevels = powerLevels ? powerLevels.getContent() : {};\n\n        var newPowerLevels = {\n            ban: parseInt(this.refs.ban.getValue()),\n            kick: parseInt(this.refs.kick.getValue()),\n            redact: parseInt(this.refs.redact.getValue()),\n            invite: parseInt(this.refs.invite.getValue()),\n            events_default: parseInt(this.refs.events_default.getValue()),\n            state_default: parseInt(this.refs.state_default.getValue()),\n            users_default: parseInt(this.refs.users_default.getValue()),\n            users: powerLevels.users,\n            events: powerLevels.events,\n        };\n\n        return newPowerLevels;\n    },\n\n    onPowerLevelsChanged: function() {\n        this.setState({\n            power_levels_changed: true\n        });\n    },\n\n    _yankValueFromEvent: function(stateEventType, keyName, defaultValue) {\n        // E.g.(\"m.room.name\",\"name\") would yank the \"name\" content key from \"m.room.name\"\n        var event = this.props.room.currentState.getStateEvents(stateEventType, '');\n        if (!event) {\n            return defaultValue;\n        }\n        return event.getContent()[keyName] || defaultValue;\n    },\n\n    _onHistoryRadioToggle: function(ev) {\n        var self = this;\n        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n\n        // cancel the click unless the user confirms it\n        ev.preventDefault();\n        var value = ev.target.value;\n\n        Modal.createDialog(QuestionDialog, {\n            title: \"Privacy warning\",\n            description:\n                <div>\n                    Changes to who can read history will only apply to future messages in this room.<br/>\n                    The visibility of existing history will be unchanged.\n                </div>,\n            button: \"Continue\",\n            onFinished: function(confirmed) {\n                if (confirmed) {\n                    self.setState({\n                        history_visibility: value\n                    });\n                }\n            },\n        });\n    },\n\n    _onRoomAccessRadioToggle: function(ev) {\n\n        //                         join_rule\n        //                      INVITE  |  PUBLIC\n        //        ----------------------+----------------\n        // guest  CAN_JOIN   | inv_only | pub_with_guest\n        // access ----------------------+----------------\n        //        FORBIDDEN  | inv_only | pub_no_guest\n        //        ----------------------+----------------\n\n        switch (ev.target.value) {\n            case \"invite_only\":\n                this.setState({\n                    join_rule: \"invite\",\n                    // we always set guests can_join here as it makes no sense to have\n                    // an invite-only room that guests can't join.  If you explicitly\n                    // invite them, you clearly want them to join, whether they're a\n                    // guest or not.  In practice, guest_access should probably have\n                    // been implemented as part of the join_rules enum.\n                    guest_access: \"can_join\",\n                });\n                break;\n            case \"public_no_guests\":\n                this.setState({\n                    join_rule: \"public\",\n                    guest_access: \"forbidden\",\n                });\n                break;\n            case \"public_with_guests\":\n                this.setState({\n                    join_rule: \"public\",\n                    guest_access: \"can_join\",\n                });\n                break;\n        }\n    },\n\n    _onToggle: function(keyName, checkedValue, uncheckedValue, ev) {\n        console.log(\"Checkbox toggle: %s %s\", keyName, ev.target.checked);\n        var state = {};\n        state[keyName] = ev.target.checked ? checkedValue : uncheckedValue;\n        this.setState(state);\n    },\n\n    _onTagChange: function(tagName, event) {\n        if (event.target.checked) {\n            if (tagName === 'm.favourite') {\n                delete this.state.tags['m.lowpriority'];\n            }\n            else if (tagName === 'm.lowpriority') {\n                delete this.state.tags['m.favourite'];\n            }\n\n            this.state.tags[tagName] = this.state.tags[tagName] || [\"yep\"];\n        }\n        else {\n            delete this.state.tags[tagName];\n        }\n\n        this.setState({\n            tags: this.state.tags,\n            tags_changed: true\n        });\n    },\n\n    mayChangeRoomAccess: function() {\n        var cli = MatrixClientPeg.get();\n        var roomState = this.props.room.currentState;\n        return (roomState.mayClientSendStateEvent(\"m.room.join_rules\", cli) &&\n                roomState.mayClientSendStateEvent(\"m.room.guest_access\", cli));\n    },\n\n    onManageIntegrations(ev) {\n        ev.preventDefault();\n        var IntegrationsManager = sdk.getComponent(\"views.settings.IntegrationsManager\");\n        Modal.createDialog(IntegrationsManager, {\n            src: this.scalarClient.hasCredentials() ?\n                    this.scalarClient.getScalarInterfaceUrlForRoom(this.props.room.roomId) :\n                    null,\n            onFinished: ()=>{\n                if (this._calcSavePromises().length === 0) {\n                    this.props.onCancelClick(ev);\n                }\n            },\n        }, \"mx_IntegrationsManager\");\n    },\n\n    onShowIntegrationsError(ev) {\n        ev.preventDefault();\n        this.setState({\n            showIntegrationsError: !this.state.showIntegrationsError,\n        });\n    },\n\n    onLeaveClick() {\n        dis.dispatch({\n            action: 'leave_room',\n            room_id: this.props.room.roomId,\n        });\n    },\n\n    onForgetClick() {\n        // FIXME: duplicated with RoomTagContextualMenu (and dead code in RoomView)\n        MatrixClientPeg.get().forget(this.props.room.roomId).done(function() {\n            dis.dispatch({ action: 'view_next_room' });\n        }, function(err) {\n            var errCode = err.errcode || \"unknown error code\";\n            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n            Modal.createDialog(ErrorDialog, {\n                title: \"Error\",\n                description: `Failed to forget room (${errCode})`\n            });\n        });\n    },\n\n    onEnableEncryptionClick() {\n        if (!this.refs.encrypt.checked) return;\n\n        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n        Modal.createDialog(QuestionDialog, {\n            title: \"Warning!\",\n            description: (\n                <div>\n                    <p>End-to-end encryption is in beta and may not be reliable.</p>\n                    <p>You should <b>not</b> yet trust it to secure data.</p>\n                    <p>Devices will <b>not</b> yet be able to decrypt history from before they joined the room.</p>\n                    <p>Once encryption is enabled for a room it <b>cannot</b> be turned off again (for now).</p>\n                    <p>Encrypted messages will not be visible on clients that do not yet implement encryption.</p>\n                </div>\n            ),\n            onFinished: confirm=>{\n                if (!confirm) {\n                    this.refs.encrypt.checked = false;\n                }\n            },\n        });\n    },\n\n    _renderEncryptionSection: function() {\n        var cli = MatrixClientPeg.get();\n        var roomState = this.props.room.currentState;\n        var isEncrypted = cli.isRoomEncrypted(this.props.room.roomId);\n\n        if (!isEncrypted &&\n                roomState.mayClientSendStateEvent(\"m.room.encryption\", cli)) {\n            return (\n                <label>\n                    <input type=\"checkbox\" ref=\"encrypt\" onClick={ this.onEnableEncryptionClick }/>\n                    <img className=\"mx_RoomSettings_e2eIcon\" src=\"img/e2e-unencrypted.svg\" width=\"12\" height=\"12\" />\n                    Enable encryption (warning: cannot be disabled again!)\n                </label>\n            );\n        }\n        else {\n            return (\n                <label>\n                { isEncrypted\n                  ? <img className=\"mx_RoomSettings_e2eIcon\" src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\" />\n                  : <img className=\"mx_RoomSettings_e2eIcon\" src=\"img/e2e-unencrypted.svg\" width=\"12\" height=\"12\" />\n                }\n                Encryption is { isEncrypted ? \"\" : \"not \" } enabled in this room.\n                </label>\n            );\n        }\n    },\n\n    render: function() {\n        // TODO: go through greying out things you don't have permission to change\n        // (or turning them into informative stuff)\n\n        var AliasSettings = sdk.getComponent(\"room_settings.AliasSettings\");\n        var ColorSettings = sdk.getComponent(\"room_settings.ColorSettings\");\n        var UrlPreviewSettings = sdk.getComponent(\"room_settings.UrlPreviewSettings\");\n        var EditableText = sdk.getComponent('elements.EditableText');\n        var PowerSelector = sdk.getComponent('elements.PowerSelector');\n        var Loader = sdk.getComponent(\"elements.Spinner\");\n\n        var cli = MatrixClientPeg.get();\n        var roomState = this.props.room.currentState;\n        var user_id = cli.credentials.userId;\n\n        var power_level_event = roomState.getStateEvents('m.room.power_levels', '');\n        var power_levels = power_level_event ? power_level_event.getContent() : {};\n        var events_levels = power_levels.events || {};\n        var user_levels = power_levels.users || {};\n\n        var ban_level = parseIntWithDefault(power_levels.ban, 50);\n        var kick_level = parseIntWithDefault(power_levels.kick, 50);\n        var redact_level = parseIntWithDefault(power_levels.redact, 50);\n        var invite_level = parseIntWithDefault(power_levels.invite, 50);\n        var send_level = parseIntWithDefault(power_levels.events_default, 0);\n        var state_level = power_level_event ? parseIntWithDefault(power_levels.state_default, 50) : 0;\n        var default_user_level = parseIntWithDefault(power_levels.users_default, 0);\n\n        var current_user_level = user_levels[user_id];\n        if (current_user_level === undefined) {\n            current_user_level = default_user_level;\n        }\n\n        var can_change_levels = roomState.mayClientSendStateEvent(\"m.room.power_levels\", cli);\n\n        var canSetTag = !cli.isGuest();\n\n        var self = this;\n\n        var userLevelsSection;\n        if (Object.keys(user_levels).length) {\n            userLevelsSection =\n                <div>\n                    <h3>Privileged Users</h3>\n                    <ul className=\"mx_RoomSettings_userLevels\">\n                        {Object.keys(user_levels).map(function(user, i) {\n                            return (\n                                <li className=\"mx_RoomSettings_userLevel\" key={user}>\n                                    { user } is a <PowerSelector value={ user_levels[user] } disabled={true}/>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>;\n        }\n        else {\n            userLevelsSection = <div>No users have specific privileges in this room.</div>;\n        }\n\n        var banned = this.props.room.getMembersWithMembership(\"ban\");\n        var bannedUsersSection;\n        if (banned.length) {\n            bannedUsersSection =\n                <div>\n                    <h3>Banned users</h3>\n                    <ul className=\"mx_RoomSettings_banned\">\n                        {banned.map(function(member, i) {\n                            return (\n                                <li key={i}>\n                                    {member.userId}\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>;\n        }\n\n        var unfederatableSection;\n        if (this._yankValueFromEvent(\"m.room.create\", \"m.federate\") === false) {\n             unfederatableSection = (\n                <div className=\"mx_RoomSettings_powerLevel\">\n                Ths room is not accessible by remote Matrix servers.\n                </div>\n            );\n        }\n\n        var leaveButton = null;\n        var myMember = this.props.room.getMember(user_id);\n        if (myMember) {\n            if (myMember.membership === \"join\") {\n                leaveButton = (\n                    <div className=\"mx_RoomSettings_leaveButton\" onClick={ this.onLeaveClick }>\n                        Leave room\n                    </div>\n                );\n            }\n            else if (myMember.membership === \"leave\") {\n                leaveButton = (\n                    <div className=\"mx_RoomSettings_leaveButton\" onClick={ this.onForgetClick }>\n                        Forget room\n                    </div>\n                );\n            }\n        }\n\n        // TODO: support editing custom events_levels\n        // TODO: support editing custom user_levels\n\n        var tags = [\n            { name: \"m.favourite\", label: \"Favourite\", ref: \"tag_favourite\" },\n            { name: \"m.lowpriority\", label: \"Low priority\", ref: \"tag_lowpriority\" },\n        ];\n\n        Object.keys(this.state.tags).sort().forEach(function(tagName) {\n            if (tagName !== 'm.favourite' && tagName !== 'm.lowpriority') {\n                tags.push({ name: tagName, label: tagName });\n            }\n        });\n\n        var tagsSection = null;\n        if (canSetTag || self.state.tags) {\n            var tagsSection =\n                <div className=\"mx_RoomSettings_tags\">\n                    Tagged as: { canSetTag ?\n                        (tags.map(function(tag, i) {\n                            return (<label key={ i }>\n                                        <input type=\"checkbox\"\n                                               ref={ tag.ref }\n                                               checked={ tag.name in self.state.tags }\n                                               onChange={ self._onTagChange.bind(self, tag.name) }/>\n                                        { tag.label }\n                                    </label>);\n                        })) : (self.state.tags && self.state.tags.join) ? self.state.tags.join(\", \") : \"\"\n                    }\n                </div>;\n        }\n\n        // If there is no history_visibility, it is assumed to be 'shared'.\n        // http://matrix.org/docs/spec/r0.0.0/client_server.html#id31\n        var historyVisibility = this.state.history_visibility || \"shared\";\n\n        var addressWarning;\n        var aliasEvents = this.props.room.currentState.getStateEvents('m.room.aliases') || [];\n        var aliasCount = 0;\n        aliasEvents.forEach((event) => {\n            aliasCount += event.getContent().aliases.length;\n        });\n\n        if (this.state.join_rule === \"public\" && aliasCount == 0) {\n            addressWarning =\n                <div className=\"mx_RoomSettings_warning\">\n                    To link to a room it must have <a href=\"#addresses\">an address</a>.\n                </div>;\n        }\n\n        var inviteGuestWarning;\n        if (this.state.join_rule !== \"public\" && this.state.guest_access === \"forbidden\") {\n            inviteGuestWarning =\n                <div className=\"mx_RoomSettings_warning\">\n                    Guests cannot join this room even if explicitly invited. <a href=\"#\" onClick={ (e) => {\n                        this.setState({ join_rule: \"invite\", guest_access: \"can_join\" });\n                        e.preventDefault();\n                    }}>Click here to fix</a>.\n                </div>;\n        }\n\n        var integrationsButton;\n        var integrationsError;\n        if (this.state.showIntegrationsError && this.state.scalar_error) {\n            console.error(this.state.scalar_error);\n            integrationsError = (\n                <span className=\"mx_RoomSettings_integrationsButton_errorPopup\">\n                    Could not connect to the integration server\n                </span>\n            );\n        }\n\n        if (this.scalarClient.hasCredentials()) {\n            integrationsButton = (\n                    <div className=\"mx_RoomSettings_integrationsButton\" onClick={ this.onManageIntegrations }>\n                    Manage Integrations\n                </div>\n            );\n        } else if (this.state.scalar_error) {\n            integrationsButton = (\n                    <div className=\"mx_RoomSettings_integrationsButton_error\" onClick={ this.onShowIntegrationsError }>\n                    Integrations Error <img src=\"img/warning.svg\" width=\"17\"/>\n                    { integrationsError }\n                </div>\n            );\n        } else {\n            integrationsButton = (\n                    <div className=\"mx_RoomSettings_integrationsButton\" style={{ opacity: 0.5 }}>\n                    Manage Integrations\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"mx_RoomSettings\">\n\n                { leaveButton }\n                { integrationsButton }\n\n                { tagsSection }\n\n                <div className=\"mx_RoomSettings_toggles\">\n                    <div className=\"mx_RoomSettings_settings\">\n                        <h3>Who can access this room?</h3>\n                        { inviteGuestWarning }\n                        <label>\n                            <input type=\"radio\" name=\"roomVis\" value=\"invite_only\"\n                                disabled={ !this.mayChangeRoomAccess() }\n                                onChange={this._onRoomAccessRadioToggle}\n                                checked={this.state.join_rule !== \"public\"}/>\n                            Only people who have been invited\n                        </label>\n                        <label>\n                            <input type=\"radio\" name=\"roomVis\" value=\"public_no_guests\"\n                                disabled={ !this.mayChangeRoomAccess() }\n                                onChange={this._onRoomAccessRadioToggle}\n                                checked={this.state.join_rule === \"public\" && this.state.guest_access !== \"can_join\"}/>\n                            Anyone who knows the room's link, apart from guests\n                        </label>\n                        <label>\n                            <input type=\"radio\" name=\"roomVis\" value=\"public_with_guests\"\n                                disabled={ !this.mayChangeRoomAccess() }\n                                onChange={this._onRoomAccessRadioToggle}\n                                checked={this.state.join_rule === \"public\" && this.state.guest_access === \"can_join\"}/>\n                            Anyone who knows the room's link, including guests\n                        </label>\n                        { addressWarning }\n                        <br/>\n                        { this._renderEncryptionSection() }\n                        <label>\n                            <input type=\"checkbox\" disabled={ !roomState.mayClientSendStateEvent(\"m.room.aliases\", cli) }\n                                   onChange={ this._onToggle.bind(this, \"isRoomPublished\", true, false)}\n                                   checked={this.state.isRoomPublished}/>\n                            List this room in { MatrixClientPeg.get().getDomain() }'s room directory?\n                        </label>\n                    </div>\n                    <div className=\"mx_RoomSettings_settings\">\n                        <h3>Who can read history?</h3>\n                        <label>\n                            <input type=\"radio\" name=\"historyVis\" value=\"world_readable\"\n                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }\n                                    checked={historyVisibility === \"world_readable\"}\n                                    onChange={this._onHistoryRadioToggle} />\n                            Anyone\n                        </label>\n                        <label>\n                            <input type=\"radio\" name=\"historyVis\" value=\"shared\"\n                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }\n                                    checked={historyVisibility === \"shared\"}\n                                    onChange={this._onHistoryRadioToggle} />\n                            Members only (since the point in time of selecting this option)\n                        </label>\n                        <label>\n                            <input type=\"radio\" name=\"historyVis\" value=\"invited\"\n                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }\n                                    checked={historyVisibility === \"invited\"}\n                                    onChange={this._onHistoryRadioToggle} />\n                            Members only (since they were invited)\n                        </label>\n                        <label >\n                            <input type=\"radio\" name=\"historyVis\" value=\"joined\"\n                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }\n                                    checked={historyVisibility === \"joined\"}\n                                    onChange={this._onHistoryRadioToggle} />\n                            Members only (since they joined)\n                        </label>\n                    </div>\n                </div>\n\n\n                <div>\n                    <h3>Room Colour</h3>\n                    <ColorSettings ref=\"color_settings\" room={this.props.room} />\n                </div>\n\n                <a id=\"addresses\"/>\n\n                <AliasSettings ref=\"alias_settings\"\n                    roomId={this.props.room.roomId}\n                    canSetCanonicalAlias={ roomState.mayClientSendStateEvent(\"m.room.canonical_alias\", cli) }\n                    canSetAliases={\n                        true\n                        /* Originally, we arbitrarily restricted creating aliases to room admins: roomState.mayClientSendStateEvent(\"m.room.aliases\", cli) */\n                    }\n                    canonicalAliasEvent={this.props.room.currentState.getStateEvents('m.room.canonical_alias', '')}\n                    aliasEvents={this.props.room.currentState.getStateEvents('m.room.aliases')} />\n\n                <UrlPreviewSettings ref=\"url_preview_settings\" room={this.props.room} />\n\n                <h3>Permissions</h3>\n                <div className=\"mx_RoomSettings_powerLevels mx_RoomSettings_settings\">\n                    <div className=\"mx_RoomSettings_powerLevel\">\n                        <span className=\"mx_RoomSettings_powerLevelKey\">The default role for new room members is </span>\n                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>\n                    </div>\n                    <div className=\"mx_RoomSettings_powerLevel\">\n                        <span className=\"mx_RoomSettings_powerLevelKey\">To send messages, you must be a </span>\n                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>\n                    </div>\n                    <div className=\"mx_RoomSettings_powerLevel\">\n                        <span className=\"mx_RoomSettings_powerLevelKey\">To invite users into the room, you must be a </span>\n                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>\n                    </div>\n                    <div className=\"mx_RoomSettings_powerLevel\">\n                        <span className=\"mx_RoomSettings_powerLevelKey\">To configure the room, you must be a </span>\n                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>\n                    </div>\n                    <div className=\"mx_RoomSettings_powerLevel\">\n                        <span className=\"mx_RoomSettings_powerLevelKey\">To kick users, you must be a </span>\n                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>\n                    </div>\n                    <div className=\"mx_RoomSettings_powerLevel\">\n                        <span className=\"mx_RoomSettings_powerLevelKey\">To ban users, you must be a </span>\n                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>\n                    </div>\n                    <div className=\"mx_RoomSettings_powerLevel\">\n                        <span className=\"mx_RoomSettings_powerLevelKey\">To redact messages, you must be a </span>\n                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>\n                    </div>\n\n                    {Object.keys(events_levels).map(function(event_type, i) {\n                        return (\n                            <div className=\"mx_RoomSettings_powerLevel\" key={event_type}>\n                                <span className=\"mx_RoomSettings_powerLevelKey\">To send events of type <code>{ event_type }</code>, you must be a </span>\n                                <PowerSelector value={ events_levels[event_type] } controlled={false} disabled={true} onChange={self.onPowerLevelsChanged}/>\n                            </div>\n                        );\n                    })}\n\n                { unfederatableSection }\n                </div>\n\n                { userLevelsSection }\n\n                { bannedUsersSection }\n\n                <h3>Advanced</h3>\n                <div className=\"mx_RoomSettings_settings\">\n                    This room's internal ID is <code>{ this.props.room.roomId }</code>\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/RoomTile.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'ReactDOM' is assigned a value but never used.","line":20,"column":5,"nodeType":"Identifier","source":"var ReactDOM = require(\"react-dom\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var classNames = require('classnames');","fix":{"range":[650,653],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[690,693],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[732,735],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[841,844],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var ContextualMenu = require('../../structures/ContextualMenu');","fix":{"range":[878,881],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var RoomNotifs = require('../../../RoomNotifs');","fix":{"range":[943,946],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var FormattingUtils = require('../../../utils/FormattingUtils');","fix":{"range":[992,995],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","source":"var UserSettingsStore = require('../../../UserSettingsStore');","fix":{"range":[1118,1121],"text":"let"}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'hover'.","line":57,"column":13,"nodeType":"Identifier","source":"            hover : false,","fix":{"range":[1934,1935],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'badgeHover'.","line":58,"column":13,"nodeType":"Identifier","source":"            badgeHover : false,","fix":{"range":[1966,1967],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":75,"column":9,"nodeType":"VariableDeclaration","source":"        var dmRooms = DMRoomMap.shared().getUserIdForRoomId(roomId);","fix":{"range":[2516,2519],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":96,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[3100,3103],"text":"let"}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'hover'.","line":110,"column":26,"nodeType":"Identifier","source":"        this.setState( { hover : true });","fix":{"range":[3463,3464],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'hover'.","line":115,"column":26,"nodeType":"Identifier","source":"        this.setState( { hover : false });","fix":{"range":[3578,3579],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'badgeHover'.","line":123,"column":30,"nodeType":"Identifier","source":"            this.setState( { badgeHover : true } );","fix":{"range":[3894,3895],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'badgeHover'.","line":128,"column":26,"nodeType":"Identifier","source":"        this.setState( { badgeHover : false } );","fix":{"range":[3996,3997],"text":""}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":133,"column":47,"nodeType":"BlockStatement","source":"        if (!MatrixClientPeg.get().isGuest()) {","fix":{"range":[4160,4162],"text":"\n"}},{"ruleId":"max-len","severity":1,"message":"Line 140 exceeds the maximum line length of 90.","line":140,"column":1,"nodeType":"Program","source":"            var NotificationStateMenu = sdk.getComponent('context_menus.NotificationStateContextMenu');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":140,"column":13,"nodeType":"VariableDeclaration","source":"            var NotificationStateMenu = sdk.getComponent('context_menus.NotificationStateContextMenu');","fix":{"range":[4346,4349],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":141,"column":13,"nodeType":"VariableDeclaration","source":"            var elementRect = e.target.getBoundingClientRect();","fix":{"range":[4450,4453],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":143,"column":13,"nodeType":"VariableDeclaration","source":"            var x = elementRect.right + window.pageXOffset + 3;","fix":{"range":[4602,4605],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 144 exceeds the maximum line length of 90.","line":144,"column":1,"nodeType":"Program","source":"            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 53;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":144,"column":13,"nodeType":"VariableDeclaration","source":"            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 53;","fix":{"range":[4666,4669],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":145,"column":13,"nodeType":"VariableDeclaration","source":"            var self = this;","fix":{"range":[4758,4761],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":156,"column":18,"nodeType":"Property","source":"                }","fix":{"range":[5200,5200],"text":","}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":166,"column":72,"nodeType":"BlockStatement","source":"        if (!MatrixClientPeg.get().isGuest() && !this.props.collapsed) {","fix":{"range":[5551,5553],"text":"\n"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":173,"column":13,"nodeType":"VariableDeclaration","source":"            var RoomTagMenu = sdk.getComponent('context_menus.RoomTagContextMenu');","fix":{"range":[5737,5740],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":174,"column":13,"nodeType":"VariableDeclaration","source":"            var elementRect = e.target.getBoundingClientRect();","fix":{"range":[5821,5824],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":176,"column":13,"nodeType":"VariableDeclaration","source":"            var x = elementRect.right + window.pageXOffset + 3;","fix":{"range":[5973,5976],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 177 exceeds the maximum line length of 90.","line":177,"column":1,"nodeType":"Program","source":"            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 19;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":177,"column":13,"nodeType":"VariableDeclaration","source":"            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 19;","fix":{"range":[6037,6040],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":178,"column":13,"nodeType":"VariableDeclaration","source":"            var self = this;","fix":{"range":[6129,6132],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 182 exceeds the maximum line length of 90.","line":182,"column":1,"nodeType":"Program","source":"                menuColour: UserSettingsStore.getSyncedSettings().theme === 'dark' ? \"#2d2d2d\" : \"#FFFFFF\","},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":188,"column":18,"nodeType":"Property","source":"                }","fix":{"range":[6593,6593],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":197,"column":9,"nodeType":"VariableDeclaration","source":"        var myUserId = MatrixClientPeg.get().credentials.userId;","fix":{"range":[6809,6812],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":198,"column":9,"nodeType":"VariableDeclaration","source":"        var me = this.props.room.currentState.members[myUserId];","fix":{"range":[6874,6877],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":200,"column":9,"nodeType":"VariableDeclaration","source":"        var notificationCount = this.props.room.getUnreadNotificationCount();","fix":{"range":[6940,6943],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":207,"column":9,"nodeType":"VariableDeclaration","source":"        var classes = classNames({","fix":{"range":[7331,7334],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":218,"column":9,"nodeType":"VariableDeclaration","source":"        var avatarClasses = classNames({","fix":{"range":[7821,7824],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":222,"column":9,"nodeType":"VariableDeclaration","source":"        var avatarContainerClasses = classNames({","fix":{"range":[7915,7918],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":227,"column":9,"nodeType":"VariableDeclaration","source":"        var badgeClasses = classNames({","fix":{"range":[8098,8101],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 229 exceeds the maximum line length of 90.","line":229,"column":1,"nodeType":"Program","source":"            'mx_RoomTile_badgeButton': this.state.badgeHover || this.state.notificationTagMenu,"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":234,"column":9,"nodeType":"VariableDeclaration","source":"        var name = this.props.room.name || this.props.room.roomId;","fix":{"range":[8430,8433],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":237,"column":9,"nodeType":"VariableDeclaration","source":"        var badge;","fix":{"range":[8607,8610],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":238,"column":9,"nodeType":"VariableDeclaration","source":"        var badgeContent;","fix":{"range":[8626,8629],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":243,"column":13,"nodeType":"VariableDeclaration","source":"            var limitedCount = FormattingUtils.formatCount(notificationCount);","fix":{"range":[8806,8809],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 249 exceeds the maximum line length of 90.","line":249,"column":1,"nodeType":"Program","source":"        badge = <div className={ badgeClasses } onClick={this.onBadgeClicked}>{ badgeContent }</div>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":252,"column":9,"nodeType":"VariableDeclaration","source":"        var label;","fix":{"range":[9182,9185],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":253,"column":9,"nodeType":"VariableDeclaration","source":"        var tooltip;","fix":{"range":[9201,9204],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":255,"column":13,"nodeType":"VariableDeclaration","source":"            var nameClasses = classNames({","fix":{"range":[9263,9266],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 258 exceeds the maximum line length of 90.","line":258,"column":1,"nodeType":"Program","source":"                'mx_RoomTile_badgeShown': badges || this.state.badgeHover || this.state.notificationTagMenu,"},{"ruleId":"prefer-const","severity":1,"message":"'nameSelected' is never reassigned. Use 'const' instead.","line":262,"column":21,"nodeType":"Identifier","source":"                let nameSelected = <EmojiText>{name}</EmojiText>;","fix":{"range":[9576,9579],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 264 exceeds the maximum line length of 90.","line":264,"column":1,"nodeType":"Program","source":"                label = <div title={ name } className={ nameClasses }>{ nameSelected }</div>;"},{"ruleId":"max-len","severity":1,"message":"Line 266 exceeds the maximum line length of 90.","line":266,"column":1,"nodeType":"Program","source":"                label = <EmojiText element=\"div\" title={ name } className={ nameClasses }>{name}</EmojiText>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":269,"column":13,"nodeType":"VariableDeclaration","source":"            var RoomTooltip = sdk.getComponent(\"rooms.RoomTooltip\");","fix":{"range":[9917,9920],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 270 exceeds the maximum line length of 90.","line":270,"column":1,"nodeType":"Program","source":"            tooltip = <RoomTooltip className=\"mx_RoomTile_tooltip\" room={this.props.room} />;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":279,"column":9,"nodeType":"VariableDeclaration","source":"        var RoomAvatar = sdk.getComponent('avatars.RoomAvatar');","fix":{"range":[10343,10346],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":281,"column":9,"nodeType":"VariableDeclaration","source":"        var directMessageIndicator;","fix":{"range":[10409,10412],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 283 exceeds the maximum line length of 90.","line":283,"column":1,"nodeType":"Program","source":"         directMessageIndicator = <img src=\"img/icon_person.svg\" className=\"mx_RoomTile_dm\" width=\"11\" height=\"13\" alt=\"dm\"/>;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":288,"column":9,"nodeType":"VariableDeclaration","source":"        var isDragging = this.props.isDragging;","fix":{"range":[10754,10757],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'isDragging' is assigned a value but never used.","line":288,"column":13,"nodeType":"Identifier","source":"        var isDragging = this.props.isDragging;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":289,"column":9,"nodeType":"VariableDeclaration","source":"        var connectDragSource = this.props.connectDragSource;","fix":{"range":[10802,10805],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":290,"column":9,"nodeType":"VariableDeclaration","source":"        var connectDropTarget = this.props.connectDropTarget;","fix":{"range":[10864,10867],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 295 exceeds the maximum line length of 90.","line":295,"column":1,"nodeType":"Program","source":"            <AccessibleButton className={classes} tabIndex=\"0\" onClick={this.onClick} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>"},{"ruleId":"max-len","severity":1,"message":"Line 297 exceeds the maximum line length of 90.","line":297,"column":1,"nodeType":"Program","source":"                    <div className=\"mx_RoomTile_avatar_menu\" onClick={this.onAvatarClicked}>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":318,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[12028,12028],"text":","}}],"errorCount":5,"warningCount":64,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar ReactDOM = require(\"react-dom\");\nvar classNames = require('classnames');\nvar dis = require(\"../../../dispatcher\");\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nimport DMRoomMap from '../../../utils/DMRoomMap';\nvar sdk = require('../../../index');\nvar ContextualMenu = require('../../structures/ContextualMenu');\nvar RoomNotifs = require('../../../RoomNotifs');\nvar FormattingUtils = require('../../../utils/FormattingUtils');\nimport AccessibleButton from '../elements/AccessibleButton';\nvar UserSettingsStore = require('../../../UserSettingsStore');\n\nmodule.exports = React.createClass({\n    displayName: 'RoomTile',\n\n    propTypes: {\n        connectDragSource: React.PropTypes.func,\n        connectDropTarget: React.PropTypes.func,\n        isDragging: React.PropTypes.bool,\n\n        room: React.PropTypes.object.isRequired,\n        collapsed: React.PropTypes.bool.isRequired,\n        selected: React.PropTypes.bool.isRequired,\n        unread: React.PropTypes.bool.isRequired,\n        highlight: React.PropTypes.bool.isRequired,\n        isInvite: React.PropTypes.bool.isRequired,\n        incomingCall: React.PropTypes.object,\n    },\n\n    getDefaultProps: function() {\n        return {\n            isDragging: false,\n        };\n    },\n\n    getInitialState: function() {\n        return({\n            hover : false,\n            badgeHover : false,\n            notificationTagMenu: false,\n            roomTagMenu: false,\n            notifState: RoomNotifs.getRoomNotifsState(this.props.room.roomId),\n        });\n    },\n\n    _shouldShowNotifBadge: function() {\n        const showBadgeInStates = [RoomNotifs.ALL_MESSAGES, RoomNotifs.ALL_MESSAGES_LOUD];\n        return showBadgeInStates.indexOf(this.state.notifState) > -1;\n    },\n\n    _shouldShowMentionBadge: function() {\n        return this.state.notifState != RoomNotifs.MUTE;\n    },\n\n    _isDirectMessageRoom: function(roomId) {\n        var dmRooms = DMRoomMap.shared().getUserIdForRoomId(roomId);\n        if (dmRooms) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    onAccountData: function(accountDataEvent) {\n        if (accountDataEvent.getType() == 'm.push_rules') {\n            this.setState({\n                notifState: RoomNotifs.getRoomNotifsState(this.props.room.roomId),\n            });\n        }\n    },\n\n    componentWillMount: function() {\n        MatrixClientPeg.get().on(\"accountData\", this.onAccountData);\n    },\n\n    componentWillUnmount: function() {\n        var cli = MatrixClientPeg.get();\n        if (cli) {\n            MatrixClientPeg.get().removeListener(\"accountData\", this.onAccountData);\n        }\n    },\n\n    onClick: function() {\n        dis.dispatch({\n            action: 'view_room',\n            room_id: this.props.room.roomId,\n        });\n    },\n\n    onMouseEnter: function() {\n        this.setState( { hover : true });\n        this.badgeOnMouseEnter();\n    },\n\n    onMouseLeave: function() {\n        this.setState( { hover : false });\n        this.badgeOnMouseLeave();\n    },\n\n    badgeOnMouseEnter: function() {\n        // Only allow non-guests to access the context menu\n        // and only change it if it needs to change\n        if (!MatrixClientPeg.get().isGuest() && !this.state.badgeHover) {\n            this.setState( { badgeHover : true } );\n        }\n    },\n\n    badgeOnMouseLeave: function() {\n        this.setState( { badgeHover : false } );\n    },\n\n    onBadgeClicked: function(e) {\n        // Only allow none guests to access the context menu\n        if (!MatrixClientPeg.get().isGuest()) {\n\n            // If the badge is clicked, then no longer show tooltip\n            if (this.props.collapsed) {\n                this.setState({ hover: false });\n            }\n\n            var NotificationStateMenu = sdk.getComponent('context_menus.NotificationStateContextMenu');\n            var elementRect = e.target.getBoundingClientRect();\n            // The window X and Y offsets are to adjust position when zoomed in to page\n            var x = elementRect.right + window.pageXOffset + 3;\n            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 53;\n            var self = this;\n            ContextualMenu.createMenu(NotificationStateMenu, {\n                menuWidth: 188,\n                menuHeight: 126,\n                chevronOffset: 45,\n                left: x,\n                top: y,\n                room: this.props.room,\n                onFinished: function() {\n                    self.setState({ notificationTagMenu: false });\n                    self.props.refreshSubList();\n                }\n            });\n            this.setState({ notificationTagMenu: true });\n        }\n        // Prevent the RoomTile onClick event firing as well\n        e.stopPropagation();\n    },\n\n    onAvatarClicked: function(e) {\n        // Only allow none guests to access the context menu\n        if (!MatrixClientPeg.get().isGuest() && !this.props.collapsed) {\n\n            // If the badge is clicked, then no longer show tooltip\n            if (this.props.collapsed) {\n                this.setState({ hover: false });\n            }\n\n            var RoomTagMenu = sdk.getComponent('context_menus.RoomTagContextMenu');\n            var elementRect = e.target.getBoundingClientRect();\n            // The window X and Y offsets are to adjust position when zoomed in to page\n            var x = elementRect.right + window.pageXOffset + 3;\n            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 19;\n            var self = this;\n            ContextualMenu.createMenu(RoomTagMenu, {\n                chevronOffset: 10,\n                // XXX: fix horrid hardcoding\n                menuColour: UserSettingsStore.getSyncedSettings().theme === 'dark' ? \"#2d2d2d\" : \"#FFFFFF\",\n                left: x,\n                top: y,\n                room: this.props.room,\n                onFinished: function() {\n                    self.setState({ roomTagMenu: false });\n                }\n            });\n            this.setState({ roomTagMenu: true });\n            // Prevent the RoomTile onClick event firing as well\n            e.stopPropagation();\n        }\n    },\n\n    render: function() {\n        var myUserId = MatrixClientPeg.get().credentials.userId;\n        var me = this.props.room.currentState.members[myUserId];\n\n        var notificationCount = this.props.room.getUnreadNotificationCount();\n        // var highlightCount = this.props.room.getUnreadNotificationCount(\"highlight\");\n\n        const notifBadges = notificationCount > 0 && this._shouldShowNotifBadge();\n        const mentionBadges = this.props.highlight && this._shouldShowMentionBadge();\n        const badges = notifBadges || mentionBadges;\n\n        var classes = classNames({\n            'mx_RoomTile': true,\n            'mx_RoomTile_selected': this.props.selected,\n            'mx_RoomTile_unread': this.props.unread,\n            'mx_RoomTile_unreadNotify': notifBadges,\n            'mx_RoomTile_highlight': mentionBadges,\n            'mx_RoomTile_invited': (me && me.membership == 'invite'),\n            'mx_RoomTile_notificationTagMenu': this.state.notificationTagMenu,\n            'mx_RoomTile_noBadges': !badges,\n        });\n\n        var avatarClasses = classNames({\n            'mx_RoomTile_avatar': true,\n        });\n\n        var avatarContainerClasses = classNames({\n            'mx_RoomTile_avatar_container': true,\n            'mx_RoomTile_avatar_roomTagMenu': this.state.roomTagMenu,\n        });\n\n        var badgeClasses = classNames({\n            'mx_RoomTile_badge': true,\n            'mx_RoomTile_badgeButton': this.state.badgeHover || this.state.notificationTagMenu,\n        });\n\n        // XXX: We should never display raw room IDs, but sometimes the\n        // room name js sdk gives is undefined (cannot repro this -- k)\n        var name = this.props.room.name || this.props.room.roomId;\n        name = name.replace(\":\", \":\\u200b\"); // add a zero-width space to allow linewrapping after the colon\n\n        var badge;\n        var badgeContent;\n\n        if (this.state.badgeHover || this.state.notificationTagMenu) {\n            badgeContent = \"\\u00B7\\u00B7\\u00B7\";\n        } else if (badges) {\n            var limitedCount = FormattingUtils.formatCount(notificationCount);\n            badgeContent = notificationCount ? limitedCount : '!';\n        } else {\n            badgeContent = '\\u200B';\n        }\n\n        badge = <div className={ badgeClasses } onClick={this.onBadgeClicked}>{ badgeContent }</div>;\n\n        const EmojiText = sdk.getComponent('elements.EmojiText');\n        var label;\n        var tooltip;\n        if (!this.props.collapsed) {\n            var nameClasses = classNames({\n                'mx_RoomTile_name': true,\n                'mx_RoomTile_invite': this.props.isInvite,\n                'mx_RoomTile_badgeShown': badges || this.state.badgeHover || this.state.notificationTagMenu,\n            });\n\n            if (this.props.selected) {\n                let nameSelected = <EmojiText>{name}</EmojiText>;\n\n                label = <div title={ name } className={ nameClasses }>{ nameSelected }</div>;\n            } else {\n                label = <EmojiText element=\"div\" title={ name } className={ nameClasses }>{name}</EmojiText>;\n            }\n        } else if (this.state.hover) {\n            var RoomTooltip = sdk.getComponent(\"rooms.RoomTooltip\");\n            tooltip = <RoomTooltip className=\"mx_RoomTile_tooltip\" room={this.props.room} />;\n        }\n\n        //var incomingCallBox;\n        //if (this.props.incomingCall) {\n        //    var IncomingCallBox = sdk.getComponent(\"voip.IncomingCallBox\");\n        //    incomingCallBox = <IncomingCallBox incomingCall={ this.props.incomingCall }/>;\n        //}\n\n        var RoomAvatar = sdk.getComponent('avatars.RoomAvatar');\n\n        var directMessageIndicator;\n        if (this._isDirectMessageRoom(this.props.room.roomId)) {\n         directMessageIndicator = <img src=\"img/icon_person.svg\" className=\"mx_RoomTile_dm\" width=\"11\" height=\"13\" alt=\"dm\"/>;\n        }\n\n        // These props are injected by React DnD,\n        // as defined by your `collect` function above:\n        var isDragging = this.props.isDragging;\n        var connectDragSource = this.props.connectDragSource;\n        var connectDropTarget = this.props.connectDropTarget;\n\n\n        let ret = (\n            <div> { /* Only native elements can be wrapped in a DnD object. */}\n            <AccessibleButton className={classes} tabIndex=\"0\" onClick={this.onClick} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>\n                <div className={avatarClasses}>\n                    <div className=\"mx_RoomTile_avatar_menu\" onClick={this.onAvatarClicked}>\n                        <div className={avatarContainerClasses}>\n                            <RoomAvatar room={this.props.room} width={24} height={24} />\n                            {directMessageIndicator}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"mx_RoomTile_nameContainer\">\n                    { label }\n                    { badge }\n                </div>\n                {/* { incomingCallBox } */}\n                { tooltip }\n            </AccessibleButton>\n            </div>\n        );\n\n        if (connectDropTarget) ret = connectDropTarget(ret);\n        if (connectDragSource) ret = connectDragSource(ret);\n\n        return ret;\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/RoomTopicEditor.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[577,580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[607,610],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":9,"nodeType":"VariableDeclaration","source":"        var room = this.props.room;","fix":{"range":[838,841],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":9,"nodeType":"VariableDeclaration","source":"        var topic = room.currentState.getStateEvents('m.room.topic', '');","fix":{"range":[874,877],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":40,"column":9,"nodeType":"VariableDeclaration","source":"        var EditableText = sdk.getComponent(\"elements.EditableText\");","fix":{"range":[1128,1131],"text":"let"}}],"errorCount":0,"warningCount":5,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sdk = require('../../../index');\n\nmodule.exports = React.createClass({\n    displayName: 'RoomTopicEditor',\n\n    propTypes: {\n        room: React.PropTypes.object.isRequired,\n    },\n\n    componentWillMount: function() {\n        var room = this.props.room;\n        var topic = room.currentState.getStateEvents('m.room.topic', '');\n        this._initialTopic = topic ? topic.getContent().topic : '';\n    },\n\n    getTopic: function() {\n        return this.refs.editor.getValue();\n    },\n\n    render: function() {\n        var EditableText = sdk.getComponent(\"elements.EditableText\");\n\n        return (\n                <EditableText ref=\"editor\"\n                     className=\"mx_RoomHeader_topic mx_RoomHeader_editable\"\n                     placeholderClassName=\"mx_RoomHeader_placeholder\"\n                     placeholder=\"Add a topic\"\n                     blurToCancel={ false }\n                     initialValue={ this._initialTopic }/>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/SearchableEntityList.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[567,570],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[597,600],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MatrixClientPeg' is assigned a value but never used.","line":17,"column":5,"nodeType":"Identifier","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[656,659],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is assigned a value but never used.","line":18,"column":5,"nodeType":"Identifier","source":"var Modal = require(\"../../../Modal\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require(\"../../../index\");","fix":{"range":[695,698],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var GeminiScrollbar = require('react-gemini-scrollbar');","fix":{"range":[732,735],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var SearchableEntityList = React.createClass({","fix":{"range":[962,965],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":34,"column":43,"nodeType":"Property","source":"        truncateAt: React.PropTypes.number","fix":{"range":[1420,1420],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":44,"column":47,"nodeType":"Property","source":"            onQueryChanged: function(input) {}","fix":{"range":[1705,1705],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":53,"column":68,"nodeType":"Property","source":"            results: this.getSearchResults(\"\", this.props.entities)","fix":{"range":[1941,1941],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":60,"column":80,"nodeType":"Property","source":"            results: this.getSearchResults(this.state.query, newProps.entities)","fix":{"range":[2186,2186],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":77,"column":71,"nodeType":"Property","source":"            results: this.getSearchResults(input, this.props.entities)","fix":{"range":[2712,2712],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":82,"column":9,"nodeType":"VariableDeclaration","source":"        var q = ev.target.value;","fix":{"range":[2776,2779],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":87,"column":67,"nodeType":"Property","source":"            results: this.getSearchResults(q, this.props.entities)","fix":{"range":[3068,3068],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":114,"column":27,"nodeType":"Property","source":"            truncateAt: -1","fix":{"range":[3993,3993],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":119,"column":9,"nodeType":"VariableDeclaration","source":"        var EntityTile = sdk.getComponent(\"rooms.EntityTile\");","fix":{"range":[4087,4090],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":120,"column":9,"nodeType":"VariableDeclaration","source":"        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");","fix":{"range":[4150,4153],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 121 exceeds the maximum line length of 90.","line":121,"column":1,"nodeType":"Program","source":"        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":121,"column":9,"nodeType":"VariableDeclaration","source":"        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";","fix":{"range":[4215,4218],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":131,"column":9,"nodeType":"VariableDeclaration","source":"        var inputBox;","fix":{"range":[4641,4644],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 136 exceeds the maximum line length of 90.","line":136,"column":1,"nodeType":"Program","source":"                    <input className=\"mx_SearchableEntityList_query\" id=\"mx_SearchableEntityList_query\" type=\"text\""},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":138,"column":25,"nodeType":"JSXAttribute","source":"                        onFocus= {() => { this.setState({ focused: true }); }}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":139,"column":25,"nodeType":"JSXAttribute","source":"                        onBlur= {() => { this.setState({ focused: false }); }}"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":145,"column":9,"nodeType":"VariableDeclaration","source":"        var list;","fix":{"range":[5278,5281],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":148,"column":17,"nodeType":"VariableDeclaration","source":"                var TruncatedList = sdk.getComponent(\"elements.TruncatedList\");","fix":{"range":[5443,5446],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":158,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[6008,6021],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 177 exceeds the maximum line length of 90.","line":177,"column":1,"nodeType":"Program","source":"            <div className={ \"mx_SearchableEntityList \" + (list ? \"mx_SearchableEntityList_expanded\" : \"\") }>"},{"ruleId":"max-len","severity":1,"message":"Line 180 exceeds the maximum line length of 90.","line":180,"column":1,"nodeType":"Program","source":"                { list ? <div className=\"mx_SearchableEntityList_hrWrapper\"><hr/></div> : '' }"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":183,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[6875,6875],"text":","}}],"errorCount":12,"warningCount":18,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar React = require('react');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar Modal = require(\"../../../Modal\");\nvar sdk = require(\"../../../index\");\nvar GeminiScrollbar = require('react-gemini-scrollbar');\n\n// A list capable of displaying entities which conform to the SearchableEntity\n// interface which is an object containing getJsx(): Jsx and matches(query: string): boolean\nvar SearchableEntityList = React.createClass({\n    displayName: 'SearchableEntityList',\n\n    propTypes: {\n        searchPlaceholderText: React.PropTypes.string,\n        emptyQueryShowsAll: React.PropTypes.bool,\n        showInputBox: React.PropTypes.bool,\n        onQueryChanged: React.PropTypes.func, // fn(inputText)\n        onSubmit: React.PropTypes.func, // fn(inputText)\n        entities: React.PropTypes.array,\n        truncateAt: React.PropTypes.number\n    },\n\n    getDefaultProps: function() {\n        return {\n            showInputBox: true,\n            searchPlaceholderText: \"Search\",\n            entities: [],\n            emptyQueryShowsAll: false,\n            onSubmit: function() {},\n            onQueryChanged: function(input) {}\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            query: \"\",\n            focused: false,\n            truncateAt: this.props.truncateAt,\n            results: this.getSearchResults(\"\", this.props.entities)\n        };\n    },\n\n    componentWillReceiveProps: function(newProps) {\n        // recalculate the search results in case we got new entities\n        this.setState({\n            results: this.getSearchResults(this.state.query, newProps.entities)\n        });\n    },\n\n    componentWillUnmount: function() {\n        // pretend the query box was blanked out else filters could still be\n        // applied to other components which rely on onQueryChanged.\n        this.props.onQueryChanged(\"\");\n    },\n\n    /**\n     * Public-facing method to set the input query text to the given input.\n     * @param {string} input\n     */\n    setQuery: function(input) {\n        this.setState({\n            query: input,\n            results: this.getSearchResults(input, this.props.entities)\n        });\n    },\n\n    onQueryChanged: function(ev) {\n        var q = ev.target.value;\n        this.setState({\n            query: q,\n            // reset truncation if they back out the entire text\n            truncateAt: (q.length === 0 ? this.props.truncateAt : this.state.truncateAt),\n            results: this.getSearchResults(q, this.props.entities)\n        }, () => {\n            // invoke the callback AFTER we've flushed the new state. We need to\n            // do this because onQueryChanged can result in new props being passed\n            // to this component, which will then try to recalculate the search\n            // list. If we do this without flushing, we'll recalc with the last\n            // search term and not the current one!\n            this.props.onQueryChanged(q);\n        });\n    },\n\n    onQuerySubmit: function(ev) {\n        ev.preventDefault();\n        this.props.onSubmit(this.state.query);\n    },\n\n    getSearchResults: function(query, entities) {\n        if (!query || query.length === 0) {\n            return this.props.emptyQueryShowsAll ? entities : [];\n        }\n        return entities.filter(function(e) {\n            return e.matches(query);\n        });\n    },\n\n    _showAll: function() {\n        this.setState({\n            truncateAt: -1\n        });\n    },\n\n    _createOverflowEntity: function(overflowCount, totalCount) {\n        var EntityTile = sdk.getComponent(\"rooms.EntityTile\");\n        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");\n        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";\n        return (\n            <EntityTile className=\"mx_EntityTile_ellipsis\" avatarJsx={\n                <BaseAvatar url=\"img/ellipsis.svg\" name=\"...\" width={36} height={36} />\n            } name={text} presenceState=\"online\" suppressOnHover={true}\n            onClick={this._showAll} />\n        );\n    },\n\n    render: function() {\n        var inputBox;\n\n        if (this.props.showInputBox) {\n            inputBox = (\n                <form onSubmit={this.onQuerySubmit} autoComplete=\"off\">\n                    <input className=\"mx_SearchableEntityList_query\" id=\"mx_SearchableEntityList_query\" type=\"text\"\n                        onChange={this.onQueryChanged} value={this.state.query}\n                        onFocus= {() => { this.setState({ focused: true }); }}\n                        onBlur= {() => { this.setState({ focused: false }); }}\n                        placeholder={this.props.searchPlaceholderText} />\n                </form>\n            );\n        }\n\n        var list;\n        if (this.state.results.length > 1 || this.state.focused) {\n            if (this.props.truncateAt) { // caller wants list truncated\n                var TruncatedList = sdk.getComponent(\"elements.TruncatedList\");\n                list = (\n                    <TruncatedList className=\"mx_SearchableEntityList_list\"\n                            truncateAt={this.state.truncateAt} // use state truncation as it may be expanded\n                            createOverflowElement={this._createOverflowEntity}>\n                        {this.state.results.map((entity) => {\n                            return entity.getJsx();\n                        })}\n                    </TruncatedList>\n                );\n            }\n            else {\n                list = (\n                    <div className=\"mx_SearchableEntityList_list\">\n                        {this.state.results.map((entity) => {\n                            return entity.getJsx();\n                        })}\n                    </div>\n                );\n            }\n            list = (\n                <GeminiScrollbar autoshow={true}\n                                 className=\"mx_SearchableEntityList_listWrapper\">\n                    { list }\n                </GeminiScrollbar>\n            );\n        }\n\n        return (\n            <div className={ \"mx_SearchableEntityList \" + (list ? \"mx_SearchableEntityList_expanded\" : \"\") }>\n                { inputBox }\n                { list }\n                { list ? <div className=\"mx_SearchableEntityList_hrWrapper\"><hr/></div> : '' }\n            </div>\n        );\n    }\n});\n\n module.exports = SearchableEntityList;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/SearchResultTile.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[577,580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[607,610],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":39,"column":9,"nodeType":"VariableDeclaration","source":"        var DateSeparator = sdk.getComponent('messages.DateSeparator');","fix":{"range":[1161,1164],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":40,"column":9,"nodeType":"VariableDeclaration","source":"        var EventTile = sdk.getComponent('rooms.EventTile');","fix":{"range":[1233,1236],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":41,"column":9,"nodeType":"VariableDeclaration","source":"        var result = this.props.searchResult;","fix":{"range":[1294,1297],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":42,"column":9,"nodeType":"VariableDeclaration","source":"        var mxEv = result.context.getEvent();","fix":{"range":[1340,1343],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":43,"column":9,"nodeType":"VariableDeclaration","source":"        var eventId = mxEv.getId();","fix":{"range":[1386,1389],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":45,"column":9,"nodeType":"VariableDeclaration","source":"        var ts1 = mxEv.getTs();","fix":{"range":[1423,1426],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":46,"column":9,"nodeType":"VariableDeclaration","source":"        var ret = [<DateSeparator key={ts1 + \"-search\"} ts={ts1}/>];","fix":{"range":[1455,1458],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":48,"column":9,"nodeType":"VariableDeclaration","source":"        var timeline = result.context.getTimeline();","fix":{"range":[1525,1528],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":14,"nodeType":"VariableDeclaration","source":"        for (var j = 0; j < timeline.length; j++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":50,"column":13,"nodeType":"VariableDeclaration","source":"            var ev = timeline[j];","fix":{"range":[1634,1637],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":51,"column":13,"nodeType":"VariableDeclaration","source":"            var highlights;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":52,"column":13,"nodeType":"VariableDeclaration","source":"            var contextual = (j != result.context.getOurEventIndex());","fix":{"range":[1696,1699],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 57 exceeds the maximum line length of 90.","line":57,"column":1,"nodeType":"Program","source":"                ret.push(<EventTile key={eventId+\"+\"+j} mxEvent={ev} contextual={contextual} highlights={highlights}"}],"errorCount":0,"warningCount":15,"source":"/*\nCopyright 2015 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sdk = require('../../../index');\n\nmodule.exports = React.createClass({\n    displayName: 'SearchResult',\n\n    propTypes: {\n        // a matrix-js-sdk SearchResult containing the details of this result\n        searchResult: React.PropTypes.object.isRequired,\n\n        // a list of strings to be highlighted in the results\n        searchHighlights: React.PropTypes.array,\n\n        // href for the highlights in this result\n        resultLink: React.PropTypes.string,\n\n        onWidgetLoad: React.PropTypes.func,\n    },\n\n    render: function() {\n        var DateSeparator = sdk.getComponent('messages.DateSeparator');\n        var EventTile = sdk.getComponent('rooms.EventTile');\n        var result = this.props.searchResult;\n        var mxEv = result.context.getEvent();\n        var eventId = mxEv.getId();\n\n        var ts1 = mxEv.getTs();\n        var ret = [<DateSeparator key={ts1 + \"-search\"} ts={ts1}/>];\n\n        var timeline = result.context.getTimeline();\n        for (var j = 0; j < timeline.length; j++) {\n            var ev = timeline[j];\n            var highlights;\n            var contextual = (j != result.context.getOurEventIndex());\n            if (!contextual) {\n                highlights = this.props.searchHighlights;\n            }\n            if (EventTile.haveTileForEvent(ev)) {\n                ret.push(<EventTile key={eventId+\"+\"+j} mxEvent={ev} contextual={contextual} highlights={highlights}\n                          highlightLink={this.props.resultLink}\n                          onWidgetLoad={this.props.onWidgetLoad} />);\n            }\n        }\n        return (\n            <li data-scroll-token={eventId+\"+\"+j}>\n                {ret}\n            </li>);\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/SimpleRoomHeader.js","messages":[],"errorCount":0,"warningCount":0},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/TabCompleteBar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MatrixClientPeg' is assigned a value but never used.","line":20,"column":5,"nodeType":"Identifier","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var CommandEntry = require(\"../../../TabCompleteEntries\").CommandEntry;","fix":{"range":[672,675],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":27,"column":55,"nodeType":"Property","source":"        tabComplete: React.PropTypes.object.isRequired","fix":{"range":[889,889],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 36 exceeds the maximum line length of 90.","line":36,"column":1,"nodeType":"Program","source":"                         className={ \"mx_TabCompleteBar_item \" + (entry instanceof CommandEntry ? \"mx_TabCompleteBar_command\" : \"\") }"},{"ruleId":"max-len","severity":1,"message":"Line 37 exceeds the maximum line length of 90.","line":37,"column":1,"nodeType":"Program","source":"                         onClick={this.props.tabComplete.onEntryClick.bind(this.props.tabComplete, entry)} >"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":37,"column":26,"nodeType":"JSXAttribute","source":"                         onClick={this.props.tabComplete.onEntryClick.bind(this.props.tabComplete, entry)} >"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":37,"column":35,"nodeType":"MemberExpression","source":"                         onClick={this.props.tabComplete.onEntryClick.bind(this.props.tabComplete, entry)} >"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":47,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[1663,1663],"text":","}}],"errorCount":5,"warningCount":5,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar CommandEntry = require(\"../../../TabCompleteEntries\").CommandEntry;\n\nmodule.exports = React.createClass({\n    displayName: 'TabCompleteBar',\n\n    propTypes: {\n        tabComplete: React.PropTypes.object.isRequired\n    },\n\n    render: function() {\n        return (\n            <div className=\"mx_TabCompleteBar\">\n            {this.props.tabComplete.peek(6).map((entry, i) => {\n                return (\n                    <div key={entry.getKey() || i + \"\"}\n                         className={ \"mx_TabCompleteBar_item \" + (entry instanceof CommandEntry ? \"mx_TabCompleteBar_command\" : \"\") }\n                         onClick={this.props.tabComplete.onEntryClick.bind(this.props.tabComplete, entry)} >\n                        {entry.getImageJsx()}\n                        <span className=\"mx_TabCompleteBar_text\">\n                            {entry.getText()}\n                        </span>\n                    </div>\n                );\n            })}\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/TopUnreadMessagesBar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[577,580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[607,610],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'sdk' is assigned a value but never used.","line":20,"column":5,"nodeType":"Identifier","source":"var sdk = require('../../../index');"},{"ruleId":"max-len","severity":1,"message":"Line 38 exceeds the maximum line length of 90.","line":38,"column":1,"nodeType":"Program","source":"                    Unread messages. <span style={{ textDecoration: 'underline' }} onClick={this.props.onCloseClick}>Mark all read</span>"}],"errorCount":1,"warningCount":3,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sdk = require('../../../index');\n\nmodule.exports = React.createClass({\n    displayName: 'TopUnreadMessagesBar',\n\n    propTypes: {\n        onScrollUpClick: React.PropTypes.func,\n        onCloseClick: React.PropTypes.func,\n    },\n\n    render: function() {\n        return (\n            <div className=\"mx_TopUnreadMessagesBar\">\n                <div className=\"mx_TopUnreadMessagesBar_scrollUp\"\n                        onClick={this.props.onScrollUpClick}>\n                    <img src=\"img/scrollup.svg\" width=\"24\" height=\"24\"\n                        alt=\"Scroll to unread messages\"\n                        title=\"Scroll to unread messages\"/>\n                    Unread messages. <span style={{ textDecoration: 'underline' }} onClick={this.props.onCloseClick}>Mark all read</span>\n                </div>\n                <img className=\"mx_TopUnreadMessagesBar_close\"\n                    src=\"img/cancel.svg\" width=\"18\" height=\"18\"\n                    alt=\"Close\" title=\"Close\"\n                    onClick={this.props.onCloseClick} />\n            </div>\n        );\n    },\n});\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/rooms/UserTile.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Avatar = require(\"../../../Avatar\");","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[655,658],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MatrixClientPeg' is assigned a value but never used.","line":22,"column":5,"nodeType":"Identifier","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[714,717],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require('../../../dispatcher');","fix":{"range":[751,754],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'dis' is assigned a value but never used.","line":24,"column":5,"nodeType":"Identifier","source":"var dis = require('../../../dispatcher');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[793,796],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is assigned a value but never used.","line":25,"column":5,"nodeType":"Identifier","source":"var Modal = require(\"../../../Modal\");"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":31,"column":45,"nodeType":"Property","source":"        user: React.PropTypes.any.isRequired // User","fix":{"range":[961,961],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":35,"column":9,"nodeType":"VariableDeclaration","source":"        var EntityTile = sdk.getComponent(\"rooms.EntityTile\");","fix":{"range":[1011,1014],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":9,"nodeType":"VariableDeclaration","source":"        var user = this.props.user;","fix":{"range":[1074,1077],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":9,"nodeType":"VariableDeclaration","source":"        var name = user.displayName || user.userId;","fix":{"range":[1110,1113],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":38,"column":9,"nodeType":"VariableDeclaration","source":"        var active = -1;","fix":{"range":[1162,1165],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":44,"column":9,"nodeType":"VariableDeclaration","source":"        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');","fix":{"range":[1381,1384],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":45,"column":9,"nodeType":"VariableDeclaration","source":"        var avatarJsx = (","fix":{"range":[1446,1449],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 51 exceeds the maximum line length of 90.","line":51,"column":1,"nodeType":"Program","source":"            <EntityTile {...this.props} presenceState={user.presence} presenceActiveAgo={active}"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":55,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[1905,1905],"text":","}}],"errorCount":5,"warningCount":13,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nvar Avatar = require(\"../../../Avatar\");\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar sdk = require('../../../index');\nvar dis = require('../../../dispatcher');\nvar Modal = require(\"../../../Modal\");\n\nmodule.exports = React.createClass({\n    displayName: 'UserTile',\n\n    propTypes: {\n        user: React.PropTypes.any.isRequired // User\n    },\n\n    render: function() {\n        var EntityTile = sdk.getComponent(\"rooms.EntityTile\");\n        var user = this.props.user;\n        var name = user.displayName || user.userId;\n        var active = -1;\n\n        // FIXME: make presence data update whenever User.presence changes...\n        active = user.lastActiveAgo ?\n            (Date.now() - (user.lastPresenceTs - user.lastActiveAgo)) : -1;\n\n        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');\n        var avatarJsx = (\n            <BaseAvatar width={36} height={36} name={name} idName={user.userId}\n                        url={ Avatar.avatarUrlForUser(user, 36, 36, \"crop\") } />\n        );\n\n        return (\n            <EntityTile {...this.props} presenceState={user.presence} presenceActiveAgo={active}\n                presenceCurrentlyActive={ user.currentlyActive }\n                name={name} title={user.userId} avatarJsx={avatarJsx} />\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/settings/ChangeAvatar.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[598,601],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[657,660],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":30,"column":42,"nodeType":"Property","source":"        className: React.PropTypes.string","fix":{"range":[1115,1115],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":61,"column":49,"nodeType":"Property","source":"            avatarUrl: newProps.initialAvatarUrl","fix":{"range":[1813,1813],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":66,"column":9,"nodeType":"VariableDeclaration","source":"        var newUrl = null;","fix":{"range":[1882,1885],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":69,"column":41,"nodeType":"Property","source":"            phase: this.Phases.Uploading","fix":{"range":[1966,1966],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":71,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[1987,1990],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":72,"column":9,"nodeType":"VariableDeclaration","source":"        var httpPromise = MatrixClientPeg.get().uploadContent(file).then(function(url) {","fix":{"range":[2012,2015],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":79,"column":23,"nodeType":"Literal","source":"                    ''","fix":{"range":[2350,2350],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":89,"column":70,"nodeType":"Property","source":"                avatarUrl: MatrixClientPeg.get().mxcUrlToHttp(newUrl)","fix":{"range":[2661,2661],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":93,"column":41,"nodeType":"Property","source":"                phase: self.Phases.Error","fix":{"range":[2775,2775],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":108,"column":59,"nodeType":"Property","source":"            errorText: \"Failed to upload profile picture!\"","fix":{"range":[3120,3120],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":113,"column":9,"nodeType":"VariableDeclaration","source":"        var avatarImg;","fix":{"range":[3174,3177],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":117,"column":13,"nodeType":"VariableDeclaration","source":"            var RoomAvatar = sdk.getComponent('avatars.RoomAvatar');","fix":{"range":[3393,3396],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 118 exceeds the maximum line length of 90.","line":118,"column":1,"nodeType":"Program","source":"            avatarImg = <RoomAvatar room={this.props.room} width={ this.props.width } height={ this.props.height } resizeMethod='crop' />;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":120,"column":13,"nodeType":"VariableDeclaration","source":"            var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");","fix":{"range":[3618,3621],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 122 exceeds the maximum line length of 90.","line":122,"column":1,"nodeType":"Program","source":"            avatarImg = <BaseAvatar width={this.props.width} height={this.props.height} resizeMethod='crop'"},{"ruleId":"max-len","severity":1,"message":"Line 123 exceeds the maximum line length of 90.","line":123,"column":1,"nodeType":"Program","source":"                        name='?' idName={ MatrixClientPeg.get().getUserIdLocalpart() } url={this.state.avatarUrl} />;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":126,"column":9,"nodeType":"VariableDeclaration","source":"        var uploadSection;","fix":{"range":[4033,4036],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":149,"column":17,"nodeType":"VariableDeclaration","source":"                var Loader = sdk.getComponent(\"elements.Spinner\");"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":154,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[4955,4955],"text":","}}],"errorCount":8,"warningCount":14,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar sdk = require('../../../index');\n\nmodule.exports = React.createClass({\n    displayName: 'ChangeAvatar',\n    propTypes: {\n        initialAvatarUrl: React.PropTypes.string,\n        room: React.PropTypes.object,\n        // if false, you need to call changeAvatar.onFileSelected yourself.\n        showUploadSection: React.PropTypes.bool,\n        width: React.PropTypes.number,\n        height: React.PropTypes.number,\n        className: React.PropTypes.string\n    },\n\n    Phases: {\n        Display: \"display\",\n        Uploading: \"uploading\",\n        Error: \"error\",\n    },\n\n    getDefaultProps: function() {\n        return {\n            showUploadSection: true,\n            className: \"\",\n            width: 80,\n            height: 80,\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            avatarUrl: this.props.initialAvatarUrl,\n            phase: this.Phases.Display,\n        };\n    },\n\n    componentWillReceiveProps: function(newProps) {\n        if (this.avatarSet) {\n            // don't clobber what the user has just set\n            return;\n        }\n        this.setState({\n            avatarUrl: newProps.initialAvatarUrl\n        });\n    },\n\n    setAvatarFromFile: function(file) {\n        var newUrl = null;\n\n        this.setState({\n            phase: this.Phases.Uploading\n        });\n        var self = this;\n        var httpPromise = MatrixClientPeg.get().uploadContent(file).then(function(url) {\n            newUrl = url;\n            if (self.props.room) {\n                return MatrixClientPeg.get().sendStateEvent(\n                    self.props.room.roomId,\n                    'm.room.avatar',\n                    {url: url},\n                    ''\n                );\n            } else {\n                return MatrixClientPeg.get().setAvatarUrl(url);\n            }\n        });\n\n        httpPromise.done(function() {\n            self.setState({\n                phase: self.Phases.Display,\n                avatarUrl: MatrixClientPeg.get().mxcUrlToHttp(newUrl)\n            });\n        }, function(error) {\n            self.setState({\n                phase: self.Phases.Error\n            });\n            self.onError(error);\n        });\n\n        return httpPromise;\n    },\n\n    onFileSelected: function(ev) {\n        this.avatarSet = true;\n        return this.setAvatarFromFile(ev.target.files[0]);\n    },\n\n    onError: function(error) {\n        this.setState({\n            errorText: \"Failed to upload profile picture!\"\n        });\n    },\n\n    render: function() {\n        var avatarImg;\n        // Having just set an avatar we just display that since it will take a little\n        // time to propagate through to the RoomAvatar.\n        if (this.props.room && !this.avatarSet) {\n            var RoomAvatar = sdk.getComponent('avatars.RoomAvatar');\n            avatarImg = <RoomAvatar room={this.props.room} width={ this.props.width } height={ this.props.height } resizeMethod='crop' />;\n        } else {\n            var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");\n            // XXX: FIXME: once we track in the JS what our own displayname is(!) then use it here rather than ?\n            avatarImg = <BaseAvatar width={this.props.width} height={this.props.height} resizeMethod='crop'\n                        name='?' idName={ MatrixClientPeg.get().getUserIdLocalpart() } url={this.state.avatarUrl} />;\n        }\n\n        var uploadSection;\n        if (this.props.showUploadSection) {\n            uploadSection = (\n                <div className={this.props.className}>\n                    Upload new:\n                    <input type=\"file\" onChange={this.onFileSelected}/>\n                    {this.state.errorText}\n                </div>\n            );\n        }\n\n        switch (this.state.phase) {\n            case this.Phases.Display:\n            case this.Phases.Error:\n                return (\n                    <div>\n                        <div className={this.props.className}>\n                            {avatarImg}\n                        </div>\n                        {uploadSection}\n                    </div>\n                );\n            case this.Phases.Uploading:\n                var Loader = sdk.getComponent(\"elements.Spinner\");\n                return (\n                    <Loader />\n                );\n        }\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/settings/ChangeDisplayName.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[582,585],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[612,615],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[649,652],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[827,830],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":13,"nodeType":"VariableDeclaration","source":"            var displayname = result.displayname;","fix":{"range":[954,957],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":32,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[1185,1202],"text":"                "}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_displayname' is not in camel case.","line":43,"column":34,"nodeType":"Identifier","source":"    _changeDisplayName: function(new_displayname) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":44,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[1521,1524],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":51,"column":9,"nodeType":"VariableDeclaration","source":"        var EditableTextContainer = sdk.getComponent('elements.EditableTextContainer');","fix":{"range":[1737,1740],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":58,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2040,2040],"text":","}}],"errorCount":1,"warningCount":9,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nvar React = require('react');\nvar sdk = require('../../../index');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\n\nmodule.exports = React.createClass({\n    displayName: 'ChangeDisplayName',\n\n    _getDisplayName: function() {\n        var cli = MatrixClientPeg.get();\n        return cli.getProfileInfo(cli.credentials.userId).then(function(result) {\n            var displayname = result.displayname;\n            if (!displayname) {\n                if (MatrixClientPeg.get().isGuest()) {\n                    displayname = \"Guest \" + MatrixClientPeg.get().getUserIdLocalpart();\n                }\n                else {\n                    displayname = MatrixClientPeg.get().getUserIdLocalpart();\n                }\n            }\n            return displayname;\n        }, function(error) {\n            throw new Error(\"Failed to fetch display name\");\n        });\n    },\n\n    _changeDisplayName: function(new_displayname) {\n        var cli = MatrixClientPeg.get();\n        return cli.setDisplayName(new_displayname).catch(function(e) {\n            throw new Error(\"Failed to set display name\");\n        });\n    },\n\n    render: function() {\n        var EditableTextContainer = sdk.getComponent('elements.EditableTextContainer');\n        return (\n            <EditableTextContainer\n                getInitialValue={this._getDisplayName}\n                placeholder=\"No display name\"\n                onSubmit={this._changeDisplayName} />\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/settings/ChangePassword.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require(\"../../../Modal\");","fix":{"range":[672,675],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require(\"../../../index\");","fix":{"range":[711,714],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":34,"column":48,"nodeType":"Property","source":"        buttonClassName: React.PropTypes.string","fix":{"range":[1222,1222],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":40,"column":23,"nodeType":"Property","source":"        Error: \"error\"","fix":{"range":[1321,1321],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":50,"column":60,"nodeType":"Property","source":"                        error: \"New passwords don't match.\"","fix":{"range":[1662,1662],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":54,"column":58,"nodeType":"Property","source":"                        error: \"Passwords can't be empty\"","fix":{"range":[1835,1835],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":57,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[1890,1890],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":63,"column":36,"nodeType":"Property","source":"            phase: this.Phases.Edit","fix":{"range":[1996,1996],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'old_password' is not in camel case.","line":67,"column":30,"nodeType":"Identifier","source":"    changePassword: function(old_password, new_password) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_password' is not in camel case.","line":67,"column":44,"nodeType":"Identifier","source":"    changePassword: function(old_password, new_password) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":68,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[2083,2086],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":70,"column":9,"nodeType":"VariableDeclaration","source":"        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");","fix":{"range":[2125,2128],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 75 exceeds the maximum line length of 90.","line":75,"column":1,"nodeType":"Program","source":"                    Changing password will currently reset any end-to-end encryption keys on all devices,"},{"ruleId":"max-len","severity":1,"message":"Line 77 exceeds the maximum line length of 90.","line":77,"column":1,"nodeType":"Program","source":"                    This will be <a href=\"https://github.com/vector-im/riot-web/issues/2671\">improved shortly</a>,"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":83,"column":21,"nodeType":"VariableDeclaration","source":"                    var authDict = {","fix":{"range":[2788,2791],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":86,"column":47,"nodeType":"Property","source":"                        password: old_password","fix":{"range":[2955,2955],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":90,"column":53,"nodeType":"Property","source":"                        phase: this.Phases.Uploading","fix":{"range":[3068,3068],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":93,"column":21,"nodeType":"VariableDeclaration","source":"                    var self = this;","fix":{"range":[3114,3117],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":100,"column":52,"nodeType":"Property","source":"                            phase: self.Phases.Edit","fix":{"range":[3481,3481],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":109,"column":9,"nodeType":"VariableDeclaration","source":"        var old_password = this.refs.old_input.value;","fix":{"range":[3634,3637],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'old_password' is not in camel case.","line":109,"column":13,"nodeType":"Identifier","source":"        var old_password = this.refs.old_input.value;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":110,"column":9,"nodeType":"VariableDeclaration","source":"        var new_password = this.refs.new_input.value;","fix":{"range":[3688,3691],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_password' is not in camel case.","line":110,"column":13,"nodeType":"Identifier","source":"        var new_password = this.refs.new_input.value;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":111,"column":9,"nodeType":"VariableDeclaration","source":"        var confirm_password = this.refs.confirm_input.value;","fix":{"range":[3742,3745],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'confirm_password' is not in camel case.","line":111,"column":13,"nodeType":"Identifier","source":"        var confirm_password = this.refs.confirm_input.value;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":112,"column":9,"nodeType":"VariableDeclaration","source":"        var err = this.props.onCheckPassword(","fix":{"range":[3804,3807],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":113,"column":57,"nodeType":"Identifier","source":"            old_password, new_password, confirm_password","fix":{"range":[3898,3898],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":117,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[3975,3984],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":124,"column":9,"nodeType":"VariableDeclaration","source":"        var rowClassName = this.props.rowClassName;","fix":{"range":[4103,4106],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":125,"column":9,"nodeType":"VariableDeclaration","source":"        var rowLabelClassName = this.props.rowLabelClassName;","fix":{"range":[4155,4158],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":126,"column":9,"nodeType":"VariableDeclaration","source":"        var rowInputClassName = this.props.rowInputClassName;","fix":{"range":[4217,4220],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":127,"column":9,"nodeType":"VariableDeclaration","source":"        var buttonClassName = this.props.buttonClassName;","fix":{"range":[4279,4282],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 154 exceeds the maximum line length of 90.","line":154,"column":1,"nodeType":"Program","source":"                                <input id=\"password2\" type=\"password\" ref=\"confirm_input\" />"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":164,"column":17,"nodeType":"VariableDeclaration","source":"                var Loader = sdk.getComponent(\"elements.Spinner\");"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":171,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[6410,6410],"text":","}}],"errorCount":11,"warningCount":26,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\nvar Modal = require(\"../../../Modal\");\nvar sdk = require(\"../../../index\");\nimport AccessibleButton from '../elements/AccessibleButton';\n\nmodule.exports = React.createClass({\n    displayName: 'ChangePassword',\n    propTypes: {\n        onFinished: React.PropTypes.func,\n        onError: React.PropTypes.func,\n        onCheckPassword: React.PropTypes.func,\n        rowClassName: React.PropTypes.string,\n        rowLabelClassName: React.PropTypes.string,\n        rowInputClassName: React.PropTypes.string,\n        buttonClassName: React.PropTypes.string\n    },\n\n    Phases: {\n        Edit: \"edit\",\n        Uploading: \"uploading\",\n        Error: \"error\"\n    },\n\n    getDefaultProps: function() {\n        return {\n            onFinished: function() {},\n            onError: function() {},\n            onCheckPassword: function(oldPass, newPass, confirmPass) {\n                if (newPass !== confirmPass) {\n                    return {\n                        error: \"New passwords don't match.\"\n                    };\n                } else if (!newPass || newPass.length === 0) {\n                    return {\n                        error: \"Passwords can't be empty\"\n                    };\n                }\n            }\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            phase: this.Phases.Edit\n        };\n    },\n\n    changePassword: function(old_password, new_password) {\n        var cli = MatrixClientPeg.get();\n\n        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");\n        Modal.createDialog(QuestionDialog, {\n            title: \"Warning\",\n            description:\n                <div>\n                    Changing password will currently reset any end-to-end encryption keys on all devices,\n                    making encrypted chat history unreadable.\n                    This will be <a href=\"https://github.com/vector-im/riot-web/issues/2671\">improved shortly</a>,\n                    but for now be warned.\n                </div>,\n            button: \"Continue\",\n            onFinished: (confirmed) => {\n                if (confirmed) {\n                    var authDict = {\n                        type: 'm.login.password',\n                        user: cli.credentials.userId,\n                        password: old_password\n                    };\n\n                    this.setState({\n                        phase: this.Phases.Uploading\n                    });\n\n                    var self = this;\n                    cli.setPassword(authDict, new_password).then(function() {\n                        self.props.onFinished();\n                    }, function(err) {\n                        self.props.onError(err);\n                    }).finally(function() {\n                        self.setState({\n                            phase: self.Phases.Edit\n                        });\n                    }).done();\n                }\n            },\n        });\n    },\n\n    onClickChange: function() {\n        var old_password = this.refs.old_input.value;\n        var new_password = this.refs.new_input.value;\n        var confirm_password = this.refs.confirm_input.value;\n        var err = this.props.onCheckPassword(\n            old_password, new_password, confirm_password\n        );\n        if (err) {\n            this.props.onError(err);\n        }\n        else {\n            this.changePassword(old_password, new_password);\n        }\n    },\n\n    render: function() {\n        var rowClassName = this.props.rowClassName;\n        var rowLabelClassName = this.props.rowLabelClassName;\n        var rowInputClassName = this.props.rowInputClassName;\n        var buttonClassName = this.props.buttonClassName;\n\n        switch (this.state.phase) {\n            case this.Phases.Edit:\n                return (\n                    <div className={this.props.className}>\n                        <div className={rowClassName}>\n                            <div className={rowLabelClassName}>\n                                <label htmlFor=\"passwordold\">Current password</label>\n                            </div>\n                            <div className={rowInputClassName}>\n                                <input id=\"passwordold\" type=\"password\" ref=\"old_input\" />\n                            </div>\n                        </div>\n                        <div className={rowClassName}>\n                            <div className={rowLabelClassName}>\n                                <label htmlFor=\"password1\">New password</label>\n                            </div>\n                            <div className={rowInputClassName}>\n                                <input id=\"password1\" type=\"password\" ref=\"new_input\" />\n                            </div>\n                        </div>\n                        <div className={rowClassName}>\n                            <div className={rowLabelClassName}>\n                                <label htmlFor=\"password2\">Confirm password</label>\n                            </div>\n                            <div className={rowInputClassName}>\n                                <input id=\"password2\" type=\"password\" ref=\"confirm_input\" />\n                            </div>\n                        </div>\n                        <AccessibleButton className={buttonClassName}\n                                onClick={this.onClickChange}>\n                            Change Password\n                        </AccessibleButton>\n                    </div>\n                );\n            case this.Phases.Uploading:\n                var Loader = sdk.getComponent(\"elements.Spinner\");\n                return (\n                    <div className=\"mx_Dialog_content\">\n                        <Loader />\n                    </div>\n                );\n        }\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/settings/DevicesPanel.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":17,"nodeType":"VariableDeclaration","source":"                var errtxt;","fix":{"range":[1493,1496],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":63,"column":14,"nodeType":"ArrowFunctionExpression","source":"            }","fix":{"range":[1957,1957],"text":","}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":68,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'a'.","line":68,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'b'.","line":68,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'removed_id' is not in camel case.","line":88,"column":15,"nodeType":"Identifier","source":"        const removed_id = device.device_id;"},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":91,"column":17,"nodeType":"ArrowFunctionExpression","source":"                d => { return d.device_id != removed_id; }","fix":{"range":[2778,2779],"text":"(d)"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'removed_id' is not in camel case.","line":91,"column":46,"nodeType":"Identifier","source":"                d => { return d.device_id != removed_id; }"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":91,"column":59,"nodeType":"ArrowFunctionExpression","source":"                d => { return d.device_id != removed_id; }","fix":{"range":[2820,2820],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":98,"column":9,"nodeType":"VariableDeclaration","source":"        var DevicesPanelEntry = sdk.getComponent('settings.DevicesPanelEntry');","fix":{"range":[2935,2938],"text":"let"}},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":101,"column":16,"nodeType":"JSXAttribute","source":"               onDeleted={()=>{this._onDeviceDeleted(device);}} />"}],"errorCount":3,"warningCount":8,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport sdk from '../../../index';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\n\n\nexport default class DevicesPanel extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            devices: undefined,\n            deviceLoadError: undefined,\n        };\n\n        this._unmounted = false;\n\n        this._renderDevice = this._renderDevice.bind(this);\n    }\n\n    componentDidMount() {\n        this._loadDevices();\n    }\n\n    componentWillUnmount() {\n        this._unmounted = true;\n    }\n\n    _loadDevices() {\n        MatrixClientPeg.get().getDevices().done(\n            (resp) => {\n                if (this._unmounted) { return; }\n                this.setState({devices: resp.devices || []});\n            },\n            (error) => {\n                if (this._unmounted) { return; }\n                var errtxt;\n                if (error.httpStatus == 404) {\n                    // 404 probably means the HS doesn't yet support the API.\n                    errtxt = \"Your home server does not support device management.\";\n                } else {\n                    console.error(\"Error loading devices:\", error);\n                    errtxt = \"Unable to load device list.\";\n                }\n                this.setState({deviceLoadError: errtxt});\n            }\n        );\n    }\n\n\n    /**\n     * compare two devices, sorting from most-recently-seen to least-recently-seen\n     * (and then, for stability, by device id)\n     */\n    _deviceCompare(a, b) {\n        // return < 0 if a comes before b, > 0 if a comes after b.\n        const lastSeenDelta =\n              (b.last_seen_ts || 0) - (a.last_seen_ts || 0);\n\n        if (lastSeenDelta !== 0) { return lastSeenDelta; }\n\n        const idA = a.device_id;\n        const idB = b.device_id;\n        return (idA < idB) ? -1 : (idA > idB) ? 1 : 0;\n    }\n\n    _onDeviceDeleted(device) {\n        if (this._unmounted) { return; }\n\n        // delete the removed device from our list.\n        const removed_id = device.device_id;\n        this.setState((state, props) => {\n            const newDevices = state.devices.filter(\n                d => { return d.device_id != removed_id; }\n            );\n            return { devices: newDevices };\n        });\n    }\n\n    _renderDevice(device) {\n        var DevicesPanelEntry = sdk.getComponent('settings.DevicesPanelEntry');\n        return (\n            <DevicesPanelEntry key={device.device_id} device={device}\n               onDeleted={()=>{this._onDeviceDeleted(device);}} />\n        );\n    }\n\n    render() {\n        const Spinner = sdk.getComponent(\"elements.Spinner\");\n\n        if (this.state.deviceLoadError !== undefined) {\n            const classes = classNames(this.props.className, \"error\");\n            return (\n                <div className={classes}>\n                    {this.state.deviceLoadError}\n                </div>\n            );\n        }\n\n        const devices = this.state.devices;\n        if (devices === undefined) {\n            // still loading\n            const classes = this.props.className;\n            return <Spinner className={classes}/>;\n        }\n\n        devices.sort(this._deviceCompare);\n\n        const classes = classNames(this.props.className, \"mx_DevicesPanel\");\n        return (\n            <div className={classes}>\n                <div className=\"mx_DevicesPanel_header\">\n                    <div className=\"mx_DevicesPanel_deviceId\">ID</div>\n                    <div className=\"mx_DevicesPanel_deviceName\">Name</div>\n                    <div className=\"mx_DevicesPanel_deviceLastSeen\">Last seen</div>\n                    <div className=\"mx_DevicesPanel_deviceButtons\"></div>\n                </div>\n                {devices.map(this._renderDevice)}\n            </div>\n        );\n    }\n}\n\nDevicesPanel.displayName = 'MemberDeviceInfo';\nDevicesPanel.propTypes = {\n    className: React.PropTypes.string,\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/settings/DevicesPanelEntry.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":65,"column":13,"nodeType":"VariableDeclaration","source":"            var InteractiveAuthDialog = sdk.getComponent(\"dialogs.InteractiveAuthDialog\");","fix":{"range":[2090,2093],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":92,"column":14,"nodeType":"ArrowFunctionExpression","source":"            }","fix":{"range":[3024,3024],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":131,"column":9,"nodeType":"VariableDeclaration","source":"        var myDeviceClass = '';","fix":{"range":[4136,4139],"text":"let"}}],"errorCount":1,"warningCount":2,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\n\nimport sdk from '../../../index';\nimport MatrixClientPeg from '../../../MatrixClientPeg';\nimport Modal from '../../../Modal';\n\nexport default class DevicesPanelEntry extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            deleting: false,\n            deleteError: undefined,\n        };\n\n        this._unmounted = false;\n\n        this._onDeleteClick = this._onDeleteClick.bind(this);\n        this._onDisplayNameChanged = this._onDisplayNameChanged.bind(this);\n        this._makeDeleteRequest = this._makeDeleteRequest.bind(this);\n    }\n\n    componentWillUnmount() {\n        this._unmounted = true;\n    }\n\n    _onDisplayNameChanged(value) {\n        const device = this.props.device;\n        return MatrixClientPeg.get().setDeviceDetails(device.device_id, {\n            display_name: value,\n        }).catch((e) => {\n            console.error(\"Error setting device display name\", e);\n            throw new Error(\"Failed to set display name\");\n        });\n    }\n\n    _onDeleteClick() {\n        this.setState({deleting: true});\n\n        // try without interactive auth to start off\n        this._makeDeleteRequest(null).catch((error) => {\n            if (this._unmounted) { return; }\n            if (error.httpStatus !== 401 || !error.data || !error.data.flows) {\n                // doesn't look like an interactive-auth failure\n                throw error;\n            }\n\n            // pop up an interactive auth dialog\n            var InteractiveAuthDialog = sdk.getComponent(\"dialogs.InteractiveAuthDialog\");\n\n            Modal.createDialog(InteractiveAuthDialog, {\n                authData: error.data,\n                makeRequest: this._makeDeleteRequest,\n            });\n\n            this.setState({\n                deleting: false,\n            });\n        }).catch((e) => {\n            console.error(\"Error deleting device\", e);\n            if (this._unmounted) { return; }\n            this.setState({\n                deleting: false,\n                deleteError: \"Failed to delete device\",\n            });\n        }).done();\n    }\n\n    _makeDeleteRequest(auth) {\n        const device = this.props.device;\n        return MatrixClientPeg.get().deleteDevice(device.device_id, auth).then(\n            () => {\n                this.props.onDeleted();\n                if (this._unmounted) { return; }\n                this.setState({ deleting: false });\n            }\n        );\n    }\n\n    render() {\n        const EditableTextContainer = sdk.getComponent('elements.EditableTextContainer');\n\n        const device = this.props.device;\n\n        if (this.state.deleting) {\n            const Spinner = sdk.getComponent(\"elements.Spinner\");\n\n            return (\n                <div className=\"mx_DevicesPanel_device\">\n                    <Spinner />\n                </div>\n            );\n        }\n\n        let lastSeen = \"\";\n        if (device.last_seen_ts) {\n            // todo: format the timestamp as \"5 minutes ago\" or whatever.\n            const lastSeenDate = new Date(device.last_seen_ts);\n            lastSeen = device.last_seen_ip + \" @ \" +\n                lastSeenDate.toLocaleString();\n        }\n\n        let deleteButton;\n        if (this.state.deleteError) {\n            deleteButton = <div className=\"error\">{this.state.deleteError}</div>;\n        } else {\n            deleteButton = (\n                <div className=\"mx_textButton\"\n                  onClick={this._onDeleteClick}>\n                    Delete\n                </div>\n            );\n        }\n\n        var myDeviceClass = '';\n        if (device.device_id === MatrixClientPeg.get().getDeviceId()) {\n            myDeviceClass = \" mx_DevicesPanel_myDevice\";\n        }\n\n        return (\n            <div className={ \"mx_DevicesPanel_device\" + myDeviceClass }>\n                <div className=\"mx_DevicesPanel_deviceId\">\n                    {device.device_id}\n                </div>\n                <div className=\"mx_DevicesPanel_deviceName\">\n                    <EditableTextContainer initialValue={device.display_name}\n                        onSubmit={this._onDisplayNameChanged}\n                        placeholder={device.device_id}\n                    />\n                </div>\n                <div className=\"mx_DevicesPanel_lastSeen\">\n                    {lastSeen}\n                </div>\n                <div className=\"mx_DevicesPanel_deviceButtons\">\n                    {deleteButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nDevicesPanelEntry.propTypes = {\n    device: React.PropTypes.object.isRequired,\n    onDeleted: React.PropTypes.func,\n};\n\nDevicesPanelEntry.defaultProps = {\n    onDeleted: function() {},\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/settings/EnableNotificationsButton.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var React = require(\"react\");","fix":{"range":[582,585],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var Notifier = require(\"../../../Notifier\");","fix":{"range":[612,615],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[657,660],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":45,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[1235,1238],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":73,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2053,2053],"text":","}}],"errorCount":1,"warningCount":4,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nvar React = require(\"react\");\nvar Notifier = require(\"../../../Notifier\");\nvar dis = require(\"../../../dispatcher\");\n\nmodule.exports = React.createClass({\n    displayName: 'EnableNotificationsButton',\n\n    componentDidMount: function() {\n        this.dispatcherRef = dis.register(this.onAction);\n    },\n\n    componentWillUnmount: function() {\n        dis.unregister(this.dispatcherRef);\n    },\n\n    onAction: function(payload) {\n        if (payload.action !== \"notifier_enabled\") {\n            return;\n        }\n        this.forceUpdate();\n    },\n\n    enabled: function() {\n        return Notifier.isEnabled();\n    },\n\n    onClick: function() {\n        var self = this;\n        if (!Notifier.supportsDesktopNotifications()) {\n            return;\n        }\n        if (!Notifier.isEnabled()) {\n            Notifier.setEnabled(true, function() {\n                self.forceUpdate();\n            });\n        } else {\n            Notifier.setEnabled(false);\n        }\n        this.forceUpdate();\n    },\n\n    render: function() {\n        if (this.enabled()) {\n            return (\n                <button className=\"mx_EnableNotificationsButton\" onClick={this.onClick}>\n                    Disable Notifications\n                </button>\n            );\n        } else {\n            return (\n                <button className=\"mx_EnableNotificationsButton\" onClick={this.onClick}>\n                    Enable Notifications\n                </button>\n            );\n        }\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/voip/CallView.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var React = require(\"react\");","fix":{"range":[567,570],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[597,600],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var CallHandler = require(\"../../../CallHandler\");","fix":{"range":[639,642],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[690,693],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"../../../MatrixClientPeg\");","fix":{"range":[727,730],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":75,"column":9,"nodeType":"VariableDeclaration","source":"        var call;","fix":{"range":[2447,2450],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":78,"column":13,"nodeType":"VariableDeclaration","source":"            var roomId = this.props.room.roomId;","fix":{"range":[2501,2504],"text":"let"}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":89,"column":9,"nodeType":"BlockStatement","source":"        }","fix":{"range":[2855,2857],"text":"\n"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":89,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2866,2875],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 104 exceeds the maximum line length of 90.","line":104,"column":1,"nodeType":"Program","source":"        if (call && call.type === \"video\" && call.call_state !== \"ended\" && call.call_state !== \"ringing\") {"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":111,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[4076,4085],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":128,"column":9,"nodeType":"VariableDeclaration","source":"        var VideoView = sdk.getComponent('voip.VideoView');","fix":{"range":[4529,4532],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":130,"column":9,"nodeType":"VariableDeclaration","source":"        var voice;","fix":{"range":[4590,4593],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":132,"column":13,"nodeType":"VariableDeclaration","source":"            var callRoom = MatrixClientPeg.get().getRoom(this.state.call.roomId);","fix":{"range":[4704,4707],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 133 exceeds the maximum line length of 90.","line":133,"column":1,"nodeType":"Program","source":"            voice = <div className=\"mx_CallView_voice\" onClick={ this.props.onClick }>Active call ({ callRoom.name })</div>;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":145,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[5208,5208],"text":","}}],"errorCount":1,"warningCount":15,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar React = require(\"react\");\nvar dis = require(\"../../../dispatcher\");\nvar CallHandler = require(\"../../../CallHandler\");\nvar sdk = require('../../../index');\nvar MatrixClientPeg = require(\"../../../MatrixClientPeg\");\n\nmodule.exports = React.createClass({\n    displayName: 'CallView',\n\n    propTypes: {\n        // js-sdk room object. If set, we will only show calls for the given\n        // room; if not, we will show any active call.\n        room: React.PropTypes.object,\n\n        // A Conference Handler implementation\n        // Must have a function signature:\n        //  getConferenceCallForRoom(roomId: string): MatrixCall\n        ConferenceHandler: React.PropTypes.object,\n\n        // maxHeight style attribute for the video panel\n        maxVideoHeight: React.PropTypes.number,\n\n        // a callback which is called when the user clicks on the video div\n        onClick: React.PropTypes.func,\n\n        // a callback which is called when the content in the callview changes\n        // in a way that is likely to cause a resize.\n        onResize: React.PropTypes.func,\n\n        // render ongoing audio call details - useful when in LeftPanel\n        showVoice: React.PropTypes.bool,\n    },\n\n    getInitialState: function() {\n        return {\n            // the call this view is displaying (if any)\n            call: null,\n        };\n    },\n\n    componentDidMount: function() {\n        this.dispatcherRef = dis.register(this.onAction);\n        this.showCall();\n    },\n\n    componentWillUnmount: function() {\n        dis.unregister(this.dispatcherRef);\n    },\n\n    onAction: function(payload) {\n        // don't filter out payloads for room IDs other than props.room because\n        // we may be interested in the conf 1:1 room\n        if (payload.action !== 'call_state') {\n            return;\n        }\n        this.showCall();\n    },\n\n    showCall: function() {\n        var call;\n\n        if (this.props.room) {\n            var roomId = this.props.room.roomId;\n            call = CallHandler.getCallForRoom(roomId) ||\n                (this.props.ConferenceHandler ?\n                 this.props.ConferenceHandler.getConferenceCallForRoom(roomId) :\n                 null\n                );\n\n            if (this.call) {\n                this.setState({ call: call });\n            }\n\n        }\n        else {\n            call = CallHandler.getAnyActiveCall();\n            this.setState({ call: call });\n        }\n\n        if (call) {\n            call.setLocalVideoElement(this.getVideoView().getLocalVideoElement());\n            call.setRemoteVideoElement(this.getVideoView().getRemoteVideoElement());\n            // always use a separate element for audio stream playback.\n            // this is to let us move CallView around the DOM without interrupting remote audio\n            // during playback, by having the audio rendered by a top-level <audio/> element.\n            // rather than being rendered by the main remoteVideo <video/> element.\n            call.setRemoteAudioElement(this.getVideoView().getRemoteAudioElement());\n        }\n        if (call && call.type === \"video\" && call.call_state !== \"ended\" && call.call_state !== \"ringing\") {\n            // if this call is a conf call, don't display local video as the\n            // conference will have us in it\n            this.getVideoView().getLocalVideoElement().style.display = (\n                call.confUserId ? \"none\" : \"block\"\n            );\n            this.getVideoView().getRemoteVideoElement().style.display = \"block\";\n        }\n        else {\n            this.getVideoView().getLocalVideoElement().style.display = \"none\";\n            this.getVideoView().getRemoteVideoElement().style.display = \"none\";\n            dis.dispatch({action: 'video_fullscreen', fullscreen: false});\n        }\n\n        if (this.props.onResize) {\n            this.props.onResize();\n        }\n    },\n\n    getVideoView: function() {\n        return this.refs.video;\n    },\n\n    render: function() {\n        var VideoView = sdk.getComponent('voip.VideoView');\n\n        var voice;\n        if (this.state.call && this.state.call.type === \"voice\" && this.props.showVoice) {\n            var callRoom = MatrixClientPeg.get().getRoom(this.state.call.roomId);\n            voice = <div className=\"mx_CallView_voice\" onClick={ this.props.onClick }>Active call ({ callRoom.name })</div>;\n        }\n\n        return (\n            <div>\n                <VideoView ref=\"video\" onClick={ this.props.onClick }\n                    onResize={ this.props.onResize }\n                    maxHeight={ this.props.maxVideoHeight }\n                />\n                { voice }\n            </div>\n        );\n    }\n});\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/voip/IncomingCallBox.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[567,570],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('../../../MatrixClientPeg');","fix":{"range":[597,600],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"../../../dispatcher\");","fix":{"range":[656,659],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var CallHandler = require(\"../../../CallHandler\");","fix":{"range":[698,701],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'CallHandler' is assigned a value but never used.","line":19,"column":5,"nodeType":"Identifier","source":"var CallHandler = require(\"../../../CallHandler\");"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":31,"column":52,"nodeType":"Property","source":"            room_id: this.props.incomingCall.roomId","fix":{"range":[1031,1031],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":38,"column":52,"nodeType":"Property","source":"            room_id: this.props.incomingCall.roomId","fix":{"range":[1188,1188],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":43,"column":9,"nodeType":"VariableDeclaration","source":"        var room = null;","fix":{"range":[1242,1245],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":48,"column":9,"nodeType":"VariableDeclaration","source":"        var caller = room ? room.name : \"unknown\";","fix":{"range":[1399,1402],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 52 exceeds the maximum line length of 90.","line":52,"column":1,"nodeType":"Program","source":"                <img className=\"mx_IncomingCallBox_chevron\" src=\"img/chevron-left.png\" width=\"9\" height=\"16\" />"},{"ruleId":"max-len","severity":1,"message":"Line 54 exceeds the maximum line length of 90.","line":54,"column":1,"nodeType":"Program","source":"                    Incoming { this.props.incomingCall ? this.props.incomingCall.type : '' } call from { caller }"},{"ruleId":"max-len","severity":1,"message":"Line 58 exceeds the maximum line length of 90.","line":58,"column":1,"nodeType":"Program","source":"                        <div className=\"mx_IncomingCallBox_buttons_decline\" onClick={this.onRejectClick}>"},{"ruleId":"max-len","severity":1,"message":"Line 63 exceeds the maximum line length of 90.","line":63,"column":1,"nodeType":"Program","source":"                        <div className=\"mx_IncomingCallBox_buttons_accept\" onClick={this.onAnswerClick}>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":70,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2495,2495],"text":","}}],"errorCount":4,"warningCount":10,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar React = require('react');\nvar MatrixClientPeg = require('../../../MatrixClientPeg');\nvar dis = require(\"../../../dispatcher\");\nvar CallHandler = require(\"../../../CallHandler\");\n\nmodule.exports = React.createClass({\n    displayName: 'IncomingCallBox',\n\n    propTypes: {\n        incomingCall: React.PropTypes.object,\n    },\n\n    onAnswerClick: function() {\n        dis.dispatch({\n            action: 'answer',\n            room_id: this.props.incomingCall.roomId\n        });\n    },\n\n    onRejectClick: function() {\n        dis.dispatch({\n            action: 'hangup',\n            room_id: this.props.incomingCall.roomId\n        });\n    },\n\n    render: function() {\n        var room = null;\n        if (this.props.incomingCall) {\n            room = MatrixClientPeg.get().getRoom(this.props.incomingCall.roomId);\n        }\n\n        var caller = room ? room.name : \"unknown\";\n\n        return (\n            <div className=\"mx_IncomingCallBox\" id=\"incomingCallBox\">\n                <img className=\"mx_IncomingCallBox_chevron\" src=\"img/chevron-left.png\" width=\"9\" height=\"16\" />\n                <div className=\"mx_IncomingCallBox_title\">\n                    Incoming { this.props.incomingCall ? this.props.incomingCall.type : '' } call from { caller }\n                </div>\n                <div className=\"mx_IncomingCallBox_buttons\">\n                    <div className=\"mx_IncomingCallBox_buttons_cell\">\n                        <div className=\"mx_IncomingCallBox_buttons_decline\" onClick={this.onRejectClick}>\n                            Decline\n                        </div>\n                    </div>\n                    <div className=\"mx_IncomingCallBox_buttons_cell\">\n                        <div className=\"mx_IncomingCallBox_buttons_accept\" onClick={this.onAnswerClick}>\n                            Accept\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/voip/VideoFeed.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}}],"errorCount":0,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = React.createClass({\n    displayName: 'VideoFeed',\n\n    propTypes: {\n        // maxHeight style attribute for the video element\n        maxHeight: React.PropTypes.number,\n\n        // a callback which is called when the video element is resized\n        // due to a change in video metadata\n        onResize: React.PropTypes.func,\n    },\n\n    componentDidMount() {\n        this.refs.vid.addEventListener('resize', this.onResize);\n    },\n\n    componentWillUnmount() {\n        this.refs.vid.removeEventListener('resize', this.onResize);\n    },\n\n    onResize: function(e) {\n        if(this.props.onResize) {\n            this.props.onResize(e);\n        }\n    },\n\n    render: function() {\n        return (\n            <video ref=\"vid\" style={{maxHeight: this.props.maxHeight}}>\n            </video>\n        );\n    },\n});\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/components/views/voip/VideoView.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require('react-dom');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('../../../index');","fix":{"range":[651,654],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require('../../../dispatcher');","fix":{"range":[688,691],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":56,"column":9,"nodeType":"VariableDeclaration","source":"        var remoteAudioElement = document.getElementById(\"remoteAudio\");","fix":{"range":[1704,1707],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 58 exceeds the maximum line length of 90.","line":58,"column":1,"nodeType":"Program","source":"            console.error(\"Failed to find remoteAudio element - cannot play audio!  You need to add an <audio/> to the DOM.\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":77,"column":17,"nodeType":"VariableDeclaration","source":"                var element = this.container;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":79,"column":21,"nodeType":"VariableDeclaration","source":"                    var requestMethod = (","fix":{"range":[2451,2454],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":86,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[2782,2799],"text":"                "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":88,"column":21,"nodeType":"VariableDeclaration","source":"                    var exitMethod = (","fix":{"range":[2826,2829],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":103,"column":9,"nodeType":"VariableDeclaration","source":"        var VideoFeed = sdk.getComponent('voip.VideoFeed');","fix":{"range":[3285,3288],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":106,"column":9,"nodeType":"VariableDeclaration","source":"        var fullscreenElement = (document.fullscreenElement ||","fix":{"range":[3433,3436],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":109,"column":9,"nodeType":"VariableDeclaration","source":"        var maxVideoHeight = fullscreenElement ? null : this.props.maxHeight;","fix":{"range":[3598,3601],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 112 exceeds the maximum line length of 90.","line":112,"column":1,"nodeType":"Program","source":"            <div className=\"mx_VideoView\" ref={this.setContainer} onClick={ this.props.onClick }>"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":122,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[4164,4164],"text":","}}],"errorCount":1,"warningCount":14,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\n\nvar sdk = require('../../../index');\nvar dis = require('../../../dispatcher');\n\nmodule.exports = React.createClass({\n    displayName: 'VideoView',\n\n    propTypes: {\n        // maxHeight style attribute for the video element\n        maxHeight: React.PropTypes.number,\n\n        // a callback which is called when the user clicks on the video div\n        onClick: React.PropTypes.func,\n\n        // a callback which is called when the video element is resized due to\n        // a change in video metadata\n        onResize: React.PropTypes.func,\n    },\n\n    componentDidMount: function() {\n        this.dispatcherRef = dis.register(this.onAction);\n    },\n\n    componentWillUnmount: function() {\n        dis.unregister(this.dispatcherRef);\n    },\n\n    getRemoteVideoElement: function() {\n        return ReactDOM.findDOMNode(this.refs.remote);\n    },\n\n    getRemoteAudioElement: function() {\n        // this needs to be somewhere at the top of the DOM which\n        // always exists to avoid audio interruptions.\n        // Might as well just use DOM.\n        var remoteAudioElement = document.getElementById(\"remoteAudio\");\n        if (!remoteAudioElement) {\n            console.error(\"Failed to find remoteAudio element - cannot play audio!  You need to add an <audio/> to the DOM.\");\n        }\n        return remoteAudioElement;\n    },\n\n    getLocalVideoElement: function() {\n        return ReactDOM.findDOMNode(this.refs.local);\n    },\n\n    setContainer: function(c) {\n        this.container = c;\n    },\n\n    onAction: function(payload) {\n        switch (payload.action) {\n            case 'video_fullscreen':\n                if (!this.container) {\n                    return;\n                }\n                var element = this.container;\n                if (payload.fullscreen) {\n                    var requestMethod = (\n                        element.requestFullScreen ||\n                        element.webkitRequestFullScreen ||\n                        element.mozRequestFullScreen ||\n                        element.msRequestFullscreen\n                    );\n                    requestMethod.call(element);\n                }\n                else {\n                    var exitMethod = (\n                        document.exitFullscreen ||\n                        document.mozCancelFullScreen ||\n                        document.webkitExitFullscreen ||\n                        document.msExitFullscreen\n                    );\n                    if (exitMethod) {\n                        exitMethod.call(document);\n                    }\n                }\n                break;\n        }\n    },\n\n    render: function() {\n        var VideoFeed = sdk.getComponent('voip.VideoFeed');\n\n        // if we're fullscreen, we don't want to set a maxHeight on the video element.\n        var fullscreenElement = (document.fullscreenElement ||\n                 document.mozFullScreenElement ||\n                 document.webkitFullscreenElement);\n        var maxVideoHeight = fullscreenElement ? null : this.props.maxHeight;\n\n        return (\n            <div className=\"mx_VideoView\" ref={this.setContainer} onClick={ this.props.onClick }>\n                <div className=\"mx_VideoView_remoteVideoFeed\">\n                    <VideoFeed ref=\"remote\" onResize={this.props.onResize}\n                        maxHeight={maxVideoHeight} />\n                </div>\n                <div className=\"mx_VideoView_localVideoFeed\">\n                    <VideoFeed ref=\"local\"/>\n                </div>\n            </div>\n        );\n    }\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/ContentMessages.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var q = require('q');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var extend = require('./extend');","fix":{"range":[605,608],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require('./dispatcher');","fix":{"range":[639,642],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('./MatrixClientPeg');","fix":{"range":[674,677],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('./index');","fix":{"range":[726,729],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require('./Modal');","fix":{"range":[756,759],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var encrypt = require(\"browser-encrypt-attachment\");","fix":{"range":[789,792],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":56,"column":5,"nodeType":"VariableDeclaration","source":"    var targetWidth = inputWidth;","fix":{"range":[1996,1999],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":57,"column":5,"nodeType":"VariableDeclaration","source":"    var targetHeight = inputHeight;","fix":{"range":[2030,2033],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":83,"column":33,"nodeType":"Property","source":"            thumbnail: thumbnail","fix":{"range":[2980,2980],"text":","}},{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'imageFile' but found 'file'.","line":90,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'imageFile' but found 'The'.","line":122,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":131,"column":5,"nodeType":"VariableDeclaration","source":"    var thumbnailType = \"image/png\";","fix":{"range":[4300,4303],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":136,"column":5,"nodeType":"VariableDeclaration","source":"    var imageInfo;","fix":{"range":[4424,4427],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'videoFile' but found 'file'.","line":149,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'videoFile' but found 'The'.","line":182,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":193,"column":5,"nodeType":"VariableDeclaration","source":"    var videoInfo;","fix":{"range":[6252,6255],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'file'.","line":206,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":282,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[9523,9523],"text":","}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":293,"column":63,"nodeType":"ArrowFunctionExpression","source":"            infoForImageFile(matrixClient, roomId, file).then(imageInfo=>{","fix":{"range":[9880,9889],"text":"(imageInfo)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":296,"column":16,"nodeType":"ArrowFunctionExpression","source":"            }, error=>{","fix":{"range":[9988,9993],"text":"(error)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":306,"column":63,"nodeType":"ArrowFunctionExpression","source":"            infoForVideoFile(matrixClient, roomId, file).then(videoInfo=>{","fix":{"range":[10407,10416],"text":"(videoInfo)"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":309,"column":16,"nodeType":"ArrowFunctionExpression","source":"            }, error=>{","fix":{"range":[10515,10520],"text":"(error)"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":327,"column":9,"nodeType":"VariableDeclaration","source":"        var error;","fix":{"range":[10949,10952],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":333,"column":43,"nodeType":"Identifier","source":"                matrixClient, roomId, file","fix":{"range":[11248,11248],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":350,"column":17,"nodeType":"VariableDeclaration","source":"                var desc = \"The file '\"+upload.fileName+\"' failed to upload.\";","fix":{"range":[11852,11855],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 352 exceeds the maximum line length of 90.","line":352,"column":1,"nodeType":"Program","source":"                    desc = \"The file '\"+upload.fileName+\"' exceeds this home server's size limit for uploads\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":354,"column":17,"nodeType":"VariableDeclaration","source":"                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");","fix":{"range":[12106,12109],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":357,"column":38,"nodeType":"Property","source":"                    description: desc","fix":{"range":[12296,12296],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":362,"column":18,"nodeType":"VariableDeclaration","source":"            for (var i = 0; i < this.inprogress.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":363,"column":17,"nodeType":"VariableDeclaration","source":"                var k = inprogressKeys[i];","fix":{"range":[12502,12505],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":371,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[12818,12831],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":384,"column":9,"nodeType":"VariableDeclaration","source":"        var upload;","fix":{"range":[13108,13111],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":385,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < this.inprogress.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":386,"column":13,"nodeType":"VariableDeclaration","source":"            var k = inprogressKeys[i];","fix":{"range":[13191,13194],"text":"let"}}],"errorCount":4,"warningCount":31,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar q = require('q');\nvar extend = require('./extend');\nvar dis = require('./dispatcher');\nvar MatrixClientPeg = require('./MatrixClientPeg');\nvar sdk = require('./index');\nvar Modal = require('./Modal');\n\nvar encrypt = require(\"browser-encrypt-attachment\");\n\n// Polyfill for Canvas.toBlob API using Canvas.toDataURL\nrequire(\"blueimp-canvas-to-blob\");\n\nconst MAX_WIDTH = 800;\nconst MAX_HEIGHT = 600;\n\n\n/**\n * Create a thumbnail for a image DOM element.\n * The image will be smaller than MAX_WIDTH and MAX_HEIGHT.\n * The thumbnail will have the same aspect ratio as the original.\n * Draws the element into a canvas using CanvasRenderingContext2D.drawImage\n * Then calls Canvas.toBlob to get a blob object for the image data.\n *\n * Since it needs to calculate the dimensions of the source image and the\n * thumbnailed image it returns an info object filled out with information\n * about the original image and the thumbnail.\n *\n * @param {HTMLElement} element The element to thumbnail.\n * @param {integer} inputWidth The width of the image in the input element.\n * @param {integer} inputHeight the width of the image in the input element.\n * @param {String} mimeType The mimeType to save the blob as.\n * @return {Promise} A promise that resolves with an object with an info key\n *  and a thumbnail key.\n */\nfunction createThumbnail(element, inputWidth, inputHeight, mimeType) {\n    const deferred = q.defer();\n\n    var targetWidth = inputWidth;\n    var targetHeight = inputHeight;\n    if (targetHeight > MAX_HEIGHT) {\n        targetWidth = Math.floor(targetWidth * (MAX_HEIGHT / targetHeight));\n        targetHeight = MAX_HEIGHT;\n    }\n    if (targetWidth > MAX_WIDTH) {\n        targetHeight = Math.floor(targetHeight * (MAX_WIDTH / targetWidth));\n        targetWidth = MAX_WIDTH;\n    }\n\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = targetWidth;\n    canvas.height = targetHeight;\n    canvas.getContext(\"2d\").drawImage(element, 0, 0, targetWidth, targetHeight);\n    canvas.toBlob(function(thumbnail) {\n        deferred.resolve({\n            info: {\n                thumbnail_info: {\n                    w: targetWidth,\n                    h: targetHeight,\n                    mimetype: thumbnail.type,\n                    size: thumbnail.size,\n                },\n                w: inputWidth,\n                h: inputHeight,\n            },\n            thumbnail: thumbnail\n        });\n    }, mimeType);\n\n    return deferred.promise;\n}\n\n/**\n * Load a file into a newly created image element.\n *\n * @param {File} file The file to load in an image element.\n * @return {Promise} A promise that resolves with the html image element.\n */\nfunction loadImageElement(imageFile) {\n    const deferred = q.defer();\n\n    // Load the file into an html element\n    const img = document.createElement(\"img\");\n\n    const reader = new FileReader();\n    reader.onload = function(e) {\n        img.src = e.target.result;\n\n        // Once ready, create a thumbnail\n        img.onload = function() {\n            deferred.resolve(img);\n        };\n        img.onerror = function(e) {\n            deferred.reject(e);\n        };\n    };\n    reader.onerror = function(e) {\n        deferred.reject(e);\n    };\n    reader.readAsDataURL(imageFile);\n\n    return deferred.promise;\n}\n\n/**\n * Read the metadata for an image file and create and upload a thumbnail of the image.\n *\n * @param {MatrixClient} matrixClient A matrixClient to upload the thumbnail with.\n * @param {String} roomId The ID of the room the image will be uploaded in.\n * @param {File} The image to read and thumbnail.\n * @return {Promise} A promise that resolves with the attachment info.\n */\nfunction infoForImageFile(matrixClient, roomId, imageFile) {\n    var thumbnailType = \"image/png\";\n    if (imageFile.type == \"image/jpeg\") {\n        thumbnailType = \"image/jpeg\";\n    }\n\n    var imageInfo;\n    return loadImageElement(imageFile).then(function(img) {\n        return createThumbnail(img, img.width, img.height, thumbnailType);\n    }).then(function(result) {\n        imageInfo = result.info;\n        return uploadFile(matrixClient, roomId, result.thumbnail);\n    }).then(function(result) {\n        imageInfo.thumbnail_url = result.url;\n        imageInfo.thumbnail_file = result.file;\n        return imageInfo;\n    });\n}\n\n/**\n * Load a file into a newly created video element.\n *\n * @param {File} file The file to load in an video element.\n * @return {Promise} A promise that resolves with the video image element.\n */\nfunction loadVideoElement(videoFile) {\n    const deferred = q.defer();\n\n    // Load the file into an html element\n    const video = document.createElement(\"video\");\n\n    const reader = new FileReader();\n    reader.onload = function(e) {\n        video.src = e.target.result;\n\n        // Once ready, returns its size\n        // Wait until we have enough data to thumbnail the first frame.\n        video.onloadeddata = function() {\n            deferred.resolve(video);\n        };\n        video.onerror = function(e) {\n            deferred.reject(e);\n        };\n    };\n    reader.onerror = function(e) {\n        deferred.reject(e);\n    };\n    reader.readAsDataURL(videoFile);\n\n    return deferred.promise;\n}\n\n/**\n * Read the metadata for a video file and create and upload a thumbnail of the video.\n *\n * @param {MatrixClient} matrixClient A matrixClient to upload the thumbnail with.\n * @param {String} roomId The ID of the room the video will be uploaded to.\n * @param {File} The video to read and thumbnail.\n * @return {Promise} A promise that resolves with the attachment info.\n */\nfunction infoForVideoFile(matrixClient, roomId, videoFile) {\n    const thumbnailType = \"image/jpeg\";\n\n    var videoInfo;\n    return loadVideoElement(videoFile).then(function(video) {\n        return createThumbnail(video, video.videoWidth, video.videoHeight, thumbnailType);\n    }).then(function(result) {\n        videoInfo = result.info;\n        return uploadFile(matrixClient, roomId, result.thumbnail);\n    }).then(function(result) {\n        videoInfo.thumbnail_url = result.url;\n        videoInfo.thumbnail_file = result.file;\n        return videoInfo;\n    });\n}\n\n/**\n * Read the file as an ArrayBuffer.\n * @return {Promise} A promise that resolves with an ArrayBuffer when the file\n *   is read.\n */\nfunction readFileAsArrayBuffer(file) {\n    const deferred = q.defer();\n    const reader = new FileReader();\n    reader.onload = function(e) {\n        deferred.resolve(e.target.result);\n    };\n    reader.onerror = function(e) {\n        deferred.reject(e);\n    };\n    reader.readAsArrayBuffer(file);\n    return deferred.promise;\n}\n\n/**\n * Upload the file to the content repository.\n * If the room is encrypted then encrypt the file before uploading.\n *\n * @param {MatrixClient} matrixClient The matrix client to upload the file with.\n * @param {String} roomId The ID of the room being uploaded to.\n * @param {File} file The file to upload.\n * @return {Promise} A promise that resolves with an object.\n *  If the file is unencrypted then the object will have a \"url\" key.\n *  If the file is encrypted then the object will have a \"file\" key.\n */\nfunction uploadFile(matrixClient, roomId, file) {\n    if (matrixClient.isRoomEncrypted(roomId)) {\n        // If the room is encrypted then encrypt the file before uploading it.\n        // First read the file into memory.\n        return readFileAsArrayBuffer(file).then(function(data) {\n            // Then encrypt the file.\n            return encrypt.encryptAttachment(data);\n        }).then(function(encryptResult) {\n            // Record the information needed to decrypt the attachment.\n            const encryptInfo = encryptResult.info;\n            // Pass the encrypted data as a Blob to the uploader.\n            const blob = new Blob([encryptResult.data]);\n            return matrixClient.uploadContent(blob).then(function(url) {\n                // If the attachment is encrypted then bundle the URL along\n                // with the information needed to decrypt the attachment and\n                // add it under a file key.\n                encryptInfo.url = url;\n                if (file.type) {\n                    encryptInfo.mimetype = file.type;\n                }\n                return {\"file\": encryptInfo};\n            });\n        });\n    } else {\n        const basePromise = matrixClient.uploadContent(file);\n        const promise1 = basePromise.then(function(url) {\n            // If the attachment isn't encrypted then include the URL directly.\n            return {\"url\": url};\n        });\n        // XXX: copy over the abort method to the new promise\n        promise1.abort = basePromise.abort;\n        return promise1;\n    }\n}\n\n\nclass ContentMessages {\n    constructor() {\n        this.inprogress = [];\n        this.nextId = 0;\n    }\n\n    sendContentToRoom(file, roomId, matrixClient) {\n        const content = {\n            body: file.name,\n            info: {\n                size: file.size,\n            }\n        };\n\n        // if we have a mime type for the file, add it to the message metadata\n        if (file.type) {\n            content.info.mimetype = file.type;\n        }\n\n        const def = q.defer();\n        if (file.type.indexOf('image/') == 0) {\n            content.msgtype = 'm.image';\n            infoForImageFile(matrixClient, roomId, file).then(imageInfo=>{\n                extend(content.info, imageInfo);\n                def.resolve();\n            }, error=>{\n                console.error(error);\n                content.msgtype = 'm.file';\n                def.resolve();\n            });\n        } else if (file.type.indexOf('audio/') == 0) {\n            content.msgtype = 'm.audio';\n            def.resolve();\n        } else if (file.type.indexOf('video/') == 0) {\n            content.msgtype = 'm.video';\n            infoForVideoFile(matrixClient, roomId, file).then(videoInfo=>{\n                extend(content.info, videoInfo);\n                def.resolve();\n            }, error=>{\n                content.msgtype = 'm.file';\n                def.resolve();\n            });\n        } else {\n            content.msgtype = 'm.file';\n            def.resolve();\n        }\n\n        const upload = {\n            fileName: file.name,\n            roomId: roomId,\n            total: 0,\n            loaded: 0,\n        };\n        this.inprogress.push(upload);\n        dis.dispatch({action: 'upload_started'});\n\n        var error;\n        return def.promise.then(function() {\n            // XXX: upload.promise must be the promise that\n            // is returned by uploadFile as it has an abort()\n            // method hacked onto it.\n            upload.promise = uploadFile(\n                matrixClient, roomId, file\n            );\n            return upload.promise.then(function(result) {\n                content.file = result.file;\n                content.url = result.url;\n            });\n        }).progress(function(ev) {\n            if (ev) {\n                upload.total = ev.total;\n                upload.loaded = ev.loaded;\n                dis.dispatch({action: 'upload_progress', upload: upload});\n            }\n        }).then(function(url) {\n            return matrixClient.sendMessage(roomId, content);\n        }, function(err) {\n            error = err;\n            if (!upload.canceled) {\n                var desc = \"The file '\"+upload.fileName+\"' failed to upload.\";\n                if (err.http_status == 413) {\n                    desc = \"The file '\"+upload.fileName+\"' exceeds this home server's size limit for uploads\";\n                }\n                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n                Modal.createDialog(ErrorDialog, {\n                    title: \"Upload Failed\",\n                    description: desc\n                });\n            }\n        }).finally(() => {\n            const inprogressKeys = Object.keys(this.inprogress);\n            for (var i = 0; i < this.inprogress.length; ++i) {\n                var k = inprogressKeys[i];\n                if (this.inprogress[k].promise === upload.promise) {\n                    this.inprogress.splice(k, 1);\n                    break;\n                }\n            }\n            if (error) {\n                dis.dispatch({action: 'upload_failed', upload: upload});\n            }\n            else {\n                dis.dispatch({action: 'upload_finished', upload: upload});\n            }\n        });\n    }\n\n    getCurrentUploads() {\n        return this.inprogress;\n    }\n\n    cancelUpload(promise) {\n        const inprogressKeys = Object.keys(this.inprogress);\n        var upload;\n        for (var i = 0; i < this.inprogress.length; ++i) {\n            var k = inprogressKeys[i];\n            if (this.inprogress[k].promise === promise) {\n                upload = this.inprogress[k];\n                break;\n            }\n        }\n        if (upload) {\n            upload.canceled = true;\n            MatrixClientPeg.get().cancelUpload(upload.promise);\n        }\n    }\n}\n\nif (global.mx_ContentMessage === undefined) {\n    global.mx_ContentMessage = new ContentMessages();\n}\n\nmodule.exports = global.mx_ContentMessage;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/createRoom.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('./MatrixClientPeg');","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var Modal = require('./Modal');","fix":{"range":[620,623],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('./index');","fix":{"range":[652,655],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"./dispatcher\");","fix":{"range":[682,685],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var Rooms = require(\"./Rooms\");","fix":{"range":[717,720],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var q = require('q');","fix":{"range":[750,753],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":25,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"max-len","severity":1,"message":"Line 47 exceeds the maximum line length of 90.","line":47,"column":1,"nodeType":"Program","source":"                description: \"Guest users can't create new rooms. Please register to create room and start a chat.\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":47,"column":116,"nodeType":"Property","source":"                description: \"Guest users can't create new rooms. Please register to create room and start a chat.\"","fix":{"range":[1727,1727],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":72,"column":41,"nodeType":"Property","source":"                guest_access: 'can_join'","fix":{"range":[2621,2621],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":76,"column":10,"nodeType":"ObjectExpression","source":"        }","fix":{"range":[2714,2714],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":101,"column":28,"nodeType":"Property","source":"            room_id: roomId","fix":{"range":[3527,3527],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":107,"column":40,"nodeType":"Property","source":"            description: err.toString()","fix":{"range":[3712,3712],"text":","}}],"errorCount":5,"warningCount":8,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar MatrixClientPeg = require('./MatrixClientPeg');\nvar Modal = require('./Modal');\nvar sdk = require('./index');\nvar dis = require(\"./dispatcher\");\nvar Rooms = require(\"./Rooms\");\n\nvar q = require('q');\n\n/**\n * Create a new room, and switch to it.\n *\n * Returns a promise which resolves to the room id, or null if the\n * action was aborted or failed.\n *\n * @param {object=} opts parameters for creating the room\n * @param {string=} opts.dmUserId If specified, make this a DM room for this user and invite them\n * @param {object=} opts.createOpts set of options to pass to createRoom call.\n */\nfunction createRoom(opts) {\n    opts = opts || {};\n\n    const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");\n    const NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");\n    const Loader = sdk.getComponent(\"elements.Spinner\");\n\n    const client = MatrixClientPeg.get();\n    if (client.isGuest()) {\n        setTimeout(()=>{\n            Modal.createDialog(NeedToRegisterDialog, {\n                title: \"Please Register\",\n                description: \"Guest users can't create new rooms. Please register to create room and start a chat.\"\n            });\n        }, 0);\n        return q(null);\n    }\n\n    const defaultPreset = opts.dmUserId ? 'trusted_private_chat' : 'private_chat';\n\n    // set some defaults for the creation\n    const createOpts = opts.createOpts || {};\n    createOpts.preset = createOpts.preset || defaultPreset;\n    createOpts.visibility = createOpts.visibility || 'private';\n    if (opts.dmUserId && createOpts.invite === undefined) {\n        createOpts.invite = [opts.dmUserId];\n    }\n    if (opts.dmUserId && createOpts.is_direct === undefined) {\n        createOpts.is_direct = true;\n    }\n\n    // Allow guests by default since the room is private and they'd\n    // need an invite. This means clicking on a 3pid invite email can\n    // actually drop you right in to a chat.\n    createOpts.initial_state = createOpts.initial_state || [\n        {\n            content: {\n                guest_access: 'can_join'\n            },\n            type: 'm.room.guest_access',\n            state_key: '',\n        }\n    ];\n\n    let modal;\n    setTimeout(()=>{\n        modal = Modal.createDialog(Loader, null, 'mx_Dialog_spinner');\n    }, 0);\n\n    let roomId;\n    return client.createRoom(createOpts).finally(function() {\n        if (modal) modal.close();\n    }).then(function(res) {\n        roomId = res.room_id;\n        if (opts.dmUserId) {\n            return Rooms.setDMRoom(roomId, opts.dmUserId);\n        } else {\n            return q();\n        }\n    }).then(function() {\n        // NB createRoom doesn't block on the client seeing the echo that the\n        // room has been created, so we race here with the client knowing that\n        // the room exists, causing things like\n        // https://github.com/vector-im/vector-web/issues/1813\n        dis.dispatch({\n            action: 'view_room',\n            room_id: roomId\n        });\n        return roomId;\n    }, function(err) {\n        Modal.createDialog(ErrorDialog, {\n            title: \"Failure to create room\",\n            description: err.toString()\n        });\n        return null;\n    });\n}\n\nmodule.exports = createRoom;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/DateUtils.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];","fix":{"range":[583,586],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 20 exceeds the maximum line length of 90.","line":20,"column":1,"nodeType":"Program","source":"var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];","fix":{"range":[645,648],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":9,"nodeType":"VariableDeclaration","source":"        var now = new Date();","fix":{"range":[984,987],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":33,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[1145,1154],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 35 exceeds the maximum line length of 90.","line":35,"column":1,"nodeType":"Program","source":"            return days[date.getDay()] + \" \" + pad(date.getHours()) + ':' + pad(date.getMinutes());"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":36,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[1332,1341],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 38 exceeds the maximum line length of 90.","line":38,"column":1,"nodeType":"Program","source":"            return days[date.getDay()] + \", \" + months[date.getMonth()] + \" \" + date.getDate() + \" \" + pad(date.getHours()) + ':' + pad(date.getMinutes());"},{"ruleId":"max-len","severity":1,"message":"Line 49 exceeds the maximum line length of 90.","line":49,"column":1,"nodeType":"Program","source":"        return ('00' + date.getHours()).slice(-2) + ':' + ('00' + date.getMinutes()).slice(-2);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":50,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2008,2008],"text":","}}],"errorCount":1,"warningCount":9,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nmodule.exports = {\n    formatDate: function(date) {\n        // date.toLocaleTimeString is completely system dependent.\n        // just go 24h for now\n        function pad(n) {\n            return (n < 10 ? '0' : '') + n;\n        }\n\n        var now = new Date();\n        if (date.toDateString() === now.toDateString()) {\n            return pad(date.getHours()) + ':' + pad(date.getMinutes());\n        }\n        else if (now.getTime() - date.getTime() < 6 * 24 * 60 * 60 * 1000) {\n            return days[date.getDay()] + \" \" + pad(date.getHours()) + ':' + pad(date.getMinutes());\n        }\n        else /* if (now.getFullYear() === date.getFullYear()) */ {\n            return days[date.getDay()] + \", \" + months[date.getMonth()] + \" \" + date.getDate() + \" \" + pad(date.getHours()) + ':' + pad(date.getMinutes());\n        }\n        /*\n        else {\n            return days[date.getDay()] + \", \" + months[date.getMonth()] + \" \" + date.getDate() + \" \" + date.getFullYear() + \" \" + pad(date.getHours()) + ':' + pad(date.getMinutes());\n        }\n        */\n    },\n\n    formatTime: function(date) {\n        //return pad(date.getHours()) + ':' + pad(date.getMinutes());\n        return ('00' + date.getHours()).slice(-2) + ':' + ('00' + date.getMinutes()).slice(-2);\n    }\n};\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/dispatcher.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var flux = require(\"flux\");","fix":{"range":[583,586],"text":"let"}}],"errorCount":0,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar flux = require(\"flux\");\n\nclass MatrixDispatcher extends flux.Dispatcher {\n    /**\n     * @param {Object} payload Required. The payload to dispatch.\n     *        Must contain at least an 'action' key.\n     * @param {boolean} sync Optional. Pass true to dispatch\n     *        synchronously. This is useful for anything triggering\n     *        an operation that the browser requires user interaction\n     *        for.\n     */\n    dispatch(payload, sync) {\n        if (sync) {\n            super.dispatch(payload);\n        } else {\n            // Unless the caller explicitly asked for us to dispatch synchronously,\n            // we always set a timeout to do this: The flux dispatcher complains\n            // if you dispatch from within a dispatch, so rather than action\n            // handlers having to worry about not calling anything that might\n            // then dispatch, we just do dispatches asynchronously.\n            setTimeout(super.dispatch.bind(this, payload), 0);\n        }\n    }\n}\n\n// XXX this is a big anti-pattern, and makes testing hard. Because dispatches\n// happen asynchronously, it is possible for actions dispatched in one thread\n// to arrive in another, with *hilarious* consequences.\nif (global.mxDispatcher === undefined) {\n    global.mxDispatcher = new MatrixDispatcher();\n}\nmodule.exports = global.mxDispatcher;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/email.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var EMAIL_ADDRESS_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;","fix":{"range":[562,565],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":22,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[739,739],"text":","}}],"errorCount":1,"warningCount":1,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar EMAIL_ADDRESS_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n\nmodule.exports = {\n    looksValid: function(email) {\n        return EMAIL_ADDRESS_REGEX.test(email);\n    }\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Entities.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'React' is assigned a value but never used.","line":17,"column":5,"nodeType":"Identifier","source":"var React = require('react');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('./index');","fix":{"range":[598,601],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":5,"nodeType":"VariableDeclaration","source":"    var parts = name.split(\" \");","fix":{"range":[1107,1110],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":10,"nodeType":"VariableDeclaration","source":"    for (var i = 0; i < parts.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":70,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberTile = sdk.getComponent(\"rooms.MemberTile\");","fix":{"range":[1842,1845],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":96,"column":9,"nodeType":"VariableDeclaration","source":"        var UserTile = sdk.getComponent(\"rooms.UserTile\");","fix":{"range":[2453,2456],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 99 exceeds the maximum line length of 90.","line":99,"column":1,"nodeType":"Program","source":"                showInviteButton={this.showInviteButton} onClick={this.onClick.bind(this)} />"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use .bind()","line":99,"column":58,"nodeType":"JSXAttribute","source":"                showInviteButton={this.showInviteButton} onClick={this.onClick.bind(this)} />"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":104,"column":9,"nodeType":"VariableDeclaration","source":"        var name = this.model.displayName || this.model.userId;","fix":{"range":[2732,2735],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":112,"column":9,"nodeType":"VariableDeclaration","source":"        var entity = new Entity();","fix":{"range":[2927,2930],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":140,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[3666,3666],"text":","}}],"errorCount":3,"warningCount":9,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar sdk = require('./index');\n\nfunction isMatch(query, name, uid) {\n    query = query.toLowerCase();\n    name = name.toLowerCase();\n    uid = uid.toLowerCase();\n\n    // direct prefix matches\n    if (name.indexOf(query) === 0 || uid.indexOf(query) === 0) {\n        return true;\n    }\n\n    // strip @ on uid and try matching again\n    if (uid.length > 1 && uid[0] === \"@\" && uid.substring(1).indexOf(query) === 0) {\n        return true;\n    }\n\n    // split spaces in name and try matching constituent parts\n    var parts = name.split(\" \");\n    for (var i = 0; i < parts.length; i++) {\n        if (parts[i].indexOf(query) === 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/*\n * Converts various data models to Entity objects.\n *\n * Entity objects provide an interface for UI components to use to display\n * members in a data-agnostic way. This means they don't need to care if the\n * underlying data model is a RoomMember, User or 3PID data structure, it just\n * cares about rendering.\n */\n\nclass Entity {\n    constructor(model) {\n        this.model = model;\n    }\n\n    getJsx() {\n        return null;\n    }\n\n    matches(queryString) {\n        return false;\n    }\n}\n\nclass MemberEntity extends Entity {\n    getJsx() {\n        var MemberTile = sdk.getComponent(\"rooms.MemberTile\");\n        return (\n            <MemberTile key={this.model.userId} member={this.model} />\n        );\n    }\n\n    matches(queryString) {\n        return isMatch(queryString, this.model.name, this.model.userId);\n    }\n}\n\nclass UserEntity extends Entity {\n\n    constructor(model, showInviteButton, inviteFn) {\n        super(model);\n        this.showInviteButton = Boolean(showInviteButton);\n        this.inviteFn = inviteFn;\n    }\n\n    onClick() {\n        if (this.inviteFn) {\n            this.inviteFn(this.model.userId);\n        }\n    }\n\n    getJsx() {\n        var UserTile = sdk.getComponent(\"rooms.UserTile\");\n        return (\n            <UserTile key={this.model.userId} user={this.model}\n                showInviteButton={this.showInviteButton} onClick={this.onClick.bind(this)} />\n        );\n    }\n\n    matches(queryString) {\n        var name = this.model.displayName || this.model.userId;\n        return isMatch(queryString, name, this.model.userId);\n    }\n}\n\n\nmodule.exports = {\n    newEntity: function(jsx, matchFn) {\n        var entity = new Entity();\n        entity.getJsx = function() {\n            return jsx;\n        };\n        entity.matches = matchFn;\n        return entity;\n    },\n\n    /**\n     * @param {RoomMember[]} members\n     * @return {Entity[]}\n     */\n    fromRoomMembers: function(members) {\n        return members.map(function(m) {\n            return new MemberEntity(m);\n        });\n    },\n\n    /**\n     * @param {User[]} users\n     * @param {boolean} showInviteButton\n     * @param {Function} inviteFn Called with the user ID.\n     * @return {Entity[]}\n     */\n    fromUsers: function(users, showInviteButton, inviteFn) {\n        return users.map(function(u) {\n            return new UserEntity(u, showInviteButton, inviteFn);\n        });\n    }\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/extend.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":10,"nodeType":"VariableDeclaration","source":"    for (var i in src) {","fix":{"range":[631,634],"text":"let"}}],"errorCount":0,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nmodule.exports = function(dest, src) {\n    for (var i in src) {\n        if (src.hasOwnProperty(i)) {\n            dest[i] = src[i];\n        }\n    }\n    return dest;\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/HtmlUtils.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'React' is assigned a value but never used.","line":19,"column":5,"nodeType":"Identifier","source":"var React = require('react');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var sanitizeHtml = require('sanitize-html');","fix":{"range":[613,616],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var highlight = require('highlight.js');","fix":{"range":[658,661],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'highlight' is assigned a value but never used.","line":21,"column":5,"nodeType":"Identifier","source":"var highlight = require('highlight.js');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var linkifyMatrix = require('./linkify-matrix');","fix":{"range":[699,702],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":36,"column":5,"nodeType":"VariableDeclaration","source":"    let replaceWith, unicode, alt;"},{"ruleId":"max-len","severity":1,"message":"Line 40 exceeds the maximum line length of 90.","line":40,"column":1,"nodeType":"Program","source":"        if ( (typeof unicodeChar === 'undefined') || (unicodeChar === '') || (!(unicodeChar in emojione.jsEscapeMap)) ) {"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":43,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[1575,1584],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 49 exceeds the maximum line length of 90.","line":49,"column":1,"nodeType":"Program","source":"            alt = (emojione.unicodeAlt) ? emojione.convert(unicode.toUpperCase()) : mappedUnicode[unicode];"},{"ruleId":"max-len","severity":1,"message":"Line 52 exceeds the maximum line length of 90.","line":52,"column":1,"nodeType":"Program","source":"            replaceWith = `<img class=\"mx_emojione\" title=\"${title}\" alt=\"${alt}\" src=\"${emojione.imagePathSVG}${unicode}.svg${emojione.cacheBustParam}\"/>`;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":83,"column":1,"nodeType":"VariableDeclaration","source":"var sanitizeHtmlParams = {","fix":{"range":[2901,2904],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":90,"column":70,"nodeType":"Literal","source":"        'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre'","fix":{"range":[3325,3325],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":116,"column":17,"nodeType":"VariableDeclaration","source":"                var m;","fix":{"range":[4347,4350],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":126,"column":21,"nodeType":"VariableDeclaration","source":"                    var entity = m[1];","fix":{"range":[4744,4747],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":129,"column":21,"nodeType":"Punctuator","source":"                    }","fix":{"range":[4888,4909],"text":"                    "}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'attribs'.","line":137,"column":40,"nodeType":"Identifier","source":"            return { tagName: tagName, attribs : attribs };","fix":{"range":[5249,5250],"text":""}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":148,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":160,"column":9,"nodeType":"VariableDeclaration","source":"        var lastOffset = 0;","fix":{"range":[5905,5908],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":161,"column":9,"nodeType":"VariableDeclaration","source":"        var offset;","fix":{"range":[5933,5936],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":162,"column":9,"nodeType":"VariableDeclaration","source":"        var nodes = [];","fix":{"range":[5953,5956],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":164,"column":9,"nodeType":"VariableDeclaration","source":"        var safeHighlight = safeHighlights[0];","fix":{"range":[5978,5981],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 165 exceeds the maximum line length of 90.","line":165,"column":1,"nodeType":"Program","source":"        while ((offset = safeSnippet.toLowerCase().indexOf(safeHighlight.toLowerCase(), lastOffset)) >= 0) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":168,"column":17,"nodeType":"VariableDeclaration","source":"                var subSnippet = safeSnippet.substring(lastOffset, offset);"},{"ruleId":"max-len","severity":1,"message":"Line 169 exceeds the maximum line length of 90.","line":169,"column":1,"nodeType":"Program","source":"                nodes = nodes.concat(this._applySubHighlights(subSnippet, safeHighlights));"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":174,"column":13,"nodeType":"VariableDeclaration","source":"            var endOffset = offset + safeHighlight.length;","fix":{"range":[6518,6521],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 175 exceeds the maximum line length of 90.","line":175,"column":1,"nodeType":"Program","source":"            nodes.push(this._processSnippet(safeSnippet.substring(offset, endOffset), true));"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":192,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[7244,7253],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":214,"column":9,"nodeType":"VariableDeclaration","source":"        var span = \"<span class=\\\"\"+this.highlightClass+\"\\\">\"","fix":{"range":[7841,7844],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'TextHighlighter' is defined but never used.","line":225,"column":7,"nodeType":"Identifier","source":"class TextHighlighter extends BaseHighlighter {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":239,"column":9,"nodeType":"VariableDeclaration","source":"        var key = this._key++;","fix":{"range":[8520,8523],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":241,"column":9,"nodeType":"VariableDeclaration","source":"        var node =","fix":{"range":[8552,8555],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":266,"column":5,"nodeType":"VariableDeclaration","source":"    var isHtml = (content.format === \"org.matrix.custom.html\");","fix":{"range":[9208,9211],"text":"let"}},{"ruleId":"prefer-const","severity":1,"message":"'body' is never reassigned. Use 'const' instead.","line":267,"column":9,"nodeType":"Identifier","source":"    let body = isHtml ? content.formatted_body : escape(content.body);","fix":{"range":[9272,9275],"text":"const"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":269,"column":5,"nodeType":"VariableDeclaration","source":"    var safeBody;","fix":{"range":[9344,9347],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 276 exceeds the maximum line length of 90.","line":276,"column":1,"nodeType":"Program","source":"            var highlighter = new HtmlHighlighter(\"mx_EventTile_searchHighlight\", opts.highlightLink);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":276,"column":13,"nodeType":"VariableDeclaration","source":"            var highlighter = new HtmlHighlighter(\"mx_EventTile_searchHighlight\", opts.highlightLink);","fix":{"range":[9850,9853],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":277,"column":13,"nodeType":"VariableDeclaration","source":"            var safeHighlights = highlights.map(function(highlight) {","fix":{"range":[9953,9956],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":287,"column":5,"nodeType":"Punctuator","source":"    }","fix":{"range":[10484,10489],"text":"    "}},{"ruleId":"prefer-const","severity":1,"message":"'contentBodyTrimmed' is never reassigned. Use 'const' instead.","line":293,"column":9,"nodeType":"Identifier","source":"    let contentBodyTrimmed = content.body.trim();","fix":{"range":[10587,10590],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'match' is never reassigned. Use 'const' instead.","line":294,"column":9,"nodeType":"Identifier","source":"    let match = EMOJI_REGEX.exec(contentBodyTrimmed);","fix":{"range":[10637,10640],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'emojiBody' is never reassigned. Use 'const' instead.","line":295,"column":9,"nodeType":"Identifier","source":"    let emojiBody = match && match[0] && match[0].length === contentBodyTrimmed.length;","fix":{"range":[10691,10694],"text":"const"}}],"errorCount":4,"warningCount":38,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar React = require('react');\nvar sanitizeHtml = require('sanitize-html');\nvar highlight = require('highlight.js');\nvar linkifyMatrix = require('./linkify-matrix');\nimport escape from 'lodash/escape';\nimport emojione from 'emojione';\nimport classNames from 'classnames';\n\nemojione.imagePathSVG = 'emojione/svg/';\nemojione.imageType = 'svg';\n\nconst EMOJI_REGEX = new RegExp(emojione.unicodeRegexp+\"+\", \"gi\");\n\n/* modified from https://github.com/Ranks/emojione/blob/master/lib/js/emojione.js\n * because we want to include emoji shortnames in title text\n */\nexport function unicodeToImage(str) {\n    let replaceWith, unicode, alt;\n    const mappedUnicode = emojione.mapUnicodeToShort();\n\n    str = str.replace(emojione.regUnicode, function(unicodeChar) {\n        if ( (typeof unicodeChar === 'undefined') || (unicodeChar === '') || (!(unicodeChar in emojione.jsEscapeMap)) ) {\n            // if the unicodeChar doesnt exist just return the entire match\n            return unicodeChar;\n        }\n        else {\n            // get the unicode codepoint from the actual char\n            unicode = emojione.jsEscapeMap[unicodeChar];\n\n            // depending on the settings, we'll either add the native unicode as the alt tag, otherwise the shortname\n            alt = (emojione.unicodeAlt) ? emojione.convert(unicode.toUpperCase()) : mappedUnicode[unicode];\n            const title = mappedUnicode[unicode];\n\n            replaceWith = `<img class=\"mx_emojione\" title=\"${title}\" alt=\"${alt}\" src=\"${emojione.imagePathSVG}${unicode}.svg${emojione.cacheBustParam}\"/>`;\n            return replaceWith;\n        }\n    });\n\n    return str;\n}\n\nexport function stripParagraphs(html: string): string {\n    const contentDiv = document.createElement('div');\n    contentDiv.innerHTML = html;\n\n    if (contentDiv.children.length === 0) {\n        return contentDiv.innerHTML;\n    }\n\n    let contentHTML = \"\";\n    for (let i=0; i<contentDiv.children.length; i++) {\n        const element = contentDiv.children[i];\n        if (element.tagName.toLowerCase() === 'p') {\n            contentHTML += element.innerHTML + '<br />';\n        } else {\n            const temp = document.createElement('div');\n            temp.appendChild(element.cloneNode(true));\n            contentHTML += temp.innerHTML;\n        }\n    }\n\n    return contentHTML;\n}\n\nvar sanitizeHtmlParams = {\n    allowedTags: [\n        'font', // custom to matrix for IRC-style font coloring\n        'del', // for markdown\n        // deliberately no h1/h2 to stop people shouting.\n        'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',\n        'nl', 'li', 'b', 'i', 'u', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div',\n        'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre'\n    ],\n    allowedAttributes: {\n        // custom ones first:\n        font: ['color'], // custom to matrix\n        a: ['href', 'name', 'target', 'rel'], // remote target: custom to matrix\n        // We don't currently allow img itself by default, but this\n        // would make sense if we did\n        img: ['src'],\n    },\n    // Lots of these won't come up by default because we don't allow them\n    selfClosing: ['img', 'br', 'hr', 'area', 'base', 'basefont', 'input', 'link', 'meta'],\n    // URL schemes we permit\n    allowedSchemes: ['http', 'https', 'ftp', 'mailto'],\n\n    // DO NOT USE. sanitize-html allows all URL starting with '//'\n    // so this will always allow links to whatever scheme the\n    // host page is served over.\n    allowedSchemesByTag: {},\n\n    transformTags: { // custom to matrix\n        // add blank targets to all hyperlinks except vector URLs\n        'a': function(tagName, attribs) {\n            if (attribs.href) {\n                attribs.target = '_blank'; // by default\n\n                var m;\n                // FIXME: horrible duplication with linkify-matrix\n                m = attribs.href.match(linkifyMatrix.VECTOR_URL_PATTERN);\n                if (m) {\n                    attribs.href = m[1];\n                    delete attribs.target;\n                }\n\n                m = attribs.href.match(linkifyMatrix.MATRIXTO_URL_PATTERN);\n                if (m) {\n                    var entity = m[1];\n                    if (entity[0] === '@') {\n                        attribs.href = '#/user/' + entity;\n                    }\n                    else if (entity[0] === '#' || entity[0] === '!') {\n                        attribs.href = '#/room/' + entity;\n                    }\n                    delete attribs.target;\n                }\n            }\n            attribs.rel = 'noopener'; // https://mathiasbynens.github.io/rel-noopener/\n            return { tagName: tagName, attribs : attribs };\n        },\n    },\n};\n\nclass BaseHighlighter {\n    constructor(highlightClass, highlightLink) {\n        this.highlightClass = highlightClass;\n        this.highlightLink = highlightLink;\n    }\n\n    /**\n     * apply the highlights to a section of text\n     *\n     * @param {string} safeSnippet The snippet of text to apply the highlights\n     *     to.\n     * @param {string[]} safeHighlights A list of substrings to highlight,\n     *     sorted by descending length.\n     *\n     * returns a list of results (strings for HtmlHighligher, react nodes for\n     * TextHighlighter).\n     */\n    applyHighlights(safeSnippet, safeHighlights) {\n        var lastOffset = 0;\n        var offset;\n        var nodes = [];\n\n        var safeHighlight = safeHighlights[0];\n        while ((offset = safeSnippet.toLowerCase().indexOf(safeHighlight.toLowerCase(), lastOffset)) >= 0) {\n            // handle preamble\n            if (offset > lastOffset) {\n                var subSnippet = safeSnippet.substring(lastOffset, offset);\n                nodes = nodes.concat(this._applySubHighlights(subSnippet, safeHighlights));\n            }\n\n            // do highlight. use the original string rather than safeHighlight\n            // to preserve the original casing.\n            var endOffset = offset + safeHighlight.length;\n            nodes.push(this._processSnippet(safeSnippet.substring(offset, endOffset), true));\n\n            lastOffset = endOffset;\n        }\n\n        // handle postamble\n        if (lastOffset !== safeSnippet.length) {\n            subSnippet = safeSnippet.substring(lastOffset, undefined);\n            nodes = nodes.concat(this._applySubHighlights(subSnippet, safeHighlights));\n        }\n        return nodes;\n    }\n\n    _applySubHighlights(safeSnippet, safeHighlights) {\n        if (safeHighlights[1]) {\n            // recurse into this range to check for the next set of highlight matches\n            return this.applyHighlights(safeSnippet, safeHighlights.slice(1));\n        }\n        else {\n            // no more highlights to be found, just return the unhighlighted string\n            return [this._processSnippet(safeSnippet, false)];\n        }\n    }\n}\n\nclass HtmlHighlighter extends BaseHighlighter {\n    /* highlight the given snippet if required\n     *\n     * snippet: content of the span; must have been sanitised\n     * highlight: true to highlight as a search match\n     *\n     * returns an HTML string\n     */\n    _processSnippet(snippet, highlight) {\n        if (!highlight) {\n            // nothing required here\n            return snippet;\n        }\n\n        var span = \"<span class=\\\"\"+this.highlightClass+\"\\\">\"\n            + snippet + \"</span>\";\n\n        if (this.highlightLink) {\n            span = \"<a href=\\\"\"+encodeURI(this.highlightLink)+\"\\\">\"\n                +span+\"</a>\";\n        }\n        return span;\n    }\n}\n\nclass TextHighlighter extends BaseHighlighter {\n    constructor(highlightClass, highlightLink) {\n        super(highlightClass, highlightLink);\n        this._key = 0;\n    }\n\n    /* create a <span> node to hold the given content\n     *\n     * snippet: content of the span\n     * highlight: true to highlight as a search match\n     *\n     * returns a React node\n     */\n    _processSnippet(snippet, highlight) {\n        var key = this._key++;\n\n        var node =\n            <span key={key} className={highlight ? this.highlightClass : null }>\n                { snippet }\n            </span>;\n\n        if (highlight && this.highlightLink) {\n            node = <a key={key} href={this.highlightLink}>{node}</a>;\n        }\n\n        return node;\n    }\n}\n\n\n    /* turn a matrix event body into html\n     *\n     * content: 'content' of the MatrixEvent\n     *\n     * highlights: optional list of words to highlight, ordered by longest word first\n     *\n     * opts.highlightLink: optional href to add to highlighted words\n     */\nexport function bodyToHtml(content, highlights, opts) {\n    opts = opts || {};\n\n    var isHtml = (content.format === \"org.matrix.custom.html\");\n    let body = isHtml ? content.formatted_body : escape(content.body);\n\n    var safeBody;\n    // XXX: We sanitize the HTML whilst also highlighting its text nodes, to avoid accidentally trying\n    // to highlight HTML tags themselves.  However, this does mean that we don't highlight textnodes which\n    // are interrupted by HTML tags (not that we did before) - e.g. foo<span/>bar won't get highlighted\n    // by an attempt to search for 'foobar'.  Then again, the search query probably wouldn't work either\n    try {\n        if (highlights && highlights.length > 0) {\n            var highlighter = new HtmlHighlighter(\"mx_EventTile_searchHighlight\", opts.highlightLink);\n            var safeHighlights = highlights.map(function(highlight) {\n                return sanitizeHtml(highlight, sanitizeHtmlParams);\n            });\n            // XXX: hacky bodge to temporarily apply a textFilter to the sanitizeHtmlParams structure.\n            sanitizeHtmlParams.textFilter = function(safeText) {\n                return highlighter.applyHighlights(safeText, safeHighlights).join('');\n            };\n        }\n        safeBody = sanitizeHtml(body, sanitizeHtmlParams);\n        safeBody = unicodeToImage(safeBody);\n    }\n    finally {\n        delete sanitizeHtmlParams.textFilter;\n    }\n\n    EMOJI_REGEX.lastIndex = 0;\n    let contentBodyTrimmed = content.body.trim();\n    let match = EMOJI_REGEX.exec(contentBodyTrimmed);\n    let emojiBody = match && match[0] && match[0].length === contentBodyTrimmed.length;\n\n    const className = classNames({\n        'mx_EventTile_body': true,\n        'mx_EventTile_bigEmoji': emojiBody,\n        'markdown-body': isHtml,\n    });\n    return <span className={className} dangerouslySetInnerHTML={{ __html: safeBody }} />;\n}\n\nexport function emojifyText(text) {\n    return {\n        __html: unicodeToImage(escape(text)),\n    };\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/ImageUtils.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":21,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'fullWidth'.","line":21,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'fullHeight'.","line":21,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'thumbWidth'.","line":21,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'thumbHeight'.","line":21,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":45,"column":9,"nodeType":"VariableDeclaration","source":"        var widthMulti = thumbWidth / fullWidth;","fix":{"range":[1793,1796],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":46,"column":9,"nodeType":"VariableDeclaration","source":"        var heightMulti = thumbHeight / fullHeight;","fix":{"range":[1842,1845],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":50,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[2071,2080],"text":"        "}}],"errorCount":0,"warningCount":8,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nmodule.exports = {\n\n    /**\n     * Returns the actual height that an image of dimensions (fullWidth, fullHeight)\n     * will occupy if resized to fit inside a thumbnail bounding box of size\n     * (thumbWidth, thumbHeight).\n     *\n     * If the aspect ratio of the source image is taller than the aspect ratio of\n     * the thumbnail bounding box, then we return the thumbHeight parameter unchanged.\n     * Otherwise we return the thumbHeight parameter scaled down appropriately to\n     * reflect the actual height the scaled thumbnail occupies.\n     *\n     * This is very useful for calculating how much height a thumbnail will actually\n     * consume in the timeline, when performing scroll offset calcuations\n     * (e.g. scroll locking)\n     */\n    thumbHeight: function(fullWidth, fullHeight, thumbWidth, thumbHeight) {\n        if (!fullWidth || !fullHeight) {\n            // Cannot calculate thumbnail height for image: missing w/h in metadata. We can't even\n            // log this because it's spammy\n            return undefined;\n        }\n        if (fullWidth < thumbWidth && fullHeight < thumbHeight) {\n            // no scaling needs to be applied\n            return fullHeight;\n        }\n        var widthMulti = thumbWidth / fullWidth;\n        var heightMulti = thumbHeight / fullHeight;\n        if (widthMulti < heightMulti) {\n            // width is the dominant dimension so scaling will be fixed on that\n            return Math.floor(widthMulti * fullHeight);\n        }\n        else {\n            // height is the dominant dimension so scaling will be fixed on that\n            return Math.floor(heightMulti * fullHeight);\n        }\n    },\n};\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/index.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var Skinner = require('./Skinner');","fix":{"range":[568,571],"text":"let"}}],"errorCount":0,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar Skinner = require('./Skinner');\n\nmodule.exports.loadSkin = function(skinObject) {\n    Skinner.load(skinObject);\n};\n\nmodule.exports.resetSkin = function() {\n    Skinner.reset();\n};\n\nmodule.exports.getComponent = function(componentName) {\n    return Skinner.getComponent(componentName);\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Invite.js","messages":[{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":23,"column":50,"nodeType":"VariableDeclaration","source":"const mxidRegex = /^@\\S+:(?:\\S+\\.\\S+|localhost)$/","fix":{"range":[799,799],"text":";"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc return type.","line":51,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'roomId' but found 'The'.","line":51,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'addrs' but found 'Array'.","line":51,"column":1,"nodeType":"Block","source":"/**"}],"errorCount":1,"warningCount":3,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport MatrixClientPeg from './MatrixClientPeg';\nimport MultiInviter from './utils/MultiInviter';\n\nconst emailRegex = /^\\S+@\\S+\\.\\S+$/;\n\n// We allow localhost for mxids to avoid confusion\nconst mxidRegex = /^@\\S+:(?:\\S+\\.\\S+|localhost)$/\n\nexport function getAddressType(inputText) {\n    const isEmailAddress = emailRegex.test(inputText);\n    const isMatrixId = mxidRegex.test(inputText);\n\n    // sanity check the input for user IDs\n    if (isEmailAddress) {\n        return 'email';\n    } else if (isMatrixId) {\n        return 'mx';\n    } else {\n        return null;\n    }\n}\n\nexport function inviteToRoom(roomId, addr) {\n    const addrType = getAddressType(addr);\n\n    if (addrType == 'email') {\n        return MatrixClientPeg.get().inviteByEmail(roomId, addr);\n    } else if (addrType == 'mx') {\n        return MatrixClientPeg.get().invite(roomId, addr);\n    } else {\n        throw new Error('Unsupported address');\n    }\n}\n\n/**\n * Invites multiple addresses to a room\n * Simpler interface to utils/MultiInviter but with\n * no option to cancel.\n *\n * @param {roomId} The ID of the room to invite to\n * @param {array} Array of strings of addresses to invite. May be matrix IDs or 3pids.\n * @returns Promise\n */\nexport function inviteMultipleToRoom(roomId, addrs) {\n    const inviter = new MultiInviter(roomId);\n    return inviter.invite(addrs);\n}\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/KeyCode.js","messages":[],"errorCount":0,"warningCount":0},{"filePath":"/home/rav/work/matrix-react-sdk/src/Lifecycle.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":27,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'opts'.","line":27,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":125,"column":5,"nodeType":"VariableDeclaration","source":"    var client = Matrix.createClient({","fix":{"range":[4337,4340],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":157,"column":5,"nodeType":"VariableDeclaration","source":"    var client = Matrix.createClient({","fix":{"range":[5406,5409],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'hs_url' is not in camel case.","line":185,"column":11,"nodeType":"Identifier","source":"    const hs_url = localStorage.getItem(\"mx_hs_url\");"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'is_url' is not in camel case.","line":186,"column":11,"nodeType":"Identifier","source":"    const is_url = localStorage.getItem(\"mx_is_url\") || 'https://matrix.org';"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'access_token' is not in camel case.","line":187,"column":11,"nodeType":"Identifier","source":"    const access_token = localStorage.getItem(\"mx_access_token\");"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":188,"column":11,"nodeType":"Identifier","source":"    const user_id = localStorage.getItem(\"mx_user_id\");"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'device_id' is not in camel case.","line":189,"column":11,"nodeType":"Identifier","source":"    const device_id = localStorage.getItem(\"mx_device_id\");"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'is_guest' is not in camel case.","line":191,"column":9,"nodeType":"Identifier","source":"    let is_guest;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'is_guest' is not in camel case.","line":193,"column":9,"nodeType":"Identifier","source":"        is_guest = localStorage.getItem(\"mx_is_guest\") === \"true\";"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'is_guest' is not in camel case.","line":196,"column":9,"nodeType":"Identifier","source":"        is_guest = localStorage.getItem(\"matrix-is-guest\") === \"true\";"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'access_token' is not in camel case.","line":199,"column":9,"nodeType":"Identifier","source":"    if (access_token && user_id && hs_url) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":199,"column":25,"nodeType":"Identifier","source":"    if (access_token && user_id && hs_url) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'hs_url' is not in camel case.","line":199,"column":36,"nodeType":"Identifier","source":"    if (access_token && user_id && hs_url) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":214,"column":13,"nodeType":"VariableDeclaration","source":"            var msg = e.message;","fix":{"range":[7271,7274],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":275,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":303,"column":10,"nodeType":"ArrowFunctionExpression","source":"        }","fix":{"range":[10724,10724],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":360,"column":5,"nodeType":"VariableDeclaration","source":"    var cli = MatrixClientPeg.get();","fix":{"range":[12415,12418],"text":"let"}}],"errorCount":1,"warningCount":18,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport q from 'q';\nimport Matrix from 'matrix-js-sdk';\n\nimport MatrixClientPeg from './MatrixClientPeg';\nimport Notifier from './Notifier';\nimport UserActivity from './UserActivity';\nimport Presence from './Presence';\nimport dis from './dispatcher';\nimport DMRoomMap from './utils/DMRoomMap';\n\n/**\n * Called at startup, to attempt to build a logged-in Matrix session. It tries\n * a number of things:\n *\n * 0. if it looks like we are in the middle of a registration process, it does\n *    nothing.\n *\n * 1. if we have a loginToken in the (real) query params, it uses that to log\n *    in.\n *\n * 2. if we have a guest access token in the fragment query params, it uses\n *    that.\n *\n * 3. if an access token is stored in local storage (from a previous session),\n *    it uses that.\n *\n * 4. it attempts to auto-register as a guest user.\n *\n * If any of steps 1-4 are successful, it will call {setLoggedIn}, which in\n * turn will raise on_logged_in and will_start_client events.\n *\n * It returns a promise which resolves when the above process completes.\n *\n * @param {object} opts.realQueryParams: string->string map of the\n *     query-parameters extracted from the real query-string of the starting\n *     URI.\n *\n * @param {object} opts.fragmentQueryParams: string->string map of the\n *     query-parameters extracted from the #-fragment of the starting URI.\n *\n * @param {boolean} opts.enableGuest: set to true to enable guest access tokens\n *     and auto-guest registrations.\n *\n * @params {string} opts.guestHsUrl: homeserver URL. Only used if enableGuest is\n *     true; defines the HS to register against.\n *\n * @params {string} opts.guestIsUrl: homeserver URL. Only used if enableGuest is\n *     true; defines the IS to use.\n *\n */\nexport function loadSession(opts) {\n    const realQueryParams = opts.realQueryParams || {};\n    const fragmentQueryParams = opts.fragmentQueryParams || {};\n    let enableGuest = opts.enableGuest || false;\n    const guestHsUrl = opts.guestHsUrl;\n    const guestIsUrl = opts.guestIsUrl;\n    const defaultDeviceDisplayName = opts.defaultDeviceDisplayName;\n\n    if (fragmentQueryParams.client_secret && fragmentQueryParams.sid) {\n        // this happens during email validation: the email contains a link to the\n        // IS, which in turn redirects back to vector. We let MatrixChat create a\n        // Registration component which completes the next stage of registration.\n        console.log(\"Not registering as guest: registration already in progress.\");\n        return q();\n    }\n\n    if (!guestHsUrl) {\n        console.warn(\"Cannot enable guest access: can't determine HS URL to use\");\n        enableGuest = false;\n    }\n\n    if (realQueryParams.loginToken) {\n        if (!realQueryParams.homeserver) {\n            console.warn(\"Cannot log in with token: can't determine HS URL to use\");\n        } else {\n            return _loginWithToken(realQueryParams, defaultDeviceDisplayName);\n        }\n    }\n\n    if (enableGuest &&\n        fragmentQueryParams.guest_user_id &&\n        fragmentQueryParams.guest_access_token\n       ) {\n        console.log(\"Using guest access credentials\");\n        setLoggedIn({\n            userId: fragmentQueryParams.guest_user_id,\n            accessToken: fragmentQueryParams.guest_access_token,\n            homeserverUrl: guestHsUrl,\n            identityServerUrl: guestIsUrl,\n            guest: true,\n        });\n        return q();\n    }\n\n    if (_restoreFromLocalStorage()) {\n        return q();\n    }\n\n    if (enableGuest) {\n        return _registerAsGuest(guestHsUrl, guestIsUrl, defaultDeviceDisplayName);\n    }\n\n    // fall back to login screen\n    return q();\n}\n\nfunction _loginWithToken(queryParams, defaultDeviceDisplayName) {\n    // create a temporary MatrixClient to do the login\n    var client = Matrix.createClient({\n        baseUrl: queryParams.homeserver,\n    });\n\n    return client.login(\n        \"m.login.token\", {\n            token: queryParams.loginToken,\n            initial_device_display_name: defaultDeviceDisplayName,\n        },\n    ).then(function(data) {\n        console.log(\"Logged in with token\");\n        setLoggedIn({\n            userId: data.user_id,\n            deviceId: data.device_id,\n            accessToken: data.access_token,\n            homeserverUrl: queryParams.homeserver,\n            identityServerUrl: queryParams.identityServer,\n            guest: false,\n        });\n    }, (err) => {\n        console.error(\"Failed to log in with login token: \" + err + \" \" +\n                      err.data);\n    });\n}\n\nfunction _registerAsGuest(hsUrl, isUrl, defaultDeviceDisplayName) {\n    console.log(\"Doing guest login on %s\", hsUrl);\n\n    // TODO: we should probably de-duplicate this and Signup.Login.loginAsGuest.\n    // Not really sure where the right home for it is.\n\n    // create a temporary MatrixClient to do the login\n    var client = Matrix.createClient({\n        baseUrl: hsUrl,\n    });\n\n    return client.registerGuest({\n        body: {\n            initial_device_display_name: defaultDeviceDisplayName,\n        },\n    }).then((creds) => {\n        console.log(\"Registered as guest: %s\", creds.user_id);\n        setLoggedIn({\n            userId: creds.user_id,\n            deviceId: creds.device_id,\n            accessToken: creds.access_token,\n            homeserverUrl: hsUrl,\n            identityServerUrl: isUrl,\n            guest: true,\n        });\n    }, (err) => {\n        console.error(\"Failed to register as guest: \" + err + \" \" + err.data);\n    });\n}\n\n// returns true if a session is found in localstorage\nfunction _restoreFromLocalStorage() {\n    if (!localStorage) {\n        return false;\n    }\n    const hs_url = localStorage.getItem(\"mx_hs_url\");\n    const is_url = localStorage.getItem(\"mx_is_url\") || 'https://matrix.org';\n    const access_token = localStorage.getItem(\"mx_access_token\");\n    const user_id = localStorage.getItem(\"mx_user_id\");\n    const device_id = localStorage.getItem(\"mx_device_id\");\n\n    let is_guest;\n    if (localStorage.getItem(\"mx_is_guest\") !== null) {\n        is_guest = localStorage.getItem(\"mx_is_guest\") === \"true\";\n    } else {\n        // legacy key name\n        is_guest = localStorage.getItem(\"matrix-is-guest\") === \"true\";\n    }\n\n    if (access_token && user_id && hs_url) {\n        console.log(\"Restoring session for %s\", user_id);\n        try {\n            setLoggedIn({\n                userId: user_id,\n                deviceId: device_id,\n                accessToken: access_token,\n                homeserverUrl: hs_url,\n                identityServerUrl: is_url,\n                guest: is_guest,\n            });\n            return true;\n        } catch (e) {\n            console.log(\"Unable to restore session\", e);\n\n            var msg = e.message;\n            if (msg == \"OLM.BAD_LEGACY_ACCOUNT_PICKLE\") {\n                msg = \"You need to log back in to generate end-to-end encryption keys \"\n                    + \"for this device and submit the public key to your homeserver. \"\n                    + \"This is a once off; sorry for the inconvenience.\";\n            }\n\n            // don't leak things into the new session\n            _clearLocalStorage();\n\n            throw new Error(\"Unable to restore previous session: \" + msg);\n        }\n    } else {\n        console.log(\"No previous session found.\");\n        return false;\n    }\n}\n\n/**\n * Transitions to a logged-in state using the given credentials\n * @param {MatrixClientCreds} credentials The credentials to use\n */\nexport function setLoggedIn(credentials) {\n    credentials.guest = Boolean(credentials.guest);\n    console.log(\"setLoggedIn => %s (guest=%s) hs=%s\",\n                credentials.userId, credentials.guest,\n                credentials.homeserverUrl);\n\n    // persist the session\n    if (localStorage) {\n        try {\n            localStorage.setItem(\"mx_hs_url\", credentials.homeserverUrl);\n            localStorage.setItem(\"mx_is_url\", credentials.identityServerUrl);\n            localStorage.setItem(\"mx_user_id\", credentials.userId);\n            localStorage.setItem(\"mx_access_token\", credentials.accessToken);\n            localStorage.setItem(\"mx_is_guest\", JSON.stringify(credentials.guest));\n\n            // if we didn't get a deviceId from the login, leave mx_device_id unset,\n            // rather than setting it to \"undefined\".\n            //\n            // (in this case MatrixClient doesn't bother with the crypto stuff\n            // - that's fine for us).\n            if (credentials.deviceId) {\n                localStorage.setItem(\"mx_device_id\", credentials.deviceId);\n            }\n\n            console.log(\"Session persisted for %s\", credentials.userId);\n        } catch (e) {\n            console.warn(\"Error using local storage: can't persist session!\", e);\n        }\n    } else {\n        console.warn(\"No local storage available: can't persist session!\");\n    }\n\n    MatrixClientPeg.replaceUsingCreds(credentials);\n\n    dis.dispatch({action: 'on_logged_in'});\n\n    startMatrixClient();\n}\n\n/**\n * Logs the current session out and transitions to the logged-out state\n */\nexport function logout() {\n    if (MatrixClientPeg.get().isGuest()) {\n        // logout doesn't work for guest sessions\n        // Also we sometimes want to re-log in a guest session\n        // if we abort the login\n\n        // use settimeout to avoid racing with react unmounting components\n        // which need a valid matrixclientpeg\n        setTimeout(()=>{\n            onLoggedOut();\n        }, 0);\n        return;\n    }\n\n    return MatrixClientPeg.get().logout().then(onLoggedOut,\n        (err) => {\n            // Just throwing an error here is going to be very unhelpful\n            // if you're trying to log out because your server's down and\n            // you want to log into a different server, so just forget the\n            // access token. It's annoying that this will leave the access\n            // token still valid, but we should fix this by having access\n            // tokens expire (and if you really think you've been compromised,\n            // change your password).\n            console.log(\"Failed to call logout API: token will not be invalidated\");\n            onLoggedOut();\n        }\n    );\n}\n\n/**\n * Starts the matrix client and all other react-sdk services that\n * listen for events while a session is logged in.\n */\nexport function startMatrixClient() {\n    // dispatch this before starting the matrix client: it's used\n    // to add listeners for the 'sync' event so otherwise we'd have\n    // a race condition (and we need to dispatch synchronously for this\n    // to work).\n    dis.dispatch({action: 'will_start_client'}, true);\n\n    Notifier.start();\n    UserActivity.start();\n    Presence.start();\n    DMRoomMap.makeShared().start();\n\n    MatrixClientPeg.start();\n}\n\n/*\n * Stops a running client and all related services, used after\n * a session has been logged out / ended.\n */\nexport function onLoggedOut() {\n    _clearLocalStorage();\n    stopMatrixClient();\n    dis.dispatch({action: 'on_logged_out'});\n}\n\nfunction _clearLocalStorage() {\n    if (!window.localStorage) {\n        return;\n    }\n    const hsUrl = window.localStorage.getItem(\"mx_hs_url\");\n    const isUrl = window.localStorage.getItem(\"mx_is_url\");\n    window.localStorage.clear();\n\n    // preserve our HS & IS URLs for convenience\n    // N.B. we cache them in hsUrl/isUrl and can't really inline them\n    // as getCurrentHsUrl() may call through to localStorage.\n    // NB. We do clear the device ID (as well as all the settings)\n    if (hsUrl) window.localStorage.setItem(\"mx_hs_url\", hsUrl);\n    if (isUrl) window.localStorage.setItem(\"mx_is_url\", isUrl);\n}\n\n/**\n * Stop all the background processes related to the current client\n */\nexport function stopMatrixClient() {\n    Notifier.stop();\n    UserActivity.stop();\n    Presence.stop();\n    if (DMRoomMap.shared()) DMRoomMap.shared().stop();\n    var cli = MatrixClientPeg.get();\n    if (cli) {\n        cli.stopClient();\n        cli.removeAllListeners();\n        MatrixClientPeg.unset();\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/linkify-matrix.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":5,"nodeType":"VariableDeclaration","source":"    var TT = linkify.scanner.TOKENS;","fix":{"range":[625,628],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":5,"nodeType":"VariableDeclaration","source":"    var MT = linkify.parser.TOKENS;","fix":{"range":[682,685],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":5,"nodeType":"VariableDeclaration","source":"    var MultiToken = MT.Base;","fix":{"range":[718,721],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":5,"nodeType":"VariableDeclaration","source":"    var S_START = linkify.parser.start;","fix":{"range":[748,751],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 26 exceeds the maximum line length of 90.","line":26,"column":1,"nodeType":"Program","source":"        throw new Error(\"linkify-matrix requires linkifyjs 2.1.1: this version is too old.\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":5,"nodeType":"VariableDeclaration","source":"    var ROOMALIAS = function(value) {","fix":{"range":[929,932],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":5,"nodeType":"VariableDeclaration","source":"    var S_HASH = new linkify.parser.State();","fix":{"range":[1118,1121],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":5,"nodeType":"VariableDeclaration","source":"    var S_HASH_NAME = new linkify.parser.State();","fix":{"range":[1163,1166],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":38,"column":5,"nodeType":"VariableDeclaration","source":"    var S_HASH_NAME_COLON = new linkify.parser.State();","fix":{"range":[1213,1216],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":39,"column":5,"nodeType":"VariableDeclaration","source":"    var S_HASH_NAME_COLON_DOMAIN = new linkify.parser.State();","fix":{"range":[1269,1272],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":40,"column":5,"nodeType":"VariableDeclaration","source":"    var S_HASH_NAME_COLON_DOMAIN_DOT = new linkify.parser.State();","fix":{"range":[1332,1335],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":41,"column":5,"nodeType":"VariableDeclaration","source":"    var S_ROOMALIAS = new linkify.parser.State(ROOMALIAS);","fix":{"range":[1399,1402],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":43,"column":5,"nodeType":"VariableDeclaration","source":"    var roomname_tokens = [","fix":{"range":[1459,1462],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'roomname_tokens' is not in camel case.","line":43,"column":9,"nodeType":"Identifier","source":"    var roomname_tokens = ["},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":72,"column":5,"nodeType":"VariableDeclaration","source":"    var USERID = function(value) {","fix":{"range":[2349,2352],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":79,"column":5,"nodeType":"VariableDeclaration","source":"    var S_AT = new linkify.parser.State();","fix":{"range":[2529,2532],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":80,"column":5,"nodeType":"VariableDeclaration","source":"    var S_AT_NAME = new linkify.parser.State();","fix":{"range":[2572,2575],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":81,"column":5,"nodeType":"VariableDeclaration","source":"    var S_AT_NAME_COLON = new linkify.parser.State();","fix":{"range":[2620,2623],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":82,"column":5,"nodeType":"VariableDeclaration","source":"    var S_AT_NAME_COLON_DOMAIN = new linkify.parser.State();","fix":{"range":[2674,2677],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":83,"column":5,"nodeType":"VariableDeclaration","source":"    var S_AT_NAME_COLON_DOMAIN_DOT = new linkify.parser.State();","fix":{"range":[2735,2738],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":84,"column":5,"nodeType":"VariableDeclaration","source":"    var S_USERID = new linkify.parser.State(USERID);","fix":{"range":[2800,2803],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":86,"column":5,"nodeType":"VariableDeclaration","source":"    var username_tokens = [","fix":{"range":[2854,2857],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'username_tokens' is not in camel case.","line":86,"column":9,"nodeType":"Identifier","source":"    var username_tokens = ["},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":117,"column":1,"nodeType":"VariableDeclaration","source":"var escapeRegExp = function(string) {","fix":{"range":[3785,3788],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 128 exceeds the maximum line length of 90.","line":128,"column":1,"nodeType":"Program","source":"matrixLinkify.MATRIXTO_URL_PATTERN = \"^(?:https?:\\/\\/)?(?:www\\\\.)?matrix\\\\.to/#/((#|@|!).*)\";"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":138,"column":22,"nodeType":"Property","source":"                    }","fix":{"range":[4624,4624],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":144,"column":22,"nodeType":"Property","source":"                    }","fix":{"range":[4822,4822],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":155,"column":17,"nodeType":"VariableDeclaration","source":"                var m;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":163,"column":21,"nodeType":"VariableDeclaration","source":"                    var entity = m[1];","fix":{"range":[5428,5431],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":166,"column":21,"nodeType":"Punctuator","source":"                    }","fix":{"range":[5564,5585],"text":"                    "}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":184,"column":13,"nodeType":"Punctuator","source":"            {","fix":{"range":[6022,6035],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":186,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[6079,6092],"text":"            "}}],"errorCount":2,"warningCount":30,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nfunction matrixLinkify(linkify) {\n    // Text tokens\n    var TT = linkify.scanner.TOKENS;\n    // Multi tokens\n    var MT = linkify.parser.TOKENS;\n    var MultiToken = MT.Base;\n    var S_START = linkify.parser.start;\n\n    if (TT.UNDERSCORE === undefined) {\n        throw new Error(\"linkify-matrix requires linkifyjs 2.1.1: this version is too old.\");\n    }\n\n    var ROOMALIAS = function(value) {\n        MultiToken.call(this, value);\n        this.type = 'roomalias';\n        this.isLink = true;\n    };\n    ROOMALIAS.prototype = new MultiToken();\n\n    var S_HASH = new linkify.parser.State();\n    var S_HASH_NAME = new linkify.parser.State();\n    var S_HASH_NAME_COLON = new linkify.parser.State();\n    var S_HASH_NAME_COLON_DOMAIN = new linkify.parser.State();\n    var S_HASH_NAME_COLON_DOMAIN_DOT = new linkify.parser.State();\n    var S_ROOMALIAS = new linkify.parser.State(ROOMALIAS);\n\n    var roomname_tokens = [\n        TT.DOT,\n        TT.PLUS,\n        TT.NUM,\n        TT.DOMAIN,\n        TT.TLD,\n        TT.UNDERSCORE,\n        TT.POUND,\n\n        // because 'localhost' is tokenised to the localhost token,\n        // usernames @localhost:foo.com are otherwise not matched!\n        TT.LOCALHOST,\n    ];\n\n    S_START.on(TT.POUND, S_HASH);\n\n    S_HASH.on(roomname_tokens, S_HASH_NAME);\n    S_HASH_NAME.on(roomname_tokens, S_HASH_NAME);\n    S_HASH_NAME.on(TT.DOMAIN, S_HASH_NAME);\n\n    S_HASH_NAME.on(TT.COLON, S_HASH_NAME_COLON);\n\n    S_HASH_NAME_COLON.on(TT.DOMAIN, S_HASH_NAME_COLON_DOMAIN);\n    S_HASH_NAME_COLON.on(TT.LOCALHOST, S_ROOMALIAS); // accept #foo:localhost\n    S_HASH_NAME_COLON_DOMAIN.on(TT.DOT, S_HASH_NAME_COLON_DOMAIN_DOT);\n    S_HASH_NAME_COLON_DOMAIN_DOT.on(TT.DOMAIN, S_HASH_NAME_COLON_DOMAIN);\n    S_HASH_NAME_COLON_DOMAIN_DOT.on(TT.TLD, S_ROOMALIAS);\n\n\n    var USERID = function(value) {\n        MultiToken.call(this, value);\n        this.type = 'userid';\n        this.isLink = true;\n    };\n    USERID.prototype = new MultiToken();\n\n    var S_AT = new linkify.parser.State();\n    var S_AT_NAME = new linkify.parser.State();\n    var S_AT_NAME_COLON = new linkify.parser.State();\n    var S_AT_NAME_COLON_DOMAIN = new linkify.parser.State();\n    var S_AT_NAME_COLON_DOMAIN_DOT = new linkify.parser.State();\n    var S_USERID = new linkify.parser.State(USERID);\n\n    var username_tokens = [\n        TT.DOT,\n        TT.UNDERSCORE,\n        TT.PLUS,\n        TT.NUM,\n        TT.DOMAIN,\n        TT.TLD,\n\n        // as in roomname_tokens\n        TT.LOCALHOST,\n    ];\n\n    S_START.on(TT.AT, S_AT);\n\n    S_AT.on(username_tokens, S_AT_NAME);\n    S_AT_NAME.on(username_tokens, S_AT_NAME);\n    S_AT_NAME.on(TT.DOMAIN, S_AT_NAME);\n\n    S_AT_NAME.on(TT.COLON, S_AT_NAME_COLON);\n\n    S_AT_NAME_COLON.on(TT.DOMAIN, S_AT_NAME_COLON_DOMAIN);\n    S_AT_NAME_COLON.on(TT.LOCALHOST, S_USERID); // accept @foo:localhost\n    S_AT_NAME_COLON_DOMAIN.on(TT.DOT, S_AT_NAME_COLON_DOMAIN_DOT);\n    S_AT_NAME_COLON_DOMAIN_DOT.on(TT.DOMAIN, S_AT_NAME_COLON_DOMAIN);\n    S_AT_NAME_COLON_DOMAIN_DOT.on(TT.TLD, S_USERID);\n}\n\n// stubs, overwritten in MatrixChat's componentDidMount\nmatrixLinkify.onUserClick = function(e, userId) { e.preventDefault(); };\nmatrixLinkify.onAliasClick = function(e, roomAlias) { e.preventDefault(); };\n\nvar escapeRegExp = function(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// Recognise URLs from both our local vector and official vector as vector.\n// anyone else really should be using matrix.to.\nmatrixLinkify.VECTOR_URL_PATTERN = \"^(?:https?:\\/\\/)?(?:\"\n    + escapeRegExp(window.location.host + window.location.pathname) + \"|\"\n    + \"(?:www\\\\.)?vector\\\\.im/(?:beta|staging|develop)/\"\n    + \")(#.*)\";\n\nmatrixLinkify.MATRIXTO_URL_PATTERN = \"^(?:https?:\\/\\/)?(?:www\\\\.)?matrix\\\\.to/#/((#|@|!).*)\";\nmatrixLinkify.MATRIXTO_BASE_URL= \"https://matrix.to\";\n\nmatrixLinkify.options = {\n    events: function(href, type) {\n        switch (type) {\n            case \"userid\":\n                return {\n                    click: function(e) {\n                        matrixLinkify.onUserClick(e, href);\n                    }\n                };\n            case \"roomalias\":\n                return {\n                    click: function(e) {\n                        matrixLinkify.onAliasClick(e, href);\n                    }\n                };\n        }\n    },\n\n    formatHref: function(href, type) {\n        switch (type) {\n            case 'roomalias':\n            case 'userid':\n                return matrixLinkify.MATRIXTO_BASE_URL + '/#/' + href;\n            default:\n                var m;\n                // FIXME: horrible duplication with HtmlUtils' transform tags\n                m = href.match(matrixLinkify.VECTOR_URL_PATTERN);\n                if (m) {\n                    return m[1];\n                }\n                m = href.match(matrixLinkify.MATRIXTO_URL_PATTERN);\n                if (m) {\n                    var entity = m[1];\n                    if (entity[0] === '@') {\n                        return '#/user/' + entity;\n                    }\n                    else if (entity[0] === '#' || entity[0] === '!') {\n                        return '#/room/' + entity;\n                    }\n                }\n\n                return href;\n        }\n    },\n\n    linkAttributes: {\n        rel: 'noopener',\n    },\n\n    target: function(href, type) {\n        if (type === 'url') {\n            if (href.match(matrixLinkify.VECTOR_URL_PATTERN) ||\n                href.match(matrixLinkify.MATRIXTO_URL_PATTERN))\n            {\n                return null;\n            }\n            else {\n                return '_blank';\n            }\n        }\n        return null;\n    },\n};\n\nmodule.exports = matrixLinkify;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Markdown.js","messages":[{"ruleId":"camelcase","severity":1,"message":"Identifier 'is_plain' is not in camel case.","line":41,"column":13,"nodeType":"Identifier","source":"        let is_plain = true;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'is_plain' is not in camel case.","line":44,"column":13,"nodeType":"Identifier","source":"            is_plain = false;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'dummy_renderer' is not in camel case.","line":47,"column":15,"nodeType":"Identifier","source":"        const dummy_renderer = new commonmark.HtmlRenderer();"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'dummy_parser' is not in camel case.","line":56,"column":15,"nodeType":"Identifier","source":"        const dummy_parser = new commonmark.Parser();"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'is_plain' is not in camel case.","line":59,"column":16,"nodeType":"Identifier","source":"        return is_plain;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'real_paragraph' is not in camel case.","line":63,"column":15,"nodeType":"Identifier","source":"        const real_paragraph = this.renderer.paragraph;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":71,"column":13,"nodeType":"VariableDeclaration","source":"            var par = node;","fix":{"range":[2653,2656],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":80,"column":9,"nodeType":"VariableDeclaration","source":"        var parsed = this.parser.parse(this.input);","fix":{"range":[2894,2897],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":81,"column":9,"nodeType":"VariableDeclaration","source":"        var rendered = this.renderer.render(parsed);","fix":{"range":[2946,2949],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'real_paragraph' is not in camel case.","line":83,"column":35,"nodeType":"Identifier","source":"        this.renderer.paragraph = real_paragraph;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'real_paragraph' is not in camel case.","line":89,"column":15,"nodeType":"Identifier","source":"        const real_paragraph = this.renderer.paragraph;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":105,"column":13,"nodeType":"VariableDeclaration","source":"            var par = node;","fix":{"range":[3918,3921],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":117,"column":9,"nodeType":"VariableDeclaration","source":"        var parsed = this.parser.parse(this.input);","fix":{"range":[4207,4210],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":118,"column":9,"nodeType":"VariableDeclaration","source":"        var rendered = this.renderer.render(parsed);","fix":{"range":[4259,4262],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'real_paragraph' is not in camel case.","line":120,"column":35,"nodeType":"Identifier","source":"        this.renderer.paragraph = real_paragraph;"}],"errorCount":0,"warningCount":15,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport commonmark from 'commonmark';\n\n/**\n * Class that wraps marked, adding the ability to see whether\n * a given message actually uses any markdown syntax or whether\n * it's plain text.\n */\nexport default class Markdown {\n    constructor(input) {\n        this.input = input;\n        this.parser = new commonmark.Parser();\n        this.renderer = new commonmark.HtmlRenderer({safe: false});\n    }\n\n    isPlainText() {\n        // we determine if the message requires markdown by\n        // running the parser on the tokens with a dummy\n        // rendered and seeing if any of the renderer's\n        // functions are called other than those noted below.\n        // In case you were wondering, no we can't just examine\n        // the tokens because the tokens we have are only the\n        // output of the *first* tokenizer: any line-based\n        // markdown is processed by marked within Parser by\n        // the 'inline lexer'...\n        let is_plain = true;\n\n        function setNotPlain() {\n            is_plain = false;\n        }\n\n        const dummy_renderer = new commonmark.HtmlRenderer();\n        for (const k of Object.keys(commonmark.HtmlRenderer.prototype)) {\n            dummy_renderer[k] = setNotPlain;\n        }\n        // text and paragraph are just text\n        dummy_renderer.text = function(t) { return t; };\n        dummy_renderer.softbreak = function(t) { return t; };\n        dummy_renderer.paragraph = function(t) { return t; };\n\n        const dummy_parser = new commonmark.Parser();\n        dummy_renderer.render(dummy_parser.parse(this.input));\n\n        return is_plain;\n    }\n\n    toHTML() {\n        const real_paragraph = this.renderer.paragraph;\n\n        this.renderer.paragraph = function(node, entering) {\n            // If there is only one top level node, just return the\n            // bare text: it's a single line of text and so should be\n            // 'inline', rather than unnecessarily wrapped in its own\n            // p tag. If, however, we have multiple nodes, each gets\n            // its own p tag to keep them as separate paragraphs.\n            var par = node;\n            while (par.parent) {\n                par = par.parent;\n            }\n            if (par.firstChild != par.lastChild) {\n                real_paragraph.call(this, node, entering);\n            }\n        };\n\n        var parsed = this.parser.parse(this.input);\n        var rendered = this.renderer.render(parsed);\n\n        this.renderer.paragraph = real_paragraph;\n\n        return rendered;\n    }\n\n    toPlaintext() {\n        const real_paragraph = this.renderer.paragraph;\n\n        // The default `out` function only sends the input through an XML\n        // escaping function, which causes messages to be entity encoded,\n        // which we don't want in this case.\n        this.renderer.out = function(s) {\n            // The `lit` function adds a string literal to the output buffer.\n            this.lit(s);\n        };\n\n        this.renderer.paragraph = function(node, entering) {\n            // If there is only one top level node, just return the\n            // bare text: it's a single line of text and so should be\n            // 'inline', rather than unnecessarily wrapped in its own\n            // p tag. If, however, we have multiple nodes, each gets\n            // its own p tag to keep them as separate paragraphs.\n            var par = node;\n            while (par.parent) {\n                node = par;\n                par = par.parent;\n            }\n            if (node != par.lastChild) {\n                if (!entering) {\n                    this.lit('\\n\\n');\n                }\n            }\n        };\n\n        var parsed = this.parser.parse(this.input);\n        var rendered = this.renderer.render(parsed);\n\n        this.renderer.paragraph = real_paragraph;\n\n        return rendered;\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/MatrixClientPeg.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'MatrixClientCreds' is not defined.","line":26,"column":11,"nodeType":"Identifier","source":"interface MatrixClientCreds {"},{"ruleId":"no-undef","severity":2,"message":"'MatrixClient' is not defined.","line":54,"column":12,"nodeType":"Identifier","source":"    get(): MatrixClient {"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'creds'.","line":62,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-undef","severity":2,"message":"'MatrixClientCreds' is not defined.","line":66,"column":30,"nodeType":"Identifier","source":"    replaceUsingCreds(creds: MatrixClientCreds) {"},{"ruleId":"no-undef","severity":2,"message":"'MatrixClientCreds' is not defined.","line":77,"column":23,"nodeType":"Identifier","source":"    getCredentials(): MatrixClientCreds {"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":88,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-undef","severity":2,"message":"'MatrixClientCreds' is not defined.","line":101,"column":26,"nodeType":"Identifier","source":"    _createClient(creds: MatrixClientCreds) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":102,"column":9,"nodeType":"VariableDeclaration","source":"        var opts = {","fix":{"range":[3197,3200],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":123,"column":9,"nodeType":"VariableDeclaration","source":"        var notifTimelineSet = new EventTimelineSet(null, {","fix":{"range":[3897,3900],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":124,"column":34,"nodeType":"Property","source":"            timelineSupport: true","fix":{"range":[3982,3982],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 127 exceeds the maximum line length of 90.","line":127,"column":1,"nodeType":"Program","source":"        notifTimelineSet.getLiveTimeline().setPaginationToken(\"\", EventTimeline.BACKWARDS);"}],"errorCount":6,"warningCount":5,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nimport Matrix from 'matrix-js-sdk';\nimport utils from 'matrix-js-sdk/lib/utils';\nimport EventTimeline from 'matrix-js-sdk/lib/models/event-timeline';\nimport EventTimelineSet from 'matrix-js-sdk/lib/models/event-timeline-set';\n\nconst localStorage = window.localStorage;\n\ninterface MatrixClientCreds {\n    homeserverUrl: string,\n    identityServerUrl: string,\n    userId: string,\n    deviceId: string,\n    accessToken: string,\n    guest: boolean,\n}\n\n/**\n * Wrapper object for handling the js-sdk Matrix Client object in the react-sdk\n * Handles the creation/initialisation of client objects.\n * This module provides a singleton instance of this class so the 'current'\n * Matrix Client object is available easily.\n */\nclass MatrixClientPeg {\n    constructor() {\n        this.matrixClient = null;\n\n        // These are the default options used when when the\n        // client is started in 'start'. These can be altered\n        // at any time up to after the 'will_start_client'\n        // event is finished processing.\n        this.opts = {\n            initialSyncLimit: 20,\n        };\n    }\n\n    get(): MatrixClient {\n        return this.matrixClient;\n    }\n\n    unset() {\n        this.matrixClient = null;\n    }\n\n    /**\n     * Replace this MatrixClientPeg's client with a client instance that has\n     * Home Server / Identity Server URLs and active credentials\n     */\n    replaceUsingCreds(creds: MatrixClientCreds) {\n        this._createClient(creds);\n    }\n\n    start() {\n        const opts = utils.deepCopy(this.opts);\n        // the react sdk doesn't work without this, so don't allow\n        opts.pendingEventOrdering = \"detached\";\n        this.get().startClient(opts);\n    }\n\n    getCredentials(): MatrixClientCreds {\n        return {\n            homeserverUrl: this.matrixClient.baseUrl,\n            identityServerUrl: this.matrixClient.idBaseUrl,\n            userId: this.matrixClient.credentials.userId,\n            deviceId: this.matrixClient.getDeviceId(),\n            accessToken: this.matrixClient.getAccessToken(),\n            guest: this.matrixClient.isGuest(),\n        };\n    }\n\n    /**\n     * Return the server name of the user's home server\n     * Throws an error if unable to deduce the home server name\n     * (eg. if the user is not logged in)\n     */\n    getHomeServerName() {\n        const matches = /^@.+:(.+)$/.exec(this.matrixClient.credentials.userId);\n        if (matches === null || matches.length < 1) {\n            throw new Error(\"Failed to derive home server name from user ID!\");\n        }\n        return matches[1];\n    }\n\n    _createClient(creds: MatrixClientCreds) {\n        var opts = {\n            baseUrl: creds.homeserverUrl,\n            idBaseUrl: creds.identityServerUrl,\n            accessToken: creds.accessToken,\n            userId: creds.userId,\n            deviceId: creds.deviceId,\n            timelineSupport: true,\n        };\n\n        if (localStorage) {\n            opts.sessionStore = new Matrix.WebStorageSessionStore(localStorage);\n        }\n\n        this.matrixClient = Matrix.createClient(opts);\n\n        // we're going to add eventlisteners for each matrix event tile, so the\n        // potential number of event listeners is quite high.\n        this.matrixClient.setMaxListeners(500);\n\n        this.matrixClient.setGuest(Boolean(creds.guest));\n\n        var notifTimelineSet = new EventTimelineSet(null, {\n            timelineSupport: true\n        });\n        // XXX: what is our initial pagination token?! it somehow needs to be synchronised with /sync.\n        notifTimelineSet.getLiveTimeline().setPaginationToken(\"\", EventTimeline.BACKWARDS);\n        this.matrixClient.setNotifTimelineSet(notifTimelineSet);\n    }\n}\n\nif (!global.mxMatrixClientPeg) {\n    global.mxMatrixClientPeg = new MatrixClientPeg();\n}\nmodule.exports = global.mxMatrixClientPeg;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Modal.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[584,587],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require('react-dom');","fix":{"range":[614,617],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'loader' is assigned a value but never used.","line":59,"column":16,"nodeType":"Identifier","source":"        const {loader, ...otherProps} = this.props;"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":104,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":124,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[3605,3608],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":130,"column":9,"nodeType":"VariableDeclaration","source":"        var closeDialog = function() {","fix":{"range":[3817,3820],"text":"let"}},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":131,"column":73,"nodeType":"Identifier","source":"            if (props && props.onFinished) props.onFinished.apply(null, arguments);","endLine":131,"endColumn":82},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":132,"column":13,"nodeType":"VariableDeclaration","source":"            var i = self._modals.indexOf(modal);","fix":{"range":[3944,3947],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":178,"column":9,"nodeType":"VariableDeclaration","source":"        var modal = this._modals[0];","fix":{"range":[5245,5248],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":179,"column":9,"nodeType":"VariableDeclaration","source":"        var dialog = (","fix":{"range":[5282,5285],"text":"let"}}],"errorCount":1,"warningCount":9,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n\n'use strict';\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nimport sdk from './index';\n\nconst DIALOG_CONTAINER_ID = \"mx_Dialog_Container\";\n\n/**\n * Wrap an asynchronous loader function with a react component which shows a\n * spinner until the real component loads.\n */\nconst AsyncWrapper = React.createClass({\n    propTypes: {\n        /** A function which takes a 'callback' argument which it will call\n         * with the real component once it loads.\n         */\n        loader: React.PropTypes.func.isRequired,\n    },\n\n    getInitialState: function() {\n        return {\n            component: null,\n        };\n    },\n\n    componentWillMount: function() {\n        this._unmounted = false;\n        this.props.loader((e) => {\n            if (this._unmounted) {\n                return;\n            }\n            this.setState({component: e});\n        });\n    },\n\n    componentWillUnmount: function() {\n        this._unmounted = true;\n    },\n\n    render: function() {\n        const {loader, ...otherProps} = this.props;\n\n        if (this.state.component) {\n            const Component = this.state.component;\n            return <Component {...otherProps} />;\n        } else {\n            // show a spinner until the component is loaded.\n            const Spinner = sdk.getComponent(\"elements.Spinner\");\n            return <Spinner />;\n        }\n    },\n});\n\nclass ModalManager {\n    constructor() {\n        this._counter = 0;\n\n        /** list of the modals we have stacked up, with the most recent at [0] */\n        this._modals = [\n            /* {\n               elem: React component for this dialog\n               onFinished: caller-supplied onFinished callback\n               className: CSS class for the dialog wrapper div\n               } */\n        ];\n\n        this.closeAll = this.closeAll.bind(this);\n    }\n\n    getOrCreateContainer() {\n        let container = document.getElementById(DIALOG_CONTAINER_ID);\n\n        if (!container) {\n            container = document.createElement(\"div\");\n            container.id = DIALOG_CONTAINER_ID;\n            document.body.appendChild(container);\n        }\n\n        return container;\n    }\n\n    createDialog(Element, props, className) {\n        return this.createDialogAsync((cb) => {cb(Element);}, props, className);\n    }\n\n    /**\n     * Open a modal view.\n     *\n     * This can be used to display a react component which is loaded as an asynchronous\n     * webpack component. To do this, set 'loader' as:\n     *\n     *   (cb) => {\n     *       require(['<module>'], cb);\n     *   }\n     *\n     * @param {Function} loader   a function which takes a 'callback' argument,\n     *   which it should call with a React component which will be displayed as\n     *   the modal view.\n     *\n     * @param {Object} props   properties to pass to the displayed\n     *    component. (We will also pass an 'onFinished' property.)\n     *\n     * @param {String} className   CSS class to apply to the modal wrapper\n     */\n    createDialogAsync(loader, props, className) {\n        var self = this;\n        const modal = {};\n\n        // never call this from onFinished() otherwise it will loop\n        //\n        // nb explicit function() rather than arrow function, to get `arguments`\n        var closeDialog = function() {\n            if (props && props.onFinished) props.onFinished.apply(null, arguments);\n            var i = self._modals.indexOf(modal);\n            if (i >= 0) {\n                self._modals.splice(i, 1);\n            }\n            self._reRender();\n        };\n\n        // don't attempt to reuse the same AsyncWrapper for different dialogs,\n        // otherwise we'll get confused.\n        const modalCount = this._counter++;\n\n        // FIXME: If a dialog uses getDefaultProps it clobbers the onFinished\n        // property set here so you can't close the dialog from a button click!\n        modal.elem = (\n            <AsyncWrapper key={modalCount} loader={loader} {...props}\n                onFinished={closeDialog}/>\n        );\n        modal.onFinished = props ? props.onFinished : null;\n        modal.className = className;\n\n        this._modals.unshift(modal);\n\n        this._reRender();\n        return {close: closeDialog};\n    }\n\n    closeAll() {\n        const modals = this._modals;\n        this._modals = [];\n\n        for (let i = 0; i < modals.length; i++) {\n            const m = modals[i];\n            if (m.onFinished) {\n                m.onFinished(false);\n            }\n        }\n\n        this._reRender();\n    }\n\n    _reRender() {\n        if (this._modals.length == 0) {\n            ReactDOM.unmountComponentAtNode(this.getOrCreateContainer());\n            return;\n        }\n\n        var modal = this._modals[0];\n        var dialog = (\n            <div className={\"mx_Dialog_wrapper \" + modal.className}>\n                <div className=\"mx_Dialog\">\n                    {modal.elem}\n                </div>\n                <div className=\"mx_Dialog_background\" onClick={ this.closeAll }></div>\n            </div>\n        );\n\n        ReactDOM.render(dialog, this.getOrCreateContainer());\n    }\n}\n\nexport default new ModalManager();\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Notifier.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");","fix":{"range":[583,586],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var PlatformPeg = require(\"./PlatformPeg\");","fix":{"range":[635,638],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var TextForEvent = require('./TextForEvent');","fix":{"range":[679,682],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var Avatar = require('./Avatar');","fix":{"range":[725,728],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"./dispatcher\");","fix":{"range":[759,762],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":1,"nodeType":"VariableDeclaration","source":"var Notifier = {","fix":{"range":[881,884],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":52,"column":9,"nodeType":"VariableDeclaration","source":"        var msg = this.notificationMessageForEvent(ev);","fix":{"range":[1354,1357],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":55,"column":9,"nodeType":"VariableDeclaration","source":"        var title;","fix":{"range":[1437,1440],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":72,"column":9,"nodeType":"VariableDeclaration","source":"        var avatarUrl = ev.sender ? Avatar.avatarUrlForMember(","fix":{"range":[2193,2196],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":73,"column":38,"nodeType":"Literal","source":"            ev.sender, 40, 40, 'crop'","fix":{"range":[2285,2285],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 81 exceeds the maximum line length of 90.","line":81,"column":1,"nodeType":"Program","source":"            if (this.notifsByRoom[ev.getRoomId()] === undefined) this.notifsByRoom[ev.getRoomId()] = [];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":87,"column":9,"nodeType":"VariableDeclaration","source":"        var e = document.getElementById(\"messageAudio\");","fix":{"range":[2782,2785],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 107 exceeds the maximum line length of 90.","line":107,"column":1,"nodeType":"Program","source":"            MatrixClientPeg.get().removeListener('Room.timeline', this.boundOnRoomTimeline);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":145,"column":32,"nodeType":"Property","source":"                    value: true","fix":{"range":[4995,4995],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":156,"column":29,"nodeType":"Property","source":"                value: false","fix":{"range":[5468,5468],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":169,"column":9,"nodeType":"VariableDeclaration","source":"        var enabled = global.localStorage.getItem('notifications_enabled');","fix":{"range":[5774,5777],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":182,"column":9,"nodeType":"VariableDeclaration","source":"        var enabled = global.localStorage.getItem(","fix":{"range":[6243,6246],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":196,"column":36,"nodeType":"Property","source":"            value: this.isEnabled()","fix":{"range":[6782,6782],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":219,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[7449,7458],"text":"        "}},{"ruleId":"max-len","severity":1,"message":"Line 229 exceeds the maximum line length of 90.","line":229,"column":1,"nodeType":"Program","source":"        if (ev.sender && ev.sender.userId == MatrixClientPeg.get().credentials.userId) return;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":232,"column":9,"nodeType":"VariableDeclaration","source":"        var actions = MatrixClientPeg.get().getPushActionsForEvent(ev);","fix":{"range":[7979,7982],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":259,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[9184,9184],"text":","}}],"errorCount":5,"warningCount":17,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nvar MatrixClientPeg = require(\"./MatrixClientPeg\");\nvar PlatformPeg = require(\"./PlatformPeg\");\nvar TextForEvent = require('./TextForEvent');\nvar Avatar = require('./Avatar');\nvar dis = require(\"./dispatcher\");\n\n/*\n * Dispatches:\n * {\n *   action: \"notifier_enabled\",\n *   value: boolean\n * }\n */\n\nvar Notifier = {\n    notifsByRoom: {},\n\n    notificationMessageForEvent: function(ev) {\n        return TextForEvent.textForEvent(ev);\n    },\n\n    _displayPopupNotification: function(ev, room) {\n        const plaf = PlatformPeg.get();\n        if (!plaf) {\n            return;\n        }\n        if (!plaf.supportsNotifications() || !plaf.maySendNotifications()) {\n            return;\n        }\n        if (global.document.hasFocus()) {\n            return;\n        }\n\n        var msg = this.notificationMessageForEvent(ev);\n        if (!msg) return;\n\n        var title;\n        if (!ev.sender || room.name == ev.sender.name) {\n            title = room.name;\n            // notificationMessageForEvent includes sender,\n            // but we already have the sender here\n            if (ev.getContent().body) msg = ev.getContent().body;\n        } else if (ev.getType() == 'm.room.member') {\n            // context is all in the message here, we don't need\n            // to display sender info\n            title = room.name;\n        } else if (ev.sender) {\n            title = ev.sender.name + \" (\" + room.name + \")\";\n            // notificationMessageForEvent includes sender,\n            // but we've just out sender in the title\n            if (ev.getContent().body) msg = ev.getContent().body;\n        }\n\n        var avatarUrl = ev.sender ? Avatar.avatarUrlForMember(\n            ev.sender, 40, 40, 'crop'\n        ) : null;\n\n        const notif = plaf.displayNotification(title, msg, avatarUrl, room);\n\n        // if displayNotification returns non-null,  the platform supports\n        // clearing notifications later, so keep track of this.\n        if (notif) {\n            if (this.notifsByRoom[ev.getRoomId()] === undefined) this.notifsByRoom[ev.getRoomId()] = [];\n            this.notifsByRoom[ev.getRoomId()].push(notif);\n        }\n    },\n\n    _playAudioNotification: function(ev, room) {\n        var e = document.getElementById(\"messageAudio\");\n        if (e) {\n            e.load();\n            e.play();\n        }\n    },\n\n    start: function() {\n        this.boundOnRoomTimeline = this.onRoomTimeline.bind(this);\n        this.boundOnSyncStateChange = this.onSyncStateChange.bind(this);\n        this.boundOnRoomReceipt = this.onRoomReceipt.bind(this);\n        MatrixClientPeg.get().on('Room.timeline', this.boundOnRoomTimeline);\n        MatrixClientPeg.get().on(\"Room.receipt\", this.boundOnRoomReceipt);\n        MatrixClientPeg.get().on(\"sync\", this.boundOnSyncStateChange);\n        this.toolbarHidden = false;\n        this.isPrepared = false;\n    },\n\n    stop: function() {\n        if (MatrixClientPeg.get()) {\n            MatrixClientPeg.get().removeListener('Room.timeline', this.boundOnRoomTimeline);\n            MatrixClientPeg.get().removeListener(\"Room.receipt\", this.boundOnRoomReceipt);\n            MatrixClientPeg.get().removeListener('sync', this.boundOnSyncStateChange);\n        }\n        this.isPrepared = false;\n    },\n\n    supportsDesktopNotifications: function() {\n        const plaf = PlatformPeg.get();\n        return plaf && plaf.supportsNotifications();\n    },\n\n    setEnabled: function(enable, callback) {\n        const plaf = PlatformPeg.get();\n        if (!plaf) return;\n        // make sure that we persist the current setting audio_enabled setting\n        // before changing anything\n        if (global.localStorage) {\n            if(global.localStorage.getItem('audio_notifications_enabled') == null) {\n                this.setAudioEnabled(this.isEnabled());\n            }\n        }\n\n        if (enable) {\n            // Attempt to get permission from user\n            plaf.requestNotificationPermission().done((result) => {\n                if (result !== 'granted') {\n                    // The permission request was dismissed or denied\n                    return;\n                }\n\n                if (global.localStorage) {\n                    global.localStorage.setItem('notifications_enabled', 'true');\n                }\n\n                if (callback) callback();\n                dis.dispatch({\n                    action: \"notifier_enabled\",\n                    value: true\n                });\n            });\n            // clear the notifications_hidden flag, so that if notifications are\n            // disabled again in the future, we will show the banner again.\n            this.setToolbarHidden(false);\n        } else {\n            if (!global.localStorage) return;\n            global.localStorage.setItem('notifications_enabled', 'false');\n            dis.dispatch({\n                action: \"notifier_enabled\",\n                value: false\n            });\n        }\n    },\n\n    isEnabled: function() {\n        const plaf = PlatformPeg.get();\n        if (!plaf) return false;\n        if (!plaf.supportsNotifications()) return false;\n        if (!plaf.maySendNotifications()) return false;\n\n        if (!global.localStorage) return true;\n\n        var enabled = global.localStorage.getItem('notifications_enabled');\n        if (enabled === null) return true;\n        return enabled === 'true';\n    },\n\n    setAudioEnabled: function(enable) {\n        if (!global.localStorage) return;\n        global.localStorage.setItem('audio_notifications_enabled',\n                                    enable ? 'true' : 'false');\n    },\n\n    isAudioEnabled: function(enable) {\n        if (!global.localStorage) return true;\n        var enabled = global.localStorage.getItem(\n            'audio_notifications_enabled');\n        // default to true if the popups are enabled\n        if (enabled === null) return this.isEnabled();\n        return enabled === 'true';\n    },\n\n    setToolbarHidden: function(hidden, persistent = true) {\n        this.toolbarHidden = hidden;\n\n        // XXX: why are we dispatching this here?\n        // this is nothing to do with notifier_enabled\n        dis.dispatch({\n            action: \"notifier_enabled\",\n            value: this.isEnabled()\n        });\n\n        // update the info to localStorage for persistent settings\n        if (persistent && global.localStorage) {\n            global.localStorage.setItem('notifications_hidden', hidden);\n        }\n    },\n\n    isToolbarHidden: function() {\n        // Check localStorage for any such meta data\n        if (global.localStorage) {\n            if (global.localStorage.getItem('notifications_hidden') === 'true') {\n                return true;\n            }\n        }\n\n        return this.toolbarHidden;\n    },\n\n    onSyncStateChange: function(state) {\n        if (state === \"PREPARED\" || state === \"SYNCING\") {\n            this.isPrepared = true;\n        }\n        else if (state === \"STOPPED\" || state === \"ERROR\") {\n            this.isPrepared = false;\n        }\n    },\n\n    onRoomTimeline: function(ev, room, toStartOfTimeline, removed, data) {\n        if (toStartOfTimeline) return;\n        if (!room) return;\n        if (!this.isPrepared) return; // don't alert for any messages initially\n        if (ev.sender && ev.sender.userId == MatrixClientPeg.get().credentials.userId) return;\n        if (data.timeline.getTimelineSet() !== room.getUnfilteredTimelineSet()) return;\n\n        var actions = MatrixClientPeg.get().getPushActionsForEvent(ev);\n        if (actions && actions.notify) {\n            if (this.isEnabled()) {\n                this._displayPopupNotification(ev, room);\n            }\n            if (actions.tweaks.sound && this.isAudioEnabled()) {\n                this._playAudioNotification(ev, room);\n            }\n        }\n    },\n\n    onRoomReceipt: function(ev, room) {\n        if (room.getUnreadNotificationCount() == 0) {\n            // ideally we would clear each notification when it was read,\n            // but we have no way, given a read receipt, to know whether\n            // the receipt comes before or after an event, so we can't\n            // do this. Instead, clear all notifications for a room once\n            // there are no notifs left in that room., which is not quite\n            // as good but it's something.\n            const plaf = PlatformPeg.get();\n            if (!plaf) return;\n            if (this.notifsByRoom[room.roomId] === undefined) return;\n            for (const notif of this.notifsByRoom[room.roomId]) {\n                plaf.clearNotification(notif);\n            }\n            delete this.notifsByRoom[room.roomId];\n        }\n    }\n};\n\nif (!global.mxNotifier) {\n    global.mxNotifier = Notifier;\n}\n\nmodule.exports = global.mxNotifier;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/ObjectUtils.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":5,"nodeType":"VariableDeclaration","source":"    var results = [];","fix":{"range":[962,965],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":5,"nodeType":"VariableDeclaration","source":"    var delta = {};","fix":{"range":[984,987],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":51,"column":17,"nodeType":"VariableDeclaration","source":"                var itemDelta = {};"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":81,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'objA'.","line":81,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'objB'.","line":81,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":95,"column":5,"nodeType":"VariableDeclaration","source":"    var keysA = Object.keys(objA);","fix":{"range":[3565,3568],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":96,"column":5,"nodeType":"VariableDeclaration","source":"    var keysB = Object.keys(objB);","fix":{"range":[3600,3603],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":102,"column":10,"nodeType":"VariableDeclaration","source":"    for (var i = 0; i < keysA.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":103,"column":9,"nodeType":"VariableDeclaration","source":"        var key = keysA[i];","fix":{"range":[3755,3758],"text":"let"}}],"errorCount":0,"warningCount":10,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * For two objects of the form { key: [val1, val2, val3] }, work out the added/removed\n * values. Entirely new keys will result in the entire value array being added.\n * @param {Object} before\n * @param {Object} after\n * @return {Object[]} An array of objects with the form:\n * { key: $KEY, val: $VALUE, place: \"add|del\" }\n */\nmodule.exports.getKeyValueArrayDiffs = function(before, after) {\n    var results = [];\n    var delta = {};\n    Object.keys(before).forEach(function(beforeKey) {\n        delta[beforeKey] = delta[beforeKey] || 0; // init to 0 initially\n        delta[beforeKey]--; // keys present in the past have -ve values\n    });\n    Object.keys(after).forEach(function(afterKey) {\n        delta[afterKey] = delta[afterKey] || 0; // init to 0 initially\n        delta[afterKey]++; // keys present in the future have +ve values\n    });\n\n    Object.keys(delta).forEach(function(muxedKey) {\n        switch (delta[muxedKey]) {\n            case 1: // A new key in after\n                after[muxedKey].forEach(function(afterVal) {\n                    results.push({ place: \"add\", key: muxedKey, val: afterVal });\n                });\n                break;\n            case -1: // A before key was removed\n                before[muxedKey].forEach(function(beforeVal) {\n                    results.push({ place: \"del\", key: muxedKey, val: beforeVal });\n                });\n                break;\n            case 0: // A mix of added/removed keys\n                // compare old & new vals\n                var itemDelta = {};\n                before[muxedKey].forEach(function(beforeVal) {\n                    itemDelta[beforeVal] = itemDelta[beforeVal] || 0;\n                    itemDelta[beforeVal]--;\n                });\n                after[muxedKey].forEach(function(afterVal) {\n                    itemDelta[afterVal] = itemDelta[afterVal] || 0;\n                    itemDelta[afterVal]++;\n                });\n\n                Object.keys(itemDelta).forEach(function(item) {\n                    if (itemDelta[item] === 1) {\n                        results.push({ place: \"add\", key: muxedKey, val: item });\n                    } else if (itemDelta[item] === -1) {\n                        results.push({ place: \"del\", key: muxedKey, val: item });\n                    } else {\n                        // itemDelta of 0 means it was unchanged between before/after\n                    }\n                });\n                break;\n            default:\n                console.error(\"Calculated key delta of \" + delta[muxedKey] +\n                              \" - this should never happen!\");\n                break;\n        }\n    });\n\n    return results;\n};\n\n/**\n * Shallow-compare two objects for equality: each key and value must be\n * identical\n */\nmodule.exports.shallowEqual = function(objA, objB) {\n    if (objA === objB) {\n        return true;\n    }\n\n    if (typeof objA !== 'object' || objA === null ||\n          typeof objB !== 'object' || objB === null) {\n        return false;\n    }\n\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (var i = 0; i < keysA.length; i++) {\n        var key = keysA[i];\n        if (!objB.hasOwnProperty(key) || objA[key] !== objB[key]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/PageTypes.js","messages":[],"errorCount":0,"warningCount":0},{"filePath":"/home/rav/work/matrix-react-sdk/src/PasswordReset.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var Matrix = require(\"matrix-js-sdk\");","fix":{"range":[568,571],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":36,"column":35,"nodeType":"Property","source":"            idBaseUrl: identityUrl","fix":{"range":[1337,1337],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 51 exceeds the maximum line length of 90.","line":51,"column":1,"nodeType":"Program","source":"        return this.client.requestPasswordEmailToken(emailAddress, this.clientSecret, 1).then((res) => {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":77,"column":53,"nodeType":"Property","source":"                id_server: this.identityServerDomain","fix":{"range":[3126,3126],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":78,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[3140,3140],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 81 exceeds the maximum line length of 90.","line":81,"column":1,"nodeType":"Program","source":"                err.message = \"Failed to verify email address: make sure you clicked the link in the email\";"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":82,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[3353,3366],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 84 exceeds the maximum line length of 90.","line":84,"column":1,"nodeType":"Program","source":"                err.message = \"Your email address does not appear to be associated with a Matrix ID on this Homeserver.\";"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":85,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[3536,3549],"text":"            "}}],"errorCount":3,"warningCount":6,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar Matrix = require(\"matrix-js-sdk\");\n\n/**\n * Allows a user to reset their password on a homeserver.\n *\n * This involves getting an email token from the identity server to \"prove\" that\n * the client owns the given email address, which is then passed to the password\n * API on the homeserver in question with the new password.\n */\nclass PasswordReset {\n\n    /**\n     * Configure the endpoints for password resetting.\n     * @param {string} homeserverUrl The URL to the HS which has the account to reset.\n     * @param {string} identityUrl The URL to the IS which has linked the email -> mxid mapping.\n     */\n    constructor(homeserverUrl, identityUrl) {\n        this.client = Matrix.createClient({\n            baseUrl: homeserverUrl,\n            idBaseUrl: identityUrl\n        });\n        this.clientSecret = this.client.generateClientSecret();\n        this.identityServerDomain = identityUrl.split(\"://\")[1];\n    }\n\n    /**\n     * Attempt to reset the user's password. This will trigger a side-effect of\n     * sending an email to the provided email address.\n     * @param {string} emailAddress The email address\n     * @param {string} newPassword The new password for the account.\n     * @return {Promise} Resolves when the email has been sent. Then call checkEmailLinkClicked().\n     */\n    resetPassword(emailAddress, newPassword) {\n        this.password = newPassword;\n        return this.client.requestPasswordEmailToken(emailAddress, this.clientSecret, 1).then((res) => {\n            this.sessionId = res.sid;\n            return res;\n        }, function(err) {\n            if (err.errcode == 'M_THREEPID_NOT_FOUND') {\n                 err.message = \"This email address was not found\";\n            } else if (err.httpStatus) {\n                err.message = err.message + ` (Status ${err.httpStatus})`;\n            }\n            throw err;\n        });\n    }\n\n    /**\n     * Checks if the email link has been clicked by attempting to change the password\n     * for the mxid linked to the email.\n     * @return {Promise} Resolves if the password was reset. Rejects with an object\n     * with a \"message\" property which contains a human-readable message detailing why\n     * the reset failed, e.g. \"There is no mapped matrix user ID for the given email address\".\n     */\n    checkEmailLinkClicked() {\n        return this.client.setPassword({\n            type: \"m.login.email.identity\",\n            threepid_creds: {\n                sid: this.sessionId,\n                client_secret: this.clientSecret,\n                id_server: this.identityServerDomain\n            }\n        }, this.password).catch(function(err) {\n            if (err.httpStatus === 401) {\n                err.message = \"Failed to verify email address: make sure you clicked the link in the email\";\n            }\n            else if (err.httpStatus === 404) {\n                err.message = \"Your email address does not appear to be associated with a Matrix ID on this Homeserver.\";\n            }\n            else if (err.httpStatus) {\n                err.message += ` (Status ${err.httpStatus})`;\n            }\n            throw err;\n        });\n    }\n}\n\nmodule.exports = PasswordReset;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/PlatformPeg.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":29,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'plaf'.","line":37,"column":5,"nodeType":"Block","source":"    /**"}],"errorCount":0,"warningCount":2,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\n * Holds the current Platform object used by the code to do anything\n * specific to the platform we're running on (eg. web, electron)\n * Platforms are provided by the app layer.\n * This allows the app layer to set a Platform without necessarily\n * having to have a MatrixChat object\n */\nclass PlatformPeg {\n    constructor() {\n        this.platform = null;\n    }\n\n    /**\n     * Returns the current Platform object for the application.\n     * This should be an instance of a class extending BasePlatform.\n     */\n    get() {\n        return this.platform;\n    }\n\n    /**\n     * Sets the current platform handler object to use for the\n     * application.\n     * This should be an instance of a class extending BasePlatform.\n     */\n    set(plaf) {\n        this.platform = plaf;\n    }\n}\n\nif (!global.mxPlatformPeg) {\n    global.mxPlatformPeg = new PlatformPeg();\n}\nmodule.exports = global.mxPlatformPeg;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Presence.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"./dispatcher\");","fix":{"range":[620,623],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var UNAVAILABLE_TIME_MS = 3 * 60 * 1000; // 3 mins","fix":{"range":[723,726],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var PRESENCE_STATES = [\"online\", \"offline\", \"unavailable\"];","fix":{"range":[774,777],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":74,"column":9,"nodeType":"VariableDeclaration","source":"        var old_state = this.state;","fix":{"range":[2153,2156],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'old_state' is not in camel case.","line":74,"column":13,"nodeType":"Identifier","source":"        var old_state = this.state;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":81,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[2357,2360],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'old_state' is not in camel case.","line":86,"column":26,"nodeType":"Identifier","source":"            self.state = old_state;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":107,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[3022,3025],"text":"let"}}],"errorCount":0,"warningCount":9,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar MatrixClientPeg = require(\"./MatrixClientPeg\");\nvar dis = require(\"./dispatcher\");\n\n // Time in ms after that a user is considered as unavailable/away\nvar UNAVAILABLE_TIME_MS = 3 * 60 * 1000; // 3 mins\nvar PRESENCE_STATES = [\"online\", \"offline\", \"unavailable\"];\n\nclass Presence {\n\n    /**\n     * Start listening the user activity to evaluate his presence state.\n     * Any state change will be sent to the Home Server.\n     */\n    start() {\n        this.running = true;\n        if (undefined === this.state) {\n            this._resetTimer();\n            this.dispatcherRef = dis.register(this._onUserActivity.bind(this));\n        }\n    }\n\n    /**\n     * Stop tracking user activity\n     */\n    stop() {\n        this.running = false;\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = undefined;\n            dis.unregister(this.dispatcherRef);\n        }\n        this.state = undefined;\n    }\n\n    /**\n     * Get the current presence state.\n     * @returns {string} the presence state (see PRESENCE enum)\n     */\n    getState() {\n        return this.state;\n    }\n\n    /**\n     * Set the presence state.\n     * If the state has changed, the Home Server will be notified.\n     * @param {string} newState the new presence state (see PRESENCE enum)\n     */\n    setState(newState) {\n        if (newState === this.state) {\n            return;\n        }\n        if (PRESENCE_STATES.indexOf(newState) === -1) {\n            throw new Error(\"Bad presence state: \" + newState);\n        }\n        if (!this.running) {\n            return;\n        }\n        var old_state = this.state;\n        this.state = newState;\n\n        if (MatrixClientPeg.get().isGuest()) {\n            return; // don't try to set presence when a guest; it won't work.\n        }\n\n        var self = this;\n        MatrixClientPeg.get().setPresence(this.state).done(function() {\n            console.log(\"Presence: %s\", newState);\n        }, function(err) {\n            console.error(\"Failed to set presence: %s\", err);\n            self.state = old_state;\n        });\n    }\n\n    /**\n     * Callback called when the user made no action on the page for UNAVAILABLE_TIME ms.\n     * @private\n     */\n    _onUnavailableTimerFire() {\n        this.setState(\"unavailable\");\n    }\n\n    _onUserActivity() {\n        this._resetTimer();\n    }\n\n    /**\n     * Callback called when the user made an action on the page\n     * @private\n     */\n    _resetTimer() {\n        var self = this;\n        this.setState(\"online\");\n        // Re-arm the timer\n        clearTimeout(this.timer);\n        this.timer = setTimeout(function() {\n            self._onUnavailableTimerFire();\n        }, UNAVAILABLE_TIME_MS);\n    }\n}\n\nmodule.exports = new Presence();\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/ratelimitedfunc.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'minIntervalMs'.","line":17,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'f'.","line":17,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":17,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":32,"column":5,"nodeType":"VariableDeclaration","source":"    var self = this;","fix":{"range":[1122,1125],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":5,"nodeType":"VariableDeclaration","source":"    var wrapper = function() {","fix":{"range":[1143,1146],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":9,"nodeType":"VariableDeclaration","source":"        var now = Date.now();","fix":{"range":[1178,1181],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":37,"column":21,"nodeType":"ThisExpression","source":"            f.apply(this);"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":43,"column":29,"nodeType":"ThisExpression","source":"                    f.apply(this);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":46,"column":54,"nodeType":"BinaryExpression","source":"                (self.lastCall + minIntervalMs) - now","fix":{"range":[1636,1636],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":61,"column":5,"nodeType":"VariableDeclaration","source":"    var _bind = wrapper.bind;","fix":{"range":[1991,1994],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":63,"column":9,"nodeType":"VariableDeclaration","source":"        var rebound = _bind.apply(this, arguments);","fix":{"range":[2057,2060],"text":"let"}},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":63,"column":41,"nodeType":"Identifier","source":"        var rebound = _bind.apply(this, arguments);","endLine":63,"endColumn":50}],"errorCount":3,"warningCount":9,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * 'debounces' a function to only execute every n milliseconds.\n * Useful when react-sdk gets many, many events but only wants\n * to update the interface once for all of them.\n *\n * Note that the function must not take arguments, since the args\n * could be different for each invocarion of the function.\n *\n * The returned function has a 'cancelPendingCall' property which can be called\n * on unmount or similar to cancel any pending update.\n */\nmodule.exports = function(f, minIntervalMs) {\n    this.lastCall = 0;\n    this.scheduledCall = undefined;\n\n    var self = this;\n    var wrapper = function() {\n        var now = Date.now();\n\n        if (self.lastCall < now - minIntervalMs) {\n            f.apply(this);\n            self.lastCall = now;\n        } else if (self.scheduledCall === undefined) {\n            self.scheduledCall = setTimeout(\n                () => {\n                    self.scheduledCall = undefined;\n                    f.apply(this);\n                    self.lastCall = now;\n                },\n                (self.lastCall + minIntervalMs) - now\n            );\n        }\n    };\n\n    // add the cancelPendingCall property\n    wrapper.cancelPendingCall = function() {\n        if (self.scheduledCall) {\n            clearTimeout(self.scheduledCall);\n            self.scheduledCall = undefined;\n        }\n    };\n\n    // make sure that cancelPendingCall is copied when react rebinds the\n    // wrapper\n    var _bind = wrapper.bind;\n    wrapper.bind = function() {\n        var rebound = _bind.apply(this, arguments);\n        rebound.cancelPendingCall = wrapper.cancelPendingCall;\n        return rebound;\n    };\n\n    return wrapper;\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Resend.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('./MatrixClientPeg');","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require('./dispatcher');","fix":{"range":[620,623],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":23,"column":68,"nodeType":"CallExpression","source":"            event, MatrixClientPeg.get().getRoom(event.getRoomId())","fix":{"range":[815,815],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":27,"column":29,"nodeType":"Property","source":"                event: event","fix":{"range":[939,939],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":32,"column":29,"nodeType":"Property","source":"                event: event","fix":{"range":[1082,1082],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":41,"column":25,"nodeType":"Property","source":"            event: event","fix":{"range":[1308,1308],"text":","}}],"errorCount":4,"warningCount":2,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar MatrixClientPeg = require('./MatrixClientPeg');\nvar dis = require('./dispatcher');\n\nmodule.exports = {\n    resend: function(event) {\n        MatrixClientPeg.get().resendEvent(\n            event, MatrixClientPeg.get().getRoom(event.getRoomId())\n        ).done(function() {\n            dis.dispatch({\n                action: 'message_sent',\n                event: event\n            });\n        }, function() {\n            dis.dispatch({\n                action: 'message_send_failed',\n                event: event\n            });\n        });\n    },\n\n    removeFromQueue: function(event) {\n        MatrixClientPeg.get().cancelPendingEvent(event);\n        dis.dispatch({\n            action: 'message_send_cancelled',\n            event: event\n        });\n    },\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/RichText.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","source":"import React from 'react';"},{"ruleId":"no-unused-vars","severity":2,"message":"'Editor' is defined but never used.","line":3,"column":5,"nodeType":"Identifier","source":"    Editor,"},{"ruleId":"no-unused-vars","severity":2,"message":"'DefaultDraftBlockRenderMap' is defined but never used.","line":9,"column":5,"nodeType":"Identifier","source":"    DefaultDraftBlockRenderMap,"},{"ruleId":"no-unused-vars","severity":2,"message":"'DefaultDraftInlineStyle' is defined but never used.","line":10,"column":5,"nodeType":"Identifier","source":"    DefaultDraftInlineStyle,"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":40,"column":5,"nodeType":"VariableDeclaration","source":"    let replaceWith, unicode, alt;"},{"ruleId":"no-unused-vars","severity":2,"message":"'replaceWith' is defined but never used.","line":40,"column":9,"nodeType":"Identifier","source":"    let replaceWith, unicode, alt;"},{"ruleId":"no-unused-vars","severity":2,"message":"'alt' is defined but never used.","line":40,"column":31,"nodeType":"Identifier","source":"    let replaceWith, unicode, alt;"},{"ruleId":"prefer-const","severity":1,"message":"'mappedUnicode' is never reassigned. Use 'const' instead.","line":43,"column":13,"nodeType":"Identifier","source":"        let mappedUnicode = emojione.mapUnicodeToShort();","fix":{"range":[1295,1298],"text":"const"}},{"ruleId":"no-unused-vars","severity":2,"message":"'mappedUnicode' is assigned a value but never used.","line":43,"column":13,"nodeType":"Identifier","source":"        let mappedUnicode = emojione.mapUnicodeToShort();"},{"ruleId":"max-len","severity":1,"message":"Line 47 exceeds the maximum line length of 90.","line":47,"column":1,"nodeType":"Program","source":"        if ( (typeof unicodeChar === 'undefined') || (unicodeChar === '') || (!(unicodeChar in emojione.jsEscapeMap)) ) {"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'callback'.","line":60,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'regex'.","line":60,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'contentBlock'.","line":60,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"max-len","severity":1,"message":"Line 64 exceeds the maximum line length of 90.","line":64,"column":1,"nodeType":"Program","source":"function findWithRegex(regex, contentBlock: ContentBlock, callback: (start: number, end: number) => any) {"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":66,"column":5,"nodeType":"VariableDeclaration","source":"    let matchArr, start;"},{"ruleId":"prefer-const","severity":1,"message":"'emojiDecorator' is never reassigned. Use 'const' instead.","line":74,"column":5,"nodeType":"Identifier","source":"let emojiDecorator = {","fix":{"range":[2491,2494],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'uri' is never reassigned. Use 'const' instead.","line":79,"column":13,"nodeType":"Identifier","source":"        let uri = unicodeToEmojiUri(props.children[0].props.text);","fix":{"range":[2661,2664],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'shortname' is never reassigned. Use 'const' instead.","line":80,"column":13,"nodeType":"Identifier","source":"        let shortname = emojione.toShort(props.children[0].props.text);","fix":{"range":[2728,2731],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'style' is never reassigned. Use 'const' instead.","line":81,"column":13,"nodeType":"Identifier","source":"        let style = {","fix":{"range":[2800,2803],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 90 exceeds the maximum line length of 90.","line":90,"column":1,"nodeType":"Program","source":"        return (<span title={shortname} style={style}><span style={{opacity: 0}}>{props.children}</span></span>);"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":94,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'scope'.","line":94,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"prefer-const","severity":1,"message":"'MemberAvatar' is never reassigned. Use 'const' instead.","line":98,"column":9,"nodeType":"Identifier","source":"    let MemberAvatar = sdk.getComponent('avatars.MemberAvatar');","fix":{"range":[3355,3358],"text":"const"}},{"ruleId":"no-unused-vars","severity":2,"message":"'usernameDecorator' is assigned a value but never used.","line":100,"column":9,"nodeType":"Identifier","source":"    let usernameDecorator = {"},{"ruleId":"prefer-const","severity":1,"message":"'usernameDecorator' is never reassigned. Use 'const' instead.","line":100,"column":9,"nodeType":"Identifier","source":"    let usernameDecorator = {","fix":{"range":[3421,3424],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'member' is never reassigned. Use 'const' instead.","line":105,"column":17,"nodeType":"Identifier","source":"            let member = scope.room.getMember(props.children[0].props.text);","fix":{"range":[3617,3620],"text":"const"}},{"ruleId":"no-unused-vars","severity":2,"message":"'name' is assigned a value but never used.","line":107,"column":17,"nodeType":"Identifier","source":"            let name = member ? member.name : null;"},{"ruleId":"prefer-const","severity":1,"message":"'name' is never reassigned. Use 'const' instead.","line":107,"column":17,"nodeType":"Identifier","source":"            let name = member ? member.name : null;","fix":{"range":[3779,3782],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 108 exceeds the maximum line length of 90.","line":108,"column":1,"nodeType":"Program","source":"            let avatar = member ? <MemberAvatar member={member} width={16} height={16}/> : null;"},{"ruleId":"prefer-const","severity":1,"message":"'avatar' is never reassigned. Use 'const' instead.","line":108,"column":17,"nodeType":"Identifier","source":"            let avatar = member ? <MemberAvatar member={member} width={16} height={16}/> : null;","fix":{"range":[3831,3834],"text":"const"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":110,"column":10,"nodeType":"Property","source":"        }","fix":{"range":[4007,4007],"text":","}},{"ruleId":"no-unused-vars","severity":2,"message":"'roomDecorator' is assigned a value but never used.","line":113,"column":9,"nodeType":"Identifier","source":"    let roomDecorator = {"},{"ruleId":"prefer-const","severity":1,"message":"'roomDecorator' is never reassigned. Use 'const' instead.","line":113,"column":9,"nodeType":"Identifier","source":"    let roomDecorator = {","fix":{"range":[4020,4023],"text":"const"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":119,"column":10,"nodeType":"Property","source":"        }","fix":{"range":[4279,4279],"text":","}},{"ruleId":"prefer-const","severity":1,"message":"'markdownDecorators' is never reassigned. Use 'const' instead.","line":127,"column":9,"nodeType":"Identifier","source":"    let markdownDecorators = ['HR', 'BOLD', 'ITALIC', 'CODE', 'STRIKETHROUGH'].map(","fix":{"range":[4454,4457],"text":"const"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":136,"column":14,"nodeType":"Property","source":"            )","fix":{"range":[4895,4895],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":147,"column":10,"nodeType":"Property","source":"        )","fix":{"range":[5242,5242],"text":","}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'entityKey'.","line":154,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":154,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'contentState'.","line":154,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'rangeToReplace'.","line":154,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'modifyFn'.","line":154,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'inlineStyle'.","line":154,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"max-len","severity":1,"message":"Line 158 exceeds the maximum line length of 90.","line":158,"column":1,"nodeType":"Program","source":"                           modifyFn: (text: string) => string, inlineStyle, entityKey): ContentState {"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":159,"column":5,"nodeType":"VariableDeclaration","source":"    let getText = (key) => contentState.getBlockForKey(key).getText(),"},{"ruleId":"prefer-const","severity":1,"message":"'getText' is never reassigned. Use 'const' instead.","line":159,"column":9,"nodeType":"Identifier","source":"    let getText = (key) => contentState.getBlockForKey(key).getText(),"},{"ruleId":"prefer-const","severity":1,"message":"'startKey' is never reassigned. Use 'const' instead.","line":160,"column":9,"nodeType":"Identifier","source":"        startKey = rangeToReplace.getStartKey(),"},{"ruleId":"prefer-const","severity":1,"message":"'endKey' is never reassigned. Use 'const' instead.","line":162,"column":9,"nodeType":"Identifier","source":"        endKey = rangeToReplace.getEndKey(),"},{"ruleId":"prefer-const","severity":1,"message":"'endOffset' is never reassigned. Use 'const' instead.","line":163,"column":9,"nodeType":"Identifier","source":"        endOffset = rangeToReplace.getEndOffset(),"},{"ruleId":"prefer-const","severity":1,"message":"'blockText' is never reassigned. Use 'const' instead.","line":170,"column":13,"nodeType":"Identifier","source":"        let blockText = getText(currentKey);","fix":{"range":[6065,6068],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 180 exceeds the maximum line length of 90.","line":180,"column":1,"nodeType":"Program","source":"    return Modifier.replaceText(contentState, rangeToReplace, modifyFn(text), inlineStyle, entityKey);"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'contentBlocks'.","line":183,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":183,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'selectionState'.","line":183,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"max-len","severity":1,"message":"Line 189 exceeds the maximum line length of 90.","line":189,"column":1,"nodeType":"Program","source":"                                            contentBlocks: Array<ContentBlock>): {start: number, end: number} {"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":190,"column":5,"nodeType":"VariableDeclaration","source":"    let offset = 0, start = 0, end = 0;"},{"ruleId":"prefer-const","severity":1,"message":"'block' is never reassigned. Use 'const' instead.","line":191,"column":14,"nodeType":"Identifier","source":"    for (let block of contentBlocks) {","fix":{"range":[7002,7005],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 209 exceeds the maximum line length of 90.","line":209,"column":1,"nodeType":"Program","source":"                                            contentBlocks: Array<ContentBlock>): SelectionState {"},{"ruleId":"prefer-const","severity":1,"message":"'block' is never reassigned. Use 'const' instead.","line":212,"column":14,"nodeType":"Identifier","source":"    for (let block of contentBlocks) {","fix":{"range":[7647,7650],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'blockLength' is never reassigned. Use 'const' instead.","line":213,"column":13,"nodeType":"Identifier","source":"        let blockLength = block.getLength();","fix":{"range":[7685,7688],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 262 exceeds the maximum line length of 90.","line":262,"column":1,"nodeType":"Program","source":"            const entityKey = Entity.create('emoji', 'IMMUTABLE', { emojiUnicode: emojiText });"}],"errorCount":14,"warningCount":47,"source":"import React from 'react';\nimport {\n    Editor,\n    EditorState,\n    Modifier,\n    ContentState,\n    ContentBlock,\n    convertFromHTML,\n    DefaultDraftBlockRenderMap,\n    DefaultDraftInlineStyle,\n    CompositeDecorator,\n    SelectionState,\n    Entity,\n} from 'draft-js';\nimport * as sdk from './index';\nimport * as emojione from 'emojione';\nimport {stateToHTML} from 'draft-js-export-html';\nimport {SelectionRange} from \"./autocomplete/Autocompleter\";\n\nconst MARKDOWN_REGEX = {\n    LINK: /(?:\\[([^\\]]+)\\]\\(([^\\)]+)\\))|\\<(\\w+:\\/\\/[^\\>]+)\\>/g,\n    ITALIC: /([\\*_])([\\w\\s]+?)\\1/g,\n    BOLD: /([\\*_])\\1([\\w\\s]+?)\\1\\1/g,\n    HR: /(\\n|^)((-|\\*|_) *){3,}(\\n|$)/g,\n    CODE: /`[^`]*`/g,\n    STRIKETHROUGH: /~{2}[^~]*~{2}/g,\n};\n\nconst USERNAME_REGEX = /@\\S+:\\S+/g;\nconst ROOM_REGEX = /#\\S+:\\S+/g;\nconst EMOJI_REGEX = new RegExp(emojione.unicodeRegexp, 'g');\n\nexport const contentStateToHTML = stateToHTML;\n\nexport function HTMLtoContentState(html: string): ContentState {\n    return ContentState.createFromBlockArray(convertFromHTML(html));\n}\n\nfunction unicodeToEmojiUri(str) {\n    let replaceWith, unicode, alt;\n    if ((!emojione.unicodeAlt) || (emojione.sprites)) {\n        // if we are using the shortname as the alt tag then we need a reversed array to map unicode code point to shortnames\n        let mappedUnicode = emojione.mapUnicodeToShort();\n    }\n\n    str = str.replace(emojione.regUnicode, function(unicodeChar) {\n        if ( (typeof unicodeChar === 'undefined') || (unicodeChar === '') || (!(unicodeChar in emojione.jsEscapeMap)) ) {\n            // if the unicodeChar doesnt exist just return the entire match\n            return unicodeChar;\n        } else {\n            // get the unicode codepoint from the actual char\n            unicode = emojione.jsEscapeMap[unicodeChar];\n            return emojione.imagePathSVG+unicode+'.svg'+emojione.cacheBustParam;\n        }\n    });\n\n    return str;\n}\n\n/**\n * Utility function that looks for regex matches within a ContentBlock and invokes {callback} with (start, end)\n * From https://facebook.github.io/draft-js/docs/advanced-topics-decorators.html\n */\nfunction findWithRegex(regex, contentBlock: ContentBlock, callback: (start: number, end: number) => any) {\n    const text = contentBlock.getText();\n    let matchArr, start;\n    while ((matchArr = regex.exec(text)) !== null) {\n        start = matchArr.index;\n        callback(start, start + matchArr[0].length);\n    }\n}\n\n// Workaround for https://github.com/facebook/draft-js/issues/414\nlet emojiDecorator = {\n    strategy: (contentBlock, callback) => {\n        findWithRegex(EMOJI_REGEX, contentBlock, callback);\n    },\n    component: (props) => {\n        let uri = unicodeToEmojiUri(props.children[0].props.text);\n        let shortname = emojione.toShort(props.children[0].props.text);\n        let style = {\n            display: 'inline-block',\n            width: '1em',\n            maxHeight: '1em',\n            background: `url(${uri})`,\n            backgroundSize: 'contain',\n            backgroundPosition: 'center center',\n            overflow: 'hidden',\n        };\n        return (<span title={shortname} style={style}><span style={{opacity: 0}}>{props.children}</span></span>);\n    },\n};\n\n/**\n * Returns a composite decorator which has access to provided scope.\n */\nexport function getScopedRTDecorators(scope: any): CompositeDecorator {\n    let MemberAvatar = sdk.getComponent('avatars.MemberAvatar');\n\n    let usernameDecorator = {\n        strategy: (contentBlock, callback) => {\n            findWithRegex(USERNAME_REGEX, contentBlock, callback);\n        },\n        component: (props) => {\n            let member = scope.room.getMember(props.children[0].props.text);\n            // unused until we make these decorators immutable (autocomplete needed)\n            let name = member ? member.name : null;\n            let avatar = member ? <MemberAvatar member={member} width={16} height={16}/> : null;\n            return <span className=\"mx_UserPill\">{avatar}{props.children}</span>;\n        }\n    };\n\n    let roomDecorator = {\n        strategy: (contentBlock, callback) => {\n            findWithRegex(ROOM_REGEX, contentBlock, callback);\n        },\n        component: (props) => {\n            return <span className=\"mx_RoomPill\">{props.children}</span>;\n        }\n    };\n\n    // TODO Re-enable usernameDecorator and roomDecorator\n    return [emojiDecorator];\n}\n\nexport function getScopedMDDecorators(scope: any): CompositeDecorator {\n    let markdownDecorators = ['HR', 'BOLD', 'ITALIC', 'CODE', 'STRIKETHROUGH'].map(\n        (style) => ({\n            strategy: (contentBlock, callback) => {\n                return findWithRegex(MARKDOWN_REGEX[style], contentBlock, callback);\n            },\n            component: (props) => (\n                <span className={\"mx_MarkdownElement mx_Markdown_\" + style}>\n                    {props.children}\n                </span>\n            )\n        }));\n\n    markdownDecorators.push({\n        strategy: (contentBlock, callback) => {\n            return findWithRegex(MARKDOWN_REGEX.LINK, contentBlock, callback);\n        },\n        component: (props) => (\n            <a href=\"#\" className=\"mx_MarkdownElement mx_Markdown_LINK\">\n                {props.children}\n            </a>\n        )\n    });\n    markdownDecorators.push(emojiDecorator);\n\n    return markdownDecorators;\n}\n\n/**\n * Passes rangeToReplace to modifyFn and replaces it in contentState with the result.\n */\nexport function modifyText(contentState: ContentState, rangeToReplace: SelectionState,\n                           modifyFn: (text: string) => string, inlineStyle, entityKey): ContentState {\n    let getText = (key) => contentState.getBlockForKey(key).getText(),\n        startKey = rangeToReplace.getStartKey(),\n        startOffset = rangeToReplace.getStartOffset(),\n        endKey = rangeToReplace.getEndKey(),\n        endOffset = rangeToReplace.getEndOffset(),\n        text = \"\";\n\n\n    for (let currentKey = startKey;\n            currentKey && currentKey !== endKey;\n            currentKey = contentState.getKeyAfter(currentKey)) {\n        let blockText = getText(currentKey);\n        text += blockText.substring(startOffset, blockText.length);\n\n        // from now on, we'll take whole blocks\n        startOffset = 0;\n    }\n\n    // add remaining part of last block\n    text += getText(endKey).substring(startOffset, endOffset);\n\n    return Modifier.replaceText(contentState, rangeToReplace, modifyFn(text), inlineStyle, entityKey);\n}\n\n/**\n * Computes the plaintext offsets of the given SelectionState.\n * Note that this inherently means we make assumptions about what that means (no separator between ContentBlocks, etc)\n * Used by autocomplete to show completions when the current selection lies within, or at the edges of a command.\n */\nexport function selectionStateToTextOffsets(selectionState: SelectionState,\n                                            contentBlocks: Array<ContentBlock>): {start: number, end: number} {\n    let offset = 0, start = 0, end = 0;\n    for (let block of contentBlocks) {\n        if (selectionState.getStartKey() === block.getKey()) {\n            start = offset + selectionState.getStartOffset();\n        }\n        if (selectionState.getEndKey() === block.getKey()) {\n            end = offset + selectionState.getEndOffset();\n            break;\n        }\n        offset += block.getLength();\n    }\n\n    return {\n        start,\n        end,\n    };\n}\n\nexport function textOffsetsToSelectionState({start, end}: SelectionRange,\n                                            contentBlocks: Array<ContentBlock>): SelectionState {\n    let selectionState = SelectionState.createEmpty();\n\n    for (let block of contentBlocks) {\n        let blockLength = block.getLength();\n\n        if (start !== -1 && start < blockLength) {\n            selectionState = selectionState.merge({\n                anchorKey: block.getKey(),\n                anchorOffset: start,\n            });\n            start = -1;\n        } else {\n            start -= blockLength;\n        }\n\n        if (end !== -1 && end <= blockLength) {\n            selectionState = selectionState.merge({\n                focusKey: block.getKey(),\n                focusOffset: end,\n            });\n            end = -1;\n        } else {\n            end -= blockLength;\n        }\n    }\n\n    return selectionState;\n}\n\n// modified version of https://github.com/draft-js-plugins/draft-js-plugins/blob/master/draft-js-emoji-plugin/src/modifiers/attachImmutableEntitiesToEmojis.js\nexport function attachImmutableEntitiesToEmoji(editorState: EditorState): EditorState {\n    const contentState = editorState.getCurrentContent();\n    const blocks = contentState.getBlockMap();\n    let newContentState = contentState;\n\n    blocks.forEach((block) => {\n        const plainText = block.getText();\n\n        const addEntityToEmoji = (start, end) => {\n            const existingEntityKey = block.getEntityAt(start);\n            if (existingEntityKey) {\n                // avoid manipulation in case the emoji already has an entity\n                const entity = Entity.get(existingEntityKey);\n                if (entity && entity.get('type') === 'emoji') {\n                    return;\n                }\n            }\n\n            const selection = SelectionState.createEmpty(block.getKey())\n                .set('anchorOffset', start)\n                .set('focusOffset', end);\n            const emojiText = plainText.substring(start, end);\n            const entityKey = Entity.create('emoji', 'IMMUTABLE', { emojiUnicode: emojiText });\n            newContentState = Modifier.replaceText(\n                newContentState,\n                selection,\n                emojiText,\n                null,\n                entityKey,\n            );\n        };\n\n        findWithRegex(EMOJI_REGEX, block, addEntityToEmoji);\n    });\n\n    if (!newContentState.equals(contentState)) {\n        const oldSelection = editorState.getSelection();\n        editorState = EditorState.push(\n            editorState,\n            newContentState,\n            'convert-to-immutable-emojis',\n        );\n        // this is somewhat of a hack, we're undoing selection changes caused above\n        // it would be better not to make those changes in the first place\n        editorState = EditorState.forceSelection(editorState, oldSelection);\n    }\n\n    return editorState;\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/RoomListSorter.js","messages":[{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":22,"column":5,"nodeType":"Punctuator","source":"    }","fix":{"range":[717,722],"text":"    "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":35,"column":53,"nodeType":"Property","source":"    mostRecentActivityFirst: mostRecentActivityFirst","fix":{"range":[1003,1003],"text":","}}],"errorCount":1,"warningCount":1,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\n\nfunction tsOfNewestEvent(room) {\n    if (room.timeline.length) {\n        return room.timeline[room.timeline.length - 1].getTs();\n    }\n    else {\n        return Number.MAX_SAFE_INTEGER;\n    }\n}\n\nfunction mostRecentActivityFirst(roomList) {\n    return roomList.sort(function(a, b) {\n        return tsOfNewestEvent(b) - tsOfNewestEvent(a);\n    });\n}\n\nmodule.exports = {\n    mostRecentActivityFirst: mostRecentActivityFirst\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/RoomNotifs.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":83,"column":14,"nodeType":"ObjectExpression","source":"            }","fix":{"range":[2936,2936],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":87,"column":10,"nodeType":"Property","source":"        ]","fix":{"range":[3003,3003],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":111,"column":14,"nodeType":"Property","source":"            ]","fix":{"range":[3748,3748],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":122,"column":18,"nodeType":"ObjectExpression","source":"                }","fix":{"range":[4158,4158],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":123,"column":14,"nodeType":"Property","source":"            ]","fix":{"range":[4172,4172],"text":","}}],"errorCount":5,"warningCount":0,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport MatrixClientPeg from './MatrixClientPeg';\nimport PushProcessor from 'matrix-js-sdk/lib/pushprocessor';\nimport q from 'q';\n\nexport const ALL_MESSAGES_LOUD = 'all_messages_loud';\nexport const ALL_MESSAGES = 'all_messages';\nexport const MENTIONS_ONLY = 'mentions_only';\nexport const MUTE = 'mute';\n\nexport function getRoomNotifsState(roomId) {\n    if (MatrixClientPeg.get().isGuest()) return ALL_MESSAGES;\n\n    // look through the override rules for a rule affecting this room:\n    // if one exists, it will take precedence.\n    const muteRule = findOverrideMuteRule(roomId);\n    if (muteRule) {\n        return MUTE;\n    }\n\n    // for everything else, look at the room rule.\n    const roomRule = MatrixClientPeg.get().getRoomPushRule('global', roomId);\n\n    // XXX: We have to assume the default is to notify for all messages\n    // (in particular this will be 'wrong' for one to one rooms because\n    // they will notify loudly for all messages)\n    if (!roomRule || !roomRule.enabled) return ALL_MESSAGES;\n\n    // a mute at the room level will still allow mentions\n    // to notify\n    if (isMuteRule(roomRule)) return MENTIONS_ONLY;\n\n    const actionsObject = PushProcessor.actionListToActionsObject(roomRule.actions);\n    if (actionsObject.tweaks.sound) return ALL_MESSAGES_LOUD;\n\n    return null;\n}\n\nexport function setRoomNotifsState(roomId, newState) {\n    if (newState == MUTE) {\n        return setRoomNotifsStateMuted(roomId);\n    } else {\n        return setRoomNotifsStateUnmuted(roomId, newState);\n    }\n}\n\nfunction setRoomNotifsStateMuted(roomId) {\n    const cli = MatrixClientPeg.get();\n    const promises = [];\n\n    // delete the room rule\n    const roomRule = cli.getRoomPushRule('global', roomId);\n    if (roomRule) {\n        promises.push(cli.deletePushRule('global', 'room', roomRule.rule_id));\n    }\n\n    // add/replace an override rule to squelch everything in this room\n    // NB. We use the room ID as the name of this rule too, although this\n    // is an override rule, not a room rule: it still pertains to this room\n    // though, so using the room ID as the rule ID is logical and prevents\n    // duplicate copies of the rule.\n    promises.push(cli.addPushRule('global', 'override', roomId, {\n        conditions: [\n            {\n                kind: 'event_match',\n                key: 'room_id',\n                pattern: roomId,\n            }\n        ],\n        actions: [\n            'dont_notify',\n        ]\n    }));\n\n    return q.all(promises);\n}\n\nfunction setRoomNotifsStateUnmuted(roomId, newState) {\n    const cli = MatrixClientPeg.get();\n    const promises = [];\n\n    const overrideMuteRule = findOverrideMuteRule(roomId);\n    if (overrideMuteRule) {\n        promises.push(cli.deletePushRule('global', 'override', overrideMuteRule.rule_id));\n    }\n\n    if (newState == 'all_messages') {\n        const roomRule = cli.getRoomPushRule('global', roomId);\n        if (roomRule) {\n            promises.push(cli.deletePushRule('global', 'room', roomRule.rule_id));\n        }\n    } else if (newState == 'mentions_only') {\n        promises.push(cli.addPushRule('global', 'room', roomId, {\n            actions: [\n                'dont_notify',\n            ]\n        }));\n        // https://matrix.org/jira/browse/SPEC-400\n        promises.push(cli.setPushRuleEnabled('global', 'room', roomId, true));\n    } else if ('all_messages_loud') {\n        promises.push(cli.addPushRule('global', 'room', roomId, {\n            actions: [\n                'notify',\n                {\n                    set_tweak: 'sound',\n                    value: 'default',\n                }\n            ]\n        }));\n        // https://matrix.org/jira/browse/SPEC-400\n        promises.push(cli.setPushRuleEnabled('global', 'room', roomId, true));\n    }\n\n    return q.all(promises);\n}\n\nfunction findOverrideMuteRule(roomId) {\n    for (const rule of MatrixClientPeg.get().pushRules['global'].override) {\n        if (isRuleForRoom(roomId, rule)) {\n            if (isMuteRule(rule) && rule.enabled) {\n                return rule;\n            }\n        }\n    }\n    return null;\n}\n\nfunction isRuleForRoom(roomId, rule) {\n    if (rule.conditions.length !== 1) {\n        return false;\n    }\n    const cond = rule.conditions[0];\n    if (\n        cond.kind == 'event_match' &&\n        cond.key == 'room_id' &&\n        cond.pattern == roomId\n    ) {\n        return true;\n    }\n    return false;\n}\n\nfunction isMuteRule(rule) {\n    return (\n        rule.actions.length == 1 &&\n        rule.actions[0] == 'dont_notify'\n    );\n}\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Rooms.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DMRoomMap' is defined but never used.","line":18,"column":8,"nodeType":"Identifier","source":"import DMRoomMap from './utils/DMRoomMap';"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'room'.","line":21,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":21,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":31,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'room'.","line":31,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'me'.","line":31,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"max-len","severity":1,"message":"Line 66 exceeds the maximum line length of 90.","line":66,"column":1,"nodeType":"Program","source":"        (me.membership === \"leave\" && me.events.member.getSender() !== me.events.member.getStateKey()))"},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":67,"column":5,"nodeType":"Punctuator","source":"    {","fix":{"range":[2039,2044],"text":"    "}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":126,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'room'.","line":126,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'me'.","line":126,"column":1,"nodeType":"Block","source":"/**"}],"errorCount":1,"warningCount":10,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport MatrixClientPeg from './MatrixClientPeg';\nimport DMRoomMap from './utils/DMRoomMap';\nimport q from 'q';\n\n/**\n * Given a room object, return the alias we should use for it,\n * if any. This could be the canonical alias if one exists, otherwise\n * an alias selected arbitrarily but deterministically from the list\n * of aliases. Otherwise return null;\n */\nexport function getDisplayAliasForRoom(room) {\n    return room.getCanonicalAlias() || room.getAliases()[0];\n}\n\n/**\n * If the room contains only two members including the logged-in user,\n * return the other one. Otherwise, return null.\n */\nexport function getOnlyOtherMember(room, me) {\n    const joinedMembers = room.getJoinedMembers();\n\n    if (joinedMembers.length === 2) {\n        return joinedMembers.filter(function(m) {\n            return m.userId !== me.userId;\n        })[0];\n    }\n\n    return null;\n}\n\nexport function isConfCallRoom(room, me, conferenceHandler) {\n    if (!conferenceHandler) return false;\n\n    if (me.membership != \"join\") {\n        return false;\n    }\n\n    const otherMember = getOnlyOtherMember(room, me);\n    if (otherMember === null) {\n        return false;\n    }\n\n    if (conferenceHandler.isConferenceUser(otherMember.userId)) {\n        return true;\n    }\n}\n\nexport function looksLikeDirectMessageRoom(room, me) {\n    if (me.membership == \"join\" || me.membership === \"ban\" ||\n        (me.membership === \"leave\" && me.events.member.getSender() !== me.events.member.getStateKey()))\n    {\n        // Used to split rooms via tags\n        const tagNames = Object.keys(room.tags);\n        // Used for 1:1 direct chats\n        const members = room.currentState.getMembers();\n\n        // Show 1:1 chats in seperate \"Direct Messages\" section as long as they haven't\n        // been moved to a different tag section\n        if (members.length === 2 && !tagNames.length) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Marks or unmarks the given room as being as a DM room.\n * @param {string} roomId The ID of the room to modify\n * @param {string} userId The user ID of the desired DM\n                   room target user or null to un-mark\n                   this room as a DM room\n * @returns {object} A promise\n */\nexport function setDMRoom(roomId, userId) {\n    if (MatrixClientPeg.get().isGuest()) {\n        return q();\n    }\n\n    const mDirectEvent = MatrixClientPeg.get().getAccountData('m.direct');\n    let dmRoomMap = {};\n\n    if (mDirectEvent !== undefined) dmRoomMap = mDirectEvent.getContent();\n\n    // remove it from the lists of any others users\n    // (it can only be a DM room for one person)\n    for (const thisUserId of Object.keys(dmRoomMap)) {\n        const roomList = dmRoomMap[thisUserId];\n\n        if (thisUserId != userId) {\n            const indexOfRoom = roomList.indexOf(roomId);\n            if (indexOfRoom > -1) {\n                roomList.splice(indexOfRoom, 1);\n            }\n        }\n    }\n\n    // now add it, if it's not already there\n    if (userId) {\n        const roomList = dmRoomMap[userId] || [];\n        if (roomList.indexOf(roomId) == -1) {\n            roomList.push(roomId);\n        }\n        dmRoomMap[userId] = roomList;\n    }\n\n\n    return MatrixClientPeg.get().setAccountData('m.direct', dmRoomMap);\n}\n\n/**\n * Given a room, estimate which of its members is likely to\n * be the target if the room were a DM room and return that user.\n */\nexport function guessDMRoomTarget(room, me) {\n    let oldestTs;\n    let oldestUser;\n\n    // Pick the user who's been here longest (and isn't us)\n    for (const user of room.currentState.getMembers()) {\n        if (user.userId == me.userId) continue;\n\n        if (oldestTs === undefined || user.events.member.getTs() < oldestTs) {\n            oldestUser = user;\n            oldestTs = user.events.member.getTs();\n        }\n    }\n\n    if (oldestUser === undefined) return me;\n    return oldestUser;\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/RtsClient.js","messages":[{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":27,"column":29,"nodeType":"Identifier","source":"    trackReferral(referrer, user_id, user_email) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_email' is not in camel case.","line":27,"column":38,"nodeType":"Identifier","source":"    trackReferral(referrer, user_id, user_email) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'team_token' is not in camel case.","line":36,"column":13,"nodeType":"Identifier","source":"    getTeam(team_token) {"}],"errorCount":0,"warningCount":3,"source":"const q = require('q');\nconst request = q.nfbind(require('browser-request'));\n\nexport default class RtsClient {\n    constructor(url) {\n        this._url = url;\n    }\n\n    getTeamsConfig() {\n        return request({\n            url: this._url + '/teams',\n            json: true,\n        });\n    }\n\n    /**\n     * Track a referral with the Riot Team Server. This should be called once a referred\n     * user has been successfully registered.\n     * @param {string} referrer the user ID of one who referred the user to Riot.\n     * @param {string} user_id the user ID of the user being referred.\n     * @param {string} user_email the email address linked to `user_id`.\n     * @returns {Promise} a promise that resolves to [$response, $body], where $response\n     * is the response object created by the request lib and $body is the object parsed\n     * from the JSON response body. $body should be { team_token: 'sometoken' } upon\n     * success.\n     */\n    trackReferral(referrer, user_id, user_email) {\n        return request({\n            url: this._url + '/register',\n            json: true,\n            body: {referrer, user_id, user_email},\n            method: 'POST',\n        });\n    }\n\n    getTeam(team_token) {\n        return request({\n            url: this._url + '/teamConfiguration',\n            json: true,\n            qs: {team_token},\n        });\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/ScalarAuthClient.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var request = require('browser-request');","fix":{"range":[584,587],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var SdkConfig = require('./SdkConfig');","fix":{"range":[627,630],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('./MatrixClientPeg');","fix":{"range":[667,670],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":41,"column":9,"nodeType":"VariableDeclaration","source":"        var tok = window.localStorage.getItem(\"mx_scalar_token\");","fix":{"range":[1086,1089],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'token_object' is not in camel case.","line":46,"column":61,"nodeType":"Identifier","source":"        return MatrixClientPeg.get().getOpenIdToken().then((token_object) => {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'token_object' is not in camel case.","line":49,"column":18,"nodeType":"Identifier","source":"        }).then((token_object) => {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'token_object' is not in camel case.","line":51,"column":20,"nodeType":"Identifier","source":"            return token_object;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'openid_token_object' is not in camel case.","line":55,"column":28,"nodeType":"Identifier","source":"    exchangeForScalarToken(openid_token_object) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":56,"column":9,"nodeType":"VariableDeclaration","source":"        var defer = q.defer();","fix":{"range":[1736,1739],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":58,"column":9,"nodeType":"VariableDeclaration","source":"        var scalar_rest_url = SdkConfig.get().integrations_rest_url;","fix":{"range":[1768,1771],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'scalar_rest_url' is not in camel case.","line":58,"column":13,"nodeType":"Identifier","source":"        var scalar_rest_url = SdkConfig.get().integrations_rest_url;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'scalar_rest_url' is not in camel case.","line":61,"column":18,"nodeType":"Identifier","source":"            uri: scalar_rest_url+'/register',"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":80,"column":9,"nodeType":"VariableDeclaration","source":"        var url = SdkConfig.get().integrations_ui_url;","fix":{"range":[2520,2523],"text":"let"}}],"errorCount":0,"warningCount":14,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar q = require(\"q\");\nvar request = require('browser-request');\n\nvar SdkConfig = require('./SdkConfig');\nvar MatrixClientPeg = require('./MatrixClientPeg');\n\nclass ScalarAuthClient {\n\n    constructor() {\n        this.scalarToken = null;\n    }\n\n    connect() {\n        return this.getScalarToken().then((tok) => {\n            this.scalarToken = tok;\n        });\n    }\n\n    hasCredentials() {\n        return this.scalarToken != null; // undef or null\n    }\n\n    // Returns a scalar_token string\n    getScalarToken() {\n        var tok = window.localStorage.getItem(\"mx_scalar_token\");\n        if (tok) return q(tok);\n\n        // No saved token, so do the dance to get one. First, we\n        // need an openid bearer token from the HS.\n        return MatrixClientPeg.get().getOpenIdToken().then((token_object) => {\n            // Now we can send that to scalar and exchange it for a scalar token\n            return this.exchangeForScalarToken(token_object);\n        }).then((token_object) => {\n            window.localStorage.setItem(\"mx_scalar_token\", token_object);\n            return token_object;\n        });\n    }\n\n    exchangeForScalarToken(openid_token_object) {\n        var defer = q.defer();\n\n        var scalar_rest_url = SdkConfig.get().integrations_rest_url;\n        request({\n            method: 'POST',\n            uri: scalar_rest_url+'/register',\n            body: openid_token_object,\n            json: true,\n        }, (err, response, body) => {\n            if (err) {\n                defer.reject(err);\n            } else if (response.statusCode / 100 !== 2) {\n                defer.reject({statusCode: response.statusCode});\n            } else if (!body || !body.scalar_token) {\n                defer.reject(new Error(\"Missing scalar_token in response\"));\n            } else {\n                defer.resolve(body.scalar_token);\n            }\n        });\n\n        return defer.promise;\n    }\n\n    getScalarInterfaceUrlForRoom(roomId) {\n        var url = SdkConfig.get().integrations_ui_url;\n        url += \"?scalar_token=\" + encodeURIComponent(this.scalarToken);\n        url += \"&room_id=\" + encodeURIComponent(roomId);\n        return url;\n    }\n\n    getStarterLink(starterLinkUrl) {\n        return starterLinkUrl + \"?scalar_token=\" + encodeURIComponent(this.scalarToken);\n    }\n}\n\nmodule.exports = ScalarAuthClient;\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/ScalarMessaging.js","messages":[{"ruleId":"max-len","severity":1,"message":"Line 181 exceeds the maximum line length of 90.","line":181,"column":1,"nodeType":"Program","source":"    console.log(`Received request to set plumbing state to status \"${status}\" in room ${roomId}`);"},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'status'.","line":187,"column":56,"nodeType":"Identifier","source":"    client.sendStateEvent(roomId, \"m.room.plumbing\", { status : status }).done(() => {","fix":{"range":[5358,5359],"text":""}},{"ruleId":"max-len","severity":1,"message":"Line 203 exceeds the maximum line length of 90.","line":203,"column":1,"nodeType":"Program","source":"    client.sendStateEvent(roomId, \"m.room.bot.options\", event.data.content, \"_\" + userId).done(() => {"},{"ruleId":"max-len","severity":1,"message":"Line 218 exceeds the maximum line length of 90.","line":218,"column":1,"nodeType":"Program","source":"    console.log(`Received request to set power level to ${level} for bot ${userId} in room ${roomId}.`);"},{"ruleId":"prefer-const","severity":1,"message":"'powerEvent' is never reassigned. Use 'const' instead.","line":226,"column":13,"nodeType":"Identifier","source":"        let powerEvent = new MatrixEvent(","fix":{"range":[6660,6663],"text":"const"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":230,"column":14,"nodeType":"ObjectExpression","source":"            }","fix":{"range":[6804,6804],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":277,"column":1,"nodeType":"VariableDeclaration","source":"var currentRoomId = null;","fix":{"range":[8212,8215],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":278,"column":1,"nodeType":"VariableDeclaration","source":"var currentRoomAlias = null;","fix":{"range":[8238,8241],"text":"let"}},{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":302,"column":9,"nodeType":"Identifier","source":"    let url = SdkConfig.get().integrations_ui_url;","fix":{"range":[9069,9072],"text":"const"}},{"ruleId":"max-len","severity":1,"message":"Line 327 exceeds the maximum line length of 90.","line":327,"column":1,"nodeType":"Program","source":"        promise = MatrixClientPeg.get().getRoomIdForAlias(currentRoomAlias).then((res) => {"},{"ruleId":"max-len","severity":1,"message":"Line 368 exceeds the maximum line length of 90.","line":368,"column":1,"nodeType":"Program","source":"                console.warn(\"Unhandled postMessage event with action '\" + event.data.action +\"'\");"}],"errorCount":1,"warningCount":10,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nListens for incoming postMessage requests from the integrations UI URL. The following API is exposed:\n{\n    action: \"invite\" | \"membership_state\" | \"bot_options\" | \"set_bot_options\",\n    room_id: $ROOM_ID,\n    user_id: $USER_ID\n    // additional request fields\n}\n\nThe complete request object is returned to the caller with an additional \"response\" key like so:\n{\n    action: \"invite\" | \"membership_state\" | \"bot_options\" | \"set_bot_options\",\n    room_id: $ROOM_ID,\n    user_id: $USER_ID,\n    // additional request fields\n    response: { ... }\n}\n\nThe \"action\" determines the format of the request and response. All actions can return an error response.\nAn error response is a \"response\" object which consists of a sole \"error\" key to indicate an error.\nThey look like:\n{\n    error: {\n        message: \"Unable to invite user into room.\",\n        _error: <Original Error Object>\n    }\n}\nThe \"message\" key should be a human-friendly string.\n\nACTIONS\n=======\nAll actions can return an error response instead of the response outlined below.\n\ninvite\n------\nInvites a user into a room.\n\nRequest:\n - room_id is the room to invite the user into.\n - user_id is the user ID to invite.\n - No additional fields.\nResponse:\n{\n    success: true\n}\nExample:\n{\n    action: \"invite\",\n    room_id: \"!foo:bar\",\n    user_id: \"@invitee:bar\",\n    response: {\n        success: true\n    }\n}\n\nset_bot_options\n---------------\nSet the m.room.bot.options state event for a bot user.\n\nRequest:\n - room_id is the room to send the state event into.\n - user_id is the user ID of the bot who you're setting options for.\n - \"content\" is an object consisting of the content you wish to set.\nResponse:\n{\n    success: true\n}\nExample:\n{\n    action: \"set_bot_options\",\n    room_id: \"!foo:bar\",\n    user_id: \"@bot:bar\",\n    content: {\n        default_option: \"alpha\"\n    },\n    response: {\n        success: true\n    }\n}\n\nmembership_state AND bot_options\n--------------------------------\nGet the content of the \"m.room.member\" or \"m.room.bot.options\" state event respectively.\n\nNB: Whilst this API is basically equivalent to getStateEvent, we specifically do not\n    want external entities to be able to query any state event for any room, hence the\n    restrictive API outlined here.\n\nRequest:\n - room_id is the room which has the state event.\n - user_id is the state_key parameter which in both cases is a user ID (the member or the bot).\n - No additional fields.\nResponse:\n - The event content. If there is no state event, the \"response\" key should be null.\nExample:\n{\n    action: \"membership_state\",\n    room_id: \"!foo:bar\",\n    user_id: \"@somemember:bar\",\n    response: {\n        membership: \"join\",\n        displayname: \"Bob\",\n        avatar_url: null\n    }\n}\n*/\n\nconst SdkConfig = require('./SdkConfig');\nconst MatrixClientPeg = require(\"./MatrixClientPeg\");\nconst MatrixEvent = require(\"matrix-js-sdk\").MatrixEvent;\nconst dis = require(\"./dispatcher\");\n\nfunction sendResponse(event, res) {\n    const data = JSON.parse(JSON.stringify(event.data));\n    data.response = res;\n    event.source.postMessage(data, event.origin);\n}\n\nfunction sendError(event, msg, nestedError) {\n    console.error(\"Action:\" + event.data.action + \" failed with message: \" + msg);\n    const data = JSON.parse(JSON.stringify(event.data));\n    data.response = {\n        error: {\n            message: msg,\n        },\n    };\n    if (nestedError) {\n        data.response.error._error = nestedError;\n    }\n    event.source.postMessage(data, event.origin);\n}\n\nfunction inviteUser(event, roomId, userId) {\n    console.log(`Received request to invite ${userId} into room ${roomId}`);\n    const client = MatrixClientPeg.get();\n    if (!client) {\n        sendError(event, \"You need to be logged in.\");\n        return;\n    }\n    const room = client.getRoom(roomId);\n    if (room) {\n        // if they are already invited we can resolve immediately.\n        const member = room.getMember(userId);\n        if (member && member.membership === \"invite\") {\n            sendResponse(event, {\n                success: true,\n            });\n            return;\n        }\n    }\n\n    client.invite(roomId, userId).done(function() {\n        sendResponse(event, {\n            success: true,\n        });\n    }, function(err) {\n        sendError(event, \"You need to be able to invite users to do that.\", err);\n    });\n}\n\nfunction setPlumbingState(event, roomId, status) {\n    if (typeof status !== 'string') {\n        throw new Error('Plumbing state status should be a string');\n    }\n    console.log(`Received request to set plumbing state to status \"${status}\" in room ${roomId}`);\n    const client = MatrixClientPeg.get();\n    if (!client) {\n        sendError(event, \"You need to be logged in.\");\n        return;\n    }\n    client.sendStateEvent(roomId, \"m.room.plumbing\", { status : status }).done(() => {\n        sendResponse(event, {\n            success: true,\n        });\n    }, (err) => {\n        sendError(event, err.message ? err.message : \"Failed to send request.\", err);\n    });\n}\n\nfunction setBotOptions(event, roomId, userId) {\n    console.log(`Received request to set options for bot ${userId} in room ${roomId}`);\n    const client = MatrixClientPeg.get();\n    if (!client) {\n        sendError(event, \"You need to be logged in.\");\n        return;\n    }\n    client.sendStateEvent(roomId, \"m.room.bot.options\", event.data.content, \"_\" + userId).done(() => {\n        sendResponse(event, {\n            success: true,\n        });\n    }, (err) => {\n        sendError(event, err.message ? err.message : \"Failed to send request.\", err);\n    });\n}\n\nfunction setBotPower(event, roomId, userId, level) {\n    if (!(Number.isInteger(level) && level >= 0)) {\n        sendError(event, \"Power level must be positive integer.\");\n        return;\n    }\n\n    console.log(`Received request to set power level to ${level} for bot ${userId} in room ${roomId}.`);\n    const client = MatrixClientPeg.get();\n    if (!client) {\n        sendError(event, \"You need to be logged in.\");\n        return;\n    }\n\n    client.getStateEvent(roomId, \"m.room.power_levels\", \"\").then((powerLevels) => {\n        let powerEvent = new MatrixEvent(\n            {\n                type: \"m.room.power_levels\",\n                content: powerLevels,\n            }\n        );\n\n        client.setPowerLevel(roomId, userId, level, powerEvent).done(() => {\n            sendResponse(event, {\n                success: true,\n            });\n        }, (err) => {\n            sendError(event, err.message ? err.message : \"Failed to send request.\", err);\n        });\n    });\n}\n\nfunction getMembershipState(event, roomId, userId) {\n    console.log(`membership_state of ${userId} in room ${roomId} requested.`);\n    returnStateEvent(event, roomId, \"m.room.member\", userId);\n}\n\nfunction getJoinRules(event, roomId) {\n    console.log(`join_rules of ${roomId} requested.`);\n    returnStateEvent(event, roomId, \"m.room.join_rules\", \"\");\n}\n\nfunction botOptions(event, roomId, userId) {\n    console.log(`bot_options of ${userId} in room ${roomId} requested.`);\n    returnStateEvent(event, roomId, \"m.room.bot.options\", \"_\" + userId);\n}\n\nfunction returnStateEvent(event, roomId, eventType, stateKey) {\n    const client = MatrixClientPeg.get();\n    if (!client) {\n        sendError(event, \"You need to be logged in.\");\n        return;\n    }\n    const room = client.getRoom(roomId);\n    if (!room) {\n        sendError(event, \"This room is not recognised.\");\n        return;\n    }\n    const stateEvent = room.currentState.getStateEvents(eventType, stateKey);\n    if (!stateEvent) {\n        sendResponse(event, null);\n        return;\n    }\n    sendResponse(event, stateEvent.getContent());\n}\n\nvar currentRoomId = null;\nvar currentRoomAlias = null;\n\n// Listen for when a room is viewed\ndis.register(onAction);\nfunction onAction(payload) {\n    if (payload.action !== \"view_room\") {\n        return;\n    }\n    currentRoomId = payload.room_id;\n    currentRoomAlias = payload.room_alias;\n}\n\nconst onMessage = function(event) {\n    if (!event.origin) { // stupid chrome\n        event.origin = event.originalEvent.origin;\n    }\n\n    // Check that the integrations UI URL starts with the origin of the event\n    // This means the URL could contain a path (like /develop) and still be used\n    // to validate event origins, which do not specify paths.\n    // (See https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n    //\n    // All strings start with the empty string, so for sanity return if the length\n    // of the event origin is 0.\n    let url = SdkConfig.get().integrations_ui_url;\n    if (event.origin.length === 0 || !url.startsWith(event.origin)) {\n        return; // don't log this - debugging APIs like to spam postMessage which floods the log otherwise\n    }\n\n    if (event.data.action === \"close_scalar\") {\n        dis.dispatch({ action: \"close_scalar\" });\n        sendResponse(event, null);\n        return;\n    }\n\n    const roomId = event.data.room_id;\n    const userId = event.data.user_id;\n    if (!roomId) {\n        sendError(event, \"Missing room_id in request\");\n        return;\n    }\n    let promise = Promise.resolve(currentRoomId);\n    if (!currentRoomId) {\n        if (!currentRoomAlias) {\n            sendError(event, \"Must be viewing a room\");\n            return;\n        }\n        // no room ID but there is an alias, look it up.\n        console.log(\"Looking up alias \" + currentRoomAlias);\n        promise = MatrixClientPeg.get().getRoomIdForAlias(currentRoomAlias).then((res) => {\n            return res.room_id;\n        });\n    }\n\n    promise.then((viewingRoomId) => {\n        if (roomId !== viewingRoomId) {\n            sendError(event, \"Room \" + roomId + \" not visible\");\n            return;\n        }\n\n        // Getting join rules does not require userId\n        if (event.data.action === \"join_rules_state\") {\n            getJoinRules(event, roomId);\n            return;\n        } else if (event.data.action === \"set_plumbing_state\") {\n            setPlumbingState(event, roomId, event.data.status);\n            return;\n        }\n\n        if (!userId) {\n            sendError(event, \"Missing user_id in request\");\n            return;\n        }\n        switch (event.data.action) {\n            case \"membership_state\":\n                getMembershipState(event, roomId, userId);\n                break;\n            case \"invite\":\n                inviteUser(event, roomId, userId);\n                break;\n            case \"bot_options\":\n                botOptions(event, roomId, userId);\n                break;\n            case \"set_bot_options\":\n                setBotOptions(event, roomId, userId);\n                break;\n            case \"set_bot_power\":\n                setBotPower(event, roomId, userId, event.data.level);\n                break;\n            default:\n                console.warn(\"Unhandled postMessage event with action '\" + event.data.action +\"'\");\n                break;\n        }\n    }, (err) => {\n        console.error(err);\n        sendError(event, \"Failed to lookup current room.\");\n    });\n};\n\nmodule.exports = {\n    startListening: function() {\n        window.addEventListener(\"message\", onMessage, false);\n    },\n\n    stopListening: function() {\n        window.removeEventListener(\"message\", onMessage);\n    },\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/SdkConfig.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var DEFAULTS = {","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":9,"nodeType":"VariableDeclaration","source":"        var defaultKeys = Object.keys(DEFAULTS);","fix":{"range":[1052,1055],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < defaultKeys.length; ++i) {"}],"errorCount":0,"warningCount":3,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar DEFAULTS = {\n    // URL to a page we show in an iframe to configure integrations\n    integrations_ui_url: \"https://scalar.vector.im/\",\n    // Base URL to the REST interface of the integrations server\n    integrations_rest_url: \"https://scalar.vector.im/api\",\n    // Where to send bug reports. If not specified, bugs cannot be sent.\n    bug_report_endpoint_url: null,\n};\n\nclass SdkConfig {\n\n    static get() {\n        return global.mxReactSdkConfig;\n    }\n\n    static put(cfg) {\n        var defaultKeys = Object.keys(DEFAULTS);\n        for (var i = 0; i < defaultKeys.length; ++i) {\n            if (cfg[defaultKeys[i]] === undefined) {\n                cfg[defaultKeys[i]] = DEFAULTS[defaultKeys[i]];\n            }\n        }\n        global.mxReactSdkConfig = cfg;\n    }\n\n    static unset() {\n        global.mxReactSdkConfig = undefined;\n    }\n}\n\nmodule.exports = SdkConfig;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Signup.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":5,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");","fix":{"range":[52,55],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'MatrixClientPeg' is assigned a value but never used.","line":5,"column":5,"nodeType":"Identifier","source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":6,"column":1,"nodeType":"VariableDeclaration","source":"var SignupStages = require(\"./SignupStages\");","fix":{"range":[104,107],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":7,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"./dispatcher\");","fix":{"range":[150,153],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":8,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[185,188],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":9,"column":1,"nodeType":"VariableDeclaration","source":"var url = require(\"url\");","fix":{"range":[207,210],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":40,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":122,"column":47,"nodeType":"Property","source":"            action: \"registration_step_update\"","fix":{"range":[3246,3246],"text":","}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":126,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'formVals'.","line":126,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":130,"column":9,"nodeType":"VariableDeclaration","source":"        var {username, password, email} = formVals;","fix":{"range":[3375,3378],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'poll_for_success' is not in camel case.","line":151,"column":36,"nodeType":"Identifier","source":"    _tryRegister(client, authDict, poll_for_success) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":152,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[4303,4306],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":154,"column":9,"nodeType":"VariableDeclaration","source":"        var bindEmail;","fix":{"range":[4329,4332],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":165,"column":34,"nodeType":"MemberExpression","source":"            this.guestAccessToken","fix":{"range":[4824,4824],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":180,"column":21,"nodeType":"VariableDeclaration","source":"                    var flow = self.chooseFlow(error.data.flows);","fix":{"range":[5654,5657],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":184,"column":25,"nodeType":"VariableDeclaration","source":"                        var flowStage = self.firstUncompletedStage(flow);","fix":{"range":[5837,5840],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 186 exceeds the maximum line length of 90.","line":186,"column":1,"nodeType":"Program","source":"                            return self._startStage(client, flowStage).catch(function(err) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'poll_for_success' is not in camel case.","line":193,"column":21,"nodeType":"Identifier","source":"                if (poll_for_success) {"},{"ruleId":"max-len","severity":1,"message":"Line 204 exceeds the maximum line length of 90.","line":204,"column":1,"nodeType":"Program","source":"                    throw new Error(\"User names may only contain alphanumeric characters, underscores or dots!\");"},{"ruleId":"max-len","severity":1,"message":"Line 213 exceeds the maximum line length of 90.","line":213,"column":1,"nodeType":"Program","source":"                        throw new Error(`Registration failed! (${error.httpStatus}) - ${msg}`);"},{"ruleId":"max-len","severity":1,"message":"Line 215 exceeds the maximum line length of 90.","line":215,"column":1,"nodeType":"Program","source":"                        throw new Error(`Registration failed! (${error.httpStatus}) - That's all we know.`);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":219,"column":82,"nodeType":"TemplateLiteral","source":"                        `Server error during registration! (${error.httpStatus})`","fix":{"range":[7695,7695],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":225,"column":83,"nodeType":"Literal","source":"                        \"This home server does not support resuming registration.\"","fix":{"range":[8038,8038],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":233,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < flow.stages.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":241,"column":9,"nodeType":"VariableDeclaration","source":"        var completed = (this.data || {}).completed || [];","fix":{"range":[8374,8377],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":246,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[8529,8532],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":248,"column":9,"nodeType":"VariableDeclaration","source":"        var StageClass = SignupStages[stageName];","fix":{"range":[8597,8600],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":254,"column":9,"nodeType":"VariableDeclaration","source":"        var stage = new StageClass(client, this);","fix":{"range":[8788,8791],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":260,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[9134,9147],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":274,"column":9,"nodeType":"VariableDeclaration","source":"        var emailFlow = null;","fix":{"range":[9670,9673],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":275,"column":9,"nodeType":"VariableDeclaration","source":"        var otherFlow = null;","fix":{"range":[9700,9703],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":277,"column":13,"nodeType":"VariableDeclaration","source":"            var flowHasEmail = false;","fix":{"range":[9773,9776],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":278,"column":18,"nodeType":"VariableDeclaration","source":"            for (var stageI = 0; stageI < flow.stages.length; ++stageI) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":279,"column":17,"nodeType":"VariableDeclaration","source":"                var stage = flow.stages[stageI];","fix":{"range":[9889,9892],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":341,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[11852,11855],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":342,"column":9,"nodeType":"VariableDeclaration","source":"        var client = this._createTemporaryClient();","fix":{"range":[11877,11880],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":359,"column":9,"nodeType":"VariableDeclaration","source":"        var flowStep = this._flows[this._currentFlowIndex];","fix":{"range":[12494,12497],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":364,"column":9,"nodeType":"VariableDeclaration","source":"        var client = this._createTemporaryClient();","fix":{"range":[12630,12633],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":376,"column":28,"nodeType":"Property","source":"                guest: true","fix":{"range":[13124,13124],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":389,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[13503,13506],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":390,"column":9,"nodeType":"VariableDeclaration","source":"        var isEmail = username.indexOf(\"@\") > 0;","fix":{"range":[13528,13531],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":391,"column":9,"nodeType":"VariableDeclaration","source":"        var loginParams = {","fix":{"range":[13577,13580],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":402,"column":9,"nodeType":"VariableDeclaration","source":"        var client = this._createTemporaryClient();","fix":{"range":[13895,13898],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":409,"column":47,"nodeType":"Property","source":"                accessToken: data.access_token","fix":{"range":[14263,14263],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":416,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[14528,14541],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":422,"column":21,"nodeType":"VariableDeclaration","source":"                    var fbClient = Matrix.createClient({","fix":{"range":[14757,14760],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":424,"column":36,"nodeType":"ThisExpression","source":"                        idBaseUrl: this._isUrl,"},{"ruleId":"max-len","severity":1,"message":"Line 427 exceeds the maximum line length of 90.","line":427,"column":1,"nodeType":"Program","source":"                    return fbClient.login('m.login.password', loginParams).then(function(data) {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":433,"column":59,"nodeType":"Property","source":"                            accessToken: data.access_token","fix":{"range":[15339,15339],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'fallback_error' is not in camel case.","line":435,"column":33,"nodeType":"Identifier","source":"                    }, function(fallback_error) {"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":440,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[15562,15575],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":451,"column":7,"nodeType":"VariableDeclaration","source":"      var client = this._createTemporaryClient();","fix":{"range":[15812,15815],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":452,"column":7,"nodeType":"VariableDeclaration","source":"      var parsedUrl = url.parse(window.location.href, true);","fix":{"range":[15862,15865],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":455,"column":7,"nodeType":"VariableDeclaration","source":"      var casUrl = client.getCasLoginUrl(url.format(parsedUrl));","fix":{"range":[16061,16064],"text":"let"}}],"errorCount":9,"warningCount":46,"source":"\"use strict\";\n\nimport Matrix from \"matrix-js-sdk\";\n\nvar MatrixClientPeg = require(\"./MatrixClientPeg\");\nvar SignupStages = require(\"./SignupStages\");\nvar dis = require(\"./dispatcher\");\nvar q = require(\"q\");\nvar url = require(\"url\");\n\nconst EMAIL_STAGE_TYPE = \"m.login.email.identity\";\n\n/**\n * A base class for common functionality between Registration and Login e.g.\n * storage of HS/IS URLs.\n */\nclass Signup {\n    constructor(hsUrl, isUrl, opts) {\n        this._hsUrl = hsUrl;\n        this._isUrl = isUrl;\n        this._defaultDeviceDisplayName = opts.defaultDeviceDisplayName;\n    }\n\n    getHomeserverUrl() {\n        return this._hsUrl;\n    }\n\n    getIdentityServerUrl() {\n        return this._isUrl;\n    }\n\n    setHomeserverUrl(hsUrl) {\n        this._hsUrl = hsUrl;\n    }\n\n    setIdentityServerUrl(isUrl) {\n        this._isUrl = isUrl;\n    }\n\n    /**\n     * Get a temporary MatrixClient, which can be used for login or register\n     * requests.\n     */\n    _createTemporaryClient() {\n        return Matrix.createClient({\n            baseUrl: this._hsUrl,\n            idBaseUrl: this._isUrl,\n        });\n    }\n}\n\n/**\n * Registration logic class\n * This exists for the lifetime of a user's attempt to register an account,\n * so if their registration attempt fails for whatever reason and they\n * try again, call register() on the same instance again.\n *\n * TODO: parts of this overlap heavily with InteractiveAuth in the js-sdk. It\n * would be nice to make use of that rather than rolling our own version of it.\n */\nclass Register extends Signup {\n    constructor(hsUrl, isUrl, opts) {\n        super(hsUrl, isUrl, opts);\n        this.setStep(\"START\");\n        this.data = null; // from the server\n        // random other stuff (e.g. query params, NOT params from the server)\n        this.params = {};\n        this.credentials = null;\n        this.activeStage = null;\n        this.registrationPromise = null;\n        // These values MUST be undefined else we'll send \"username: null\" which\n        // will error on Synapse rather than having the key absent.\n        this.username = undefined; // desired\n        this.email = undefined; // desired\n        this.password = undefined; // desired\n    }\n\n    setClientSecret(secret) {\n        this.params.clientSecret = secret;\n    }\n\n    setSessionId(sessionId) {\n        this.params.sessionId = sessionId;\n    }\n\n    setRegistrationUrl(regUrl) {\n        this.params.registrationUrl = regUrl;\n    }\n\n    setIdSid(idSid) {\n        this.params.idSid = idSid;\n    }\n\n    setGuestAccessToken(token) {\n        this.guestAccessToken = token;\n    }\n\n    getStep() {\n        return this._step;\n    }\n\n    getCredentials() {\n        return this.credentials;\n    }\n\n    getServerData() {\n        return this.data || {};\n    }\n\n    getPromise() {\n        return this.registrationPromise;\n    }\n\n    setStep(step) {\n        this._step = 'Register.' + step;\n        // TODO:\n        // It's a shame this is going to the global dispatcher, we only really\n        // want things which have an instance of this class to be able to add\n        // listeners...\n        console.log(\"Dispatching 'registration_step_update' for step %s\", this._step);\n        dis.dispatch({\n            action: \"registration_step_update\"\n        });\n    }\n\n    /**\n     * Starts the registration process from the first stage\n     */\n    register(formVals) {\n        var {username, password, email} = formVals;\n        this.email = email;\n        this.username = username;\n        this.password = password;\n        const client = this._createTemporaryClient();\n        this.activeStage = null;\n\n        // If there hasn't been a client secret set by this point,\n        // generate one for this session. It will only be used if\n        // we do email verification, but far simpler to just make\n        // sure we have one.\n        // We re-use this same secret over multiple calls to register\n        // so that the identity server can honour the sendAttempt\n        // parameter and not re-send email unless we actually want\n        // another mail to be sent.\n        if (!this.params.clientSecret) {\n            this.params.clientSecret = client.generateClientSecret();\n        }\n        return this._tryRegister(client);\n    }\n\n    _tryRegister(client, authDict, poll_for_success) {\n        var self = this;\n\n        var bindEmail;\n\n        if (this.username && this.password) {\n            // only need to bind_email when sending u/p - sending it at other\n            // times clobbers the u/p resulting in M_MISSING_PARAM (password)\n            bindEmail = true;\n        }\n\n        // TODO need to figure out how to send the device display name to /register.\n        return client.register(\n            this.username, this.password, this.params.sessionId, authDict, bindEmail,\n            this.guestAccessToken\n        ).then(function(result) {\n            self.credentials = result;\n            self.setStep(\"COMPLETE\");\n            return result; // contains the credentials\n        }, function(error) {\n            if (error.httpStatus === 401) {\n                if (error.data && error.data.flows) {\n                    // Remember the session ID from the server:\n                    // Either this is our first 401 in which case we need to store the\n                    // session ID for future calls, or it isn't in which case this\n                    // is just a no-op since it ought to be the same (or if it isn't,\n                    // we should use the latest one from the server in any case).\n                    self.params.sessionId = error.data.session;\n                    self.data = error.data || {};\n                    var flow = self.chooseFlow(error.data.flows);\n\n                    if (flow) {\n                        console.log(\"Active flow => %s\", JSON.stringify(flow));\n                        var flowStage = self.firstUncompletedStage(flow);\n                        if (!self.activeStage || flowStage != self.activeStage.type) {\n                            return self._startStage(client, flowStage).catch(function(err) {\n                                self.setStep('START');\n                                throw err;\n                            });\n                        }\n                    }\n                }\n                if (poll_for_success) {\n                    return q.delay(2000).then(function() {\n                        return self._tryRegister(client, authDict, poll_for_success);\n                    });\n                } else {\n                    throw new Error(\"Authorisation failed!\");\n                }\n            } else {\n                if (error.errcode === 'M_USER_IN_USE') {\n                    throw new Error(\"Username in use\");\n                } else if (error.errcode == 'M_INVALID_USERNAME') {\n                    throw new Error(\"User names may only contain alphanumeric characters, underscores or dots!\");\n                } else if (error.httpStatus >= 400 && error.httpStatus < 500) {\n                    let msg = null;\n                    if (error.message) {\n                        msg = error.message;\n                    } else if (error.errcode) {\n                        msg = error.errcode;\n                    }\n                    if (msg) {\n                        throw new Error(`Registration failed! (${error.httpStatus}) - ${msg}`);\n                    } else {\n                        throw new Error(`Registration failed! (${error.httpStatus}) - That's all we know.`);\n                    }\n                } else if (error.httpStatus >= 500 && error.httpStatus < 600) {\n                    throw new Error(\n                        `Server error during registration! (${error.httpStatus})`\n                    );\n                } else if (error.name == \"M_MISSING_PARAM\") {\n                    // The HS hasn't remembered the login params from\n                    // the first try when the login email was sent.\n                    throw new Error(\n                        \"This home server does not support resuming registration.\"\n                    );\n                }\n            }\n        });\n    }\n\n    firstUncompletedStage(flow) {\n        for (var i = 0; i < flow.stages.length; ++i) {\n            if (!this.hasCompletedStage(flow.stages[i])) {\n                return flow.stages[i];\n            }\n        }\n    }\n\n    hasCompletedStage(stageType) {\n        var completed = (this.data || {}).completed || [];\n        return completed.indexOf(stageType) !== -1;\n    }\n\n    _startStage(client, stageName) {\n        var self = this;\n        this.setStep(`STEP_${stageName}`);\n        var StageClass = SignupStages[stageName];\n        if (!StageClass) {\n            // no idea how to handle this!\n            throw new Error(\"Unknown stage: \" + stageName);\n        }\n\n        var stage = new StageClass(client, this);\n        this.activeStage = stage;\n        return stage.complete().then(function(request) {\n            if (request.auth) {\n                console.log(\"Stage %s is returning an auth dict\", stageName);\n                return self._tryRegister(client, request.auth, request.poll_for_success);\n            }\n            else {\n                // never resolve the promise chain. This is for things like email auth\n                // which display a \"check your email\" message and relies on the\n                // link in the email to actually register you.\n                console.log(\"Waiting for external action.\");\n                return q.defer().promise;\n            }\n        });\n    }\n\n    chooseFlow(flows) {\n        // If the user gave us an email then we want to pick an email\n        // flow we can do, else any other flow.\n        var emailFlow = null;\n        var otherFlow = null;\n        flows.forEach(function(flow) {\n            var flowHasEmail = false;\n            for (var stageI = 0; stageI < flow.stages.length; ++stageI) {\n                var stage = flow.stages[stageI];\n\n                if (!SignupStages[stage]) {\n                    // we can't do this flow, don't have a Stage impl.\n                    return;\n                }\n\n                if (stage === EMAIL_STAGE_TYPE) {\n                    flowHasEmail = true;\n                }\n            }\n\n            if (flowHasEmail) {\n                emailFlow = flow;\n            } else {\n                otherFlow = flow;\n            }\n        });\n\n        if (this.email || this.hasCompletedStage(EMAIL_STAGE_TYPE)) {\n            // we've been given an email or we've already done an email part\n            return emailFlow;\n        } else {\n            return otherFlow;\n        }\n    }\n\n    recheckState() {\n        // We've been given a bunch of data from a previous register step,\n        // this only happens for email auth currently. It's kinda ming we need\n        // to know this though. A better solution would be to ask the stages if\n        // they are ready to do something rather than accepting that we know about\n        // email auth and its internals.\n        this.params.hasEmailInfo = (\n            this.params.clientSecret && this.params.sessionId && this.params.idSid\n        );\n\n        if (this.params.hasEmailInfo) {\n            const client = this._createTemporaryClient();\n            this.registrationPromise = this._startStage(client, EMAIL_STAGE_TYPE);\n        }\n        return this.registrationPromise;\n    }\n\n    tellStage(stageName, data) {\n        if (this.activeStage && this.activeStage.type === stageName) {\n            console.log(\"Telling stage %s about something..\", stageName);\n            this.activeStage.onReceiveData(data);\n        }\n    }\n}\n\n\nclass Login extends Signup {\n    constructor(hsUrl, isUrl, fallbackHsUrl, opts) {\n        super(hsUrl, isUrl, opts);\n        this._fallbackHsUrl = fallbackHsUrl;\n        this._currentFlowIndex = 0;\n        this._flows = [];\n    }\n\n    getFlows() {\n        var self = this;\n        var client = this._createTemporaryClient();\n        return client.loginFlows().then(function(result) {\n            self._flows = result.flows;\n            self._currentFlowIndex = 0;\n            // technically the UI should display options for all flows for the\n            // user to then choose one, so return all the flows here.\n            return self._flows;\n        });\n    }\n\n    chooseFlow(flowIndex) {\n        this._currentFlowIndex = flowIndex;\n    }\n\n    getCurrentFlowStep() {\n        // technically the flow can have multiple steps, but no one does this\n        // for login so we can ignore it.\n        var flowStep = this._flows[this._currentFlowIndex];\n        return flowStep ? flowStep.type : null;\n    }\n\n    loginAsGuest() {\n        var client = this._createTemporaryClient();\n        return client.registerGuest({\n            body: {\n                initial_device_display_name: this._defaultDeviceDisplayName,\n            },\n        }).then((creds) => {\n            return {\n                userId: creds.user_id,\n                deviceId: creds.device_id,\n                accessToken: creds.access_token,\n                homeserverUrl: this._hsUrl,\n                identityServerUrl: this._isUrl,\n                guest: true\n            };\n        }, (error) => {\n            if (error.httpStatus === 403) {\n                error.friendlyText = \"Guest access is disabled on this Home Server.\";\n            } else {\n                error.friendlyText = \"Failed to register as guest: \" + error.data;\n            }\n            throw error;\n        });\n    }\n\n    loginViaPassword(username, pass) {\n        var self = this;\n        var isEmail = username.indexOf(\"@\") > 0;\n        var loginParams = {\n            password: pass,\n            initial_device_display_name: this._defaultDeviceDisplayName,\n        };\n        if (isEmail) {\n            loginParams.medium = 'email';\n            loginParams.address = username;\n        } else {\n            loginParams.user = username;\n        }\n\n        var client = this._createTemporaryClient();\n        return client.login('m.login.password', loginParams).then(function(data) {\n            return q({\n                homeserverUrl: self._hsUrl,\n                identityServerUrl: self._isUrl,\n                userId: data.user_id,\n                deviceId: data.device_id,\n                accessToken: data.access_token\n            });\n        }, function(error) {\n            if (error.httpStatus == 400 && loginParams.medium) {\n                error.friendlyText = (\n                    'This Home Server does not support login using email address.'\n                );\n            }\n            else if (error.httpStatus === 403) {\n                error.friendlyText = (\n                    'Incorrect username and/or password.'\n                );\n                if (self._fallbackHsUrl) {\n                    var fbClient = Matrix.createClient({\n                        baseUrl: self._fallbackHsUrl,\n                        idBaseUrl: this._isUrl,\n                    });\n\n                    return fbClient.login('m.login.password', loginParams).then(function(data) {\n                        return q({\n                            homeserverUrl: self._fallbackHsUrl,\n                            identityServerUrl: self._isUrl,\n                            userId: data.user_id,\n                            deviceId: data.device_id,\n                            accessToken: data.access_token\n                        });\n                    }, function(fallback_error) {\n                        // throw the original error\n                        throw error;\n                    });\n                }\n            }\n            else {\n                error.friendlyText = (\n                    'There was a problem logging in. (HTTP ' + error.httpStatus + \")\"\n                );\n            }\n            throw error;\n        });\n    }\n\n    redirectToCas() {\n      var client = this._createTemporaryClient();\n      var parsedUrl = url.parse(window.location.href, true);\n      parsedUrl.query[\"homeserver\"] = client.getHomeserverUrl();\n      parsedUrl.query[\"identityServer\"] = client.getIdentityServerUrl();\n      var casUrl = client.getCasLoginUrl(url.format(parsedUrl));\n      window.location.href = casUrl;\n    }\n}\n\nmodule.exports.Register = Register;\nmodule.exports.Login = Login;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/SignupStages.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[14,17],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":41,"column":38,"nodeType":"Property","source":"                type: DummyStage.TYPE","fix":{"range":[1018,1018],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":42,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[1032,1032],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":93,"column":9,"nodeType":"VariableDeclaration","source":"        var isLocation = document.createElement('a');","fix":{"range":[2494,2497],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":96,"column":9,"nodeType":"VariableDeclaration","source":"        var clientSecret = this.clientSecret || this.signupInstance.params.clientSecret;","fix":{"range":[2619,2622],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":97,"column":9,"nodeType":"VariableDeclaration","source":"        var sid = this.sid || this.signupInstance.params.idSid;","fix":{"range":[2708,2711],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":105,"column":47,"nodeType":"Property","source":"                    id_server: isLocation.host","fix":{"range":[3011,3011],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":106,"column":18,"nodeType":"Property","source":"                }","fix":{"range":[3029,3029],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":107,"column":14,"nodeType":"Property","source":"            }","fix":{"range":[3043,3043],"text":","}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":111,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":129,"column":9,"nodeType":"VariableDeclaration","source":"        var nextLink = this.signupInstance.params.registrationUrl +","fix":{"range":[3722,3725],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":139,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[4269,4272],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":144,"column":21,"nodeType":"Identifier","source":"            nextLink","fix":{"range":[4478,4478],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":153,"column":13,"nodeType":"VariableDeclaration","source":"            var e = {","fix":{"range":[4779,4782],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":154,"column":30,"nodeType":"Property","source":"                isFatal: true","fix":{"range":[4818,4818],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":170,"column":50,"nodeType":"Property","source":"    [EmailIdentityStage.TYPE]: EmailIdentityStage","fix":{"range":[5312,5312],"text":","}}],"errorCount":8,"warningCount":8,"source":"\"use strict\";\nvar q = require(\"q\");\n\n/**\n * An interface class which login types should abide by.\n */\nclass Stage {\n    constructor(type, matrixClient, signupInstance) {\n        this.type = type;\n        this.client = matrixClient;\n        this.signupInstance = signupInstance;\n    }\n\n    complete() {\n        // Return a promise which is:\n        // RESOLVED => With an Object which has an 'auth' key which is the auth dict\n        //             to submit.\n        // REJECTED => With an Error if there was a problem with this stage.\n        //             Has a \"message\" string and an \"isFatal\" flag.\n        return q.reject(\"NOT IMPLEMENTED\");\n    }\n\n    onReceiveData() {\n        // NOP\n    }\n}\nStage.TYPE = \"NOT IMPLEMENTED\";\n\n\n/**\n * This stage requires no auth.\n */\nclass DummyStage extends Stage {\n    constructor(matrixClient, signupInstance) {\n        super(DummyStage.TYPE, matrixClient, signupInstance);\n    }\n\n    complete() {\n        return q({\n            auth: {\n                type: DummyStage.TYPE\n            }\n        });\n    }\n}\nDummyStage.TYPE = \"m.login.dummy\";\n\n\n/**\n * This stage uses Google's Recaptcha to do auth.\n */\nclass RecaptchaStage extends Stage {\n    constructor(matrixClient, signupInstance) {\n        super(RecaptchaStage.TYPE, matrixClient, signupInstance);\n        this.authDict = {\n            auth: {\n                type: 'm.login.recaptcha',\n                // we'll add in the response param if we get one from the local user.\n            },\n            poll_for_success: true,\n        };\n    }\n\n    // called when the recaptcha has been completed.\n    onReceiveData(data) {\n        if (!data || !data.response) {\n            return;\n        }\n        this.authDict.auth.response = data.response;\n    }\n\n    complete() {\n        // we return the authDict with no response, telling Signup to keep polling\n        // the server in case the captcha is filled in on another window (e.g. by\n        // following a nextlink from an email signup).  If the user completes the\n        // captcha locally, then we return at the next poll.\n        return q(this.authDict);\n    }\n}\nRecaptchaStage.TYPE = \"m.login.recaptcha\";\n\n\n/**\n * This state uses the IS to verify email addresses.\n */\nclass EmailIdentityStage extends Stage {\n    constructor(matrixClient, signupInstance) {\n        super(EmailIdentityStage.TYPE, matrixClient, signupInstance);\n    }\n\n    _completeVerify() {\n        // pull out the host of the IS URL by creating an anchor element\n        var isLocation = document.createElement('a');\n        isLocation.href = this.signupInstance.getIdentityServerUrl();\n\n        var clientSecret = this.clientSecret || this.signupInstance.params.clientSecret;\n        var sid = this.sid || this.signupInstance.params.idSid;\n\n        return q({\n            auth: {\n                type: 'm.login.email.identity',\n                threepid_creds: {\n                    sid: sid,\n                    client_secret: clientSecret,\n                    id_server: isLocation.host\n                }\n            }\n        });\n    }\n\n    /**\n     * Complete the email stage.\n     *\n     * This is called twice under different circumstances:\n     *   1) When requesting an email token from the IS\n     *   2) When validating query parameters received from the link in the email\n     */\n    complete() {\n        // TODO: The Registration class shouldn't really know this info.\n        if (this.signupInstance.params.hasEmailInfo) {\n            return this._completeVerify();\n        }\n\n        this.clientSecret = this.signupInstance.params.clientSecret;\n        if (!this.clientSecret) {\n            return q.reject(new Error(\"No client secret specified by Signup class!\"));\n        }\n\n        var nextLink = this.signupInstance.params.registrationUrl +\n                       '?client_secret=' +\n                       encodeURIComponent(this.clientSecret) +\n                       \"&hs_url=\" +\n                       encodeURIComponent(this.signupInstance.getHomeserverUrl()) +\n                       \"&is_url=\" +\n                       encodeURIComponent(this.signupInstance.getIdentityServerUrl()) +\n                       \"&session_id=\" +\n                       encodeURIComponent(this.signupInstance.getServerData().session);\n\n        var self = this;\n        return this.client.requestRegisterEmailToken(\n            this.signupInstance.email,\n            this.clientSecret,\n            1, // TODO: Multiple send attempts?\n            nextLink\n        ).then(function(response) {\n            self.sid = response.sid;\n            return self._completeVerify();\n        }).then(function(request) {\n            request.poll_for_success = true;\n            return request;\n        }, function(error) {\n            console.error(error);\n            var e = {\n                isFatal: true\n            };\n            if (error.errcode == 'M_THREEPID_IN_USE') {\n                e.message = \"This email address is already registered\";\n            } else {\n                e.message = 'Unable to contact the given identity server';\n            }\n            throw e;\n        });\n    }\n}\nEmailIdentityStage.TYPE = \"m.login.email.identity\";\n\nmodule.exports = {\n    [DummyStage.TYPE]: DummyStage,\n    [RecaptchaStage.TYPE]: RecaptchaStage,\n    [EmailIdentityStage.TYPE]: EmailIdentityStage\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Skinner.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":28,"column":76,"nodeType":"BinaryExpression","source":"                \" b) A component has called getComponent at the root level\"","fix":{"range":[1009,1009],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":9,"nodeType":"VariableDeclaration","source":"        var comp = this.components[name];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":37,"column":9,"nodeType":"VariableDeclaration","source":"        var comp = this.components['views.'+name];"},{"ruleId":"no-redeclare","severity":2,"message":"'comp' is already defined.","line":37,"column":13,"nodeType":"Identifier","source":"        var comp = this.components['views.'+name];"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":48,"column":78,"nodeType":"BinaryExpression","source":"                \"If you want to change the active skin, call resetSkin first\"","fix":{"range":[1650,1650],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":52,"column":9,"nodeType":"VariableDeclaration","source":"        var compKeys = Object.keys(skinObject.components);","fix":{"range":[1714,1717],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":53,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < compKeys.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":13,"nodeType":"VariableDeclaration","source":"            var comp = skinObject.components[compKeys[i]];","fix":{"range":[1829,1832],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":60,"column":9,"nodeType":"VariableDeclaration","source":"        var slot = name;","fix":{"range":[1982,1985],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 65 exceeds the maximum line length of 90.","line":65,"column":1,"nodeType":"Program","source":"                slot = name.substr(0, name.lastIndexOf('.') + 1) + comp.replaces.split('.').pop();"}],"errorCount":3,"warningCount":7,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nclass Skinner {\n    constructor() {\n        this.components = null;\n    }\n\n    getComponent(name) {\n        if (this.components === null) {\n            throw new Error(\n                \"Attempted to get a component before a skin has been loaded.\"+\n                \"This is probably because either:\"+\n                \" a) Your app has not called sdk.loadSkin(), or\"+\n                \" b) A component has called getComponent at the root level\"\n            );\n        }\n        var comp = this.components[name];\n        if (comp) {\n            return comp;\n        }\n        // XXX: Temporarily also try 'views.' as we're currently\n        // leaving the 'views.' off views.\n        var comp = this.components['views.'+name];\n        if (comp) {\n            return comp;\n        }\n        throw new Error(\"No such component: \"+name);\n    }\n\n    load(skinObject) {\n        if (this.components !== null) {\n            throw new Error(\n                \"Attempted to load a skin while a skin is already loaded\"+\n                \"If you want to change the active skin, call resetSkin first\"\n            );\n        }\n        this.components = {};\n        var compKeys = Object.keys(skinObject.components);\n        for (var i = 0; i < compKeys.length; ++i) {\n            var comp = skinObject.components[compKeys[i]];\n            this.addComponent(compKeys[i], comp);\n        }\n    }\n\n    addComponent(name, comp) {\n        var slot = name;\n        if (comp.replaces !== undefined) {\n            if (comp.replaces.indexOf('.') > -1) {\n                slot = comp.replaces;\n            } else {\n                slot = name.substr(0, name.lastIndexOf('.') + 1) + comp.replaces.split('.').pop();\n            }\n        }\n        this.components[slot] = comp;\n    }\n\n    reset() {\n        this.components = null;\n    }\n}\n\n// We define one Skinner globally, because the intention is\n// very much that it is a singleton. Relying on there only being one\n// copy of the module can be dicey and not work as browserify's\n// behaviour with multiple copies of files etc. is erratic at best.\n// XXX: We can still end up with the same file twice in the resulting\n// JS bundle which is nonideal.\nif (global.mxSkinner === undefined) {\n    global.mxSkinner = new Skinner();\n}\nmodule.exports = global.mxSkinner;\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/SlashCommands.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"./dispatcher\");","fix":{"range":[620,623],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var Tinter = require(\"./Tinter\");","fix":{"range":[655,658],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":48,"column":1,"nodeType":"VariableDeclaration","source":"var reject = function(msg) {","fix":{"range":[1214,1217],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":50,"column":19,"nodeType":"Property","source":"        error: msg","fix":{"range":[1274,1274],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":1,"nodeType":"VariableDeclaration","source":"var success = function(promise) {","fix":{"range":[1286,1289],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":56,"column":25,"nodeType":"Property","source":"        promise: promise","fix":{"range":[1357,1357],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":60,"column":1,"nodeType":"VariableDeclaration","source":"var commands = {","fix":{"range":[1369,1372],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 66 exceeds the maximum line length of 90.","line":66,"column":1,"nodeType":"Program","source":"            description: \"To use it, just wait for autocomplete results to load and tab through them.\","},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":72,"column":58,"nodeType":"Identifier","source":"    nick: new Command(\"nick\", \"<display_name>\", function(room_id, args) {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":75,"column":59,"nodeType":"CallExpression","source":"                MatrixClientPeg.get().setDisplayName(args)","fix":{"range":[2037,2037],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":78,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":82,"column":63,"nodeType":"Identifier","source":"    tint: new Command(\"tint\", \"<color1> [<color2>]\", function(room_id, args) {"},{"ruleId":"max-len","severity":1,"message":"Line 84 exceeds the maximum line length of 90.","line":84,"column":1,"nodeType":"Program","source":"            var matches = args.match(/^(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}))( +(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})))?$/);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":84,"column":13,"nodeType":"VariableDeclaration","source":"            var matches = args.match(/^(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}))( +(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})))?$/);","fix":{"range":[2275,2278],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":87,"column":17,"nodeType":"VariableDeclaration","source":"                var colorScheme = {};","fix":{"range":[2476,2479],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":94,"column":77,"nodeType":"Identifier","source":"                        room_id, \"org.matrix.room.color_scheme\", colorScheme","fix":{"range":[2838,2838],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":95,"column":22,"nodeType":"CallExpression","source":"                    )","fix":{"range":[2860,2860],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":99,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":103,"column":53,"nodeType":"Identifier","source":"    topic: new Command(\"topic\", \"<topic>\", function(room_id, args) {"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":106,"column":66,"nodeType":"CallExpression","source":"                MatrixClientPeg.get().setRoomTopic(room_id, args)","fix":{"range":[3164,3164],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":109,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":113,"column":56,"nodeType":"Identifier","source":"    invite: new Command(\"invite\", \"<userId>\", function(room_id, args) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":115,"column":13,"nodeType":"VariableDeclaration","source":"            var matches = args.match(/^(\\S+)$/);","fix":{"range":[3364,3367],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":118,"column":70,"nodeType":"CallExpression","source":"                    MatrixClientPeg.get().invite(room_id, matches[1])","fix":{"range":[3529,3529],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":122,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":126,"column":57,"nodeType":"Identifier","source":"    join: new Command(\"join\", \"#alias:domain\", function(room_id, args) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":128,"column":13,"nodeType":"VariableDeclaration","source":"            var matches = args.match(/^(\\S+)$/);","fix":{"range":[3746,3749],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":130,"column":17,"nodeType":"VariableDeclaration","source":"                var room_alias = matches[1];","fix":{"range":[3826,3829],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":130,"column":21,"nodeType":"Identifier","source":"                var room_alias = matches[1];"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":132,"column":35,"nodeType":"ThisExpression","source":"                    return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":135,"column":21,"nodeType":"Identifier","source":"                    room_alias += ':' + MatrixClientPeg.get().getDomain();"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":147,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":150,"column":59,"nodeType":"Identifier","source":"    part: new Command(\"part\", \"[#alias:domain]\", function(room_id, args) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":151,"column":9,"nodeType":"VariableDeclaration","source":"        var targetRoomId;","fix":{"range":[4474,4477],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":153,"column":13,"nodeType":"VariableDeclaration","source":"            var matches = args.match(/^(\\S+)$/);","fix":{"range":[4524,4527],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":155,"column":17,"nodeType":"VariableDeclaration","source":"                var room_alias = matches[1];"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":155,"column":21,"nodeType":"Identifier","source":"                var room_alias = matches[1];"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":157,"column":35,"nodeType":"ThisExpression","source":"                    return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":160,"column":21,"nodeType":"Identifier","source":"                    room_alias += ':' + MatrixClientPeg.get().getDomain();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":164,"column":17,"nodeType":"VariableDeclaration","source":"                var rooms = MatrixClientPeg.get().getRooms();","fix":{"range":[4958,4961],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":165,"column":22,"nodeType":"VariableDeclaration","source":"                for (var i = 0; i < rooms.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":166,"column":21,"nodeType":"VariableDeclaration","source":"                    var aliasEvents = rooms[i].currentState.getStateEvents(","fix":{"range":[5081,5084],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":167,"column":41,"nodeType":"Literal","source":"                        \"m.room.aliases\"","fix":{"range":[5177,5177],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":169,"column":26,"nodeType":"VariableDeclaration","source":"                    for (var j = 0; j < aliasEvents.length; j++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":170,"column":25,"nodeType":"VariableDeclaration","source":"                        var aliases = aliasEvents[j].getContent().aliases || [];","fix":{"range":[5292,5295],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":171,"column":30,"nodeType":"VariableDeclaration","source":"                        for (var k = 0; k < aliases.length; k++) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":172,"column":48,"nodeType":"Identifier","source":"                            if (aliases[k] === room_alias) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_alias' is not in camel case.","line":183,"column":61,"nodeType":"Identifier","source":"                return reject(\"Unrecognised room alias: \" + room_alias);"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":186,"column":43,"nodeType":"Identifier","source":"        if (!targetRoomId) targetRoomId = room_id;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":191,"column":15,"nodeType":"CallExpression","source":"            })","fix":{"range":[6154,6154],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":196,"column":63,"nodeType":"Identifier","source":"    kick: new Command(\"kick\", \"<userId> [<reason>]\", function(room_id, args) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":198,"column":13,"nodeType":"VariableDeclaration","source":"            var matches = args.match(/^(\\S+?)( +(.*))?$/);","fix":{"range":[6343,6346],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":201,"column":80,"nodeType":"CallExpression","source":"                    MatrixClientPeg.get().kick(room_id, matches[1], matches[3])","fix":{"range":[6528,6528],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":205,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":209,"column":61,"nodeType":"Identifier","source":"    ban: new Command(\"ban\", \"<userId> [<reason>]\", function(room_id, args) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":211,"column":13,"nodeType":"VariableDeclaration","source":"            var matches = args.match(/^(\\S+?)( +(.*))?$/);","fix":{"range":[6786,6789],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":214,"column":79,"nodeType":"CallExpression","source":"                    MatrixClientPeg.get().ban(room_id, matches[1], matches[3])","fix":{"range":[6970,6970],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":218,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":222,"column":54,"nodeType":"Identifier","source":"    unban: new Command(\"unban\", \"<userId>\", function(room_id, args) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":224,"column":13,"nodeType":"VariableDeclaration","source":"            var matches = args.match(/^(\\S+)$/);","fix":{"range":[7199,7202],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":228,"column":69,"nodeType":"CallExpression","source":"                    MatrixClientPeg.get().unban(room_id, matches[1])","fix":{"range":[7432,7432],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":232,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":236,"column":64,"nodeType":"Identifier","source":"    op: new Command(\"op\", \"<userId> [<power level>]\", function(room_id, args) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":238,"column":13,"nodeType":"VariableDeclaration","source":"            var matches = args.match(/^(\\S+?)( +(\\d+))?$/);","fix":{"range":[7677,7680],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":239,"column":13,"nodeType":"VariableDeclaration","source":"            var powerLevel = 50; // default power level for op","fix":{"range":[7737,7740],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":241,"column":17,"nodeType":"VariableDeclaration","source":"                var user_id = matches[1];","fix":{"range":[7831,7834],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'user_id' is not in camel case.","line":241,"column":21,"nodeType":"Identifier","source":"                var user_id = matches[1];"},{"ruleId":"use-isnan","severity":2,"message":"Use the isNaN function to compare with NaN.","line":245,"column":21,"nodeType":"BinaryExpression","source":"                if (powerLevel !== NaN) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":246,"column":21,"nodeType":"VariableDeclaration","source":"                    var room = MatrixClientPeg.get().getRoom(room_id);","fix":{"range":[8064,8067],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":248,"column":57,"nodeType":"Identifier","source":"                        return reject(\"Bad room ID: \" + room_id);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":250,"column":21,"nodeType":"VariableDeclaration","source":"                    var powerLevelEvent = room.currentState.getStateEvents(","fix":{"range":[8256,8259],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":251,"column":50,"nodeType":"Literal","source":"                        \"m.room.power_levels\", \"\"","fix":{"range":[8361,8361],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":255,"column":74,"nodeType":"Identifier","source":"                            room_id, user_id, powerLevel, powerLevelEvent","fix":{"range":[8555,8555],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":256,"column":26,"nodeType":"CallExpression","source":"                        )","fix":{"range":[8581,8581],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":261,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":265,"column":52,"nodeType":"Identifier","source":"    deop: new Command(\"deop\", \"<userId>\", function(room_id, args) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":267,"column":13,"nodeType":"VariableDeclaration","source":"            var matches = args.match(/^(\\S+)$/);","fix":{"range":[8835,8838],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":269,"column":17,"nodeType":"VariableDeclaration","source":"                var room = MatrixClientPeg.get().getRoom(room_id);","fix":{"range":[8915,8918],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'room_id' is not in camel case.","line":271,"column":53,"nodeType":"Identifier","source":"                    return reject(\"Bad room ID: \" + room_id);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":274,"column":17,"nodeType":"VariableDeclaration","source":"                var powerLevelEvent = room.currentState.getStateEvents(","fix":{"range":[9092,9095],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":275,"column":46,"nodeType":"Literal","source":"                    \"m.room.power_levels\", \"\"","fix":{"range":[9193,9193],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":279,"column":66,"nodeType":"Identifier","source":"                        room_id, args, undefined, powerLevelEvent","fix":{"range":[9367,9367],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":280,"column":22,"nodeType":"CallExpression","source":"                    )","fix":{"range":[9389,9389],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":284,"column":23,"nodeType":"ThisExpression","source":"        return reject(this.getUsage());"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":285,"column":7,"nodeType":"Property","source":"    })","fix":{"range":[9479,9479],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":289,"column":1,"nodeType":"VariableDeclaration","source":"var aliases = {","fix":{"range":[9503,9506],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":290,"column":14,"nodeType":"Property","source":"    j: \"join\"","fix":{"range":[9532,9532],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":307,"column":13,"nodeType":"VariableDeclaration","source":"            var bits = input.match(/^(\\S+?)( +((.|\\n)*))?$/);","fix":{"range":[10240,10243],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":308,"column":13,"nodeType":"VariableDeclaration","source":"            var cmd, args;"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":308,"column":13,"nodeType":"VariableDeclaration","source":"            var cmd, args;","fix":{"range":[10302,10305],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":312,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[10444,10457],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":322,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[10734,10747],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":332,"column":9,"nodeType":"VariableDeclaration","source":"        var cmds = Object.keys(commands).sort().map(function(cmdKey) {","fix":{"range":[11030,11033],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":339,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[11305,11305],"text":","}}],"errorCount":34,"warningCount":61,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar MatrixClientPeg = require(\"./MatrixClientPeg\");\nvar dis = require(\"./dispatcher\");\nvar Tinter = require(\"./Tinter\");\nimport sdk from './index';\nimport Modal from './Modal';\n\n\nclass Command {\n    constructor(name, paramArgs, runFn) {\n        this.name = name;\n        this.paramArgs = paramArgs;\n        this.runFn = runFn;\n    }\n\n    getCommand() {\n        return \"/\" + this.name;\n    }\n\n    getCommandWithArgs() {\n        return this.getCommand() + \" \" + this.paramArgs;\n    }\n\n    run(roomId, args) {\n        return this.runFn.bind(this)(roomId, args);\n    }\n\n    getUsage() {\n        return \"Usage: \" + this.getCommandWithArgs();\n    }\n}\n\nvar reject = function(msg) {\n    return {\n        error: msg\n    };\n};\n\nvar success = function(promise) {\n    return {\n        promise: promise\n    };\n};\n\nvar commands = {\n    ddg: new Command(\"ddg\", \"<query>\", function(roomId, args) {\n        const ErrorDialog = sdk.getComponent('dialogs.ErrorDialog');\n        // TODO Don't explain this away, actually show a search UI here.\n        Modal.createDialog(ErrorDialog, {\n            title: \"/ddg is not a command\",\n            description: \"To use it, just wait for autocomplete results to load and tab through them.\",\n        });\n        return success();\n    }),\n\n    // Change your nickname\n    nick: new Command(\"nick\", \"<display_name>\", function(room_id, args) {\n        if (args) {\n            return success(\n                MatrixClientPeg.get().setDisplayName(args)\n            );\n        }\n        return reject(this.getUsage());\n    }),\n\n    // Changes the colorscheme of your current room\n    tint: new Command(\"tint\", \"<color1> [<color2>]\", function(room_id, args) {\n        if (args) {\n            var matches = args.match(/^(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}))( +(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})))?$/);\n            if (matches) {\n                Tinter.tint(matches[1], matches[4]);\n                var colorScheme = {};\n                colorScheme.primary_color = matches[1];\n                if (matches[4]) {\n                    colorScheme.secondary_color = matches[4];\n                }\n                return success(\n                    MatrixClientPeg.get().setRoomAccountData(\n                        room_id, \"org.matrix.room.color_scheme\", colorScheme\n                    )\n                );\n            }\n        }\n        return reject(this.getUsage());\n    }),\n\n    // Change the room topic\n    topic: new Command(\"topic\", \"<topic>\", function(room_id, args) {\n        if (args) {\n            return success(\n                MatrixClientPeg.get().setRoomTopic(room_id, args)\n            );\n        }\n        return reject(this.getUsage());\n    }),\n\n    // Invite a user\n    invite: new Command(\"invite\", \"<userId>\", function(room_id, args) {\n        if (args) {\n            var matches = args.match(/^(\\S+)$/);\n            if (matches) {\n                return success(\n                    MatrixClientPeg.get().invite(room_id, matches[1])\n                );\n            }\n        }\n        return reject(this.getUsage());\n    }),\n\n    // Join a room\n    join: new Command(\"join\", \"#alias:domain\", function(room_id, args) {\n        if (args) {\n            var matches = args.match(/^(\\S+)$/);\n            if (matches) {\n                var room_alias = matches[1];\n                if (room_alias[0] !== '#') {\n                    return reject(this.getUsage());\n                }\n                if (!room_alias.match(/:/)) {\n                    room_alias += ':' + MatrixClientPeg.get().getDomain();\n                }\n\n                dis.dispatch({\n                    action: 'view_room',\n                    room_alias: room_alias,\n                    auto_join: true,\n                });\n\n                return success();\n            }\n        }\n        return reject(this.getUsage());\n    }),\n\n    part: new Command(\"part\", \"[#alias:domain]\", function(room_id, args) {\n        var targetRoomId;\n        if (args) {\n            var matches = args.match(/^(\\S+)$/);\n            if (matches) {\n                var room_alias = matches[1];\n                if (room_alias[0] !== '#') {\n                    return reject(this.getUsage());\n                }\n                if (!room_alias.match(/:/)) {\n                    room_alias += ':' + MatrixClientPeg.get().getDomain();\n                }\n\n                // Try to find a room with this alias\n                var rooms = MatrixClientPeg.get().getRooms();\n                for (var i = 0; i < rooms.length; i++) {\n                    var aliasEvents = rooms[i].currentState.getStateEvents(\n                        \"m.room.aliases\"\n                    );\n                    for (var j = 0; j < aliasEvents.length; j++) {\n                        var aliases = aliasEvents[j].getContent().aliases || [];\n                        for (var k = 0; k < aliases.length; k++) {\n                            if (aliases[k] === room_alias) {\n                                targetRoomId = rooms[i].roomId;\n                                break;\n                            }\n                        }\n                        if (targetRoomId) { break; }\n                    }\n                    if (targetRoomId) { break; }\n                }\n            }\n            if (!targetRoomId) {\n                return reject(\"Unrecognised room alias: \" + room_alias);\n            }\n        }\n        if (!targetRoomId) targetRoomId = room_id;\n        return success(\n            MatrixClientPeg.get().leave(targetRoomId).then(\n            function() {\n                dis.dispatch({action: 'view_next_room'});\n            })\n        );\n    }),\n\n    // Kick a user from the room with an optional reason\n    kick: new Command(\"kick\", \"<userId> [<reason>]\", function(room_id, args) {\n        if (args) {\n            var matches = args.match(/^(\\S+?)( +(.*))?$/);\n            if (matches) {\n                return success(\n                    MatrixClientPeg.get().kick(room_id, matches[1], matches[3])\n                );\n            }\n        }\n        return reject(this.getUsage());\n    }),\n\n    // Ban a user from the room with an optional reason\n    ban: new Command(\"ban\", \"<userId> [<reason>]\", function(room_id, args) {\n        if (args) {\n            var matches = args.match(/^(\\S+?)( +(.*))?$/);\n            if (matches) {\n                return success(\n                    MatrixClientPeg.get().ban(room_id, matches[1], matches[3])\n                );\n            }\n        }\n        return reject(this.getUsage());\n    }),\n\n    // Unban a user from the room\n    unban: new Command(\"unban\", \"<userId>\", function(room_id, args) {\n        if (args) {\n            var matches = args.match(/^(\\S+)$/);\n            if (matches) {\n                // Reset the user membership to \"leave\" to unban him\n                return success(\n                    MatrixClientPeg.get().unban(room_id, matches[1])\n                );\n            }\n        }\n        return reject(this.getUsage());\n    }),\n\n    // Define the power level of a user\n    op: new Command(\"op\", \"<userId> [<power level>]\", function(room_id, args) {\n        if (args) {\n            var matches = args.match(/^(\\S+?)( +(\\d+))?$/);\n            var powerLevel = 50; // default power level for op\n            if (matches) {\n                var user_id = matches[1];\n                if (matches.length === 4 && undefined !== matches[3]) {\n                    powerLevel = parseInt(matches[3]);\n                }\n                if (powerLevel !== NaN) {\n                    var room = MatrixClientPeg.get().getRoom(room_id);\n                    if (!room) {\n                        return reject(\"Bad room ID: \" + room_id);\n                    }\n                    var powerLevelEvent = room.currentState.getStateEvents(\n                        \"m.room.power_levels\", \"\"\n                    );\n                    return success(\n                        MatrixClientPeg.get().setPowerLevel(\n                            room_id, user_id, powerLevel, powerLevelEvent\n                        )\n                    );\n                }\n            }\n        }\n        return reject(this.getUsage());\n    }),\n\n    // Reset the power level of a user\n    deop: new Command(\"deop\", \"<userId>\", function(room_id, args) {\n        if (args) {\n            var matches = args.match(/^(\\S+)$/);\n            if (matches) {\n                var room = MatrixClientPeg.get().getRoom(room_id);\n                if (!room) {\n                    return reject(\"Bad room ID: \" + room_id);\n                }\n\n                var powerLevelEvent = room.currentState.getStateEvents(\n                    \"m.room.power_levels\", \"\"\n                );\n                return success(\n                    MatrixClientPeg.get().setPowerLevel(\n                        room_id, args, undefined, powerLevelEvent\n                    )\n                );\n            }\n        }\n        return reject(this.getUsage());\n    })\n};\n\n// helpful aliases\nvar aliases = {\n    j: \"join\"\n};\n\nmodule.exports = {\n    /**\n     * Process the given text for /commands and perform them.\n     * @param {string} roomId The room in which the command was performed.\n     * @param {string} input The raw text input by the user.\n     * @return {Object|null} An object with the property 'error' if there was an error\n     * processing the command, or 'promise' if a request was sent out.\n     * Returns null if the input didn't match a command.\n     */\n    processInput: function(roomId, input) {\n        // trim any trailing whitespace, as it can confuse the parser for\n        // IRC-style commands\n        input = input.replace(/\\s+$/, \"\");\n        if (input[0] === \"/\" && input[1] !== \"/\") {\n            var bits = input.match(/^(\\S+?)( +((.|\\n)*))?$/);\n            var cmd, args;\n            if (bits) {\n                cmd = bits[1].substring(1).toLowerCase();\n                args = bits[3];\n            }\n            else {\n                cmd = input;\n            }\n            if (cmd === \"me\") return null;\n            if (aliases[cmd]) {\n                cmd = aliases[cmd];\n            }\n            if (commands[cmd]) {\n                return commands[cmd].run(roomId, args);\n            }\n            else {\n                return reject(\"Unrecognised command: \" + input);\n            }\n        }\n        return null; // not a command\n    },\n\n    getCommandList: function() {\n        // Return all the commands plus /me and /markdown which aren't handled like normal commands\n        var cmds = Object.keys(commands).sort().map(function(cmdKey) {\n            return commands[cmdKey];\n        });\n        cmds.push(new Command(\"me\", \"<action>\", function() {}));\n        cmds.push(new Command(\"markdown\", \"<on|off>\", function() {}));\n\n        return cmds;\n    }\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/TabComplete.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'entry' but found 'The'.","line":60,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'textArea' but found 'DOMElement'.","line":84,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc parameter type for 'DOMElement'.","line":84,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":109,"column":9,"nodeType":"VariableDeclaration","source":"        var res = MATCH_REGEX.exec(this.originalText);","fix":{"range":[3519,3522],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":115,"column":9,"nodeType":"VariableDeclaration","source":"        var [, boundaryGroup, partialGroup] = res;","fix":{"range":[3731,3734],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'boundaryGroup' is assigned a value but never used.","line":115,"column":16,"nodeType":"Identifier","source":"        var [, boundaryGroup, partialGroup] = res;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":127,"column":36,"nodeType":"NewExpression","source":"            new Entry(partialGroup) // first entry is always the original partial","fix":{"range":[4064,4064],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":146,"column":73,"nodeType":"CallExpression","source":"            entry.getFillText(), true, entry.getSuffix(this.isFirstWord)","fix":{"range":[4795,4795],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":161,"column":9,"nodeType":"VariableDeclaration","source":"        var peekList = [];","fix":{"range":[5145,5148],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":166,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < numAheadToPeek; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":167,"column":13,"nodeType":"VariableDeclaration","source":"            var nextIndex;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":170,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[5579,5592],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":184,"column":9,"nodeType":"VariableDeclaration","source":"        var wasInPassiveMode = this.inPassiveMode && !passive;","fix":{"range":[6003,6006],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":193,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[6258,6267],"text":"        "}},{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'ev' but found 'e'.","line":203,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"max-len","severity":1,"message":"Line 216 exceeds the maximum line length of 90.","line":216,"column":1,"nodeType":"Program","source":"                    !ev.metaKey && !ev.ctrlKey && !ev.altKey && ev.keyCode !== KEY_WINDOWS) {"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":276,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[9727,9736],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":280,"column":9,"nodeType":"VariableDeclaration","source":"        var isTransitioningToOriginalText = (","fix":{"range":[9849,9852],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":290,"column":80,"nodeType":"CallExpression","source":"                this.matchedList[this.currentIndex].getSuffix(this.isFirstWord)","fix":{"range":[10379,10379],"text":","}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":304,"column":9,"nodeType":"Punctuator","source":"        }","fix":{"range":[10853,10862],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":315,"column":9,"nodeType":"VariableDeclaration","source":"        var boundaryChar;","fix":{"range":[11368,11371],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":316,"column":9,"nodeType":"VariableDeclaration","source":"        var res = MATCH_REGEX.exec(this.originalText);","fix":{"range":[11394,11397],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":330,"column":9,"nodeType":"VariableDeclaration","source":"        var replacementText = boundaryChar + newVal + suffix;","fix":{"range":[11813,11816],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":377,"column":70,"nodeType":"CallExpression","source":"            CommandEntry.fromCommands(SlashCommands.getCommandList())","fix":{"range":[13332,13332],"text":","}}],"errorCount":5,"warningCount":19,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Entry, MemberEntry, CommandEntry } from './TabCompleteEntries';\nimport SlashCommands from './SlashCommands';\nimport MatrixClientPeg from './MatrixClientPeg';\n\nconst DELAY_TIME_MS = 1000;\nconst KEY_TAB = 9;\nconst KEY_SHIFT = 16;\nconst KEY_WINDOWS = 91;\n\n// NB: DO NOT USE \\b its \"words\" are roman alphabet only!\n//\n// Capturing group containing the start\n// of line or a whitespace char\n//     \\_______________       __________Capturing group of 0 or more non-whitespace chars\n//                    _|__  _|_         followed by the end of line\n//                   /    \\/   \\\nconst MATCH_REGEX = /(^|\\s)(\\S*)$/;\n\nclass TabComplete {\n\n    constructor(opts) {\n        opts.allowLooping = opts.allowLooping || false;\n        opts.autoEnterTabComplete = opts.autoEnterTabComplete || false;\n        opts.onClickCompletes = opts.onClickCompletes || false;\n        this.opts = opts;\n        this.completing = false;\n        this.list = []; // full set of tab-completable things\n        this.matchedList = []; // subset of completable things to loop over\n        this.currentIndex = 0; // index in matchedList currently\n        this.originalText = null; // original input text when tab was first hit\n        this.textArea = opts.textArea; // DOMElement\n        this.isFirstWord = false; // true if you tab-complete on the first word\n        this.enterTabCompleteTimerId = null;\n        this.inPassiveMode = false;\n\n        // Map tracking ordering of the room members.\n        // userId: integer, highest comes first.\n        this.memberTabOrder = {};\n\n        // monotonically increasing counter used for tracking ordering of members\n        this.memberOrderSeq = 0;\n    }\n\n    /**\n     * Call this when a a UI element representing a tab complete entry has been clicked\n     * @param {entry} The entry that was clicked\n     */\n    onEntryClick(entry) {\n        if (this.opts.onClickCompletes) {\n            this.completeTo(entry);\n        }\n    }\n\n    loadEntries(room) {\n        this._makeEntries(room);\n        this._initSorting(room);\n        this._sortEntries();\n    }\n\n    onMemberSpoke(member) {\n        if (this.memberTabOrder[member.userId] === undefined) {\n            this.list.push(new MemberEntry(member));\n        }\n        this.memberTabOrder[member.userId] = this.memberOrderSeq++;\n        this._sortEntries();\n    }\n\n    /**\n     * @param {DOMElement}\n     */\n    setTextArea(textArea) {\n        this.textArea = textArea;\n    }\n\n    /**\n     * @return {Boolean}\n     */\n    isTabCompleting() {\n        // actually have things to tab over\n        return this.completing && this.matchedList.length > 1;\n    }\n\n    stopTabCompleting() {\n        this.completing = false;\n        this.currentIndex = 0;\n        this._notifyStateChange();\n    }\n\n    startTabCompleting(passive) {\n        this.originalText = this.textArea.value; // cache starting text\n\n        // grab the partial word from the text which we'll be tab-completing\n        var res = MATCH_REGEX.exec(this.originalText);\n        if (!res) {\n            this.matchedList = [];\n            return;\n        }\n        // ES6 destructuring; ignore first element (the complete match)\n        var [, boundaryGroup, partialGroup] = res;\n\n        if (partialGroup.length === 0 && passive) {\n            return;\n        }\n\n        this.isFirstWord = partialGroup.length === this.originalText.length;\n\n        this.completing = true;\n        this.currentIndex = 0;\n\n        this.matchedList = [\n            new Entry(partialGroup) // first entry is always the original partial\n        ];\n\n        // find matching entries in the set of entries given to us\n        this.list.forEach((entry) => {\n            if (entry.text.toLowerCase().indexOf(partialGroup.toLowerCase()) === 0) {\n                this.matchedList.push(entry);\n            }\n        });\n\n        // console.log(\"calculated completions => %s\", JSON.stringify(this.matchedList));\n    }\n\n    /**\n     * Do an auto-complete with the given word. This terminates the tab-complete.\n     * @param {Entry} entry The tab-complete entry to complete to.\n     */\n    completeTo(entry) {\n        this.textArea.value = this._replaceWith(\n            entry.getFillText(), true, entry.getSuffix(this.isFirstWord)\n        );\n        this.stopTabCompleting();\n        // keep focus on the text area\n        this.textArea.focus();\n    }\n\n    /**\n     * @param {Number} numAheadToPeek Return *up to* this many elements.\n     * @return {Entry[]}\n     */\n    peek(numAheadToPeek) {\n        if (this.matchedList.length === 0) {\n            return [];\n        }\n        var peekList = [];\n\n        // return the current match item and then one with an index higher, and\n        // so on until we've reached the requested limit. If we hit the end of\n        // the list of options we're done.\n        for (var i = 0; i < numAheadToPeek; i++) {\n            var nextIndex;\n            if (this.opts.allowLooping) {\n                nextIndex = (this.currentIndex + i) % this.matchedList.length;\n            }\n            else {\n                nextIndex = this.currentIndex + i;\n                if (nextIndex === this.matchedList.length) {\n                    break;\n                }\n            }\n            peekList.push(this.matchedList[nextIndex]);\n        }\n        // console.log(\"Peek list(%s): %s\", numAheadToPeek, JSON.stringify(peekList));\n        return peekList;\n    }\n\n    handleTabPress(passive, shiftKey) {\n        var wasInPassiveMode = this.inPassiveMode && !passive;\n        this.inPassiveMode = passive;\n\n        if (!this.completing) {\n            this.startTabCompleting(passive);\n        }\n\n        if (shiftKey) {\n            this.nextMatchedEntry(-1);\n        }\n        else {\n            // if we were in passive mode we got out of sync by incrementing the\n            // index to show the peek view but not set the text area. Therefore,\n            // we want to set the *current* index rather than the *next* index.\n            this.nextMatchedEntry(wasInPassiveMode ? 0 : 1);\n        }\n        this._notifyStateChange();\n    }\n\n    /**\n     * @param {DOMEvent} e\n     */\n    onKeyDown(ev) {\n        if (!this.textArea) {\n            console.error(\"onKeyDown called before a <textarea> was set!\");\n            return;\n        }\n\n        if (ev.keyCode !== KEY_TAB) {\n            // pressing any key (except shift, windows, cmd (OSX) and ctrl/alt combinations)\n            // aborts the current tab completion\n            if (this.completing && ev.keyCode !== KEY_SHIFT &&\n                    !ev.metaKey && !ev.ctrlKey && !ev.altKey && ev.keyCode !== KEY_WINDOWS) {\n                // they're resuming typing; reset tab complete state vars.\n                this.stopTabCompleting();\n            }\n\n\n            // explicitly pressing any key except tab removes passive mode. Tab doesn't remove\n            // passive mode because handleTabPress needs to know when passive mode is toggling\n            // off so it can resync the textarea/peek list. If tab did remove passive mode then\n            // handleTabPress would never be able to tell when passive mode toggled off.\n            this.inPassiveMode = false;\n\n            // pressing any key at all (except tab) restarts the automatic tab-complete timer\n            if (this.opts.autoEnterTabComplete) {\n                const cachedText = ev.target.value;\n                clearTimeout(this.enterTabCompleteTimerId);\n                this.enterTabCompleteTimerId = setTimeout(() => {\n                    if (this.completing) {\n                        // If you highlight text and CTRL+X it, tab-completing will not be reset.\n                        // This check makes sure that if something like a cut operation has been\n                        // done, that we correctly refresh the tab-complete list. Normal backspace\n                        // operations get caught by the stopTabCompleting() section above, but\n                        // because the CTRL key is held, this does not execute for CTRL+X.\n                        if (cachedText !== this.textArea.value) {\n                            this.stopTabCompleting();\n                        }\n                    }\n\n                    if (!this.completing) {\n                        this.handleTabPress(true, false);\n                    }\n                }, DELAY_TIME_MS);\n            }\n\n            return;\n        }\n\n        // ctrl-tab/alt-tab etc shouldn't trigger a complete\n        if (ev.ctrlKey || ev.metaKey || ev.altKey) return;\n\n        // tab key has been pressed at this point\n        this.handleTabPress(false, ev.shiftKey);\n\n        // prevent the default TAB operation (typically focus shifting)\n        ev.preventDefault();\n    }\n\n    /**\n     * Set the textarea to the next value in the matched list.\n     * @param {Number} offset Offset to apply *before* setting the next value.\n     */\n    nextMatchedEntry(offset) {\n        if (this.matchedList.length === 0) {\n            return;\n        }\n\n        // work out the new index, wrapping if necessary.\n        this.currentIndex += offset;\n        if (this.currentIndex >= this.matchedList.length) {\n            this.currentIndex = 0;\n        }\n        else if (this.currentIndex < 0) {\n            this.currentIndex = this.matchedList.length - 1;\n        }\n        var isTransitioningToOriginalText = (\n            // impossible to transition if they've never hit tab\n            !this.inPassiveMode && this.currentIndex === 0\n        );\n\n        if (!this.inPassiveMode) {\n            // set textarea to this new value\n            this.textArea.value = this._replaceWith(\n                this.matchedList[this.currentIndex].getFillText(),\n                this.currentIndex !== 0, // don't suffix the original text!\n                this.matchedList[this.currentIndex].getSuffix(this.isFirstWord)\n            );\n        }\n\n        // visual display to the user that we looped - TODO: This should be configurable\n        if (isTransitioningToOriginalText) {\n            this.textArea.style[\"background-color\"] = \"#faa\";\n            setTimeout(() => { // yay for lexical 'this'!\n                 this.textArea.style[\"background-color\"] = \"\";\n            }, 150);\n\n            if (!this.opts.allowLooping) {\n                this.stopTabCompleting();\n            }\n        }\n        else {\n            this.textArea.style[\"background-color\"] = \"\"; // cancel blinks TODO: required?\n        }\n    }\n\n    _replaceWith(newVal, includeSuffix, suffix) {\n        // The regex to replace the input matches a character of whitespace AND\n        // the partial word. If we just use string.replace() with the regex it will\n        // replace the partial word AND the character of whitespace. We want to\n        // preserve whatever that character is (\\n, \\t, etc) so find out what it is now.\n        var boundaryChar;\n        var res = MATCH_REGEX.exec(this.originalText);\n        if (res) {\n            boundaryChar = res[1]; // the first captured group\n        }\n        if (boundaryChar === undefined) {\n            console.warn(\"Failed to find boundary char on text: '%s'\", this.originalText);\n            boundaryChar = \"\";\n        }\n\n        suffix = suffix || \"\";\n        if (!includeSuffix) {\n            suffix = \"\";\n        }\n\n        var replacementText = boundaryChar + newVal + suffix;\n        return this.originalText.replace(MATCH_REGEX, function() {\n            return replacementText; // function form to avoid `$` special-casing\n        });\n    }\n\n    _notifyStateChange() {\n        if (this.opts.onStateChange) {\n            this.opts.onStateChange(this.completing);\n        }\n    }\n\n    _sortEntries() {\n        // largest comes first\n        const KIND_ORDER = {\n            command: 1,\n            member: 2,\n        };\n\n        this.list.sort((a, b) => {\n            const kindOrderDifference = KIND_ORDER[b.kind] - KIND_ORDER[a.kind];\n            if (kindOrderDifference != 0) {\n                return kindOrderDifference;\n            }\n\n            if (a.kind == 'member') {\n                let orderA = this.memberTabOrder[a.member.userId];\n                let orderB = this.memberTabOrder[b.member.userId];\n                if (orderA === undefined) orderA = -1;\n                if (orderB === undefined) orderB = -1;\n\n                return orderB - orderA;\n            }\n\n            // anything else we have no ordering for\n            return 0;\n        });\n    }\n\n    _makeEntries(room) {\n        const myUserId = MatrixClientPeg.get().credentials.userId;\n\n        const members = room.getJoinedMembers().filter(function(member) {\n            if (member.userId !== myUserId) return true;\n        });\n\n        this.list = MemberEntry.fromMemberList(members).concat(\n            CommandEntry.fromCommands(SlashCommands.getCommandList())\n        );\n    }\n\n    _initSorting(room) {\n        this.memberTabOrder = {};\n        this.memberOrderSeq = 0;\n\n        for (const ev of room.getLiveTimeline().getEvents()) {\n            this.memberTabOrder[ev.getSender()] = this.memberOrderSeq++;\n        }\n    }\n}\n\nmodule.exports = TabComplete;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/TabCompleteEntries.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require(\"./index\");","fix":{"range":[567,570],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'isFirstWord'.","line":52,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":102,"column":9,"nodeType":"VariableDeclaration","source":"        var MemberAvatar = sdk.getComponent(\"views.avatars.MemberAvatar\");","fix":{"range":[2245,2248],"text":"let"}}],"errorCount":0,"warningCount":3,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar sdk = require(\"./index\");\n\nclass Entry {\n    constructor(text) {\n        this.text = text;\n    }\n\n    /**\n     * @return {string} The text to display in this entry.\n     */\n    getText() {\n        return this.text;\n    }\n\n    /**\n     * @return {string} The text to insert into the input box. Most of the time\n     * this is the same as getText().\n     */\n    getFillText() {\n        return this.text;\n    }\n\n    /**\n     * @return {ReactClass} Raw JSX\n     */\n    getImageJsx() {\n        return null;\n    }\n\n    /**\n     * @return {?string} The unique key= prop for React dedupe\n     */\n    getKey() {\n        return null;\n    }\n\n    /**\n     * @return {?string} The suffix to append to the tab-complete, or null to\n     * not do this.\n     */\n    getSuffix(isFirstWord) {\n        return null;\n    }\n\n    /**\n     * Called when this entry is clicked.\n     */\n    onClick() {\n        // NOP\n    }\n}\n\nclass CommandEntry extends Entry {\n    constructor(cmd, cmdWithArgs) {\n        super(cmdWithArgs);\n        this.kind = 'command';\n        this.cmd = cmd;\n    }\n\n    getFillText() {\n        return this.cmd;\n    }\n\n    getKey() {\n        return this.getFillText();\n    }\n\n    getSuffix(isFirstWord) {\n        return \" \"; // force a space after the command.\n    }\n}\n\nCommandEntry.fromCommands = function(commandArray) {\n    return commandArray.map(function(cmd) {\n        return new CommandEntry(cmd.getCommand(), cmd.getCommandWithArgs());\n    });\n};\n\nclass MemberEntry extends Entry {\n    constructor(member) {\n        super((member.name || member.userId).replace(' (IRC)', ''));\n        this.member = member;\n        this.kind = 'member';\n    }\n\n    getImageJsx() {\n        var MemberAvatar = sdk.getComponent(\"views.avatars.MemberAvatar\");\n        return (\n            <MemberAvatar member={this.member} width={24} height={24} />\n        );\n    }\n\n    getKey() {\n        return this.member.userId;\n    }\n\n    getSuffix(isFirstWord) {\n        return isFirstWord ? \": \" : \" \";\n    }\n}\n\nMemberEntry.fromMemberList = function(members) {\n    return members.map(function(m) {\n        return new MemberEntry(m);\n    });\n};\n\nmodule.exports.Entry = Entry;\nmodule.exports.MemberEntry = MemberEntry;\nmodule.exports.CommandEntry = CommandEntry;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/TextForEvent.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var CallHandler = require(\"./CallHandler\");","fix":{"range":[620,623],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":5,"nodeType":"VariableDeclaration","source":"    var senderName = ev.sender ? ev.sender.name : ev.getSender();","fix":{"range":[768,771],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":5,"nodeType":"VariableDeclaration","source":"    var targetName = ev.target ? ev.target.name : ev.getStateKey();","fix":{"range":[834,837],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":5,"nodeType":"VariableDeclaration","source":"    var ConferenceHandler = CallHandler.getConferenceHandler();","fix":{"range":[902,905],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":5,"nodeType":"VariableDeclaration","source":"    var reason = ev.getContent().reason ? (","fix":{"range":[966,969],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":13,"nodeType":"VariableDeclaration","source":"            var threePidContent = ev.getContent().third_party_invite;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":38,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[1543,1556],"text":"            "}},{"ruleId":"max-len","severity":1,"message":"Line 40 exceeds the maximum line length of 90.","line":40,"column":1,"nodeType":"Program","source":"                if (ConferenceHandler && ConferenceHandler.isConferenceUser(ev.getStateKey())) {"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":42,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[1749,1766],"text":"                "}},{"ruleId":"max-len","severity":1,"message":"Line 51 exceeds the maximum line length of 90.","line":51,"column":1,"nodeType":"Program","source":"                if (ev.getPrevContent().displayname && ev.getContent().displayname && ev.getPrevContent().displayname != ev.getContent().displayname) {"},{"ruleId":"max-len","severity":1,"message":"Line 55 exceeds the maximum line length of 90.","line":55,"column":1,"nodeType":"Program","source":"                } else if (!ev.getPrevContent().displayname && ev.getContent().displayname) {"},{"ruleId":"max-len","severity":1,"message":"Line 56 exceeds the maximum line length of 90.","line":56,"column":1,"nodeType":"Program","source":"                    return ev.getSender() + \" set their display name to \" + ev.getContent().displayname;"},{"ruleId":"max-len","severity":1,"message":"Line 57 exceeds the maximum line length of 90.","line":57,"column":1,"nodeType":"Program","source":"                } else if (ev.getPrevContent().displayname && !ev.getContent().displayname) {"},{"ruleId":"max-len","severity":1,"message":"Line 58 exceeds the maximum line length of 90.","line":58,"column":1,"nodeType":"Program","source":"                    return ev.getSender() + \" removed their display name (\" + ev.getPrevContent().displayname + \")\";"},{"ruleId":"max-len","severity":1,"message":"Line 59 exceeds the maximum line length of 90.","line":59,"column":1,"nodeType":"Program","source":"                } else if (ev.getPrevContent().avatar_url && !ev.getContent().avatar_url) {"},{"ruleId":"max-len","severity":1,"message":"Line 61 exceeds the maximum line length of 90.","line":61,"column":1,"nodeType":"Program","source":"                } else if (ev.getPrevContent().avatar_url && ev.getContent().avatar_url && ev.getPrevContent().avatar_url != ev.getContent().avatar_url) {"},{"ruleId":"max-len","severity":1,"message":"Line 63 exceeds the maximum line length of 90.","line":63,"column":1,"nodeType":"Program","source":"                } else if (!ev.getPrevContent().avatar_url && ev.getContent().avatar_url) {"},{"ruleId":"max-len","severity":1,"message":"Line 70 exceeds the maximum line length of 90.","line":70,"column":1,"nodeType":"Program","source":"                if (!ev.target) console.warn(\"Join message has no target! -- \" + ev.getContent().state_key);"},{"ruleId":"max-len","severity":1,"message":"Line 71 exceeds the maximum line length of 90.","line":71,"column":1,"nodeType":"Program","source":"                if (ConferenceHandler && ConferenceHandler.isConferenceUser(ev.getStateKey())) {"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":73,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[3884,3901],"text":"                "}},{"ruleId":"max-len","severity":1,"message":"Line 80 exceeds the maximum line length of 90.","line":80,"column":1,"nodeType":"Program","source":"                if (ConferenceHandler && ConferenceHandler.isConferenceUser(ev.getStateKey())) {"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":82,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[4247,4264],"text":"                "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":85,"column":17,"nodeType":"Punctuator","source":"                }","fix":{"range":[4406,4423],"text":"                "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":89,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[4520,4533],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":92,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[4668,4681],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":95,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[4824,4837],"text":"            "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":98,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[4997,5010],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":106,"column":5,"nodeType":"VariableDeclaration","source":"    var senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();","fix":{"range":[5132,5135],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":112,"column":5,"nodeType":"VariableDeclaration","source":"    var senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();","fix":{"range":[5351,5354],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":118,"column":5,"nodeType":"VariableDeclaration","source":"    var senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();","fix":{"range":[5572,5575],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":120,"column":5,"nodeType":"VariableDeclaration","source":"    var message = senderDisplayName + ': ' + ev.getContent().body;","fix":{"range":[5664,5667],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":130,"column":5,"nodeType":"VariableDeclaration","source":"    var senderName = event.sender ? event.sender.name : \"Someone\";","fix":{"range":[6023,6026],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 131 exceeds the maximum line length of 90.","line":131,"column":1,"nodeType":"Program","source":"    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":131,"column":5,"nodeType":"VariableDeclaration","source":"    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";","fix":{"range":[6090,6093],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":136,"column":5,"nodeType":"VariableDeclaration","source":"    var senderName = event.sender ? event.sender.name : \"Someone\";","fix":{"range":[6293,6296],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 137 exceeds the maximum line length of 90.","line":137,"column":1,"nodeType":"Program","source":"    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":137,"column":5,"nodeType":"VariableDeclaration","source":"    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";","fix":{"range":[6360,6363],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":142,"column":5,"nodeType":"VariableDeclaration","source":"    var senderName = event.sender ? event.sender.name : \"Someone\";","fix":{"range":[6560,6563],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":144,"column":5,"nodeType":"VariableDeclaration","source":"    var type = \"voice\";","fix":{"range":[6693,6696],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 149 exceeds the maximum line length of 90.","line":149,"column":1,"nodeType":"Program","source":"    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":149,"column":5,"nodeType":"VariableDeclaration","source":"    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";","fix":{"range":[6885,6888],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":154,"column":5,"nodeType":"VariableDeclaration","source":"    var senderName = event.sender ? event.sender.name : event.getSender();","fix":{"range":[7101,7104],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":160,"column":5,"nodeType":"VariableDeclaration","source":"    var senderName = event.sender ? event.sender.name : event.getSender();","fix":{"range":[7340,7343],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":161,"column":5,"nodeType":"VariableDeclaration","source":"    var vis = event.getContent().history_visibility;","fix":{"range":[7415,7418],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":162,"column":5,"nodeType":"VariableDeclaration","source":"    var text = senderName + \" made future room history visible to \";","fix":{"range":[7468,7471],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":165,"column":5,"nodeType":"Punctuator","source":"    }","fix":{"range":[7637,7642],"text":"    "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":168,"column":5,"nodeType":"Punctuator","source":"    }","fix":{"range":[7741,7746],"text":"    "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":171,"column":5,"nodeType":"Punctuator","source":"    }","fix":{"range":[7817,7822],"text":"    "}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":174,"column":5,"nodeType":"Punctuator","source":"    }","fix":{"range":[7891,7896],"text":"    "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":182,"column":5,"nodeType":"VariableDeclaration","source":"    var senderName = event.sender ? event.sender.name : event.getSender();","fix":{"range":[8016,8019],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 183 exceeds the maximum line length of 90.","line":183,"column":1,"nodeType":"Program","source":"    return senderName + \" turned on end-to-end encryption (algorithm \" + event.getContent().algorithm + \")\";"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":186,"column":1,"nodeType":"VariableDeclaration","source":"var handlers = {","fix":{"range":[8199,8202],"text":"let"}},{"ruleId":"key-spacing","severity":1,"message":"Extra space before value for key 'm.room.name'.","line":188,"column":23,"nodeType":"Identifier","source":"    'm.room.name':    textForRoomNameEvent,","fix":{"range":[8278,8281],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space before value for key 'm.room.topic'.","line":189,"column":23,"nodeType":"Identifier","source":"    'm.room.topic':   textForTopicEvent,","fix":{"range":[8323,8325],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space before value for key 'm.room.member'.","line":190,"column":23,"nodeType":"Identifier","source":"    'm.room.member':  textForMemberEvent,","fix":{"range":[8365,8366],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space before value for key 'm.call.invite'.","line":191,"column":23,"nodeType":"Identifier","source":"    'm.call.invite':  textForCallInviteEvent,","fix":{"range":[8407,8408],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space before value for key 'm.call.answer'.","line":192,"column":23,"nodeType":"Identifier","source":"    'm.call.answer':  textForCallAnswerEvent,","fix":{"range":[8453,8454],"text":""}},{"ruleId":"key-spacing","severity":1,"message":"Extra space before value for key 'm.call.hangup'.","line":193,"column":23,"nodeType":"Identifier","source":"    'm.call.hangup':  textForCallHangupEvent,","fix":{"range":[8499,8500],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":201,"column":9,"nodeType":"VariableDeclaration","source":"        var hdlr = handlers[ev.getType()];","fix":{"range":[8762,8765],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":204,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[8857,8857],"text":","}}],"errorCount":1,"warningCount":60,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar MatrixClientPeg = require(\"./MatrixClientPeg\");\nvar CallHandler = require(\"./CallHandler\");\n\nfunction textForMemberEvent(ev) {\n    // XXX: SYJS-16 \"sender is sometimes null for join messages\"\n    var senderName = ev.sender ? ev.sender.name : ev.getSender();\n    var targetName = ev.target ? ev.target.name : ev.getStateKey();\n    var ConferenceHandler = CallHandler.getConferenceHandler();\n    var reason = ev.getContent().reason ? (\n        \" Reason: \" + ev.getContent().reason\n    ) : \"\";\n    switch (ev.getContent().membership) {\n        case 'invite':\n            var threePidContent = ev.getContent().third_party_invite;\n            if (threePidContent) {\n                if (threePidContent.display_name) {\n                    return targetName + \" accepted the invitation for \" +\n                        threePidContent.display_name + \".\";\n                } else {\n                    return targetName + \" accepted an invitation.\";\n                }\n            }\n            else {\n                if (ConferenceHandler && ConferenceHandler.isConferenceUser(ev.getStateKey())) {\n                    return senderName + \" requested a VoIP conference\";\n                }\n                else {\n                    return senderName + \" invited \" + targetName + \".\";\n                }\n            }\n        case 'ban':\n            return senderName + \" banned \" + targetName + \".\" + reason;\n        case 'join':\n            if (ev.getPrevContent() && ev.getPrevContent().membership == 'join') {\n                if (ev.getPrevContent().displayname && ev.getContent().displayname && ev.getPrevContent().displayname != ev.getContent().displayname) {\n                    return ev.getSender() + \" changed their display name from \" +\n                        ev.getPrevContent().displayname + \" to \" +\n                        ev.getContent().displayname;\n                } else if (!ev.getPrevContent().displayname && ev.getContent().displayname) {\n                    return ev.getSender() + \" set their display name to \" + ev.getContent().displayname;\n                } else if (ev.getPrevContent().displayname && !ev.getContent().displayname) {\n                    return ev.getSender() + \" removed their display name (\" + ev.getPrevContent().displayname + \")\";\n                } else if (ev.getPrevContent().avatar_url && !ev.getContent().avatar_url) {\n                    return senderName + \" removed their profile picture\";\n                } else if (ev.getPrevContent().avatar_url && ev.getContent().avatar_url && ev.getPrevContent().avatar_url != ev.getContent().avatar_url) {\n                    return senderName + \" changed their profile picture\";\n                } else if (!ev.getPrevContent().avatar_url && ev.getContent().avatar_url) {\n                    return senderName + \" set a profile picture\";\n                } else {\n                    // hacky hack for https://github.com/vector-im/vector-web/issues/2020\n                    return senderName + \" rejoined the room.\";\n                }\n            } else {\n                if (!ev.target) console.warn(\"Join message has no target! -- \" + ev.getContent().state_key);\n                if (ConferenceHandler && ConferenceHandler.isConferenceUser(ev.getStateKey())) {\n                    return \"VoIP conference started\";\n                }\n                else {\n                    return targetName + \" joined the room.\";\n                }\n            }\n        case 'leave':\n            if (ev.getSender() === ev.getStateKey()) {\n                if (ConferenceHandler && ConferenceHandler.isConferenceUser(ev.getStateKey())) {\n                    return \"VoIP conference finished\";\n                }\n                else if (ev.getPrevContent().membership === \"invite\") {\n                    return targetName + \" rejected the invitation.\";\n                }\n                else {\n                    return targetName + \" left the room.\";\n                }\n            }\n            else if (ev.getPrevContent().membership === \"ban\") {\n                return senderName + \" unbanned \" + targetName + \".\";\n            }\n            else if (ev.getPrevContent().membership === \"join\") {\n                return senderName + \" kicked \" + targetName + \".\" + reason;\n            }\n            else if (ev.getPrevContent().membership === \"invite\") {\n                return senderName + \" withdrew \" + targetName + \"'s invitation.\" + reason;\n            }\n            else {\n                return targetName + \" left the room.\";\n            }\n    }\n}\n\nfunction textForTopicEvent(ev) {\n    var senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();\n\n    return senderDisplayName + ' changed the topic to \"' + ev.getContent().topic + '\"';\n}\n\nfunction textForRoomNameEvent(ev) {\n    var senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();\n\n    return senderDisplayName + ' changed the room name to \"' + ev.getContent().name + '\"';\n}\n\nfunction textForMessageEvent(ev) {\n    var senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();\n\n    var message = senderDisplayName + ': ' + ev.getContent().body;\n    if (ev.getContent().msgtype === \"m.emote\") {\n        message = \"* \" + senderDisplayName + \" \" + message;\n    } else if (ev.getContent().msgtype === \"m.image\") {\n        message = senderDisplayName + \" sent an image.\";\n    }\n    return message;\n}\n\nfunction textForCallAnswerEvent(event) {\n    var senderName = event.sender ? event.sender.name : \"Someone\";\n    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";\n    return senderName + \" answered the call.\" + supported;\n}\n\nfunction textForCallHangupEvent(event) {\n    var senderName = event.sender ? event.sender.name : \"Someone\";\n    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";\n    return senderName + \" ended the call.\" + supported;\n}\n\nfunction textForCallInviteEvent(event) {\n    var senderName = event.sender ? event.sender.name : \"Someone\";\n    // FIXME: Find a better way to determine this from the event?\n    var type = \"voice\";\n    if (event.getContent().offer && event.getContent().offer.sdp &&\n            event.getContent().offer.sdp.indexOf('m=video') !== -1) {\n        type = \"video\";\n    }\n    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";\n    return senderName + \" placed a \" + type + \" call.\" + supported;\n}\n\nfunction textForThreePidInviteEvent(event) {\n    var senderName = event.sender ? event.sender.name : event.getSender();\n    return senderName + \" sent an invitation to \" + event.getContent().display_name +\n     \" to join the room.\";\n}\n\nfunction textForHistoryVisibilityEvent(event) {\n    var senderName = event.sender ? event.sender.name : event.getSender();\n    var vis = event.getContent().history_visibility;\n    var text = senderName + \" made future room history visible to \";\n    if (vis === \"invited\") {\n        text += \"all room members, from the point they are invited.\";\n    }\n    else if (vis === \"joined\") {\n        text += \"all room members, from the point they joined.\";\n    }\n    else if (vis === \"shared\") {\n        text += \"all room members.\";\n    }\n    else if (vis === \"world_readable\") {\n        text += \"anyone.\";\n    }\n    else {\n        text += \" unknown (\" + vis + \")\";\n    }\n    return text;\n}\n\nfunction textForEncryptionEvent(event) {\n    var senderName = event.sender ? event.sender.name : event.getSender();\n    return senderName + \" turned on end-to-end encryption (algorithm \" + event.getContent().algorithm + \")\";\n}\n\nvar handlers = {\n    'm.room.message': textForMessageEvent,\n    'm.room.name':    textForRoomNameEvent,\n    'm.room.topic':   textForTopicEvent,\n    'm.room.member':  textForMemberEvent,\n    'm.call.invite':  textForCallInviteEvent,\n    'm.call.answer':  textForCallAnswerEvent,\n    'm.call.hangup':  textForCallHangupEvent,\n    'm.room.third_party_invite': textForThreePidInviteEvent,\n    'm.room.history_visibility': textForHistoryVisibilityEvent,\n    'm.room.encryption': textForEncryptionEvent,\n};\n\nmodule.exports = {\n    textForEvent: function(ev) {\n        var hdlr = handlers[ev.getType()];\n        if (!hdlr) return \"\";\n        return hdlr(ev);\n    }\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Tinter.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var DEBUG = 0;","fix":{"range":[725,728],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var keyRgb = [","fix":{"range":[797,800],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":38,"column":1,"nodeType":"VariableDeclaration","source":"var keyHex = [","fix":{"range":[1285,1288],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":47,"column":1,"nodeType":"VariableDeclaration","source":"var colors = [","fix":{"range":[1601,1604],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":1,"nodeType":"VariableDeclaration","source":"var cssFixups = [","fix":{"range":[1680,1683],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":63,"column":1,"nodeType":"VariableDeclaration","source":"var cssAttrs = [","fix":{"range":[1963,1966],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":72,"column":1,"nodeType":"VariableDeclaration","source":"var svgAttrs = [","fix":{"range":[2109,2112],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":77,"column":1,"nodeType":"VariableDeclaration","source":"var cached = false;","fix":{"range":[2156,2159],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":81,"column":10,"nodeType":"VariableDeclaration","source":"    for (var i = 0; i < document.styleSheets.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":82,"column":9,"nodeType":"VariableDeclaration","source":"        var ss = document.styleSheets[i];","fix":{"range":[2323,2326],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":107,"column":14,"nodeType":"VariableDeclaration","source":"        for (var j = 0; j < ss.cssRules.length; j++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":108,"column":13,"nodeType":"VariableDeclaration","source":"            var rule = ss.cssRules[j];","fix":{"range":[3634,3637],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":110,"column":18,"nodeType":"VariableDeclaration","source":"            for (var k = 0; k < cssAttrs.length; k++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":111,"column":17,"nodeType":"VariableDeclaration","source":"                var attr = cssAttrs[k];","fix":{"range":[3772,3775],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":112,"column":22,"nodeType":"VariableDeclaration","source":"                for (var l = 0; l < keyRgb.length; l++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":129,"column":10,"nodeType":"VariableDeclaration","source":"    for (var i = 0; i < cssFixups.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":130,"column":9,"nodeType":"VariableDeclaration","source":"        var cssFixup = cssFixups[i];","fix":{"range":[4365,4368],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":143,"column":5,"nodeType":"VariableDeclaration","source":"    var val = parseInt(color, 16);","fix":{"range":[4747,4750],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":144,"column":5,"nodeType":"VariableDeclaration","source":"    var r = (val >> 16) & 255;","fix":{"range":[4782,4785],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":145,"column":5,"nodeType":"VariableDeclaration","source":"    var g = (val >> 8) & 255;","fix":{"range":[4813,4816],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":146,"column":5,"nodeType":"VariableDeclaration","source":"    var b = val & 255;","fix":{"range":[4843,4846],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":151,"column":5,"nodeType":"VariableDeclaration","source":"    var val = (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];","fix":{"range":[4916,4919],"text":"let"}},{"ruleId":"key-spacing","severity":1,"message":"Extra space after key 'registerTintable'.","line":170,"column":5,"nodeType":"Identifier","source":"    registerTintable : function(tintable) {","fix":{"range":[5624,5625],"text":""}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":174,"column":65,"nodeType":"BlockStatement","source":"    tint: function(primaryColor, secondaryColor, tertiaryColor) {","fix":{"range":[5755,5757],"text":"\n"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":188,"column":13,"nodeType":"VariableDeclaration","source":"            var rgb = hexToRgb(primaryColor);","fix":{"range":[6145,6148],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":197,"column":13,"nodeType":"VariableDeclaration","source":"            var rgb1 = hexToRgb(primaryColor);","fix":{"range":[6451,6454],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":198,"column":13,"nodeType":"VariableDeclaration","source":"            var rgb2 = hexToRgb(secondaryColor);","fix":{"range":[6498,6501],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":208,"column":9,"nodeType":"Punctuator","source":"        {","fix":{"range":[6881,6890],"text":"        "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":251,"column":9,"nodeType":"VariableDeclaration","source":"        var fixups = [];","fix":{"range":[8249,8252],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":252,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < svgs.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":253,"column":13,"nodeType":"VariableDeclaration","source":"            var svgDoc;"},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":256,"column":13,"nodeType":"Punctuator","source":"            }","fix":{"range":[8419,8432],"text":"            "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":258,"column":17,"nodeType":"VariableDeclaration","source":"                var msg = 'Failed to get svg.contentDocument of ' + svgs[i].toString();","fix":{"range":[8459,8462],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'msg' is assigned a value but never used.","line":258,"column":21,"nodeType":"Identifier","source":"                var msg = 'Failed to get svg.contentDocument of ' + svgs[i].toString();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":268,"column":13,"nodeType":"VariableDeclaration","source":"            var tags = svgDoc.getElementsByTagName(\"*\");","fix":{"range":[8815,8818],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":269,"column":18,"nodeType":"VariableDeclaration","source":"            for (var j = 0; j < tags.length; j++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":270,"column":17,"nodeType":"VariableDeclaration","source":"                var tag = tags[j];","fix":{"range":[8928,8931],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":271,"column":22,"nodeType":"VariableDeclaration","source":"                for (var k = 0; k < svgAttrs.length; k++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":272,"column":21,"nodeType":"VariableDeclaration","source":"                    var attr = svgAttrs[k];","fix":{"range":[9027,9030],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":273,"column":26,"nodeType":"VariableDeclaration","source":"                    for (var l = 0; l < keyHex.length; l++) {"},{"ruleId":"max-len","severity":1,"message":"Line 274 exceeds the maximum line length of 90.","line":274,"column":1,"nodeType":"Program","source":"                        if (tag.getAttribute(attr) && tag.getAttribute(attr).toUpperCase() === keyHex[l]) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":292,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < fixups.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":293,"column":13,"nodeType":"VariableDeclaration","source":"            var svgFixup = fixups[i];","fix":{"range":[9770,9773],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":297,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[9944,9944],"text":","}}],"errorCount":2,"warningCount":42,"source":"/*\nCopyright 2015 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// FIXME: these vars should be bundled up and attached to\n// module.exports otherwise this will break when included by both\n// react-sdk and apps layered on top.\n\nvar DEBUG = 0;\n\n// The colour keys to be replaced as referred to in CSS\nvar keyRgb = [\n    \"rgb(118, 207, 166)\", // Vector Green\n    \"rgb(234, 245, 240)\", // Vector Light Green\n    \"rgb(211, 239, 225)\", // BottomLeftMenu overlay (20% Vector Green)\n];\n\n// Some algebra workings for calculating the tint % of Vector Green & Light Green\n// x * 118 + (1 - x) * 255 = 234\n// x * 118 + 255 - 255 * x = 234\n// x * 118 - x * 255 = 234 - 255\n// (255 - 118) x = 255 - 234\n// x = (255 - 234) / (255 - 118) = 0.16\n\n// The colour keys to be replaced as referred to in SVGs\nvar keyHex = [\n    \"#76CFA6\", // Vector Green\n    \"#EAF5F0\", // Vector Light Green\n    \"#D3EFE1\", // BottomLeftMenu overlay (20% Vector Green overlaid on Vector Light Green)\n    \"#FFFFFF\", // white highlights of the SVGs (for switching to dark theme)\n];\n\n// cache of our replacement colours\n// defaults to our keys.\nvar colors = [\n    keyHex[0],\n    keyHex[1],\n    keyHex[2],\n    keyHex[3],\n];\n\nvar cssFixups = [\n    // {\n    //     style: a style object that should be fixed up taken from a stylesheet\n    //     attr: name of the attribute to be clobbered, e.g. 'color'\n    //     index: ordinal of primary, secondary or tertiary\n    // }\n];\n\n// CSS attributes to be fixed up\nvar cssAttrs = [\n    \"color\",\n    \"backgroundColor\",\n    \"borderColor\",\n    \"borderTopColor\",\n    \"borderBottomColor\",\n    \"borderLeftColor\",\n];\n\nvar svgAttrs = [\n    \"fill\",\n    \"stroke\",\n];\n\nvar cached = false;\n\nfunction calcCssFixups() {\n    if (DEBUG) console.log(\"calcSvgFixups start\");\n    for (var i = 0; i < document.styleSheets.length; i++) {\n        var ss = document.styleSheets[i];\n        if (!ss) continue; // well done safari >:(\n        // Chromium apparently sometimes returns null here; unsure why.\n        // see $14534907369972FRXBx:matrix.org in HQ\n        // ...ah, it's because there's a third party extension like\n        // privacybadger inserting its own stylesheet in there with a\n        // resource:// URI or something which results in a XSS error.\n        // See also #vector:matrix.org/$145357669685386ebCfr:matrix.org\n        // ...except some browsers apparently return stylesheets without\n        // hrefs, which we have no choice but ignore right now\n\n        // XXX seriously? we are hardcoding the name of vector's CSS file in\n        // here?\n        //\n        // Why do we need to limit it to vector's CSS file anyway - if there\n        // are other CSS files affecting the doc don't we want to apply the\n        // same transformations to them?\n        //\n        // Iterating through the CSS looking for matches to hack on feels\n        // pretty horrible anyway. And what if the application skin doesn't use\n        // Vector Green as its primary color?\n\n        if (ss.href && !ss.href.match(/\\/bundle.*\\.css$/)) continue;\n\n        if (!ss.cssRules) continue;\n        for (var j = 0; j < ss.cssRules.length; j++) {\n            var rule = ss.cssRules[j];\n            if (!rule.style) continue;\n            for (var k = 0; k < cssAttrs.length; k++) {\n                var attr = cssAttrs[k];\n                for (var l = 0; l < keyRgb.length; l++) {\n                    if (rule.style[attr] === keyRgb[l]) {\n                        cssFixups.push({\n                            style: rule.style,\n                            attr: attr,\n                            index: l,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    if (DEBUG) console.log(\"calcSvgFixups end\");\n}\n\nfunction applyCssFixups() {\n    if (DEBUG) console.log(\"applyCssFixups start\");\n    for (var i = 0; i < cssFixups.length; i++) {\n        var cssFixup = cssFixups[i];\n        cssFixup.style[cssFixup.attr] = colors[cssFixup.index];\n    }\n    if (DEBUG) console.log(\"applyCssFixups end\");\n}\n\nfunction hexToRgb(color) {\n    if (color[0] === '#') color = color.slice(1);\n    if (color.length === 3) {\n        color = color[0] + color[0] +\n                color[1] + color[1] +\n                color[2] + color[2];\n    }\n    var val = parseInt(color, 16);\n    var r = (val >> 16) & 255;\n    var g = (val >> 8) & 255;\n    var b = val & 255;\n    return [r, g, b];\n}\n\nfunction rgbToHex(rgb) {\n    var val = (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];\n    return '#' + (0x1000000 + val).toString(16).slice(1);\n}\n\n// List of functions to call when the tint changes.\nconst tintables = [];\n\nmodule.exports = {\n    /**\n     * Register a callback to fire when the tint changes.\n     * This is used to rewrite the tintable SVGs with the new tint.\n     *\n     * It's not possible to unregister a tintable callback. So this can only be\n     * used to register a static callback. If a set of tintables will change\n     * over time then the best bet is to register a single callback for the\n     * entire set.\n     *\n     * @param {Function} tintable Function to call when the tint changes.\n     */\n    registerTintable : function(tintable) {\n        tintables.push(tintable);\n    },\n\n    tint: function(primaryColor, secondaryColor, tertiaryColor) {\n\n        if (!cached) {\n            calcCssFixups();\n            cached = true;\n        }\n\n        if (!primaryColor) {\n            primaryColor = \"#76CFA6\"; // Vector green\n            secondaryColor = \"#EAF5F0\"; // Vector light green\n        }\n\n        if (!secondaryColor) {\n            const x = 0.16; // average weighting factor calculated from vector green & light green\n            var rgb = hexToRgb(primaryColor);\n            rgb[0] = x * rgb[0] + (1 - x) * 255;\n            rgb[1] = x * rgb[1] + (1 - x) * 255;\n            rgb[2] = x * rgb[2] + (1 - x) * 255;\n            secondaryColor = rgbToHex(rgb);\n        }\n\n        if (!tertiaryColor) {\n            const x = 0.19;\n            var rgb1 = hexToRgb(primaryColor);\n            var rgb2 = hexToRgb(secondaryColor);\n            rgb1[0] = x * rgb1[0] + (1 - x) * rgb2[0];\n            rgb1[1] = x * rgb1[1] + (1 - x) * rgb2[1];\n            rgb1[2] = x * rgb1[2] + (1 - x) * rgb2[2];\n            tertiaryColor = rgbToHex(rgb1);\n        }\n\n        if (colors[0] === primaryColor &&\n            colors[1] === secondaryColor &&\n            colors[2] === tertiaryColor)\n        {\n            return;\n        }\n\n        colors[0] = primaryColor;\n        colors[1] = secondaryColor;\n        colors[2] = tertiaryColor;\n\n        if (DEBUG) console.log(\"Tinter.tint\");\n\n        // go through manually fixing up the stylesheets.\n        applyCssFixups();\n\n        // tell all the SVGs to go fix themselves up\n        // we don't do this as a dispatch otherwise it will visually lag\n        tintables.forEach(function(tintable) {\n            tintable();\n        });\n    },\n\n    tintSvgWhite: function(whiteColor) {\n        if (!whiteColor) {\n            whiteColor = colors[3];\n        }\n        if (colors[3] === whiteColor) {\n            return;\n        }\n        colors[3] = whiteColor;\n        tintables.forEach(function(tintable) {\n            tintable();\n        });\n    },\n\n    // XXX: we could just move this all into TintableSvg, but as it's so similar\n    // to the CSS fixup stuff in Tinter (just that the fixups are stored in TintableSvg)\n    // keeping it here for now.\n    calcSvgFixups: function(svgs) {\n        // go through manually fixing up SVG colours.\n        // we could do this by stylesheets, but keeping the stylesheets\n        // updated would be a PITA, so just brute-force search for the\n        // key colour; cache the element and apply.\n\n        if (DEBUG) console.log(\"calcSvgFixups start for \" + svgs);\n        var fixups = [];\n        for (var i = 0; i < svgs.length; i++) {\n            var svgDoc;\n            try {\n                svgDoc = svgs[i].contentDocument;\n            }\n            catch(e) {\n                var msg = 'Failed to get svg.contentDocument of ' + svgs[i].toString();\n                if (e.message) {\n                    msg += e.message;\n                }\n                if (e.stack) {\n                    msg += ' | stack: ' + e.stack;\n                }\n                console.error(e);\n            }\n            if (!svgDoc) continue;\n            var tags = svgDoc.getElementsByTagName(\"*\");\n            for (var j = 0; j < tags.length; j++) {\n                var tag = tags[j];\n                for (var k = 0; k < svgAttrs.length; k++) {\n                    var attr = svgAttrs[k];\n                    for (var l = 0; l < keyHex.length; l++) {\n                        if (tag.getAttribute(attr) && tag.getAttribute(attr).toUpperCase() === keyHex[l]) {\n                            fixups.push({\n                                node: tag,\n                                attr: attr,\n                                index: l,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if (DEBUG) console.log(\"calcSvgFixups end\");\n\n        return fixups;\n    },\n\n    applySvgFixups: function(fixups) {\n        if (DEBUG) console.log(\"applySvgFixups start for \" + fixups);\n        for (var i = 0; i < fixups.length; i++) {\n            var svgFixup = fixups[i];\n            svgFixup.node.setAttribute(svgFixup.attr, colors[svgFixup.index]);\n        }\n        if (DEBUG) console.log(\"applySvgFixups end\");\n    }\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/UiEffects.js","messages":[{"ruleId":"camelcase","severity":1,"message":"Identifier 'field_input_incorrect' is not in camel case.","line":25,"column":17,"nodeType":"Identifier","source":"export function field_input_incorrect(element) {"},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":26,"column":5,"nodeType":"CallExpression","source":"    Velocity(element, \"callout.shake\", 300);"}],"errorCount":0,"warningCount":2,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Functions for applying common thematic effects to  UI elements.\n * Ideally this would be themeable.\n */\n\nimport Velocity from 'velocity-vector';\nimport 'velocity-vector/velocity.ui';\n\nexport function field_input_incorrect(element) {\n    Velocity(element, \"callout.shake\", 300);\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Unread.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require('./MatrixClientPeg');","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('./index');","fix":{"range":[620,623],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":21,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'ev'.","line":21,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"max-len","severity":1,"message":"Line 30 exceeds the maximum line length of 90.","line":30,"column":1,"nodeType":"Program","source":"        } else if (ev.getType == 'm.room.message' && ev.getContent().msgtype == 'm.notify') {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":9,"nodeType":"VariableDeclaration","source":"        var EventTile = sdk.getComponent('rooms.EventTile');","fix":{"range":[1175,1178],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":38,"column":9,"nodeType":"VariableDeclaration","source":"        var readUpToId = room.getEventReadUpTo(MatrixClientPeg.get().credentials.userId);","fix":{"range":[1340,1343],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":46,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = room.timeline.length - 1; i >= 0; --i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":47,"column":13,"nodeType":"VariableDeclaration","source":"            var ev = room.timeline[i];","fix":{"range":[1960,1963],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":65,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[2800,2800],"text":","}}],"errorCount":1,"warningCount":9,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar MatrixClientPeg = require('./MatrixClientPeg');\nvar sdk = require('./index');\n\nmodule.exports = {\n    /**\n     * Returns true iff this event arriving in a room should affect the room's\n     * count of unread messages\n     */\n    eventTriggersUnreadCount: function(ev) {\n        if (ev.sender && ev.sender.userId == MatrixClientPeg.get().credentials.userId) {\n            return false;\n        } else if (ev.getType() == \"m.room.member\") {\n            return false;\n        } else if (ev.getType == 'm.room.message' && ev.getContent().msgtype == 'm.notify') {\n            return false;\n        }\n        var EventTile = sdk.getComponent('rooms.EventTile');\n        return EventTile.haveTileForEvent(ev);\n    },\n\n    doesRoomHaveUnreadMessages: function(room) {\n        var readUpToId = room.getEventReadUpTo(MatrixClientPeg.get().credentials.userId);\n        // this just looks at whatever history we have, which if we've only just started\n        // up probably won't be very much, so if the last couple of events are ones that\n        // don't count, we don't know if there are any events that do count between where\n        // we have and the read receipt. We could fetch more history to try & find out,\n        // but currently we just guess.\n\n        // Loop through messages, starting with the most recent...\n        for (var i = room.timeline.length - 1; i >= 0; --i) {\n            var ev = room.timeline[i];\n\n            if (ev.getId() == readUpToId) {\n                // If we've read up to this event, there's nothing more recents\n                // that counts and we can stop looking because the user's read\n                // this and everything before.\n                return false;\n            } else if (this.eventTriggersUnreadCount(ev)) {\n                // We've found a message that counts before we hit\n                // the read marker, so this room is definitely unread.\n                return true;\n            }\n        }\n        // If we got here, we didn't find a message that counted but didn't\n        // find the read marker either, so we guess and say that the room\n        // is unread on the theory that false positives are better than\n        // false negatives here.\n        return true;\n    }\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/UserActivity.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var dis = require(\"./dispatcher\");","fix":{"range":[568,571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var MIN_DISPATCH_INTERVAL_MS = 500;","fix":{"range":[604,607],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var CURRENTLY_ACTIVE_THRESHOLD_MS = 2000;","fix":{"range":[640,643],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":58,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"max-len","severity":1,"message":"Line 63 exceeds the maximum line length of 90.","line":63,"column":1,"nodeType":"Program","source":"        return this.lastActivityAtTs > new Date().getTime() - CURRENTLY_ACTIVE_THRESHOLD_MS;"},{"ruleId":"brace-style","severity":1,"message":"Opening curly brace does not appear on the same line as controlling statement.","line":70,"column":13,"nodeType":"Punctuator","source":"            {","fix":{"range":[2551,2564],"text":"            "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":82,"column":40,"nodeType":"Property","source":"                action: 'user_activity'","fix":{"range":[3021,3021],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":86,"column":82,"nodeType":"Identifier","source":"                    this._onActivityEndTimer.bind(this), MIN_DISPATCH_INTERVAL_MS","fix":{"range":[3213,3213],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":93,"column":9,"nodeType":"VariableDeclaration","source":"        var now = new Date().getTime();","fix":{"range":[3300,3303],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":94,"column":9,"nodeType":"VariableDeclaration","source":"        var targetTime = this.lastActivityAtTs + MIN_DISPATCH_INTERVAL_MS;","fix":{"range":[3340,3343],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":97,"column":44,"nodeType":"Property","source":"                action: 'user_activity_end'","fix":{"range":[3510,3510],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":102,"column":70,"nodeType":"BinaryExpression","source":"                this._onActivityEndTimer.bind(this), targetTime - now","fix":{"range":[3708,3708],"text":","}}],"errorCount":4,"warningCount":8,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar dis = require(\"./dispatcher\");\n\nvar MIN_DISPATCH_INTERVAL_MS = 500;\nvar CURRENTLY_ACTIVE_THRESHOLD_MS = 2000;\n\n/**\n * This class watches for user activity (moving the mouse or pressing a key)\n * and dispatches the user_activity action at times when the user is interacting\n * with the app (but at a much lower frequency than mouse move events)\n */\nclass UserActivity {\n\n    /**\n     * Start listening to user activity\n     */\n    start() {\n        document.onmousedown = this._onUserActivity.bind(this);\n        document.onmousemove = this._onUserActivity.bind(this);\n        document.onkeypress = this._onUserActivity.bind(this);\n        // can't use document.scroll here because that's only the document\n        // itself being scrolled. Need to use addEventListener's useCapture.\n        // also this needs to be the wheel event, not scroll, as scroll is\n        // fired when the view scrolls down for a new message.\n        window.addEventListener('wheel', this._onUserActivity.bind(this),\n                                { passive: true, capture: true });\n        this.lastActivityAtTs = new Date().getTime();\n        this.lastDispatchAtTs = 0;\n        this.activityEndTimer = undefined;\n    }\n\n    /**\n     * Stop tracking user activity\n     */\n    stop() {\n        document.onmousedown = undefined;\n        document.onmousemove = undefined;\n        document.onkeypress = undefined;\n        window.removeEventListener('wheel', this._onUserActivity.bind(this),\n                                   { passive: true, capture: true });\n    }\n\n    /**\n     * Return true if there has been user activity very recently\n     * (ie. within a few seconds)\n     */\n    userCurrentlyActive() {\n        return this.lastActivityAtTs > new Date().getTime() - CURRENTLY_ACTIVE_THRESHOLD_MS;\n    }\n\n    _onUserActivity(event) {\n        if (event.screenX && event.type == \"mousemove\") {\n            if (event.screenX === this.lastScreenX &&\n                event.screenY === this.lastScreenY)\n            {\n                // mouse hasn't actually moved\n                return;\n            }\n            this.lastScreenX = event.screenX;\n            this.lastScreenY = event.screenY;\n        }\n\n        this.lastActivityAtTs = new Date().getTime();\n        if (this.lastDispatchAtTs < this.lastActivityAtTs - MIN_DISPATCH_INTERVAL_MS) {\n            this.lastDispatchAtTs = this.lastActivityAtTs;\n            dis.dispatch({\n                action: 'user_activity'\n            });\n            if (!this.activityEndTimer) {\n                this.activityEndTimer = setTimeout(\n                    this._onActivityEndTimer.bind(this), MIN_DISPATCH_INTERVAL_MS\n                );\n            }\n        }\n    }\n\n    _onActivityEndTimer() {\n        var now = new Date().getTime();\n        var targetTime = this.lastActivityAtTs + MIN_DISPATCH_INTERVAL_MS;\n        if (now >= targetTime) {\n            dis.dispatch({\n                action: 'user_activity_end'\n            });\n            this.activityEndTimer = undefined;\n        } else {\n            this.activityEndTimer = setTimeout(\n                this._onActivityEndTimer.bind(this), targetTime - now\n            );\n        }\n    }\n}\n\nmodule.exports = new UserActivity();\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/UserSettingsStore.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var q = require(\"q\");","fix":{"range":[582,585],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");","fix":{"range":[604,607],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var Notifier = require(\"./Notifier\");","fix":{"range":[656,659],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[996,999],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":47,"column":30,"nodeType":"Property","source":"                threepids: []","fix":{"range":[1352,1352],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'old_password' is not in camel case.","line":76,"column":30,"nodeType":"Identifier","source":"    changePassword: function(old_password, new_password) {"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'new_password' is not in camel case.","line":76,"column":44,"nodeType":"Identifier","source":"    changePassword: function(old_password, new_password) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":77,"column":9,"nodeType":"VariableDeclaration","source":"        var cli = MatrixClientPeg.get();","fix":{"range":[2069,2072],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":79,"column":9,"nodeType":"VariableDeclaration","source":"        var authDict = {","fix":{"range":[2111,2114],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":82,"column":35,"nodeType":"Property","source":"            password: old_password","fix":{"range":[2242,2242],"text":","}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'address'.","line":88,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":88,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'pushers'.","line":88,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":98,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < pushers.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":124,"column":9,"nodeType":"VariableDeclaration","source":"        var event = MatrixClientPeg.get().getAccountData(\"org.matrix.preview_urls\");","fix":{"range":[3598,3601],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":131,"column":30,"nodeType":"Property","source":"            disable: disabled","fix":{"range":[3928,3928],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":136,"column":9,"nodeType":"VariableDeclaration","source":"        var event = MatrixClientPeg.get().getAccountData(\"im.vector.web.settings\");","fix":{"range":[3993,3996],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":141,"column":9,"nodeType":"VariableDeclaration","source":"        var settings = this.getSyncedSettings();","fix":{"range":[4193,4196],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":146,"column":9,"nodeType":"VariableDeclaration","source":"        var settings = this.getSyncedSettings();","fix":{"range":[4366,4369],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":157,"column":18,"nodeType":"VariableDeclaration","source":"            for (var i = 0; i < this.LABS_FEATURES.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":158,"column":17,"nodeType":"VariableDeclaration","source":"                var f = this.LABS_FEATURES[i];","fix":{"range":[4880,4883],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":169,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[5260,5260],"text":","}}],"errorCount":4,"warningCount":18,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nvar q = require(\"q\");\nvar MatrixClientPeg = require(\"./MatrixClientPeg\");\nvar Notifier = require(\"./Notifier\");\n\n/*\n * TODO: Make things use this. This is all WIP - see UserSettings.js for usage.\n */\n\nmodule.exports = {\n    LABS_FEATURES: [\n        {\n            name: 'Rich Text Editor',\n            id: 'rich_text_editor',\n            default: false,\n        },\n    ],\n\n    loadProfileInfo: function() {\n        var cli = MatrixClientPeg.get();\n        return cli.getProfileInfo(cli.credentials.userId);\n    },\n\n    saveDisplayName: function(newDisplayname) {\n        return MatrixClientPeg.get().setDisplayName(newDisplayname);\n    },\n\n    loadThreePids: function() {\n        if (MatrixClientPeg.get().isGuest()) {\n            return q({\n                threepids: []\n            }); // guests can't poke 3pid endpoint\n        }\n        return MatrixClientPeg.get().getThreePids();\n    },\n\n    saveThreePids: function(threePids) {\n        // TODO\n    },\n\n    getEnableNotifications: function() {\n        return Notifier.isEnabled();\n    },\n\n    setEnableNotifications: function(enable) {\n        if (!Notifier.supportsDesktopNotifications()) {\n            return;\n        }\n        Notifier.setEnabled(enable);\n    },\n\n    getEnableAudioNotifications: function() {\n        return Notifier.isAudioEnabled();\n    },\n\n    setEnableAudioNotifications: function(enable) {\n        Notifier.setAudioEnabled(enable);\n    },\n\n    changePassword: function(old_password, new_password) {\n        var cli = MatrixClientPeg.get();\n\n        var authDict = {\n            type: 'm.login.password',\n            user: cli.credentials.userId,\n            password: old_password\n        };\n\n        return cli.setPassword(authDict, new_password);\n    },\n\n    /**\n     * Returns the email pusher (pusher of type 'email') for a given\n     * email address. Email pushers all have the same app ID, so since\n     * pushers are unique over (app ID, pushkey), there will be at most\n     * one such pusher.\n     */\n    getEmailPusher: function(pushers, address) {\n        if (pushers === undefined) {\n            return undefined;\n        }\n        for (var i = 0; i < pushers.length; ++i) {\n            if (pushers[i].kind == 'email' && pushers[i].pushkey == address) {\n                return pushers[i];\n            }\n        }\n        return undefined;\n    },\n\n    hasEmailPusher: function(pushers, address) {\n        return this.getEmailPusher(pushers, address) !== undefined;\n    },\n\n    addEmailPusher: function(address, data) {\n        return MatrixClientPeg.get().setPusher({\n            kind: 'email',\n            app_id: \"m.email\",\n            pushkey: address,\n            app_display_name: 'Email Notifications',\n            device_display_name: address,\n            lang: navigator.language,\n            data: data,\n            append: true,  // We always append for email pushers since we don't want to stop other accounts notifying to the same email address\n        });\n    },\n\n    getUrlPreviewsDisabled: function() {\n        var event = MatrixClientPeg.get().getAccountData(\"org.matrix.preview_urls\");\n        return (event && event.getContent().disable);\n    },\n\n    setUrlPreviewsDisabled: function(disabled) {\n        // FIXME: handle errors\n        return MatrixClientPeg.get().setAccountData(\"org.matrix.preview_urls\", {\n            disable: disabled\n        });\n    },\n\n    getSyncedSettings: function() {\n        var event = MatrixClientPeg.get().getAccountData(\"im.vector.web.settings\");\n        return event ? event.getContent() : {};\n    },\n\n    getSyncedSetting: function(type, defaultValue = null) {\n        var settings = this.getSyncedSettings();\n        return settings.hasOwnProperty(type) ? settings[type] : null;\n    },\n\n    setSyncedSetting: function(type, value) {\n        var settings = this.getSyncedSettings();\n        settings[type] = value;\n        // FIXME: handle errors\n        return MatrixClientPeg.get().setAccountData(\"im.vector.web.settings\", settings);\n    },\n\n    isFeatureEnabled: function(feature: string): boolean {\n        // Disable labs for guests.\n        if (MatrixClientPeg.get().isGuest()) return false;\n\n        if (localStorage.getItem(`mx_labs_feature_${feature}`) === null) {\n            for (var i = 0; i < this.LABS_FEATURES.length; i++) {\n                var f = this.LABS_FEATURES[i];\n                if (f.id === feature) {\n                    return f.default;\n                }\n            }\n        }\n        return localStorage.getItem(`mx_labs_feature_${feature}`) === 'true';\n    },\n\n    setFeatureEnabled: function(feature: string, enabled: boolean) {\n        localStorage.setItem(`mx_labs_feature_${feature}`, enabled);\n    }\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/utils/DecryptFile.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'file'.","line":26,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":5,"nodeType":"VariableDeclaration","source":"    var deferred = q.defer();","fix":{"range":[1069,1072],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":32,"column":5,"nodeType":"VariableDeclaration","source":"    var reader = new FileReader();","fix":{"range":[1099,1102],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc parameter type for 'file'.","line":44,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc parameter type for 'file.url'.","line":44,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc parameter type for 'file.mimetype'.","line":44,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":44,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":64,"column":9,"nodeType":"VariableDeclaration","source":"        var blob = new Blob([dataArray], {type: file.mimetype});","fix":{"range":[2354,2357],"text":"let"}}],"errorCount":0,"warningCount":8,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// Pull in the encryption lib so that we can decrypt attachments.\nimport encrypt from 'browser-encrypt-attachment';\n// Pull in a fetch polyfill so we can download encrypted attachments.\nimport 'isomorphic-fetch';\n// Grab the client so that we can turn mxc:// URLs into https:// URLS.\nimport MatrixClientPeg from '../MatrixClientPeg';\nimport q from 'q';\n\n\n/**\n * Read blob as a data:// URI.\n * @return {Promise} A promise that resolves with the data:// URI.\n */\nexport function readBlobAsDataUri(file) {\n    var deferred = q.defer();\n    var reader = new FileReader();\n    reader.onload = function(e) {\n        deferred.resolve(e.target.result);\n    };\n    reader.onerror = function(e) {\n        deferred.reject(e);\n    };\n    reader.readAsDataURL(file);\n    return deferred.promise;\n}\n\n\n/**\n * Decrypt a file attached to a matrix event.\n * @param file {Object} The json taken from the matrix event.\n *   This passed to [link]{@link https://github.com/matrix-org/browser-encrypt-attachments}\n *   as the encryption info object, so will also have the those keys in addition to\n *   the keys below.\n * @param file.url {string} An mxc:// URL for the encrypted file.\n * @param file.mimetype {string} The MIME-type of the plaintext file.\n */\nexport function decryptFile(file) {\n    const url = MatrixClientPeg.get().mxcUrlToHttp(file.url);\n    // Download the encrypted file as an array buffer.\n    return q(fetch(url)).then(function(response) {\n        return response.arrayBuffer();\n    }).then(function(responseData) {\n        // Decrypt the array buffer using the information taken from\n        // the event content.\n        return encrypt.decryptAttachment(responseData, file);\n    }).then(function(dataArray) {\n        // Turn the array into a Blob and give it the correct MIME-type.\n        var blob = new Blob([dataArray], {type: file.mimetype});\n        return blob;\n    });\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/utils/DMRoomMap.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":44,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":53,"column":5,"nodeType":"Block","source":"    /**"}],"errorCount":0,"warningCount":2,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport MatrixClientPeg from '../MatrixClientPeg';\n\n/**\n * Class that takes a Matrix Client and flips the m.direct map\n * so the operation of mapping a room ID to which user it's a DM\n * with can be performed efficiently.\n *\n * With 'start', this can also keep itself up to date over time.\n */\nexport default class DMRoomMap {\n    constructor(matrixClient) {\n        this.matrixClient = matrixClient;\n        this.roomToUser = null;\n\n        // XXX: Force-bind the event handler method because it\n        // doesn't call it with our object as the 'this'\n        // (use a static property arrow function for this when we can)\n        this._onAccountData = this._onAccountData.bind(this);\n\n        const mDirectEvent = matrixClient.getAccountData('m.direct');\n        if (!mDirectEvent) {\n            this.userToRooms = {};\n        } else {\n            this.userToRooms = mDirectEvent.getContent();\n        }\n    }\n\n    /**\n     * Makes and returns a new shared instance that can then be accessed\n     * with shared(). This returned instance is not automatically started.\n     */\n    static makeShared() {\n        DMRoomMap._sharedInstance = new DMRoomMap(MatrixClientPeg.get());\n        return DMRoomMap._sharedInstance;\n    }\n\n    /**\n     * Returns a shared instance of the class\n     * that uses the singleton matrix client\n     * The shared instance must be started before use.\n     */\n    static shared() {\n        return DMRoomMap._sharedInstance;\n    }\n\n    start() {\n        this._populateRoomToUser();\n        this.matrixClient.on(\"accountData\", this._onAccountData);\n    }\n\n    stop() {\n        this.matrixClient.removeListener(\"accountData\", this._onAccountData);\n    }\n\n    _onAccountData(ev) {\n        if (ev.getType() == 'm.direct') {\n            this.userToRooms = this.matrixClient.getAccountData('m.direct').getContent();\n            this._populateRoomToUser();\n        }\n    }\n\n    getDMRoomsForUserId(userId) {\n        // Here, we return the empty list if there are no rooms,\n        // since the number of conversations you have with this user is zero.\n        return this.userToRooms[userId] || [];\n    }\n\n    getUserIdForRoomId(roomId) {\n        if (this.roomToUser == null) {\n            // we lazily populate roomToUser so you can use\n            // this class just to call getDMRoomsForUserId\n            // which doesn't do very much, but is a fairly\n            // convenient wrapper and there's no point\n            // iterating through the map if getUserIdForRoomId()\n            // is never called.\n            this._populateRoomToUser();\n        }\n        // Here, we return undefined if the room is not in the map:\n        // the room ID you gave is not a DM room for any user.\n        if (this.roomToUser[roomId] === undefined) {\n            // no entry? if the room is an invite, look for the is_direct hint.\n            const room = this.matrixClient.getRoom(roomId);\n            if (room) {\n                const me = room.getMember(this.matrixClient.credentials.userId);\n                if (me.membership == 'invite') {\n                    // The 'direct' hihnt is there, so declare that this is a DM room for\n                    // whoever invited us.\n                    if (me.events.member.getContent().is_direct) {\n                        return me.events.member.getSender();\n                    }\n                }\n            }\n        }\n        return this.roomToUser[roomId];\n    }\n\n    _populateRoomToUser() {\n        this.roomToUser = {};\n        for (const user of Object.keys(this.userToRooms)) {\n            for (const roomId of this.userToRooms[user]) {\n                this.roomToUser[roomId] = user;\n            }\n        }\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/utils/FormattingUtils.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":17,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'count'.","line":17,"column":1,"nodeType":"Block","source":"/**"}],"errorCount":0,"warningCount":2,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * formats numbers to fit into ~3 characters, suitable for badge counts\n * e.g: 999, 9.9K, 99K, 0.9M, 9.9M, 99M, 0.9B, 9.9B\n */\nexport function formatCount(count) {\n   if (count < 1000) return count;\n   if (count < 10000) return (count / 1000).toFixed(1) + \"K\";\n   if (count < 100000) return (count / 1000).toFixed(0) + \"K\";\n   if (count < 10000000) return (count / 1000000).toFixed(1) + \"M\";\n   if (count < 100000000) return (count / 1000000).toFixed(0) + \"M\";\n   return (count / 1000000000).toFixed(1) + \"B\"; // 10B is enough for anyone, right? :S\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/utils/MegolmExportEncryption.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'data' but found 'file'.","line":32,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'aes_key' is not in camel case.","line":64,"column":16,"nodeType":"Identifier","source":"        const [aes_key, hmac_key] = keys;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'hmac_key' is not in camel case.","line":64,"column":25,"nodeType":"Identifier","source":"        const [aes_key, hmac_key] = keys;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'kdf_rounds' is not in camel case.","line":105,"column":11,"nodeType":"Identifier","source":"    const kdf_rounds = options.kdf_rounds || 100000;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'aes_key' is not in camel case.","line":119,"column":16,"nodeType":"Identifier","source":"        const [aes_key, hmac_key] = keys;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'hmac_key' is not in camel case.","line":119,"column":25,"nodeType":"Identifier","source":"        const [aes_key, hmac_key] = keys;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'kdf_rounds' is not in camel case.","line":137,"column":35,"nodeType":"Identifier","source":"            resultBuffer[idx++] = kdf_rounds >> 24;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'kdf_rounds' is not in camel case.","line":138,"column":36,"nodeType":"Identifier","source":"            resultBuffer[idx++] = (kdf_rounds >> 16) & 0xff;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'kdf_rounds' is not in camel case.","line":139,"column":36,"nodeType":"Identifier","source":"            resultBuffer[idx++] = (kdf_rounds >> 8) & 0xff;"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'kdf_rounds' is not in camel case.","line":140,"column":35,"nodeType":"Identifier","source":"            resultBuffer[idx++] = kdf_rounds & 0xff;"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":172,"column":23,"nodeType":"ArrayExpression","source":"        ['deriveBits']","fix":{"range":[5446,5446],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":182,"column":16,"nodeType":"Literal","source":"            512","fix":{"range":[5703,5703],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'aes_key' is not in camel case.","line":185,"column":15,"nodeType":"Identifier","source":"        const aes_key = keybits.slice(0, 32);"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'hmac_key' is not in camel case.","line":186,"column":15,"nodeType":"Identifier","source":"        const hmac_key = keybits.slice(32);"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'aes_prom' is not in camel case.","line":188,"column":15,"nodeType":"Identifier","source":"        const aes_prom = subtleCrypto.importKey("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":193,"column":35,"nodeType":"ArrayExpression","source":"            ['encrypt', 'decrypt']","fix":{"range":[6006,6006],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'hmac_prom' is not in camel case.","line":195,"column":15,"nodeType":"Identifier","source":"        const hmac_prom = subtleCrypto.importKey("},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":203,"column":31,"nodeType":"ArrayExpression","source":"            ['sign', 'verify']","fix":{"range":[6258,6258],"text":","}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'aes_prom' is not in camel case.","line":205,"column":29,"nodeType":"Identifier","source":"        return Promise.all([aes_prom, hmac_prom]);"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'hmac_prom' is not in camel case.","line":205,"column":39,"nodeType":"Identifier","source":"        return Promise.all([aes_prom, hmac_prom]);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":300,"column":5,"nodeType":"VariableDeclaration","source":"    var latin1String = String.fromCharCode.apply(null, uint8Array);","fix":{"range":[9104,9107],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":312,"column":5,"nodeType":"VariableDeclaration","source":"    var latin1String = window.atob(base64);","fix":{"range":[9515,9518],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":314,"column":5,"nodeType":"VariableDeclaration","source":"    var uint8Array = new Uint8Array(latin1String.length);","fix":{"range":[9600,9603],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":315,"column":10,"nodeType":"VariableDeclaration","source":"    for (var i = 0; i < latin1String.length; i++) {"}],"errorCount":4,"warningCount":20,"source":"/*\nCopyright 2017 Vector Creations Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n\"use strict\";\n\n// polyfill textencoder if necessary\nimport * as TextEncodingUtf8 from 'text-encoding-utf-8';\nlet TextEncoder = window.TextEncoder;\nif (!TextEncoder) {\n    TextEncoder = TextEncodingUtf8.TextEncoder;\n}\nlet TextDecoder = window.TextDecoder;\nif (!TextDecoder) {\n    TextDecoder = TextEncodingUtf8.TextDecoder;\n}\n\nconst subtleCrypto = window.crypto.subtle || window.crypto.webkitSubtle;\n\n/**\n * Decrypt a megolm key file\n *\n * @param {ArrayBuffer} file\n * @param {String} password\n * @return {Promise<String>} promise for decrypted output\n */\nexport function decryptMegolmKeyFile(data, password) {\n    const body = unpackMegolmKeyFile(data);\n\n    // check we have a version byte\n    if (body.length < 1) {\n        throw new Error('Invalid file: too short');\n    }\n\n    const version = body[0];\n    if (version !== 1) {\n        throw new Error('Unsupported version');\n    }\n\n    const ciphertextLength = body.length-(1+16+16+4+32);\n    if (body.length < 0) {\n        throw new Error('Invalid file: too short');\n    }\n\n    const salt = body.subarray(1, 1+16);\n    const iv = body.subarray(17, 17+16);\n    const iterations = body[33] << 24 | body[34] << 16 | body[35] << 8 | body[36];\n    const ciphertext = body.subarray(37, 37+ciphertextLength);\n    const hmac = body.subarray(-32);\n\n    return deriveKeys(salt, iterations, password).then((keys) => {\n        const [aes_key, hmac_key] = keys;\n\n        const toVerify = body.subarray(0, -32);\n        return subtleCrypto.verify(\n            {name: 'HMAC'},\n            hmac_key,\n            hmac,\n            toVerify,\n        ).then((isValid) => {\n            if (!isValid) {\n                throw new Error('Authentication check failed: incorrect password?');\n            }\n\n            return subtleCrypto.decrypt(\n                {\n                    name: \"AES-CTR\",\n                    counter: iv,\n                    length: 64,\n                },\n                aes_key,\n                ciphertext,\n            );\n        });\n    }).then((plaintext) => {\n        return new TextDecoder().decode(new Uint8Array(plaintext));\n    });\n}\n\n\n/**\n * Encrypt a megolm key file\n *\n * @param {String} data\n * @param {String} password\n * @param {Object=} options\n * @param {Nunber=} options.kdf_rounds Number of iterations to perform of the\n *    key-derivation function.\n * @return {Promise<ArrayBuffer>} promise for encrypted output\n */\nexport function encryptMegolmKeyFile(data, password, options) {\n    options = options || {};\n    const kdf_rounds = options.kdf_rounds || 100000;\n\n    const salt = new Uint8Array(16);\n    window.crypto.getRandomValues(salt);\n\n    // clear bit 63 of the salt to stop us hitting the 64-bit counter boundary\n    // (which would mean we wouldn't be able to decrypt on Android). The loss\n    // of a single bit of salt is a price we have to pay.\n    salt[9] &= 0x7f;\n\n    const iv = new Uint8Array(16);\n    window.crypto.getRandomValues(iv);\n\n    return deriveKeys(salt, kdf_rounds, password).then((keys) => {\n        const [aes_key, hmac_key] = keys;\n\n        return subtleCrypto.encrypt(\n            {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 64,\n            },\n            aes_key,\n            new TextEncoder().encode(data),\n        ).then((ciphertext) => {\n            const cipherArray = new Uint8Array(ciphertext);\n            const bodyLength = (1+salt.length+iv.length+4+cipherArray.length+32);\n            const resultBuffer = new Uint8Array(bodyLength);\n            let idx = 0;\n            resultBuffer[idx++] = 1; // version\n            resultBuffer.set(salt, idx); idx += salt.length;\n            resultBuffer.set(iv, idx); idx += iv.length;\n            resultBuffer[idx++] = kdf_rounds >> 24;\n            resultBuffer[idx++] = (kdf_rounds >> 16) & 0xff;\n            resultBuffer[idx++] = (kdf_rounds >> 8) & 0xff;\n            resultBuffer[idx++] = kdf_rounds & 0xff;\n            resultBuffer.set(cipherArray, idx); idx += cipherArray.length;\n\n            const toSign = resultBuffer.subarray(0, idx);\n\n            return subtleCrypto.sign(\n                {name: 'HMAC'},\n                hmac_key,\n                toSign,\n            ).then((hmac) => {\n                hmac = new Uint8Array(hmac);\n                resultBuffer.set(hmac, idx);\n                return packMegolmKeyFile(resultBuffer);\n            });\n        });\n    });\n}\n\n/**\n * Derive the AES and HMAC-SHA-256 keys for the file\n *\n * @param {Unit8Array} salt  salt for pbkdf\n * @param {Number} iterations number of pbkdf iterations\n * @param {String} password  password\n * @return {Promise<[CryptoKey, CryptoKey]>} promise for [aes key, hmac key]\n */\nfunction deriveKeys(salt, iterations, password) {\n    return subtleCrypto.importKey(\n        'raw',\n        new TextEncoder().encode(password),\n        {name: 'PBKDF2'},\n        false,\n        ['deriveBits']\n    ).then((key) => {\n        return subtleCrypto.deriveBits(\n            {\n                name: 'PBKDF2',\n                salt: salt,\n                iterations: iterations,\n                hash: 'SHA-512',\n            },\n            key,\n            512\n        );\n    }).then((keybits) => {\n        const aes_key = keybits.slice(0, 32);\n        const hmac_key = keybits.slice(32);\n\n        const aes_prom = subtleCrypto.importKey(\n            'raw',\n            aes_key,\n            {name: 'AES-CTR'},\n            false,\n            ['encrypt', 'decrypt']\n        );\n        const hmac_prom = subtleCrypto.importKey(\n            'raw',\n            hmac_key,\n            {\n                name: 'HMAC',\n                hash: {name: 'SHA-256'},\n            },\n            false,\n            ['sign', 'verify']\n        );\n        return Promise.all([aes_prom, hmac_prom]);\n    });\n}\n\nconst HEADER_LINE = '-----BEGIN MEGOLM SESSION DATA-----';\nconst TRAILER_LINE = '-----END MEGOLM SESSION DATA-----';\n\n/**\n * Unbase64 an ascii-armoured megolm key file\n *\n * Strips the header and trailer lines, and unbase64s the content\n *\n * @param {ArrayBuffer} data  input file\n * @return {Uint8Array} unbase64ed content\n */\nfunction unpackMegolmKeyFile(data) {\n    // parse the file as a great big String. This should be safe, because there\n    // should be no non-ASCII characters, and it means that we can do string\n    // comparisons to find the header and footer, and feed it into window.atob.\n    const fileStr = new TextDecoder().decode(new Uint8Array(data));\n\n    // look for the start line\n    let lineStart = 0;\n    while (1) {\n        const lineEnd = fileStr.indexOf('\\n', lineStart);\n        if (lineEnd < 0) {\n            throw new Error('Header line not found');\n        }\n        const line = fileStr.slice(lineStart, lineEnd).trim();\n\n        // start the next line after the newline\n        lineStart = lineEnd+1;\n\n        if (line === HEADER_LINE) {\n            break;\n        }\n    }\n\n    const dataStart = lineStart;\n\n    // look for the end line\n    while (1) {\n        const lineEnd = fileStr.indexOf('\\n', lineStart);\n        const line = fileStr.slice(lineStart, lineEnd < 0 ? undefined : lineEnd)\n              .trim();\n        if (line === TRAILER_LINE) {\n            break;\n        }\n\n        if (lineEnd < 0) {\n            throw new Error('Trailer line not found');\n        }\n\n        // start the next line after the newline\n        lineStart = lineEnd+1;\n    }\n\n    const dataEnd = lineStart;\n    return decodeBase64(fileStr.slice(dataStart, dataEnd));\n}\n\n/**\n * ascii-armour a  megolm key file\n *\n * base64s the content, and adds header and trailer lines\n *\n * @param {Uint8Array} data  raw data\n * @return {ArrayBuffer} formatted file\n */\nfunction packMegolmKeyFile(data) {\n    // we split into lines before base64ing, because encodeBase64 doesn't deal\n    // terribly well with large arrays.\n    const LINE_LENGTH = (72 * 4 / 3);\n    const nLines = Math.ceil(data.length / LINE_LENGTH);\n    const lines = new Array(nLines + 3);\n    lines[0] = HEADER_LINE;\n    let o = 0;\n    let i;\n    for (i = 1; i <= nLines; i++) {\n        lines[i] = encodeBase64(data.subarray(o, o+LINE_LENGTH));\n        o += LINE_LENGTH;\n    }\n    lines[i++] = TRAILER_LINE;\n    lines[i] = '';\n    return (new TextEncoder().encode(lines.join('\\n'))).buffer;\n}\n\n/**\n * Encode a typed array of uint8 as base64.\n * @param {Uint8Array} uint8Array The data to encode.\n * @return {string} The base64.\n */\nfunction encodeBase64(uint8Array) {\n    // Misinterpt the Uint8Array as Latin-1.\n    // window.btoa expects a unicode string with codepoints in the range 0-255.\n    var latin1String = String.fromCharCode.apply(null, uint8Array);\n    // Use the builtin base64 encoder.\n    return window.btoa(latin1String);\n}\n\n/**\n * Decode a base64 string to a typed array of uint8.\n * @param {string} base64 The base64 to decode.\n * @return {Uint8Array} The decoded data.\n */\nfunction decodeBase64(base64) {\n    // window.atob returns a unicode string with codepoints in the range 0-255.\n    var latin1String = window.atob(base64);\n    // Encode the string as a Uint8Array\n    var uint8Array = new Uint8Array(latin1String.length);\n    for (var i = 0; i < latin1String.length; i++) {\n        uint8Array[i] = latin1String.charCodeAt(i);\n    }\n    return uint8Array;\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/utils/MultiInviter.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Expected JSDoc for 'addrs' but found 'addresses'.","line":35,"column":5,"nodeType":"Block","source":"    /**"}],"errorCount":0,"warningCount":1,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport {getAddressType, inviteToRoom} from '../Invite';\nimport q from 'q';\n\n/**\n * Invites multiple addresses to a room, handling rate limiting from the server\n */\nexport default class MultiInviter {\n    constructor(roomId) {\n        this.roomId = roomId;\n\n        this.canceled = false;\n        this.addrs = [];\n        this.busy = false;\n        this.completionStates = {}; // State of each address (invited or error)\n        this.errorTexts = {}; // Textual error per address\n        this.deferred = null;\n    }\n\n    /**\n     * Invite users to this room. This may only be called once per\n     * instance of the class.\n     *\n     * The promise is given progress when each address completes, with an\n     * object argument with each completed address with value either\n     * 'invited' or 'error'.\n     *\n     * @param {array} addresses Array of addresses to invite\n     * @returns {Promise} Resolved when all invitations in the queue are complete\n     */\n    invite(addrs) {\n        if (this.addrs.length > 0) {\n            throw new Error(\"Already inviting/invited\");\n        }\n        this.addrs.push(...addrs);\n\n        for (const addr of this.addrs) {\n            if (getAddressType(addr) === null) {\n                this.completionStates[addr] = 'error';\n                this.errorTexts[addr] = 'Unrecognised address';\n            }\n        }\n        this.deferred = q.defer();\n        this._inviteMore(0);\n\n        return this.deferred.promise;\n    }\n\n    /**\n     * Stops inviting. Causes promises returned by invite() to be rejected.\n     */\n    cancel() {\n        if (!this.busy) return;\n\n        this._canceled = true;\n        this.deferred.reject(new Error('canceled'));\n    }\n\n    getCompletionState(addr) {\n        return this.completionStates[addr];\n    }\n\n    getErrorText(addr) {\n        return this.errorTexts[addr];\n    }\n\n    _inviteMore(nextIndex) {\n        if (this._canceled) {\n            return;\n        }\n\n        if (nextIndex == this.addrs.length) {\n            this.busy = false;\n            this.deferred.resolve(this.completionStates);\n            return;\n        }\n\n        const addr = this.addrs[nextIndex];\n\n        // don't try to invite it if it's an invalid address\n        // (it will already be marked as an error though,\n        // so no need to do so again)\n        if (getAddressType(addr) === null) {\n            this._inviteMore(nextIndex + 1);\n            return;\n        }\n\n        // don't re-invite (there's no way in the UI to do this, but\n        // for sanity's sake)\n        if (this.completionStates[addr] == 'invited') {\n            this._inviteMore(nextIndex + 1);\n            return;\n        }\n\n        inviteToRoom(this.roomId, addr).then(() => {\n            if (this._canceled) { return; }\n\n            this.completionStates[addr] = 'invited';\n            this.deferred.notify(this.completionStates);\n\n            this._inviteMore(nextIndex + 1);\n        }, (err) => {\n            if (this._canceled) { return; }\n\n            let errorText;\n            let fatal = false;\n            if (err.errcode == 'M_FORBIDDEN') {\n                fatal = true;\n                errorText = 'You do not have permission to invite people to this room.';\n            } else if (err.errcode == 'M_LIMIT_EXCEEDED') {\n                // we're being throttled so wait a bit & try again\n                setTimeout(() => {\n                    this._inviteMore(nextIndex);\n                }, 5000);\n                return;\n            } else {\n                errorText = 'Unknown server error';\n            }\n            this.completionStates[addr] = 'error';\n            this.errorTexts[addr] = errorText;\n            this.busy = !fatal;\n\n            if (!fatal) {\n                this.deferred.notify(this.completionStates);\n                this._inviteMore(nextIndex + 1);\n            }\n        });\n    }\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/utils/Receipt.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":17,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'receiptEvent'.","line":17,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'userId'.","line":17,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":5,"nodeType":"VariableDeclaration","source":"    var receiptKeys = Object.keys(receiptEvent.getContent());","fix":{"range":[777,780],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":10,"nodeType":"VariableDeclaration","source":"    for (var i = 0; i < receiptKeys.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":9,"nodeType":"VariableDeclaration","source":"        var rcpt = receiptEvent.getContent()[receiptKeys[i]];","fix":{"range":[894,897],"text":"let"}}],"errorCount":0,"warningCount":6,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Given MatrixEvent containing receipts, return the first\n * read receipt from the given user ID, or null if no such\n * receipt exists.\n */\nexport function findReadReceiptFromUserId(receiptEvent, userId) {\n    var receiptKeys = Object.keys(receiptEvent.getContent());\n    for (var i = 0; i < receiptKeys.length; ++i) {\n        var rcpt = receiptEvent.getContent()[receiptKeys[i]];\n        if (rcpt['m.read'] && rcpt['m.read'][userId]) {\n            return rcpt;\n        }\n    }\n\n    return null;\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/Velociraptor.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[0,3],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDom = require('react-dom');","fix":{"range":[30,33],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":3,"column":1,"nodeType":"VariableDeclaration","source":"var Velocity = require('velocity-vector');","fix":{"range":[67,70],"text":"let"}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'newChildren'.","line":45,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":9,"nodeType":"VariableDeclaration","source":"        var self = this;","fix":{"range":[1586,1589],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":50,"column":9,"nodeType":"VariableDeclaration","source":"        var oldChildren = this.children || {};","fix":{"range":[1611,1614],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":54,"column":17,"nodeType":"VariableDeclaration","source":"                var old = oldChildren[c.key];","fix":{"range":[1798,1801],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":55,"column":17,"nodeType":"VariableDeclaration","source":"                var oldNode = ReactDom.findDOMNode(self.nodes[old.key]);","fix":{"range":[1844,1847],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 58 exceeds the maximum line length of 90.","line":58,"column":1,"nodeType":"Program","source":"                    Velocity(oldNode, { left: c.props.style.left }, self.props.transition).then(function() {"},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":58,"column":21,"nodeType":"CallExpression","source":"                    Velocity(oldNode, { left: c.props.style.left }, self.props.transition).then(function() {"},{"ruleId":"max-len","severity":1,"message":"Line 61 exceeds the maximum line length of 90.","line":61,"column":1,"nodeType":"Program","source":"                        if (oldNode.style.visibility == 'visible' && c.props.style.visibility == 'hidden') {"},{"ruleId":"max-len","severity":1,"message":"Line 65 exceeds the maximum line length of 90.","line":65,"column":1,"nodeType":"Program","source":"                    if (oldNode.style.visibility == 'hidden' && c.props.style.visibility == 'visible') {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":74,"column":17,"nodeType":"VariableDeclaration","source":"                var newProps = {};","fix":{"range":[3065,3068],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":75,"column":17,"nodeType":"VariableDeclaration","source":"                var restingStyle = c.props.style;","fix":{"range":[3100,3103],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":77,"column":17,"nodeType":"VariableDeclaration","source":"                var startStyles = self.props.startStyles;","fix":{"range":[3151,3154],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":79,"column":21,"nodeType":"VariableDeclaration","source":"                    var startStyle = startStyles[0];","fix":{"range":[3259,3262],"text":"let"}},{"ruleId":"arrow-parens","severity":1,"message":"Expected parentheses around arrow function argument.","line":84,"column":33,"nodeType":"ArrowFunctionExpression","source":"                newProps.ref = (n => self._collectNode(","fix":{"range":[3480,3481],"text":"(n)"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":85,"column":43,"nodeType":"Identifier","source":"                    c.key, n, restingStyle","fix":{"range":[3546,3546],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":106,"column":13,"nodeType":"VariableDeclaration","source":"            var startStyles = this.props.startStyles;","fix":{"range":[4145,4148],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":107,"column":13,"nodeType":"VariableDeclaration","source":"            var transitionOpts = this.props.enterTransitionOpts;","fix":{"range":[4199,4202],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":111,"column":18,"nodeType":"VariableDeclaration","source":"            for (var i = 1; i < startStyles.length; ++i) {"},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":112,"column":17,"nodeType":"CallExpression","source":"                Velocity(domNode, startStyles[i], transitionOpts[i-1]);"},{"ruleId":"new-cap","severity":1,"message":"A function with a name starting with an uppercase letter should only be used as a constructor.","line":123,"column":13,"nodeType":"CallExpression","source":"            Velocity(domNode, restingStyle,"}],"errorCount":1,"warningCount":22,"source":"var React = require('react');\nvar ReactDom = require('react-dom');\nvar Velocity = require('velocity-vector');\n\n/**\n * The Velociraptor contains components and animates transitions with velocity.\n * It will only pick up direct changes to properties ('left', currently), and so\n * will not work for animating positional changes where the position is implicit\n * from DOM order. This makes it a lot simpler and lighter: if you need fully\n * automatic positional animation, look at react-shuffle or similar libraries.\n */\nmodule.exports = React.createClass({\n    displayName: 'Velociraptor',\n\n    propTypes: {\n        // either a list of child nodes, or a single child.\n        children: React.PropTypes.any,\n\n        // optional transition information for changing existing children\n        transition: React.PropTypes.object,\n\n        // a list of state objects to apply to each child node in turn\n        startStyles: React.PropTypes.array,\n\n        // a list of transition options from the corresponding startStyle\n        enterTransitionOpts: React.PropTypes.array,\n    },\n\n    getDefaultProps: function() {\n        return {\n            startStyles: [],\n            enterTransitionOpts: [],\n        };\n    },\n\n    componentWillMount: function() {\n        this.nodes = {};\n        this._updateChildren(this.props.children);\n    },\n\n    componentWillReceiveProps: function(nextProps) {\n        this._updateChildren(nextProps.children);\n    },\n\n    /**\n     * update `this.children` according to the new list of children given\n     */\n    _updateChildren: function(newChildren) {\n        var self = this;\n        var oldChildren = this.children || {};\n        this.children = {};\n        React.Children.toArray(newChildren).forEach(function(c) {\n            if (oldChildren[c.key]) {\n                var old = oldChildren[c.key];\n                var oldNode = ReactDom.findDOMNode(self.nodes[old.key]);\n\n                if (oldNode && oldNode.style.left != c.props.style.left) {\n                    Velocity(oldNode, { left: c.props.style.left }, self.props.transition).then(function() {\n                        // special case visibility because it's nonsensical to animate an invisible element\n                        // so we always hidden->visible pre-transition and visible->hidden after\n                        if (oldNode.style.visibility == 'visible' && c.props.style.visibility == 'hidden') {\n                            oldNode.style.visibility = c.props.style.visibility;\n                        }\n                    });\n                    if (oldNode.style.visibility == 'hidden' && c.props.style.visibility == 'visible') {\n                        oldNode.style.visibility = c.props.style.visibility;\n                    }\n                    //console.log(\"translation: \"+oldNode.style.left+\" -> \"+c.props.style.left);\n                }\n                self.children[c.key] = old;\n            } else {\n                // new element. If we have a startStyle, use that as the style and go through\n                // the enter animations\n                var newProps = {};\n                var restingStyle = c.props.style;\n\n                var startStyles = self.props.startStyles;\n                if (startStyles.length > 0) {\n                    var startStyle = startStyles[0];\n                    newProps.style = startStyle;\n                    // console.log(\"mounted@startstyle0: \"+JSON.stringify(startStyle));\n                }\n\n                newProps.ref = (n => self._collectNode(\n                    c.key, n, restingStyle\n                ));\n\n                self.children[c.key] = React.cloneElement(c, newProps);\n            }\n        });\n    },\n\n    /**\n     * called when a child element is mounted/unmounted\n     *\n     * @param {string}     k              key of the child\n     * @param {null|Object} node          On mount: React node. On unmount: null\n     * @param {Object}     restingStyle   final style\n     */\n    _collectNode: function(k, node, restingStyle) {\n        if (\n            node &&\n            this.nodes[k] === undefined &&\n            this.props.startStyles.length > 0\n        ) {\n            var startStyles = this.props.startStyles;\n            var transitionOpts = this.props.enterTransitionOpts;\n            const domNode = ReactDom.findDOMNode(node);\n            // start from startStyle 1: 0 is the one we gave it\n            // to start with, so now we animate 1 etc.\n            for (var i = 1; i < startStyles.length; ++i) {\n                Velocity(domNode, startStyles[i], transitionOpts[i-1]);\n                /*\n                console.log(\"start:\",\n                            JSON.stringify(transitionOpts[i-1]),\n                            \"->\",\n                            JSON.stringify(startStyles[i]),\n                            );\n                */\n            }\n\n            // and then we animate to the resting state\n            Velocity(domNode, restingStyle,\n                     transitionOpts[i-1])\n            .then(() => {\n                // once we've reached the resting state, hide the element if\n                // appropriate\n                domNode.style.visibility = restingStyle.visibility;\n            });\n\n            /*\n            console.log(\"enter:\",\n                        JSON.stringify(transitionOpts[i-1]),\n                        \"->\",\n                        JSON.stringify(restingStyle));\n            */\n        } else if (node === null) {\n            // Velocity stores data on elements using the jQuery .data()\n            // method, and assumes you'll be using jQuery's .remove() to\n            // remove the element, but we don't use jQuery, so we need to\n            // blow away the element's data explicitly otherwise it will leak.\n            // This uses Velocity's internal jQuery compatible wrapper.\n            // See the bug at\n            // https://github.com/julianshapiro/velocity/issues/300\n            // and the FAQ entry, \"Preventing memory leaks when\n            // creating/destroying large numbers of elements\"\n            // (https://github.com/julianshapiro/velocity/issues/47)\n            const domNode = ReactDom.findDOMNode(this.nodes[k]);\n            Velocity.Utilities.removeData(domNode);\n        }\n        this.nodes[k] = node;\n    },\n\n    render: function() {\n        return (\n            <span>\n                {Object.values(this.children)}\n            </span>\n        );\n    },\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/VelocityBounce.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","source":"var Velocity = require('velocity-vector');","fix":{"range":[0,3],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":6,"column":5,"nodeType":"VariableDeclaration","source":"    var pow2,"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":6,"column":5,"nodeType":"VariableDeclaration","source":"    var pow2,","fix":{"range":[211,214],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 12 exceeds the maximum line length of 90.","line":12,"column":1,"nodeType":"Program","source":"    return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );"}],"errorCount":0,"warningCount":4,"source":"var Velocity = require('velocity-vector');\n\n// courtesy of https://github.com/julianshapiro/velocity/issues/283\n// We only use easeOutBounce (easeInBounce is just sort of nonsensical)\nfunction bounce( p ) {\n    var pow2,\n        bounce = 4;\n\n    while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {\n        // just sets pow2\n    }\n    return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );\n}\n\nVelocity.Easings.easeOutBounce = function(p) {\n    return 1 - bounce(1 - p);\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/WhoIsTyping.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");","fix":{"range":[0,3],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":6,"column":61,"nodeType":"ArrayExpression","source":"            room, [MatrixClientPeg.get().credentials.userId]","fix":{"range":[210,210],"text":","}},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":10,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'room'.","line":10,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'exclude'.","line":10,"column":5,"nodeType":"Block","source":"    /**"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":15,"column":9,"nodeType":"VariableDeclaration","source":"        var whoIsTyping = [];","fix":{"range":[431,434],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":9,"nodeType":"VariableDeclaration","source":"        var memberKeys = Object.keys(room.currentState.members);","fix":{"range":[536,539],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < memberKeys.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":13,"nodeType":"VariableDeclaration","source":"            var userId = memberKeys[i];","fix":{"range":[659,662],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":55,"column":6,"nodeType":"Property","source":"    }","fix":{"range":[1797,1797],"text":","}}],"errorCount":2,"warningCount":8,"source":"var MatrixClientPeg = require(\"./MatrixClientPeg\");\n\nmodule.exports = {\n    usersTypingApartFromMe: function(room) {\n        return this.usersTyping(\n            room, [MatrixClientPeg.get().credentials.userId]\n        );\n    },\n\n    /**\n     * Given a Room object and, optionally, a list of userID strings\n     * to exclude, return a list of user objects who are typing.\n     */\n    usersTyping: function(room, exclude) {\n        var whoIsTyping = [];\n\n        if (exclude === undefined) {\n            exclude = [];\n        }\n\n        var memberKeys = Object.keys(room.currentState.members);\n        for (var i = 0; i < memberKeys.length; ++i) {\n            var userId = memberKeys[i];\n\n            if (room.currentState.members[userId].typing) {\n                if (exclude.indexOf(userId) == -1) {\n                    whoIsTyping.push(room.currentState.members[userId]);\n                }\n            }\n        }\n\n        return whoIsTyping;\n    },\n\n    whoIsTypingString: function(room, limit) {\n        const whoIsTyping = this.usersTypingApartFromMe(room);\n        const othersCount = limit === undefined ?\n            0 : Math.max(whoIsTyping.length - limit, 0);\n        if (whoIsTyping.length == 0) {\n            return '';\n        } else if (whoIsTyping.length == 1) {\n            return whoIsTyping[0].name + ' is typing';\n        }\n        const names = whoIsTyping.map(function(m) {\n            return m.name;\n        });\n        if (othersCount) {\n            const other = ' other' + (othersCount > 1 ? 's' : '');\n            return names.slice(0, limit).join(', ') + ' and ' +\n                othersCount + other + ' are typing';\n        } else {\n            const lastPerson = names.pop();\n            return names.join(', ') + ' and ' + lastPerson + ' are typing';\n        }\n    }\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/src/wrappers/WithMatrixClient.js","messages":[{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc @returns for function.","line":20,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"valid-jsdoc","severity":1,"message":"Missing JSDoc for parameter 'WrappedComponent'.","line":20,"column":1,"nodeType":"Block","source":"/**"},{"ruleId":"max-len","severity":1,"message":"Line 36 exceeds the maximum line length of 90.","line":36,"column":1,"nodeType":"Program","source":"            return <WrappedComponent {...this.props} matrixClient={this.context.matrixClient} />;"}],"errorCount":0,"warningCount":3,"source":"/*\nCopyright 2015, 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as Matrix from 'matrix-js-sdk';\nimport React from 'react';\n\n/**\n * Wraps a react class, pulling the MatrixClient from the context and adding it\n * as a 'matrixClient' property instead.\n *\n * This abstracts the use of the context API, so that we can use a different\n * mechanism in future.\n */\nexport default function(WrappedComponent) {\n    return React.createClass({\n        displayName: \"WithMatrixClient<\" + WrappedComponent.displayName + \">\",\n\n        contextTypes: {\n            matrixClient: React.PropTypes.instanceOf(Matrix.MatrixClient).isRequired,\n        },\n\n        render: function() {\n            return <WrappedComponent {...this.props} matrixClient={this.context.matrixClient} />;\n        },\n    });\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/all-tests.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":6,"column":1,"nodeType":"VariableDeclaration","source":"var context = require.context('.', true, /-test\\.jsx?$/);","fix":{"range":[113,116],"text":"let"}}],"errorCount":0,"warningCount":1,"source":"// all-tests.js\n//\n// Our master test file: uses the webpack require API to find our test files\n// and run them\n\nvar context = require.context('.', true, /-test\\.jsx?$/);\ncontext.keys().forEach(context);\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/components/structures/MessagePanel-test.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[592,595],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var TestUtils = require('react-addons-test-utils');","fix":{"range":[629,632],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var expect = require('expect');","fix":{"range":[681,684],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('matrix-react-sdk');","fix":{"range":[714,717],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var MessagePanel = sdk.getComponent('structures.MessagePanel');","fix":{"range":[754,757],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var test_utils = require('test-utils');","fix":{"range":[819,822],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'test_utils' is not in camel case.","line":26,"column":5,"nodeType":"Identifier","source":"var test_utils = require('test-utils');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var mockclock = require('mock-clock');","fix":{"range":[859,862],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var client;","fix":{"range":[899,902],"text":"let"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":48,"column":34,"nodeType":"FunctionExpression","source":"describe('MessagePanel', function () {","fix":{"range":[1348,1349],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":49,"column":5,"nodeType":"VariableDeclaration","source":"    var clock = mockclock.clock();","fix":{"range":[1358,1361],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":50,"column":5,"nodeType":"VariableDeclaration","source":"    var realSetTimeout = window.setTimeout;","fix":{"range":[1393,1396],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":51,"column":5,"nodeType":"VariableDeclaration","source":"    var events = mkEvents();","fix":{"range":[1437,1440],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":54,"column":31,"nodeType":"ThisExpression","source":"        test_utils.beforeEach(this);"},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":59,"column":23,"nodeType":"FunctionExpression","source":"    afterEach(function () {","fix":{"range":[1658,1659],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":64,"column":9,"nodeType":"VariableDeclaration","source":"        var events = [];","fix":{"range":[1734,1737],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":65,"column":9,"nodeType":"VariableDeclaration","source":"        var ts0 = Date.now();","fix":{"range":[1759,1762],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":66,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < 10; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":77,"column":9,"nodeType":"VariableDeclaration","source":"        var res = TestUtils.renderIntoDocument(","fix":{"range":[2106,2109],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":78,"column":72,"nodeType":"JSXElement","source":"                <WrappedMessagePanel className=\"cls\" events={events} />","fix":{"range":[2217,2217],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":82,"column":9,"nodeType":"VariableDeclaration","source":"        var tiles = TestUtils.scryRenderedComponentsWithType(","fix":{"range":[2302,2305],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":88,"column":9,"nodeType":"VariableDeclaration","source":"        var res = TestUtils.renderIntoDocument(","fix":{"range":[2540,2543],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 89 exceeds the maximum line length of 90.","line":89,"column":1,"nodeType":"Program","source":"                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[4].getId()}"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":90,"column":48,"nodeType":"JSXElement","source":"                    readMarkerVisible={true} />","fix":{"range":[2734,2734],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":93,"column":9,"nodeType":"VariableDeclaration","source":"        var tiles = TestUtils.scryRenderedComponentsWithType(","fix":{"range":[2755,2758],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 97 exceeds the maximum line length of 90.","line":97,"column":1,"nodeType":"Program","source":"        var rm = TestUtils.findRenderedDOMComponentWithClass(res, 'mx_RoomView_myReadMarker_container');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":97,"column":9,"nodeType":"VariableDeclaration","source":"        var rm = TestUtils.findRenderedDOMComponentWithClass(res, 'mx_RoomView_myReadMarker_container');","fix":{"range":[2926,2929],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":100,"column":9,"nodeType":"VariableDeclaration","source":"        var eventContainer = ReactDOM.findDOMNode(tiles[4]).parentNode;","fix":{"range":[3108,3111],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":109,"column":9,"nodeType":"VariableDeclaration","source":"        var parentDiv = document.createElement('div');","fix":{"range":[3451,3454],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":112,"column":9,"nodeType":"VariableDeclaration","source":"        var mp = ReactDOM.render(","fix":{"range":[3556,3559],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 113 exceeds the maximum line length of 90.","line":113,"column":1,"nodeType":"Program","source":"                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[4].getId()}"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":117,"column":9,"nodeType":"VariableDeclaration","source":"        var tiles = TestUtils.scryRenderedComponentsWithType(","fix":{"range":[3775,3778],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":119,"column":9,"nodeType":"VariableDeclaration","source":"        var tileContainers = tiles.map(function (t) {","fix":{"range":[3891,3894],"text":"let"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":119,"column":48,"nodeType":"FunctionExpression","source":"        var tileContainers = tiles.map(function (t) {","fix":{"range":[3930,3931],"text":""}},{"ruleId":"max-len","severity":1,"message":"Line 124 exceeds the maximum line length of 90.","line":124,"column":1,"nodeType":"Program","source":"        var rm = TestUtils.findRenderedDOMComponentWithClass(mp, 'mx_RoomView_myReadMarker_container');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":124,"column":9,"nodeType":"VariableDeclaration","source":"        var rm = TestUtils.findRenderedDOMComponentWithClass(mp, 'mx_RoomView_myReadMarker_container');","fix":{"range":[4066,4069],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 129 exceeds the maximum line length of 90.","line":129,"column":1,"nodeType":"Program","source":"                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[6].getId()}"},{"ruleId":"max-len","severity":1,"message":"Line 134 exceeds the maximum line length of 90.","line":134,"column":1,"nodeType":"Program","source":"        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":134,"column":9,"nodeType":"VariableDeclaration","source":"        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');","fix":{"range":[4525,4528],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":139,"column":9,"nodeType":"VariableDeclaration","source":"        var hr = found[0].children[0];","fix":{"range":[4785,4788],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":160,"column":9,"nodeType":"VariableDeclaration","source":"        var parentDiv = document.createElement('div');","fix":{"range":[5486,5489],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":163,"column":9,"nodeType":"VariableDeclaration","source":"        var mp = ReactDOM.render(","fix":{"range":[5591,5594],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 164 exceeds the maximum line length of 90.","line":164,"column":1,"nodeType":"Program","source":"                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[4].getId()}"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":168,"column":9,"nodeType":"VariableDeclaration","source":"        var tiles = TestUtils.scryRenderedComponentsWithType(","fix":{"range":[5810,5813],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":170,"column":9,"nodeType":"VariableDeclaration","source":"        var tileContainers = tiles.map(function (t) {","fix":{"range":[5926,5929],"text":"let"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":170,"column":48,"nodeType":"FunctionExpression","source":"        var tileContainers = tiles.map(function (t) {","fix":{"range":[5965,5966],"text":""}},{"ruleId":"max-len","severity":1,"message":"Line 176 exceeds the maximum line length of 90.","line":176,"column":1,"nodeType":"Program","source":"                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[6].getId()}"},{"ruleId":"max-len","severity":1,"message":"Line 181 exceeds the maximum line length of 90.","line":181,"column":1,"nodeType":"Program","source":"        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":181,"column":9,"nodeType":"VariableDeclaration","source":"        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');","fix":{"range":[6339,6342],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 192 exceeds the maximum line length of 90.","line":192,"column":1,"nodeType":"Program","source":"                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[8].getId()}"},{"ruleId":"max-len","severity":1,"message":"Line 197 exceeds the maximum line length of 90.","line":197,"column":1,"nodeType":"Program","source":"        found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');"}],"errorCount":7,"warningCount":45,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar ReactDOM = require(\"react-dom\");\nvar TestUtils = require('react-addons-test-utils');\nvar expect = require('expect');\n\nvar sdk = require('matrix-react-sdk');\n\nvar MessagePanel = sdk.getComponent('structures.MessagePanel');\n\nvar test_utils = require('test-utils');\nvar mockclock = require('mock-clock');\n\nvar client;\n\n// wrap MessagePanel with a component which provides the MatrixClient in the context.\nconst WrappedMessagePanel = React.createClass({\n    childContextTypes: {\n        matrixClient: React.PropTypes.object,\n    },\n\n    getChildContext: function() {\n        return {\n            matrixClient: client,\n        };\n    },\n\n    render: function() {\n        return <MessagePanel {...this.props} />;\n    },\n});\n\ndescribe('MessagePanel', function () {\n    var clock = mockclock.clock();\n    var realSetTimeout = window.setTimeout;\n    var events = mkEvents();\n\n    beforeEach(function() {\n        test_utils.beforeEach(this);\n        client = test_utils.createTestClient();\n        client.credentials = {userId: '@me:here'};\n    });\n\n    afterEach(function () {\n        clock.uninstall();\n    });\n\n    function mkEvents() {\n        var events = [];\n        var ts0 = Date.now();\n        for (var i = 0; i < 10; i++) {\n            events.push(test_utils.mkMessage(\n                {\n                    event: true, room: \"!room:id\", user: \"@user:id\",\n                    ts: ts0 + i*1000,\n                }));\n        }\n        return events;\n    }\n\n    it('should show the events', function() {\n        var res = TestUtils.renderIntoDocument(\n                <WrappedMessagePanel className=\"cls\" events={events} />\n        );\n\n        // just check we have the right number of tiles for now\n        var tiles = TestUtils.scryRenderedComponentsWithType(\n            res, sdk.getComponent('rooms.EventTile'));\n        expect(tiles.length).toEqual(10);\n    });\n\n    it('should show the read-marker in the right place', function() {\n        var res = TestUtils.renderIntoDocument(\n                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[4].getId()}\n                    readMarkerVisible={true} />\n        );\n\n        var tiles = TestUtils.scryRenderedComponentsWithType(\n            res, sdk.getComponent('rooms.EventTile'));\n\n        // find the <li> which wraps the read marker\n        var rm = TestUtils.findRenderedDOMComponentWithClass(res, 'mx_RoomView_myReadMarker_container');\n\n        // it should follow the <li> which wraps the event tile for event 4\n        var eventContainer = ReactDOM.findDOMNode(tiles[4]).parentNode;\n        expect(rm.previousSibling).toEqual(eventContainer);\n    });\n\n    it('shows a ghost read-marker when the read-marker moves', function(done) {\n        // fake the clock so that we can test the velocity animation.\n        clock.install();\n        clock.mockDate();\n\n        var parentDiv = document.createElement('div');\n\n        // first render with the RM in one place\n        var mp = ReactDOM.render(\n                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[4].getId()}\n                    readMarkerVisible={true}\n                />, parentDiv);\n\n        var tiles = TestUtils.scryRenderedComponentsWithType(\n            mp, sdk.getComponent('rooms.EventTile'));\n        var tileContainers = tiles.map(function (t) {\n            return ReactDOM.findDOMNode(t).parentNode;\n        });\n\n        // find the <li> which wraps the read marker\n        var rm = TestUtils.findRenderedDOMComponentWithClass(mp, 'mx_RoomView_myReadMarker_container');\n        expect(rm.previousSibling).toEqual(tileContainers[4]);\n\n        // now move the RM\n        mp = ReactDOM.render(\n                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[6].getId()}\n                    readMarkerVisible={true}\n                />, parentDiv);\n\n        // now there should be two RM containers\n        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');\n        expect(found.length).toEqual(2);\n\n        // the first should be the ghost\n        expect(found[0].previousSibling).toEqual(tileContainers[4]);\n        var hr = found[0].children[0];\n\n        // the second should be the real thing\n        expect(found[1].previousSibling).toEqual(tileContainers[6]);\n\n        // advance the clock, and then let the browser run an animation frame,\n        // to let the animation start\n        clock.tick(1500);\n\n        realSetTimeout(() => {\n            // then advance it again to let it complete\n            clock.tick(1000);\n            realSetTimeout(() => {\n                // the ghost should now have finished\n                expect(hr.style.opacity).toEqual('0');\n                done();\n            }, 100);\n        }, 100);\n    });\n\n    it('shows only one ghost when the RM moves twice', function() {\n        var parentDiv = document.createElement('div');\n\n        // first render with the RM in one place\n        var mp = ReactDOM.render(\n                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[4].getId()}\n                    readMarkerVisible={true}\n                />, parentDiv);\n\n        var tiles = TestUtils.scryRenderedComponentsWithType(\n            mp, sdk.getComponent('rooms.EventTile'));\n        var tileContainers = tiles.map(function (t) {\n            return ReactDOM.findDOMNode(t).parentNode;\n        });\n\n        // now move the RM\n        mp = ReactDOM.render(\n                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[6].getId()}\n                    readMarkerVisible={true}\n                />, parentDiv);\n\n        // now there should be two RM containers\n        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');\n        expect(found.length).toEqual(2);\n\n        // the first should be the ghost\n        expect(tileContainers.indexOf(found[0].previousSibling)).toEqual(4);\n\n        // the second should be the real RM\n        expect(tileContainers.indexOf(found[1].previousSibling)).toEqual(6);\n\n        // and move the RM again\n        mp = ReactDOM.render(\n                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[8].getId()}\n                    readMarkerVisible={true}\n                />, parentDiv);\n\n        // still two RM containers\n        found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');\n        expect(found.length).toEqual(2);\n\n        // they should have moved\n        expect(tileContainers.indexOf(found[0].previousSibling)).toEqual(6);\n        expect(tileContainers.indexOf(found[1].previousSibling)).toEqual(8);\n    });\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/components/structures/RoomView-test.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[0,3],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'React' is assigned a value but never used.","line":1,"column":5,"nodeType":"Identifier","source":"var React = require('react');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","source":"var expect = require('expect');","fix":{"range":[30,33],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":3,"column":1,"nodeType":"VariableDeclaration","source":"var sinon = require('sinon');","fix":{"range":[62,65],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":4,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[92,95],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":6,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('matrix-react-sdk');","fix":{"range":[130,133],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":7,"column":1,"nodeType":"VariableDeclaration","source":"var RoomView = sdk.getComponent('structures.RoomView');","fix":{"range":[169,172],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":8,"column":1,"nodeType":"VariableDeclaration","source":"var peg = require('../../../src/MatrixClientPeg');","fix":{"range":[225,228],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":10,"column":1,"nodeType":"VariableDeclaration","source":"var test_utils = require('../../test-utils');","fix":{"range":[277,280],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'test_utils' is not in camel case.","line":10,"column":5,"nodeType":"Identifier","source":"var test_utils = require('../../test-utils');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":11,"column":1,"nodeType":"VariableDeclaration","source":"var q = require('q');","fix":{"range":[323,326],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":13,"column":1,"nodeType":"VariableDeclaration","source":"var Skinner = require(\"../../../src/Skinner\");","fix":{"range":[346,349],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":14,"column":1,"nodeType":"VariableDeclaration","source":"var stubComponent = require('../../components/stub-component.js');","fix":{"range":[393,396],"text":"let"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":16,"column":30,"nodeType":"FunctionExpression","source":"describe('RoomView', function () {","fix":{"range":[490,491],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":5,"nodeType":"VariableDeclaration","source":"    var sandbox;","fix":{"range":[500,503],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":5,"nodeType":"VariableDeclaration","source":"    var parentDiv;","fix":{"range":[517,520],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":21,"column":31,"nodeType":"ThisExpression","source":"        test_utils.beforeEach(this);"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":25,"column":9,"nodeType":"ThisExpression","source":"        this.oldTimelinePanel = Skinner.getComponent('structures.TimelinePanel');"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":26,"column":9,"nodeType":"ThisExpression","source":"        this.oldRoomHeader = Skinner.getComponent('views.rooms.RoomHeader');"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":38,"column":58,"nodeType":"ThisExpression","source":"        Skinner.addComponent('structures.TimelinePanel', this.oldTimelinePanel);"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":39,"column":56,"nodeType":"ThisExpression","source":"        Skinner.addComponent('views.rooms.RoomHeader', this.oldRoomHeader);"},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":42,"column":54,"nodeType":"FunctionExpression","source":"    it('resolves a room alias to a room id', function (done) {","fix":{"range":[1402,1403],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":45,"column":9,"nodeType":"VariableDeclaration","source":"        var onRoomIdResolved = sinon.spy();","fix":{"range":[1510,1513],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 47 exceeds the maximum line length of 90.","line":47,"column":1,"nodeType":"Program","source":"        ReactDOM.render(<RoomView roomAddress=\"#alias:ser.ver\" onRoomIdResolved={onRoomIdResolved} />, parentDiv);"},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":58,"column":52,"nodeType":"FunctionExpression","source":"    it('joins by alias if given an alias', function (done) {","fix":{"range":[2060,2061],"text":""}},{"ruleId":"max-len","severity":1,"message":"Line 61 exceeds the maximum line length of 90.","line":61,"column":1,"nodeType":"Program","source":"        var roomView = ReactDOM.render(<RoomView roomAddress=\"#alias:ser.ver\" />, parentDiv);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":61,"column":9,"nodeType":"VariableDeclaration","source":"        var roomView = ReactDOM.render(<RoomView roomAddress=\"#alias:ser.ver\" />, parentDiv);","fix":{"range":[2234,2237],"text":"let"}}],"errorCount":9,"warningCount":18,"source":"var React = require('react');\nvar expect = require('expect');\nvar sinon = require('sinon');\nvar ReactDOM = require(\"react-dom\");\n\nvar sdk = require('matrix-react-sdk');\nvar RoomView = sdk.getComponent('structures.RoomView');\nvar peg = require('../../../src/MatrixClientPeg');\n\nvar test_utils = require('../../test-utils');\nvar q = require('q');\n\nvar Skinner = require(\"../../../src/Skinner\");\nvar stubComponent = require('../../components/stub-component.js');\n\ndescribe('RoomView', function () {\n    var sandbox;\n    var parentDiv;\n\n    beforeEach(function() {\n        test_utils.beforeEach(this);\n        sandbox = test_utils.stubClient();\n        parentDiv = document.createElement('div');\n\n        this.oldTimelinePanel = Skinner.getComponent('structures.TimelinePanel');\n        this.oldRoomHeader = Skinner.getComponent('views.rooms.RoomHeader');\n        Skinner.addComponent('structures.TimelinePanel', stubComponent());\n        Skinner.addComponent('views.rooms.RoomHeader', stubComponent());\n\n        peg.get().credentials = { userId: \"@test:example.com\" };\n    });\n\n    afterEach(function() {\n        sandbox.restore();\n\n        ReactDOM.unmountComponentAtNode(parentDiv);\n\n        Skinner.addComponent('structures.TimelinePanel', this.oldTimelinePanel);\n        Skinner.addComponent('views.rooms.RoomHeader', this.oldRoomHeader);\n    });\n\n    it('resolves a room alias to a room id', function (done) {\n        peg.get().getRoomIdForAlias.returns(q({room_id: \"!randomcharacters:aser.ver\"}));\n\n        var onRoomIdResolved = sinon.spy();\n\n        ReactDOM.render(<RoomView roomAddress=\"#alias:ser.ver\" onRoomIdResolved={onRoomIdResolved} />, parentDiv);\n\n        process.nextTick(function() {\n            // These expect()s don't read very well and don't give very good failure\n            // messages, but expect's toHaveBeenCalled only takes an expect spy object,\n            // not a sinon spy object.\n            expect(onRoomIdResolved.called).toExist();\n            done();\n        });\n    });\n\n    it('joins by alias if given an alias', function (done) {\n        peg.get().getRoomIdForAlias.returns(q({room_id: \"!randomcharacters:aser.ver\"}));\n        peg.get().getProfileInfo.returns(q({displayname: \"foo\"}));\n        var roomView = ReactDOM.render(<RoomView roomAddress=\"#alias:ser.ver\" />, parentDiv);\n\n        peg.get().joinRoom = function(x) {\n            expect(x).toEqual('#alias:ser.ver');\n            done();\n        };\n\n        process.nextTick(function() {\n            roomView.onJoinButtonClicked();\n        });\n    });\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/components/structures/ScrollPanel-test.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require(\"react-dom\");","fix":{"range":[592,595],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var ReactTestUtils = require('react-addons-test-utils');","fix":{"range":[629,632],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var expect = require('expect');","fix":{"range":[686,689],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var q = require('q');","fix":{"range":[718,721],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('matrix-react-sdk');","fix":{"range":[741,744],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var ScrollPanel = sdk.getComponent('structures.ScrollPanel');","fix":{"range":[781,784],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":1,"nodeType":"VariableDeclaration","source":"var test_utils = require('test-utils');","fix":{"range":[843,846],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'test_utils' is not in camel case.","line":26,"column":5,"nodeType":"Identifier","source":"var test_utils = require('test-utils');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var Tester = React.createClass({","fix":{"range":[884,887],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":46,"column":9,"nodeType":"VariableDeclaration","source":"        var dir = back ? 'b': 'f';","fix":{"range":[1369,1372],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":50,"column":9,"nodeType":"VariableDeclaration","source":"        var handler = this._fillHandlers[dir];","fix":{"range":[1481,1484],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":51,"column":9,"nodeType":"VariableDeclaration","source":"        var defer = this._fillDefers[dir];","fix":{"range":[1528,1531],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":57,"column":9,"nodeType":"VariableDeclaration","source":"        var res;","fix":{"range":[1695,1698],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":76,"column":9,"nodeType":"VariableDeclaration","source":"        var defer = q.defer();","fix":{"range":[2104,2107],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":82,"column":9,"nodeType":"VariableDeclaration","source":"        var st = ev.target.scrollTop;","fix":{"range":[2242,2245],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":86,"column":9,"nodeType":"VariableDeclaration","source":"        var d = this._scrollDefer;","fix":{"range":[2371,2374],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":127,"column":9,"nodeType":"VariableDeclaration","source":"        var tiles = this.state.tileKeys.map(this._mkTile);","fix":{"range":[3517,3520],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":140,"column":5,"nodeType":"VariableDeclaration","source":"    var parentDiv;","fix":{"range":[3903,3906],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":141,"column":5,"nodeType":"VariableDeclaration","source":"    var tester;","fix":{"range":[3922,3925],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":142,"column":5,"nodeType":"VariableDeclaration","source":"    var scrollingDiv;","fix":{"range":[3938,3941],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":145,"column":31,"nodeType":"ThisExpression","source":"        test_utils.beforeEach(this);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":176,"column":9,"nodeType":"VariableDeclaration","source":"        var events = [];","fix":{"range":[5037,5040],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":180,"column":18,"nodeType":"VariableDeclaration","source":"            for (var i = 0; i < 10; i++) {"},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":186,"column":60,"nodeType":"ExpressionStatement","source":"            expect(scrollingDiv.scrollHeight).toEqual(1550) // 10*150 + 50","fix":{"range":[5419,5419],"text":";"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":194,"column":17,"nodeType":"VariableDeclaration","source":"                var newEvents = [];","fix":{"range":[5751,5754],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":195,"column":22,"nodeType":"VariableDeclaration","source":"                for (var i = 0; i < 10; i++) {"},{"ruleId":"prefer-spread","severity":1,"message":"Use the spread operator instead of '.apply()'.","line":198,"column":17,"nodeType":"CallExpression","source":"                events.unshift.apply(events, newEvents);","fix":{"range":[5908,5933],"text":"(...newEvents)"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":224,"column":9,"nodeType":"VariableDeclaration","source":"        var events = [];","fix":{"range":[6851,6854],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":227,"column":18,"nodeType":"VariableDeclaration","source":"            for (var i = 0; i < 40; i++) {"},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":233,"column":60,"nodeType":"ExpressionStatement","source":"            expect(scrollingDiv.scrollHeight).toEqual(6050) // 40*150 + 50","fix":{"range":[7234,7234],"text":";"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":257,"column":18,"nodeType":"VariableDeclaration","source":"            for (var i = 100; i < 120; i++) {"}],"errorCount":3,"warningCount":29,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar ReactDOM = require(\"react-dom\");\nvar ReactTestUtils = require('react-addons-test-utils');\nvar expect = require('expect');\nvar q = require('q');\n\nvar sdk = require('matrix-react-sdk');\n\nvar ScrollPanel = sdk.getComponent('structures.ScrollPanel');\nvar test_utils = require('test-utils');\n\nvar Tester = React.createClass({\n    getInitialState: function() {\n        return {\n            tileKeys: [],\n        };\n    },\n\n    componentWillMount: function() {\n        this.fillCounts = {'b': 0, 'f': 0};\n        this._fillHandlers = {'b': null, 'f': null};\n        this._fillDefers = {'b': null, 'f': null};\n        this._scrollDefer = null;\n\n        // scrollTop at the last scroll event\n        this.lastScrollEvent = null;\n    },\n\n    _onFillRequest: function(back) {\n        var dir = back ? 'b': 'f';\n        console.log(\"FillRequest: \" + dir);\n        this.fillCounts[dir]++;\n\n        var handler = this._fillHandlers[dir];\n        var defer = this._fillDefers[dir];\n\n        // don't use the same handler twice\n        this._fillHandlers[dir] = null;\n        this._fillDefers[dir] = null;\n\n        var res;\n        if (handler) {\n            res = handler();\n        } else {\n            res = q(false);\n        }\n\n        if (defer) {\n            defer.resolve();\n        }\n        return res;\n    },\n\n    addFillHandler: function(dir, handler) {\n        this._fillHandlers[dir] = handler;\n    },\n\n    /* returns a promise which will resolve when the fill happens */\n    awaitFill: function(dir) {\n        var defer = q.defer();\n        this._fillDefers[dir] = defer;\n        return defer.promise;\n    },\n\n    _onScroll: function(ev) {\n        var st = ev.target.scrollTop;\n        console.log(\"Scroll event; scrollTop: \" + st);\n        this.lastScrollEvent = st;\n\n        var d = this._scrollDefer;\n        if (d) {\n            this._scrollDefer = null;\n            d.resolve();\n        }\n    },\n\n    /* returns a promise which will resolve when a scroll event happens */\n    awaitScroll: function() {\n        console.log(\"Awaiting scroll\");\n        this._scrollDefer = q.defer();\n        return this._scrollDefer.promise;\n    },\n\n    setTileKeys: function(keys) {\n        console.log(\"Updating keys: len=\" + keys.length);\n        this.setState({tileKeys: keys.slice()});\n    },\n\n    scrollPanel: function() {\n        return this.refs.sp;\n    },\n\n    _mkTile: function(key) {\n        // each tile is 150 pixels high:\n        // 98 pixels of body\n        // 2 pixels of border\n        // 50 pixels of margin\n        //\n        // there is an extra 50 pixels of margin at the bottom.\n        return (\n            <li key={key} data-scroll-token={key}>\n                <div style={{height: '98px', margin: '50px', border: '1px solid black',\n                             backgroundColor: '#fff8dc' }}>\n                   {key}\n                </div>\n             </li>\n         );\n    },\n\n    render: function() {\n        var tiles = this.state.tileKeys.map(this._mkTile);\n        console.log(\"rendering with \" + tiles.length + \" tiles\");\n        return (\n            <ScrollPanel ref=\"sp\"\n                onScroll={ this._onScroll }\n                onFillRequest={ this._onFillRequest }>\n                    {tiles}\n            </ScrollPanel>\n        );\n    },\n});\n\ndescribe('ScrollPanel', function() {\n    var parentDiv;\n    var tester;\n    var scrollingDiv;\n\n    beforeEach(function(done) {\n        test_utils.beforeEach(this);\n\n        // create a div of a useful size to put our panel in, and attach it to\n        // the document so that we can interact with it properly.\n        parentDiv = document.createElement('div');\n        parentDiv.style.width = '800px';\n        parentDiv.style.height = '600px';\n        parentDiv.style.overflow = 'hidden';\n        document.body.appendChild(parentDiv);\n\n        tester = ReactDOM.render(<Tester/>, parentDiv);\n        expect(tester.fillCounts.b).toEqual(1);\n        expect(tester.fillCounts.f).toEqual(1);\n\n        scrollingDiv = ReactTestUtils.findRenderedDOMComponentWithClass(\n            tester, \"gm-scroll-view\");\n\n        // wait for a browser tick to let the initial paginates complete\n        setTimeout(function() {\n            done();\n        }, 0);\n    });\n\n    afterEach(function() {\n        if (parentDiv) {\n            document.body.removeChild(parentDiv);\n            parentDiv = null;\n        }\n    });\n\n    it('should handle scrollEvent strangeness', function(done) {\n        var events = [];\n\n        q().then(() => {\n            // initialise with a few events\n            for (var i = 0; i < 10; i++) {\n                events.push(i+90);\n            }\n            tester.setTileKeys(events);\n            expect(tester.fillCounts.b).toEqual(1);\n            expect(tester.fillCounts.f).toEqual(2);\n            expect(scrollingDiv.scrollHeight).toEqual(1550) // 10*150 + 50\n            expect(scrollingDiv.scrollTop).toEqual(1550 - 600);\n            return tester.awaitScroll();\n        }).then(() => {\n            expect(tester.lastScrollEvent).toBe(950);\n\n            // we want to simulate back-filling as we scroll up\n            tester.addFillHandler('b', function() {\n                var newEvents = [];\n                for (var i = 0; i < 10; i++) {\n                    newEvents.push(i+80);\n                }\n                events.unshift.apply(events, newEvents);\n                tester.setTileKeys(events);\n                return q(true);\n            });\n\n            // simulate scrolling up; this should trigger the backfill\n            scrollingDiv.scrollTop = 200;\n\n            return tester.awaitFill('b');\n        }).then(() => {\n            console.log('filled');\n\n            // at this point, ScrollPanel will have updated scrollTop, but\n            // the event hasn't fired. Stamp over the scrollTop.\n            expect(tester.lastScrollEvent).toEqual(200);\n            expect(scrollingDiv.scrollTop).toEqual(10*150 + 200);\n            scrollingDiv.scrollTop = 500;\n\n            return tester.awaitScroll();\n        }).then(() => {\n            expect(tester.lastScrollEvent).toBe(10*150 + 200);\n            expect(scrollingDiv.scrollTop).toEqual(10*150 + 200);\n        }).done(done);\n    });\n\n    it('should not get stuck in #528 workaround', function(done) {\n        var events = [];\n        q().then(() => {\n            // initialise with a bunch of events\n            for (var i = 0; i < 40; i++) {\n                events.push(i);\n            }\n            tester.setTileKeys(events);\n            expect(tester.fillCounts.b).toEqual(1);\n            expect(tester.fillCounts.f).toEqual(2);\n            expect(scrollingDiv.scrollHeight).toEqual(6050) // 40*150 + 50\n            expect(scrollingDiv.scrollTop).toEqual(6050 - 600);\n\n            // try to scroll up, to a non-integer offset.\n            tester.scrollPanel().scrollToToken(\"30\", -101/3);\n\n            expect(scrollingDiv.scrollTop).toEqual(4616); // 31*150 - 34\n\n            // wait for the scroll event to land\n            return tester.awaitScroll(); // fails\n        }).then(() => {\n            expect(tester.lastScrollEvent).toEqual(4616);\n\n            // Now one more event; this will make it reset the scroll, but\n            // because the delta will be less than 1, will not trigger a\n            // scroll event, this leaving recentEventScroll defined.\n            console.log(\"Adding event 50\");\n            events.push(50);\n            tester.setTileKeys(events);\n\n            // wait for the scrollpanel to stop trying to paginate\n        }).then(() => {\n            // Now, simulate hitting \"scroll to bottom\".\n            events = [];\n            for (var i = 100; i < 120; i++) {\n                events.push(i);\n            }\n            tester.setTileKeys(events);\n            tester.scrollPanel().scrollToBottom();\n\n            // wait for the scroll event to land\n            return tester.awaitScroll(); // fails\n        }).then(() => {\n            expect(scrollingDiv.scrollTop).toEqual(20*150 + 50 - 600);\n\n            // simulate a user-initiated scroll on the div\n            scrollingDiv.scrollTop = 1200;\n            return tester.awaitScroll();\n        }).then(() => {\n            expect(scrollingDiv.scrollTop).toEqual(1200);\n        }).done(done);\n    });\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/components/structures/TimelinePanel-test.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var ReactDOM = require('react-dom');","fix":{"range":[592,595],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var ReactTestUtils = require('react-addons-test-utils');","fix":{"range":[629,632],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","source":"var expect = require('expect');","fix":{"range":[686,689],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var q = require('q');","fix":{"range":[718,721],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","source":"var sinon = require('sinon');","fix":{"range":[740,743],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","source":"var jssdk = require('matrix-js-sdk');","fix":{"range":[771,774],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","source":"var EventTimeline = jssdk.EventTimeline;","fix":{"range":[809,812],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":27,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require('matrix-react-sdk');","fix":{"range":[851,854],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","source":"var TimelinePanel = sdk.getComponent('structures.TimelinePanel');","fix":{"range":[890,893],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","source":"var peg = require('../../../src/MatrixClientPeg');","fix":{"range":[956,959],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":31,"column":1,"nodeType":"VariableDeclaration","source":"var test_utils = require('test-utils');","fix":{"range":[1008,1011],"text":"let"}},{"ruleId":"camelcase","severity":1,"message":"Identifier 'test_utils' is not in camel case.","line":31,"column":5,"nodeType":"Identifier","source":"var test_utils = require('test-utils');"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":33,"column":1,"nodeType":"VariableDeclaration","source":"var ROOM_ID = '!room:localhost';","fix":{"range":[1049,1052],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":1,"nodeType":"VariableDeclaration","source":"var USER_ID = '@me:localhost';","fix":{"range":[1082,1085],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":55,"column":5,"nodeType":"VariableDeclaration","source":"    var sandbox;","fix":{"range":[1579,1582],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":56,"column":5,"nodeType":"VariableDeclaration","source":"    var timelineSet;","fix":{"range":[1596,1599],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":57,"column":5,"nodeType":"VariableDeclaration","source":"    var room;","fix":{"range":[1617,1620],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":58,"column":5,"nodeType":"VariableDeclaration","source":"    var client;","fix":{"range":[1631,1634],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":59,"column":5,"nodeType":"VariableDeclaration","source":"    var timeline;","fix":{"range":[1647,1650],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":60,"column":5,"nodeType":"VariableDeclaration","source":"    var parentDiv;","fix":{"range":[1665,1668],"text":"let"}},{"ruleId":"rest-spread-spacing","severity":2,"message":"Unexpected whitespace after spread property operator.","line":71,"column":20,"nodeType":"ExperimentalSpreadProperty","source":"                ... opts,","fix":{"range":[2143,2144],"text":""}},{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":78,"column":6,"nodeType":"EmptyStatement","source":"    };","fix":{"range":[2334,2335],"text":""}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":81,"column":31,"nodeType":"ThisExpression","source":"        test_utils.beforeEach(this);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":120,"column":9,"nodeType":"VariableDeclaration","source":"        var N_EVENTS = 30;","fix":{"range":[3690,3693],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":121,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < N_EVENTS; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":125,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollDefer;","fix":{"range":[3818,3821],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":126,"column":9,"nodeType":"VariableDeclaration","source":"        var rendered = ReactDOM.render(","fix":{"range":[3843,3846],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 127 exceeds the maximum line length of 90.","line":127,"column":1,"nodeType":"Program","source":"                <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":127,"column":65,"nodeType":"JSXAttribute","source":"                <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}"},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":127,"column":103,"nodeType":"ExpressionStatement","source":"                <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}","fix":{"range":[3977,3977],"text":";"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":131,"column":9,"nodeType":"VariableDeclaration","source":"        var panel = rendered.refs.panel;","fix":{"range":[4046,4049],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":132,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollingDiv = ReactTestUtils.findRenderedDOMComponentWithClass(","fix":{"range":[4087,4090],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":137,"column":9,"nodeType":"VariableDeclaration","source":"        var awaitPaginationCompletion = function() {"},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":138,"column":13,"nodeType":"IfStatement","source":"            if(!panel.state.forwardPaginating)","fix":{"range":[4424,4435],"text":"{return q();}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'else'.","line":140,"column":13,"nodeType":"IfStatement","source":"            else","fix":{"range":[4469,4519],"text":"{return q.delay(0).then(awaitPaginationCompletion);}"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":146,"column":9,"nodeType":"VariableDeclaration","source":"        var awaitScroll = function() {","fix":{"range":[4665,4668],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":174,"column":13,"nodeType":"VariableDeclaration","source":"            var ev = mkMessage(N_EVENTS+1);","fix":{"range":[5756,5759],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":197,"column":9,"nodeType":"VariableDeclaration","source":"        var d = Date.now();","fix":{"range":[6678,6681],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'d' is assigned a value but never used.","line":197,"column":13,"nodeType":"Identifier","source":"        var d = Date.now();"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":198,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < 3; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":210,"column":9,"nodeType":"VariableDeclaration","source":"        var rendered = ReactDOM.render(","fix":{"range":[7140,7143],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":212,"column":22,"nodeType":"Identifier","source":"            parentDiv","fix":{"range":[7256,7256],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":214,"column":9,"nodeType":"VariableDeclaration","source":"        var panel = rendered.refs.panel;","fix":{"range":[7276,7279],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":216,"column":9,"nodeType":"VariableDeclaration","source":"        var messagePanel = ReactTestUtils.findRenderedComponentWithType(","fix":{"range":[7318,7321],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 241 exceeds the maximum line length of 90.","line":241,"column":1,"nodeType":"Program","source":"    it(\"should let you scroll down to the bottom after you've scrolled up\", function(done) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":242,"column":9,"nodeType":"VariableDeclaration","source":"        var N_EVENTS = 120; // the number of events to simulate being added to the timeline","fix":{"range":[8478,8481],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":245,"column":9,"nodeType":"ThisExpression","source":"        this.timeout(N_EVENTS * 50);"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":252,"column":14,"nodeType":"VariableDeclaration","source":"        for (var i = 0; i < N_EVENTS; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":257,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollDefer;","fix":{"range":[9032,9035],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":258,"column":9,"nodeType":"VariableDeclaration","source":"        var rendered = ReactDOM.render(","fix":{"range":[9057,9060],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 259 exceeds the maximum line length of 90.","line":259,"column":1,"nodeType":"Program","source":"            <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}/>,"},{"ruleId":"react/jsx-no-bind","severity":2,"message":"JSX props should not use arrow functions","line":259,"column":61,"nodeType":"JSXAttribute","source":"            <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}/>,"},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":259,"column":99,"nodeType":"ExpressionStatement","source":"            <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}/>,","fix":{"range":[9187,9187],"text":";"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":260,"column":22,"nodeType":"Identifier","source":"            parentDiv","fix":{"range":[9214,9214],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":263,"column":9,"nodeType":"VariableDeclaration","source":"        var panel = rendered.refs.panel;","fix":{"range":[9281,9284],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":264,"column":9,"nodeType":"VariableDeclaration","source":"        var messagePanel = ReactTestUtils.findRenderedComponentWithType(","fix":{"range":[9322,9325],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":266,"column":9,"nodeType":"VariableDeclaration","source":"        var scrollingDiv = ReactTestUtils.findRenderedDOMComponentWithClass(","fix":{"range":[9460,9463],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":271,"column":9,"nodeType":"VariableDeclaration","source":"        var awaitScroll = function() {","fix":{"range":[9701,9704],"text":"let"}},{"ruleId":"prefer-const","severity":1,"message":"'eventTiles' is never reassigned. Use 'const' instead.","line":292,"column":21,"nodeType":"Identifier","source":"                let eventTiles = scryEventTiles(panel);","fix":{"range":[10483,10486],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'firstEvent' is never reassigned. Use 'const' instead.","line":293,"column":21,"nodeType":"Identifier","source":"                let firstEvent = eventTiles[0].props.mxEvent;","fix":{"range":[10539,10542],"text":"const"}},{"ruleId":"padded-blocks","severity":1,"message":"Block must not be padded by blank lines.","line":311,"column":54,"nodeType":"BlockStatement","source":"            return awaitScroll().delay(0).then(() => {","fix":{"range":[11319,11321],"text":"\n"}},{"ruleId":"prefer-const","severity":1,"message":"'eventTiles' is never reassigned. Use 'const' instead.","line":313,"column":21,"nodeType":"Identifier","source":"                let eventTiles = scryEventTiles(panel);","fix":{"range":[11337,11340],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'events' is never reassigned. Use 'const' instead.","line":314,"column":21,"nodeType":"Identifier","source":"                let events = timeline.getEvents();","fix":{"range":[11393,11396],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'lastEventInPanel' is never reassigned. Use 'const' instead.","line":316,"column":21,"nodeType":"Identifier","source":"                let lastEventInPanel = eventTiles[eventTiles.length - 1].props.mxEvent;","fix":{"range":[11445,11448],"text":"const"}},{"ruleId":"prefer-const","severity":1,"message":"'lastEventInTimeline' is never reassigned. Use 'const' instead.","line":317,"column":21,"nodeType":"Identifier","source":"                let lastEventInTimeline = events[events.length - 1];","fix":{"range":[11533,11536],"text":"const"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":341,"column":13,"nodeType":"VariableDeclaration","source":"            var events = scryEventTiles(panel);","fix":{"range":[12568,12571],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":354,"column":13,"nodeType":"VariableDeclaration","source":"            var events = scryEventTiles(panel);","fix":{"range":[13181,13184],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":357,"column":13,"nodeType":"VariableDeclaration","source":"            var lastEventInPanel = events[events.length - 1].props.mxEvent;","fix":{"range":[13292,13295],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 358 exceeds the maximum line length of 90.","line":358,"column":1,"nodeType":"Program","source":"            var lastEventInTimeline = timeline.getEvents()[timeline.getEvents().length - 1];"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":358,"column":13,"nodeType":"VariableDeclaration","source":"            var lastEventInTimeline = timeline.getEvents()[timeline.getEvents().length - 1];","fix":{"range":[13368,13371],"text":"let"}}],"errorCount":13,"warningCount":58,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar ReactTestUtils = require('react-addons-test-utils');\nvar expect = require('expect');\nvar q = require('q');\nvar sinon = require('sinon');\n\nvar jssdk = require('matrix-js-sdk');\nvar EventTimeline = jssdk.EventTimeline;\n\nvar sdk = require('matrix-react-sdk');\nvar TimelinePanel = sdk.getComponent('structures.TimelinePanel');\nvar peg = require('../../../src/MatrixClientPeg');\n\nvar test_utils = require('test-utils');\n\nvar ROOM_ID = '!room:localhost';\nvar USER_ID = '@me:localhost';\n\n// wrap TimelinePanel with a component which provides the MatrixClient in the context.\nconst WrappedTimelinePanel = React.createClass({\n    childContextTypes: {\n        matrixClient: React.PropTypes.object,\n    },\n\n    getChildContext: function() {\n        return {\n            matrixClient: peg.get(),\n        };\n    },\n\n    render: function() {\n        return <TimelinePanel ref=\"panel\" {...this.props} />;\n    },\n});\n\n\ndescribe('TimelinePanel', function() {\n    var sandbox;\n    var timelineSet;\n    var room;\n    var client;\n    var timeline;\n    var parentDiv;\n\n    // make a dummy message. eventNum is put in the message text to help\n    // identification during debugging, and also in the timestamp so that we\n    // don't get lots of events with the same timestamp.\n    function mkMessage(eventNum, opts) {\n        return test_utils.mkMessage(\n            {\n                event: true, room: ROOM_ID, user: USER_ID,\n                ts: Date.now() + eventNum,\n                msg: \"Event \" + eventNum,\n                ... opts,\n            });\n    }\n\n    function scryEventTiles(panel) {\n        return ReactTestUtils.scryRenderedComponentsWithType(\n            panel, sdk.getComponent('rooms.EventTile'));\n    };\n\n    beforeEach(function() {\n        test_utils.beforeEach(this);\n        sandbox = test_utils.stubClient(sandbox);\n\n        room = sinon.createStubInstance(jssdk.Room);\n        room.roomId = ROOM_ID;\n\n        timelineSet = sinon.createStubInstance(jssdk.EventTimelineSet);\n        timelineSet.getPendingEvents.returns([]);\n        timelineSet.room = room;\n\n        timeline = new jssdk.EventTimeline(timelineSet);\n\n        timelineSet.getLiveTimeline.returns(timeline);\n\n        client = peg.get();\n        client.credentials = {userId: USER_ID};\n\n        // create a div of a useful size to put our panel in, and attach it to\n        // the document so that we can interact with it properly.\n        parentDiv = document.createElement('div');\n        parentDiv.style.width = '800px';\n        parentDiv.style.height = '600px';\n        parentDiv.style.overflow = 'hidden';\n        document.body.appendChild(parentDiv);\n    });\n\n    afterEach(function() {\n        if (parentDiv) {\n            ReactDOM.unmountComponentAtNode(parentDiv);\n            parentDiv.remove();\n            parentDiv = null;\n        }\n        sandbox.restore();\n    });\n\n    it('should load new events even if you are scrolled up', function(done) {\n        // this is https://github.com/vector-im/vector-web/issues/1367\n\n        // enough events to allow us to scroll back\n        var N_EVENTS = 30;\n        for (var i = 0; i < N_EVENTS; i++) {\n            timeline.addEvent(mkMessage(i));\n        }\n\n        var scrollDefer;\n        var rendered = ReactDOM.render(\n                <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}\n                />,\n                parentDiv,\n        );\n        var panel = rendered.refs.panel;\n        var scrollingDiv = ReactTestUtils.findRenderedDOMComponentWithClass(\n            panel, \"gm-scroll-view\");\n\n        // helper function which will return a promise which resolves when the\n        // panel isn't paginating\n        var awaitPaginationCompletion = function() {\n            if(!panel.state.forwardPaginating)\n                return q();\n            else\n                return q.delay(0).then(awaitPaginationCompletion);\n        };\n\n        // helper function which will return a promise which resolves when\n        // the TimelinePanel fires a scroll event\n        var awaitScroll = function() {\n            scrollDefer = q.defer();\n            return scrollDefer.promise;\n        };\n\n        // wait for the panel to load - we'll get a scroll event once it\n        // happens\n        awaitScroll().then(() => {\n            expect(panel.state.canBackPaginate).toBe(false);\n            expect(scryEventTiles(panel).length).toEqual(N_EVENTS);\n\n            // scroll up\n            console.log(\"setting scrollTop = 0\");\n            scrollingDiv.scrollTop = 0;\n\n            // wait for the scroll event to land\n        }).then(awaitScroll).then(() => {\n            // there should be no pagination going on now\n            expect(panel.state.backPaginating).toBe(false);\n            expect(panel.state.forwardPaginating).toBe(false);\n            expect(panel.state.canBackPaginate).toBe(false);\n            expect(panel.state.canForwardPaginate).toBe(false);\n            expect(panel.isAtEndOfLiveTimeline()).toBe(false);\n            expect(scrollingDiv.scrollTop).toEqual(0);\n\n            console.log(\"adding event\");\n\n            // a new event!\n            var ev = mkMessage(N_EVENTS+1);\n            timeline.addEvent(ev);\n            panel.onRoomTimeline(ev, room, false, false, {\n                liveEvent: true,\n                timeline: timeline,\n            });\n\n            // that won't make much difference, because we don't paginate\n            // unless we're at the bottom of the timeline, but a scroll event\n            // should be enough to set off a pagination.\n            expect(scryEventTiles(panel).length).toEqual(N_EVENTS);\n\n            scrollingDiv.scrollTop = 10;\n\n            return awaitScroll();\n        }).then(awaitPaginationCompletion).then(() => {\n            expect(scryEventTiles(panel).length).toEqual(N_EVENTS+1);\n        }).done(done, done);\n    });\n\n    it('should not paginate forever if there are no events', function(done) {\n        // start with a handful of events in the timeline, as would happen when\n        // joining a room\n        var d = Date.now();\n        for (var i = 0; i < 3; i++) {\n            timeline.addEvent(mkMessage(i));\n        }\n        timeline.setPaginationToken('tok', EventTimeline.BACKWARDS);\n\n        // back-pagination returns a promise for true, but adds no events\n        client.paginateEventTimeline = sinon.spy((tl, opts) => {\n            console.log(\"paginate:\", opts);\n            expect(opts.backwards).toBe(true);\n            return q(true);\n        });\n\n        var rendered = ReactDOM.render(\n            <WrappedTimelinePanel timelineSet={timelineSet}/>,\n            parentDiv\n        );\n        var panel = rendered.refs.panel;\n\n        var messagePanel = ReactTestUtils.findRenderedComponentWithType(\n            panel, sdk.getComponent('structures.MessagePanel'));\n\n        expect(messagePanel.props.backPaginating).toBe(true);\n\n        // let the first round of pagination finish off\n        setTimeout(() => {\n            // at this point, the timeline window should have tried to paginate\n            // 5 times, and we should have given up paginating\n            expect(client.paginateEventTimeline.callCount).toEqual(5);\n            expect(messagePanel.props.backPaginating).toBe(false);\n            expect(messagePanel.props.suppressFirstDateSeparator).toBe(false);\n\n            // now, if we update the events, there shouldn't be any\n            // more requests.\n            client.paginateEventTimeline.reset();\n            panel.forceUpdate();\n            expect(messagePanel.props.backPaginating).toBe(false);\n            setTimeout(() => {\n                expect(client.paginateEventTimeline.callCount).toEqual(0);\n                done();\n            }, 0);\n        }, 0);\n    });\n\n    it(\"should let you scroll down to the bottom after you've scrolled up\", function(done) {\n        var N_EVENTS = 120; // the number of events to simulate being added to the timeline\n\n        // sadly, loading all those events takes a while\n        this.timeout(N_EVENTS * 50);\n\n        // client.getRoom is called a /lot/ in this test, so replace\n        // sinon's spy with a fast noop.\n        client.getRoom = function(id) { return null; };\n\n        // fill the timeline with lots of events\n        for (var i = 0; i < N_EVENTS; i++) {\n            timeline.addEvent(mkMessage(i));\n        }\n        console.log(\"added events to timeline\");\n\n        var scrollDefer;\n        var rendered = ReactDOM.render(\n            <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}/>,\n            parentDiv\n        );\n        console.log(\"TimelinePanel rendered\");\n        var panel = rendered.refs.panel;\n        var messagePanel = ReactTestUtils.findRenderedComponentWithType(\n            panel, sdk.getComponent('structures.MessagePanel'));\n        var scrollingDiv = ReactTestUtils.findRenderedDOMComponentWithClass(\n            panel, \"gm-scroll-view\");\n\n        // helper function which will return a promise which resolves when\n        // the TimelinePanel fires a scroll event\n        var awaitScroll = function() {\n            scrollDefer = q.defer();\n\n            return scrollDefer.promise.then(() => {\n                console.log(\"got scroll event; scrollTop now \" +\n                            scrollingDiv.scrollTop);\n            });\n        };\n\n        function setScrollTop(scrollTop) {\n            const before = scrollingDiv.scrollTop;\n            scrollingDiv.scrollTop = scrollTop;\n            console.log(\"setScrollTop: before update: \" + before +\n                        \"; assigned: \" + scrollTop +\n                        \"; after update: \" + scrollingDiv.scrollTop);\n        }\n\n        function backPaginate() {\n            console.log(\"back paginating...\");\n            setScrollTop(0);\n            return awaitScroll().then(() => {\n                let eventTiles = scryEventTiles(panel);\n                let firstEvent = eventTiles[0].props.mxEvent;\n\n                console.log(\"TimelinePanel contains \" + eventTiles.length +\n                            \" events; first is \" +\n                            firstEvent.getContent().body);\n\n                if(scrollingDiv.scrollTop > 0) {\n                    // need to go further\n                    return backPaginate();\n                }\n                console.log(\"paginated to start.\");\n            });\n        }\n\n        function scrollDown() {\n            // Scroll the bottom of the viewport to the bottom of the panel\n            setScrollTop(scrollingDiv.scrollHeight - scrollingDiv.clientHeight);\n            console.log(\"scrolling down... \" + scrollingDiv.scrollTop);\n            return awaitScroll().delay(0).then(() => {\n\n                let eventTiles = scryEventTiles(panel);\n                let events = timeline.getEvents();\n\n                let lastEventInPanel = eventTiles[eventTiles.length - 1].props.mxEvent;\n                let lastEventInTimeline = events[events.length - 1];\n\n                // Scroll until the last event in the panel = the last event in the timeline\n                if(lastEventInPanel.getId() !== lastEventInTimeline.getId()) {\n                    // need to go further\n                    return scrollDown();\n                }\n                console.log(\"paginated to end.\");\n            });\n        }\n\n        // let the first round of pagination finish off\n        awaitScroll().then(() => {\n            // we should now have loaded the first few events\n            expect(messagePanel.props.backPaginating).toBe(false);\n            expect(messagePanel.props.suppressFirstDateSeparator).toBe(true);\n\n            // back-paginate until we hit the start\n            return backPaginate();\n        }).then(() => {\n            // hopefully, we got to the start of the timeline\n            expect(messagePanel.props.backPaginating).toBe(false);\n\n            expect(messagePanel.props.suppressFirstDateSeparator).toBe(false);\n            var events = scryEventTiles(panel);\n            expect(events[0].props.mxEvent).toBe(timeline.getEvents()[0]);\n\n            // At this point, we make no assumption that unpagination has happened. This doesn't\n            // mean that we shouldn't be able to scroll all the way down to the bottom to see the\n            // most recent event in the timeline.\n\n            // scroll all the way to the bottom\n            return scrollDown();\n        }).then(() => {\n            expect(messagePanel.props.backPaginating).toBe(false);\n            expect(messagePanel.props.forwardPaginating).toBe(false);\n\n            var events = scryEventTiles(panel);\n\n            // Expect to be able to see the most recent event\n            var lastEventInPanel = events[events.length - 1].props.mxEvent;\n            var lastEventInTimeline = timeline.getEvents()[timeline.getEvents().length - 1];\n            expect(lastEventInPanel.getContent()).toBe(lastEventInTimeline.getContent());\n\n            console.log(\"done\");\n        }).done(done, done);\n    });\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/components/stub-component.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":5,"column":1,"nodeType":"VariableDeclaration","source":"var React = require('react');","fix":{"range":[97,100],"text":"let"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":16,"column":10,"nodeType":"ExpressionStatement","source":"        }","fix":{"range":[383,383],"text":";"}}],"errorCount":1,"warningCount":1,"source":"/* A dummy React component which we use for stubbing out app-level components\n */\n'use strict';\n\nvar React = require('react');\n\nmodule.exports = function(opts) {\n    opts = opts || {};\n    if (!opts.displayName) {\n        opts.displayName = 'StubComponent';\n    }\n\n    if (!opts.render) {\n        opts.render = function() {\n            return <div>{this.displayName}</div>;\n        }\n    }\n\n    return React.createClass(opts);\n};\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/components/views/dialogs/InteractiveAuthDialog-test.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":19,"column":8,"nodeType":"Identifier","source":"import React from 'react';"},{"ruleId":"camelcase","severity":1,"message":"Identifier 'test_utils' is not in camel case.","line":27,"column":13,"nodeType":"Identifier","source":"import * as test_utils from '../../../test-utils';"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":30,"column":42,"nodeType":"Literal","source":"    'views.dialogs.InteractiveAuthDialog'","fix":{"range":[978,978],"text":","}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":33,"column":43,"nodeType":"FunctionExpression","source":"describe('InteractiveAuthDialog', function () {","fix":{"range":[1025,1026],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":5,"nodeType":"VariableDeclaration","source":"    var parentDiv;","fix":{"range":[1035,1038],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":35,"column":5,"nodeType":"VariableDeclaration","source":"    var sandbox;","fix":{"range":[1054,1057],"text":"let"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":38,"column":31,"nodeType":"ThisExpression","source":"        test_utils.beforeEach(this);"},{"ruleId":"key-spacing","severity":1,"message":"Missing space before value for key 'a'.","line":52,"column":53,"nodeType":"Literal","source":"        const doRequest = sinon.stub().returns(q({a:1}));","fix":{"range":[1596,1596],"text":" "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":55,"column":9,"nodeType":"VariableDeclaration","source":"        var client = MatrixClientPeg.get();","fix":{"range":[1673,1676],"text":"let"}},{"ruleId":"key-spacing","severity":1,"message":"Missing space before value for key 'stages'.","line":63,"column":35,"nodeType":"ArrayExpression","source":"                        {\"stages\":[\"m.login.password\"]}","fix":{"range":[1961,1961],"text":" "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":63,"column":56,"nodeType":"ObjectExpression","source":"                        {\"stages\":[\"m.login.password\"]}","fix":{"range":[1982,1982],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":64,"column":22,"nodeType":"Property","source":"                    ]","fix":{"range":[2004,2004],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":72,"column":25,"nodeType":"Literal","source":"            dlg, \"input\"","fix":{"range":[2290,2290],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":78,"column":37,"nodeType":"Literal","source":"            dlg, \"mx_Dialog_primary\"","fix":{"range":[2508,2508],"text":","}},{"ruleId":"key-spacing","severity":1,"message":"Missing space before value for key 'a'.","line":105,"column":58,"nodeType":"Literal","source":"            expect(onFinished.calledWithExactly(true, {a:1})).toBe(true);","fix":{"range":[3477,3477],"text":" "}}],"errorCount":8,"warningCount":7,"source":"/*\nCopyright 2016 OpenMarket Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport expect from 'expect';\nimport q from 'q';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactTestUtils from 'react-addons-test-utils';\nimport sinon from 'sinon';\n\nimport sdk from 'matrix-react-sdk';\nimport MatrixClientPeg from 'MatrixClientPeg';\n\nimport * as test_utils from '../../../test-utils';\n\nconst InteractiveAuthDialog = sdk.getComponent(\n    'views.dialogs.InteractiveAuthDialog'\n);\n\ndescribe('InteractiveAuthDialog', function () {\n    var parentDiv;\n    var sandbox;\n\n    beforeEach(function() {\n        test_utils.beforeEach(this);\n        sandbox = test_utils.stubClient(sandbox);\n        parentDiv = document.createElement('div');\n        document.body.appendChild(parentDiv);\n    });\n\n    afterEach(function() {\n        ReactDOM.unmountComponentAtNode(parentDiv);\n        parentDiv.remove();\n        sandbox.restore();\n    });\n\n    it('Should successfully complete a password flow', function(done) {\n        const onFinished = sinon.spy();\n        const doRequest = sinon.stub().returns(q({a:1}));\n\n        // tell the stub matrixclient to return a real userid\n        var client = MatrixClientPeg.get();\n        client.credentials = {userId: \"@user:id\"};\n\n        const dlg = ReactDOM.render(\n            <InteractiveAuthDialog\n                authData={{\n                    session: \"sess\",\n                    flows: [\n                        {\"stages\":[\"m.login.password\"]}\n                    ]\n                }}\n                makeRequest={doRequest}\n                onFinished={onFinished}\n            />, parentDiv);\n\n        // at this point there should be a password box\n        const passwordNode = ReactTestUtils.findRenderedDOMComponentWithTag(\n            dlg, \"input\"\n        );\n        expect(passwordNode.type).toEqual(\"password\");\n\n        // submit should be disabled\n        const submitNode = ReactTestUtils.findRenderedDOMComponentWithClass(\n            dlg, \"mx_Dialog_primary\"\n        );\n        expect(submitNode.disabled).toBe(true);\n\n        // put something in the password box, and hit enter; that should\n        // trigger a request\n        passwordNode.value = \"s3kr3t\";\n        ReactTestUtils.Simulate.change(passwordNode);\n        expect(submitNode.disabled).toBe(false);\n        ReactTestUtils.Simulate.keyDown(passwordNode, {\n            key: \"Enter\", keyCode: 13, which: 13,\n        });\n\n        expect(doRequest.callCount).toEqual(1);\n        expect(doRequest.calledWithExactly({\n            session: \"sess\",\n            type: \"m.login.password\",\n            password: \"s3kr3t\",\n            user: \"@user:id\",\n        })).toBe(true);\n\n        // the submit button should now be disabled (and be a spinner)\n        expect(submitNode.disabled).toBe(true);\n\n        // let the request complete\n        q.delay(1).then(() => {\n            expect(onFinished.callCount).toEqual(1);\n            expect(onFinished.calledWithExactly(true, {a:1})).toBe(true);\n        }).done(done, done);\n    });\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/components/views/elements/MemberEventListSummary-test.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is assigned a value but never used.","line":2,"column":7,"nodeType":"Identifier","source":"const React = require('react');"},{"ruleId":"no-unused-vars","severity":2,"message":"'ReactDOM' is assigned a value but never used.","line":3,"column":7,"nodeType":"Identifier","source":"const ReactDOM = require(\"react-dom\");"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":86,"column":30,"nodeType":"ThisExpression","source":"        testUtils.beforeEach(this);"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":155,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[5916,5916],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":158,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[6059,6059],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":191,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[7879,7879],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":194,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[8022,8022],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":239,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[10283,10283],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":242,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[10426,10426],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":247,"column":75,"nodeType":"Literal","source":"            \"user_1 was unbanned, joined and left 7 times and was invited\"","fix":{"range":[10594,10594],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":292,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[12602,12602],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":295,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[12745,12745],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":301,"column":54,"nodeType":"BinaryExpression","source":"            \"joined and left 3 times and was invited\"","fix":{"range":[12967,12967],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":351,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[15040,15040],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":354,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[15183,15183],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":359,"column":88,"nodeType":"Literal","source":"            \"user_1 and 1 other were unbanned, joined and left 2 times and were banned\"","fix":{"range":[15364,15364],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":389,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[16426,16426],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":392,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[16569,16569],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":397,"column":90,"nodeType":"Literal","source":"            \"user_0 and 19 others were unbanned, joined and left 2 times and were banned\"","fix":{"range":[16752,16752],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":440,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[18585,18585],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":443,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[18728,18728],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":449,"column":53,"nodeType":"BinaryExpression","source":"            \"joined and left 2 times and was banned\"","fix":{"range":[18961,18961],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":507,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[20908,20908],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":510,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[21051,21051],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":516,"column":80,"nodeType":"BinaryExpression","source":"            \"had their invitation withdrawn, was unbanned, was kicked and left\"","fix":{"range":[21314,21314],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":554,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[22520,22520],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":557,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[22663,22663],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":563,"column":46,"nodeType":"BinaryExpression","source":"            \"had their invitations withdrawn\"","fix":{"range":[22869,22869],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":590,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[23690,23690],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":593,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[23833,23833],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":598,"column":56,"nodeType":"Literal","source":"            \"user_1 rejected their invitations 2 times\"","fix":{"range":[23982,23982],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":618,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[24692,24692],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":621,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[24835,24835],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":626,"column":47,"nodeType":"Literal","source":"            \"user_1 and user_2 joined 2 times\"","fix":{"range":[24975,24975],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":645,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[25618,25618],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":648,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[25761,25761],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":653,"column":48,"nodeType":"Literal","source":"            \"user_1, user_2 and 1 other joined\"","fix":{"range":[25902,25902],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":670,"column":50,"nodeType":"JSXElement","source":"            <MemberEventListSummary {...props} />","fix":{"range":[26423,26423],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":673,"column":58,"nodeType":"Literal","source":"            instance, \"mx_MemberEventListSummary_summary\"","fix":{"range":[26566,26566],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":678,"column":50,"nodeType":"Literal","source":"            \"user_0, user_1 and 18 others joined\"","fix":{"range":[26709,26709],"text":","}}],"errorCount":40,"warningCount":0,"source":"const expect = require('expect');\nconst React = require('react');\nconst ReactDOM = require(\"react-dom\");\nconst ReactTestUtils = require('react-addons-test-utils');\nconst sdk = require('matrix-react-sdk');\nconst MemberEventListSummary = sdk.getComponent('views.elements.MemberEventListSummary');\n\nconst testUtils = require('../../../test-utils');\ndescribe('MemberEventListSummary', function() {\n    let sandbox;\n\n    // Generate dummy event tiles for use in simulating an expanded MELS\n    const generateTiles = (events) => {\n        return events.map((e) => {\n            return (\n                <div key={e.getId()} className=\"event_tile\">\n                    Expanded membership\n                </div>\n            );\n        });\n    };\n\n    /**\n     * Generates a membership event with the target of the event set as a mocked\n     * RoomMember based on `parameters.userId`.\n     * @param {string} eventId the ID of the event.\n     * @param {object} parameters the parameters to use to create the event.\n     * @param {string} parameters.membership the membership to assign to\n     * `content.membership`\n     * @param {string} parameters.userId the state key and target userId of the event. If\n     * `parameters.senderId` is not specified, this is also used as the event sender.\n     * @param {string} parameters.prevMembership the membership to assign to\n     * `prev_content.membership`.\n     * @param {string} parameters.senderId the user ID of the sender of the event.\n     * Optional. Defaults to `parameters.userId`.\n     * @returns {MatrixEvent} the event created.\n     */\n    const generateMembershipEvent = (eventId, parameters) => {\n        const e = testUtils.mkMembership({\n            event: true,\n            user: parameters.senderId || parameters.userId,\n            skey: parameters.userId,\n            mship: parameters.membership,\n            prevMship: parameters.prevMembership,\n            target: {\n                // Use localpart as display name\n                name: parameters.userId.match(/@([^:]*):/)[1],\n                userId: parameters.userId,\n                getAvatarUrl: () => {\n                    return \"avatar.jpeg\";\n                },\n            },\n        });\n        // Override random event ID to allow for equality tests against tiles from\n        // generateTiles\n        e.event.event_id = eventId;\n        return e;\n    };\n\n    // Generate mock MatrixEvents from the array of parameters\n    const generateEvents = (parameters) => {\n        const res = [];\n        for (let i = 0; i < parameters.length; i++) {\n            res.push(generateMembershipEvent(`event${i}`, parameters[i]));\n        }\n        return res;\n    };\n\n    // Generate the same sequence of `events` for `n` users, where each user ID\n    // is created by replacing the first \"$\" in userIdTemplate with `i` for\n    // `i = 0 .. n`.\n    const generateEventsForUsers = (userIdTemplate, n, events) => {\n        let eventsForUsers = [];\n        let userId = \"\";\n        for (let i = 0; i < n; i++) {\n            userId = userIdTemplate.replace('$', i);\n            events.forEach((e) => {\n                e.userId = userId;\n            });\n            eventsForUsers = eventsForUsers.concat(generateEvents(events));\n        }\n        return eventsForUsers;\n    };\n\n    beforeEach(function() {\n        testUtils.beforeEach(this);\n        sandbox = testUtils.stubClient();\n    });\n\n    afterEach(function() {\n        sandbox.restore();\n    });\n\n    it('renders expanded events if there are less than props.threshold', function() {\n        const events = generateEvents([\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const renderer = ReactTestUtils.createRenderer();\n        renderer.render(<MemberEventListSummary {...props} />);\n        const result = renderer.getRenderOutput();\n\n        expect(result.type).toBe('div');\n        expect(result.props.children).toEqual([\n          <div className=\"event_tile\" key=\"event0\">Expanded membership</div>,\n        ]);\n    });\n\n    it('renders expanded events if there are less than props.threshold', function() {\n        const events = generateEvents([\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const renderer = ReactTestUtils.createRenderer();\n        renderer.render(<MemberEventListSummary {...props} />);\n        const result = renderer.getRenderOutput();\n\n        expect(result.type).toBe('div');\n        expect(result.props.children).toEqual([\n          <div className=\"event_tile\" key=\"event0\">Expanded membership</div>,\n          <div className=\"event_tile\" key=\"event1\">Expanded membership</div>,\n        ]);\n    });\n\n    it('renders collapsed events if events.length = props.threshold', function() {\n        const events = generateEvents([\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\"user_1 joined and left and joined\");\n    });\n\n    it('truncates long join,leave repetitions', function() {\n        const events = generateEvents([\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\"user_1 joined and left 7 times\");\n    });\n\n    it('truncates long join,leave repetitions between other events', function() {\n        const events = generateEvents([\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"ban\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"leave\",\n                membership: \"invite\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_1 was unbanned, joined and left 7 times and was invited\"\n        );\n    });\n\n    it('truncates multiple sequences of repetitions with other events between',\n    function() {\n        const events = generateEvents([\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"ban\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"leave\",\n                membership: \"ban\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {userId: \"@user_1:some.domain\", prevMembership: \"ban\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"leave\",\n                membership: \"invite\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_1 was unbanned, joined and left 2 times, was banned, \" +\n            \"joined and left 3 times and was invited\"\n        );\n    });\n\n    it('handles multiple users following the same sequence of memberships', function() {\n        const events = generateEvents([\n            // user_1\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"ban\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"leave\",\n                membership: \"ban\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            // user_2\n            {\n                userId: \"@user_2:some.domain\",\n                prevMembership: \"ban\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {userId: \"@user_2:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_2:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_2:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_2:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {\n                userId: \"@user_2:some.domain\",\n                prevMembership: \"leave\",\n                membership: \"ban\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_1 and 1 other were unbanned, joined and left 2 times and were banned\"\n        );\n    });\n\n    it('handles many users following the same sequence of memberships', function() {\n        const events = generateEventsForUsers(\"@user_$:some.domain\", 20, [\n            {\n                prevMembership: \"ban\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {prevMembership: \"leave\", membership: \"join\"},\n            {prevMembership: \"join\", membership: \"leave\"},\n            {prevMembership: \"leave\", membership: \"join\"},\n            {prevMembership: \"join\", membership: \"leave\"},\n            {\n                prevMembership: \"leave\",\n                membership: \"ban\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_0 and 19 others were unbanned, joined and left 2 times and were banned\"\n        );\n    });\n\n    it('correctly orders sequences of transitions by the order of their first event',\n    function() {\n        const events = generateEvents([\n            {\n                userId: \"@user_2:some.domain\",\n                prevMembership: \"ban\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"ban\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"leave\",\n                membership: \"ban\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {userId: \"@user_2:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_2:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            {userId: \"@user_2:some.domain\", prevMembership: \"leave\", membership: \"join\"},\n            {userId: \"@user_2:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_2 was unbanned and joined and left 2 times, user_1 was unbanned, \" +\n            \"joined and left 2 times and was banned\"\n        );\n    });\n\n    it('correctly identifies transitions', function() {\n        const events = generateEvents([\n            // invited\n            {userId: \"@user_1:some.domain\", membership: \"invite\"},\n            // banned\n            {userId: \"@user_1:some.domain\", membership: \"ban\"},\n            // joined\n            {userId: \"@user_1:some.domain\", membership: \"join\"},\n            // invite_reject\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"invite\",\n                membership: \"leave\",\n            },\n            // left\n            {userId: \"@user_1:some.domain\", prevMembership: \"join\", membership: \"leave\"},\n            // invite_withdrawal\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"invite\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            // unbanned\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"ban\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            // kicked\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"join\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            // default = left\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"????\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_1 was invited, was banned, joined, rejected their invitation, left, \" +\n            \"had their invitation withdrawn, was unbanned, was kicked and left\"\n        );\n    });\n\n    it('handles invitation plurals correctly when there are multiple users', function() {\n        const events = generateEvents([\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"invite\",\n                membership: \"leave\",\n            },\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"invite\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n            {\n                userId: \"@user_2:some.domain\",\n                prevMembership: \"invite\",\n                membership: \"leave\",\n            },\n            {\n                userId: \"@user_2:some.domain\",\n                prevMembership: \"invite\",\n                membership: \"leave\",\n                senderId: \"@some_other_user:some.domain\",\n            },\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_1 and 1 other rejected their invitations and \" +\n            \"had their invitations withdrawn\"\n        );\n    });\n\n    it('handles invitation plurals correctly when there are multiple invites',\n    function() {\n        const events = generateEvents([\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"invite\",\n                membership: \"leave\",\n            },\n            {\n                userId: \"@user_1:some.domain\",\n                prevMembership: \"invite\",\n                membership: \"leave\",\n            },\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 1,\n            avatarsMaxLength: 5,\n            threshold: 1, // threshold = 1 to force collapse\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_1 rejected their invitations 2 times\"\n        );\n    });\n\n    it('handles a summary length = 2, with no \"others\"', function() {\n        const events = generateEvents([\n            {userId: \"@user_1:some.domain\", membership: \"join\"},\n            {userId: \"@user_1:some.domain\", membership: \"join\"},\n            {userId: \"@user_2:some.domain\", membership: \"join\"},\n            {userId: \"@user_2:some.domain\", membership: \"join\"},\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 2,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_1 and user_2 joined 2 times\"\n        );\n    });\n\n    it('handles a summary length = 2, with 1 \"other\"', function() {\n        const events = generateEvents([\n            {userId: \"@user_1:some.domain\", membership: \"join\"},\n            {userId: \"@user_2:some.domain\", membership: \"join\"},\n            {userId: \"@user_3:some.domain\", membership: \"join\"},\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 2,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_1, user_2 and 1 other joined\"\n        );\n    });\n\n    it('handles a summary length = 2, with many \"others\"', function() {\n        const events = generateEventsForUsers(\"@user_$:some.domain\", 20, [\n            {membership: \"join\"},\n        ]);\n        const props = {\n            events: events,\n            children: generateTiles(events),\n            summaryLength: 2,\n            avatarsMaxLength: 5,\n            threshold: 3,\n        };\n\n        const instance = ReactTestUtils.renderIntoDocument(\n            <MemberEventListSummary {...props} />\n        );\n        const summary = ReactTestUtils.findRenderedDOMComponentWithClass(\n            instance, \"mx_MemberEventListSummary_summary\"\n        );\n        const summaryText = summary.innerText;\n\n        expect(summaryText).toBe(\n            \"user_0, user_1 and 18 others joined\"\n        );\n    });\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/components/views/rooms/MessageComposerInput-test.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","source":"import React from 'react';"},{"ruleId":"no-unused-vars","severity":2,"message":"'createSpy' is defined but never used.","line":4,"column":17,"nodeType":"Identifier","source":"import expect, {createSpy} from 'expect';"},{"ruleId":"one-var","severity":1,"message":"Split 'let' declarations into multiple statements.","line":24,"column":5,"nodeType":"VariableDeclaration","source":"    let parentDiv = null,"},{"ruleId":"prefer-const","severity":1,"message":"'room' is never reassigned. Use 'const' instead.","line":28,"column":9,"nodeType":"Identifier","source":"        room = testUtils.mkStubRoom('!DdJkzRliezrwpNebLk:matrix.org');"},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":33,"column":30,"nodeType":"ThisExpression","source":"        testUtils.beforeEach(this);"},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":62,"column":11,"nodeType":"ExpressionStatement","source":"        })","fix":{"range":[2153,2153],"text":";"}},{"ruleId":"max-len","severity":1,"message":"Line 75 exceeds the maximum line length of 90.","line":75,"column":1,"nodeType":"Program","source":"            expect(mci.state.isRichtextEnabled).toEqual(false, 'should have changed mode');"},{"ruleId":"max-len","severity":1,"message":"Line 230 exceeds the maximum line length of 90.","line":230,"column":1,"nodeType":"Program","source":"        expect(spy.args[0][1]).toEqual('Lorem ipsum dolor sit amet, consectetur adipiscing elit.');"},{"ruleId":"max-len","severity":1,"message":"Line 236 exceeds the maximum line length of 90.","line":236,"column":1,"nodeType":"Program","source":"        addTextToDraft('Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n\\nFusce congue sapien sed neque molestie volutpat.');"},{"ruleId":"max-len","severity":1,"message":"Line 240 exceeds the maximum line length of 90.","line":240,"column":1,"nodeType":"Program","source":"        expect(spy.args[0][1]).toEqual('Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n\\nFusce congue sapien sed neque molestie volutpat.');"}],"errorCount":4,"warningCount":6,"source":"import React from 'react';\nimport ReactTestUtils from 'react-addons-test-utils';\nimport ReactDOM from 'react-dom';\nimport expect, {createSpy} from 'expect';\nimport sinon from 'sinon';\nimport Q from 'q';\nimport * as testUtils from '../../../test-utils';\nimport sdk from 'matrix-react-sdk';\nimport UserSettingsStore from '../../../../src/UserSettingsStore';\nconst MessageComposerInput = sdk.getComponent('views.rooms.MessageComposerInput');\nimport MatrixClientPeg from 'MatrixClientPeg';\n\nfunction addTextToDraft(text) {\n    const components = document.getElementsByClassName('public-DraftEditor-content');\n    if (components && components.length) {\n        const textarea = components[0];\n        const textEvent = document.createEvent('TextEvent');\n        textEvent.initTextEvent('textInput', true, true, null, text);\n        textarea.dispatchEvent(textEvent);\n    }\n}\n\ndescribe('MessageComposerInput', () => {\n    let parentDiv = null,\n        sandbox = null,\n        client = null,\n        mci = null,\n        room = testUtils.mkStubRoom('!DdJkzRliezrwpNebLk:matrix.org');\n\n    // TODO Remove when RTE is out of labs.\n\n    beforeEach(function() {\n        testUtils.beforeEach(this);\n        sandbox = testUtils.stubClient(sandbox);\n        client = MatrixClientPeg.get();\n        UserSettingsStore.isFeatureEnabled = sinon.stub()\n            .withArgs('rich_text_editor').returns(true);\n\n        parentDiv = document.createElement('div');\n        document.body.appendChild(parentDiv);\n        mci = ReactDOM.render(\n            <MessageComposerInput\n                room={room}\n                client={client}\n            />,\n            parentDiv);\n    });\n\n    afterEach((done) => {\n        // hack: let the component finish mounting before unmounting, to avoid\n        // warnings\n        // (please can we make the components not setState() after\n        // they are unmounted?)\n        Q.delay(10).done(() => {\n            if (parentDiv) {\n                ReactDOM.unmountComponentAtNode(parentDiv);\n                parentDiv.remove();\n                parentDiv = null;\n            }\n            sandbox.restore();\n            done();\n        })\n    });\n\n    // XXX this fails\n    xit('should change mode if indicator is clicked', (done) => {\n        mci.enableRichtext(true);\n\n        setTimeout(() => {\n            const indicator = ReactTestUtils.findRenderedDOMComponentWithClass(\n                mci,\n                'mx_MessageComposer_input_markdownIndicator');\n            ReactTestUtils.Simulate.click(indicator);\n\n            expect(mci.state.isRichtextEnabled).toEqual(false, 'should have changed mode');\n            done();\n        });\n    });\n\n    it('should not send messages when composer is empty', () => {\n        const textSpy = sinon.spy(client, 'sendTextMessage');\n        const htmlSpy = sinon.spy(client, 'sendHtmlMessage');\n        mci.enableRichtext(true);\n        mci.handleReturn(sinon.stub());\n\n        expect(textSpy.calledOnce).toEqual(false, 'should not send text message');\n        expect(htmlSpy.calledOnce).toEqual(false, 'should not send html message');\n    });\n\n    it('should not change content unnecessarily on RTE -> Markdown conversion', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(true);\n        addTextToDraft('a');\n        mci.handleKeyCommand('toggle-mode');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('a');\n    });\n\n    it('should not change content unnecessarily on Markdown -> RTE conversion', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('a');\n        mci.handleKeyCommand('toggle-mode');\n        mci.handleReturn(sinon.stub());\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('a');\n    });\n\n    it('should send emoji messages in rich text', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(true);\n        addTextToDraft('☹');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true, 'should send message');\n    });\n\n    it('should send emoji messages in Markdown', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('☹');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true, 'should send message');\n    });\n\n    // FIXME\n    // it('should convert basic Markdown to rich text correctly', () => {\n    //     const spy = sinon.spy(client, 'sendHtmlMessage');\n    //     mci.enableRichtext(false);\n    //     addTextToDraft('*abc*');\n    //     mci.handleKeyCommand('toggle-mode');\n    //     mci.handleReturn(sinon.stub());\n    //     console.error(spy.args[0][2]);\n    //     expect(spy.args[0][2]).toContain('<em>abc');\n    // });\n    //\n    // it('should convert basic rich text to Markdown correctly', () => {\n    //     const spy = sinon.spy(client, 'sendHtmlMessage');\n    //     mci.enableRichtext(true);\n    //     process.nextTick(() => {\n    //\n    //     });\n    //     mci.handleKeyCommand('italic');\n    //     addTextToDraft('abc');\n    //     mci.handleKeyCommand('toggle-mode');\n    //     mci.handleReturn(sinon.stub());\n    //     expect(['_abc_', '*abc*']).toContain(spy.args[0][1]);\n    // });\n\n    it('should insert formatting characters in Markdown mode', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(false);\n        mci.handleKeyCommand('italic');\n        mci.handleReturn(sinon.stub());\n        expect(['__', '**']).toContain(spy.args[0][1]);\n    });\n\n    it('should not entity-encode \" in Markdown mode', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('\"');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('\"');\n    });\n\n    it('should escape characters without other markup in Markdown mode', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('\\\\*escaped\\\\*');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('*escaped*');\n    });\n\n    it('should escape characters with other markup in Markdown mode', () => {\n        const spy = sinon.spy(client, 'sendHtmlMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('\\\\*escaped\\\\* *italic*');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('\\\\*escaped\\\\* *italic*');\n        expect(spy.args[0][2]).toEqual('*escaped* <em>italic</em>');\n    });\n\n    it('should not convert -_- into a horizontal rule in Markdown mode', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('-_-');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('-_-');\n    });\n\n    it('should not strip <del> tags in Markdown mode', () => {\n        const spy = sinon.spy(client, 'sendHtmlMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('<del>striked-out</del>');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('<del>striked-out</del>');\n        expect(spy.args[0][2]).toEqual('<del>striked-out</del>');\n    });\n\n    it('should not strike-through ~~~ in Markdown mode', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('~~~striked-out~~~');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('~~~striked-out~~~');\n    });\n\n    it('should not mark single unmarkedup paragraphs as HTML in Markdown mode', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('Lorem ipsum dolor sit amet, consectetur adipiscing elit.');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('Lorem ipsum dolor sit amet, consectetur adipiscing elit.');\n    });\n\n    it('should not mark two unmarkedup paragraphs as HTML in Markdown mode', () => {\n        const spy = sinon.spy(client, 'sendTextMessage');\n        mci.enableRichtext(false);\n        addTextToDraft('Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n\\nFusce congue sapien sed neque molestie volutpat.');\n        mci.handleReturn(sinon.stub());\n\n        expect(spy.calledOnce).toEqual(true);\n        expect(spy.args[0][1]).toEqual('Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n\\nFusce congue sapien sed neque molestie volutpat.');\n    });\n});\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/mock-clock.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":40,"column":3,"nodeType":"Program","source":" *  ","fix":{"range":[1598,1600],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":46,"column":1,"nodeType":"VariableDeclaration","source":"var j$ = {};","fix":{"range":[1825,1828],"text":"let"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":48,"column":20,"nodeType":"FunctionExpression","source":"j$.Clock = function () {","fix":{"range":[1858,1859],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":50,"column":5,"nodeType":"VariableDeclaration","source":"    var self = this,","fix":{"range":[1938,1941],"text":"let"}},{"ruleId":"one-var","severity":1,"message":"Split 'var' declarations into multiple statements.","line":50,"column":5,"nodeType":"VariableDeclaration","source":"    var self = this,"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":55,"column":44,"nodeType":"Property","source":"        clearInterval: global.clearInterval","fix":{"range":[2151,2151],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":61,"column":37,"nodeType":"Property","source":"        clearInterval: clearInterval","fix":{"range":[2329,2329],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 70 exceeds the maximum line length of 90.","line":70,"column":1,"nodeType":"Program","source":"        throw new Error('Jasmine Clock was unable to install over custom global timer functions. Is the clock already installed?');"},{"ruleId":"max-len","severity":1,"message":"Line 105 exceeds the maximum line length of 90.","line":105,"column":1,"nodeType":"Program","source":"          throw new Error('IE < 9 cannot support extra params to setTimeout without a polyfill');"},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":109,"column":72,"nodeType":"Identifier","source":"      return Function.prototype.apply.apply(timer.setTimeout, [global, arguments]);","endLine":109,"endColumn":81},{"ruleId":"max-len","severity":1,"message":"Line 115 exceeds the maximum line length of 90.","line":115,"column":1,"nodeType":"Program","source":"          throw new Error('IE < 9 cannot support extra params to setInterval without a polyfill');"},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":119,"column":73,"nodeType":"Identifier","source":"      return Function.prototype.apply.apply(timer.setInterval, [global, arguments]);","endLine":119,"endColumn":82},{"ruleId":"guard-for-in","severity":2,"message":"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.","line":154,"column":7,"nodeType":"ForInStatement","source":"      for (var prop in source) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":154,"column":12,"nodeType":"VariableDeclaration","source":"      for (var prop in source) {","fix":{"range":[5097,5100],"text":"let"}},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":160,"column":76,"nodeType":"Identifier","source":"      return delayedFunctionScheduler.scheduleFunction(fn, delay, argSlice(arguments, 2));","endLine":160,"endColumn":85},{"ruleId":"max-len","severity":1,"message":"Line 168 exceeds the maximum line length of 90.","line":168,"column":1,"nodeType":"Program","source":"      return delayedFunctionScheduler.scheduleFunction(fn, interval, argSlice(arguments, 2), true);"},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":168,"column":79,"nodeType":"Identifier","source":"      return delayedFunctionScheduler.scheduleFunction(fn, interval, argSlice(arguments, 2), true);","endLine":168,"endColumn":88},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":186,"column":5,"nodeType":"VariableDeclaration","source":"    var self = this;","fix":{"range":[5869,5872],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":187,"column":5,"nodeType":"VariableDeclaration","source":"    var scheduledLookup = [];","fix":{"range":[5890,5893],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":188,"column":5,"nodeType":"VariableDeclaration","source":"    var scheduledFunctions = {};","fix":{"range":[5920,5923],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":189,"column":5,"nodeType":"VariableDeclaration","source":"    var currentTime = 0;","fix":{"range":[5953,5956],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":190,"column":5,"nodeType":"VariableDeclaration","source":"    var delayedFnCount = 0;","fix":{"range":[5978,5981],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":194,"column":7,"nodeType":"VariableDeclaration","source":"      var endTime = currentTime + millis;","fix":{"range":[6072,6075],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 200 exceeds the maximum line length of 90.","line":200,"column":1,"nodeType":"Program","source":"    self.scheduleFunction = function(funcToCall, millis, params, recurring, timeoutKey, runAtMillis) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":201,"column":7,"nodeType":"VariableDeclaration","source":"      var f;","fix":{"range":[6293,6296],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":214,"column":7,"nodeType":"VariableDeclaration","source":"      var funcToSchedule = {","fix":{"range":[6656,6659],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":220,"column":23,"nodeType":"Property","source":"        millis: millis","fix":{"range":[6844,6844],"text":","}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":228,"column":38,"nodeType":"FunctionExpression","source":"        scheduledLookup.sort(function (a, b) {","fix":{"range":[7119,7120],"text":""}},{"ruleId":"guard-for-in","severity":2,"message":"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.","line":237,"column":7,"nodeType":"ForInStatement","source":"      for (var runAtMillis in scheduledFunctions) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":237,"column":12,"nodeType":"VariableDeclaration","source":"      for (var runAtMillis in scheduledFunctions) {","fix":{"range":[7273,7276],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":238,"column":9,"nodeType":"VariableDeclaration","source":"        var funcs = scheduledFunctions[runAtMillis];","fix":{"range":[7322,7325],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":239,"column":9,"nodeType":"VariableDeclaration","source":"        var i = indexOfFirstToPass(funcs, function (func) {","fix":{"range":[7375,7378],"text":"let"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":239,"column":51,"nodeType":"FunctionExpression","source":"        var i = indexOfFirstToPass(funcs, function (func) {","fix":{"range":[7417,7418],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":261,"column":7,"nodeType":"VariableDeclaration","source":"      var index = -1;","fix":{"range":[7968,7971],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":263,"column":12,"nodeType":"VariableDeclaration","source":"      for (var i = 0; i < array.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":274,"column":7,"nodeType":"VariableDeclaration","source":"      var value = Number(key);","fix":{"range":[8191,8194],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":275,"column":7,"nodeType":"VariableDeclaration","source":"      var i = indexOfFirstToPass(scheduledLookup, function (millis) {","fix":{"range":[8222,8225],"text":"let"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":275,"column":59,"nodeType":"FunctionExpression","source":"      var i = indexOfFirstToPass(scheduledLookup, function (millis) {","fix":{"range":[8274,8275],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":294,"column":12,"nodeType":"VariableDeclaration","source":"      for (var i = 0; i < funcsToRun.length; ++i) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":307,"column":9,"nodeType":"VariableDeclaration","source":"        var funcsToRun = scheduledFunctions[currentTime];","fix":{"range":[9023,9026],"text":"let"}},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before '&&'.","line":322,"column":43,"nodeType":"Punctuator","source":"                 currentTime !== endTime  &&","fix":{"range":[9650,9652],"text":" "}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":333,"column":5,"nodeType":"VariableDeclaration","source":"    var self = this;","fix":{"range":[9818,9821],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":334,"column":5,"nodeType":"VariableDeclaration","source":"    var currentTime = 0;","fix":{"range":[9839,9842],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":343,"column":5,"nodeType":"VariableDeclaration","source":"    var GlobalDate = global.Date;","fix":{"range":[10033,10036],"text":"let"}},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":374,"column":33,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0]);","endLine":374,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":376,"column":33,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1]);","endLine":376,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":376,"column":47,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1]);","endLine":376,"endColumn":56},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":378,"column":33,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2]);","endLine":378,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":378,"column":47,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2]);","endLine":378,"endColumn":56},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":378,"column":61,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2]);","endLine":378,"endColumn":70},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":380,"column":33,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);","endLine":380,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":380,"column":47,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);","endLine":380,"endColumn":56},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":380,"column":61,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);","endLine":380,"endColumn":70},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":380,"column":75,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);","endLine":380,"endColumn":84},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":382,"column":33,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":382,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":382,"column":47,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":382,"endColumn":56},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":382,"column":61,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":382,"endColumn":70},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":382,"column":75,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":382,"endColumn":84},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":383,"column":33,"nodeType":"Identifier","source":"                                arguments[4]);","endLine":383,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":385,"column":33,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":385,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":385,"column":47,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":385,"endColumn":56},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":385,"column":61,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":385,"endColumn":70},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":385,"column":75,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":385,"endColumn":84},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":386,"column":33,"nodeType":"Identifier","source":"                                arguments[4], arguments[5]);","endLine":386,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":386,"column":47,"nodeType":"Identifier","source":"                                arguments[4], arguments[5]);","endLine":386,"endColumn":56},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":388,"column":33,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":388,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":388,"column":47,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":388,"endColumn":56},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":388,"column":61,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":388,"endColumn":70},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":388,"column":75,"nodeType":"Identifier","source":"          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],","endLine":388,"endColumn":84},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":389,"column":33,"nodeType":"Identifier","source":"                                arguments[4], arguments[5], arguments[6]);","endLine":389,"endColumn":42},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":389,"column":47,"nodeType":"Identifier","source":"                                arguments[4], arguments[5], arguments[6]);","endLine":389,"endColumn":56},{"ruleId":"prefer-rest-params","severity":1,"message":"Use the rest parameters instead of 'arguments'.","line":389,"column":61,"nodeType":"Identifier","source":"                                arguments[4], arguments[5], arguments[6]);","endLine":389,"endColumn":70},{"ruleId":"max-len","severity":1,"message":"Line 414 exceeds the maximum line length of 90.","line":414,"column":1,"nodeType":"Program","source":"var clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":414,"column":1,"nodeType":"VariableDeclaration","source":"var clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));","fix":{"range":[12019,12022],"text":"let"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Unexpected space before function parentheses.","line":414,"column":42,"nodeType":"FunctionExpression","source":"var clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));","fix":{"range":[12060,12061],"text":""}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":418,"column":2,"nodeType":"ExpressionStatement","source":"}","fix":{"range":[12193,12193],"text":";"}}],"errorCount":13,"warningCount":63,"source":"/*\nCopyright (c) 2008-2015 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/* This is jasmine's implementation of a mock clock, lifted from the depths of\n * jasmine-core and exposed as a standalone module. The interface is just the\n * same as that of jasmine.clock. For example:\n *\n *    var mock_clock = require(\"mock-clock\").clock();\n *    mock_clock.install();\n *    setTimeout(function() {\n *        timerCallback();\n *    }, 100);\n *\n *    expect(timerCallback).not.toHaveBeenCalled();\n *    mock_clock.tick(101);\n *    expect(timerCallback).toHaveBeenCalled();\n *\n *    mock_clock.uninstall();\n *\n *  \n * The reason for C&Ping jasmine's clock here is that jasmine itself is\n * difficult to webpack, and we don't really want all of it. Sinon also has a\n * mock-clock implementation, but again, it is difficult to webpack.\n */\n\nvar j$ = {};\n\nj$.Clock = function () {\n  function Clock(global, delayedFunctionSchedulerFactory, mockDate) {\n    var self = this,\n      realTimingFunctions = {\n        setTimeout: global.setTimeout,\n        clearTimeout: global.clearTimeout,\n        setInterval: global.setInterval,\n        clearInterval: global.clearInterval\n      },\n      fakeTimingFunctions = {\n        setTimeout: setTimeout,\n        clearTimeout: clearTimeout,\n        setInterval: setInterval,\n        clearInterval: clearInterval\n      },\n      installed = false,\n      delayedFunctionScheduler,\n      timer;\n\n\n    self.install = function() {\n      if(!originalTimingFunctionsIntact()) {\n        throw new Error('Jasmine Clock was unable to install over custom global timer functions. Is the clock already installed?');\n      }\n      replace(global, fakeTimingFunctions);\n      timer = fakeTimingFunctions;\n      delayedFunctionScheduler = delayedFunctionSchedulerFactory();\n      installed = true;\n\n      return self;\n    };\n\n    self.uninstall = function() {\n      delayedFunctionScheduler = null;\n      mockDate.uninstall();\n      replace(global, realTimingFunctions);\n\n      timer = realTimingFunctions;\n      installed = false;\n    };\n\n    self.withMock = function(closure) {\n      this.install();\n      try {\n        closure();\n      } finally {\n        this.uninstall();\n      }\n    };\n\n    self.mockDate = function(initialDate) {\n      mockDate.install(initialDate);\n    };\n\n    self.setTimeout = function(fn, delay, params) {\n      if (legacyIE()) {\n        if (arguments.length > 2) {\n          throw new Error('IE < 9 cannot support extra params to setTimeout without a polyfill');\n        }\n        return timer.setTimeout(fn, delay);\n      }\n      return Function.prototype.apply.apply(timer.setTimeout, [global, arguments]);\n    };\n\n    self.setInterval = function(fn, delay, params) {\n      if (legacyIE()) {\n        if (arguments.length > 2) {\n          throw new Error('IE < 9 cannot support extra params to setInterval without a polyfill');\n        }\n        return timer.setInterval(fn, delay);\n      }\n      return Function.prototype.apply.apply(timer.setInterval, [global, arguments]);\n    };\n\n    self.clearTimeout = function(id) {\n      return Function.prototype.call.apply(timer.clearTimeout, [global, id]);\n    };\n\n    self.clearInterval = function(id) {\n      return Function.prototype.call.apply(timer.clearInterval, [global, id]);\n    };\n\n    self.tick = function(millis) {\n      if (installed) {\n        mockDate.tick(millis);\n        delayedFunctionScheduler.tick(millis);\n      } else {\n        throw new Error('Mock clock is not installed, use jasmine.clock().install()');\n      }\n    };\n\n    return self;\n\n    function originalTimingFunctionsIntact() {\n      return global.setTimeout === realTimingFunctions.setTimeout &&\n        global.clearTimeout === realTimingFunctions.clearTimeout &&\n        global.setInterval === realTimingFunctions.setInterval &&\n        global.clearInterval === realTimingFunctions.clearInterval;\n    }\n\n    function legacyIE() {\n      //if these methods are polyfilled, apply will be present\n      return !(realTimingFunctions.setTimeout || realTimingFunctions.setInterval).apply;\n    }\n\n    function replace(dest, source) {\n      for (var prop in source) {\n        dest[prop] = source[prop];\n      }\n    }\n\n    function setTimeout(fn, delay) {\n      return delayedFunctionScheduler.scheduleFunction(fn, delay, argSlice(arguments, 2));\n    }\n\n    function clearTimeout(id) {\n      return delayedFunctionScheduler.removeFunctionWithId(id);\n    }\n\n    function setInterval(fn, interval) {\n      return delayedFunctionScheduler.scheduleFunction(fn, interval, argSlice(arguments, 2), true);\n    }\n\n    function clearInterval(id) {\n      return delayedFunctionScheduler.removeFunctionWithId(id);\n    }\n\n    function argSlice(argsObj, n) {\n      return Array.prototype.slice.call(argsObj, n);\n    }\n  }\n\n  return Clock;\n}();\n\n\nj$.DelayedFunctionScheduler = function() {\n  function DelayedFunctionScheduler() {\n    var self = this;\n    var scheduledLookup = [];\n    var scheduledFunctions = {};\n    var currentTime = 0;\n    var delayedFnCount = 0;\n\n    self.tick = function(millis) {\n      millis = millis || 0;\n      var endTime = currentTime + millis;\n\n      runScheduledFunctions(endTime);\n      currentTime = endTime;\n    };\n\n    self.scheduleFunction = function(funcToCall, millis, params, recurring, timeoutKey, runAtMillis) {\n      var f;\n      if (typeof(funcToCall) === 'string') {\n        /* jshint evil: true */\n        f = function() { return eval(funcToCall); };\n        /* jshint evil: false */\n      } else {\n        f = funcToCall;\n      }\n\n      millis = millis || 0;\n      timeoutKey = timeoutKey || ++delayedFnCount;\n      runAtMillis = runAtMillis || (currentTime + millis);\n\n      var funcToSchedule = {\n        runAtMillis: runAtMillis,\n        funcToCall: f,\n        recurring: recurring,\n        params: params,\n        timeoutKey: timeoutKey,\n        millis: millis\n      };\n\n      if (runAtMillis in scheduledFunctions) {\n        scheduledFunctions[runAtMillis].push(funcToSchedule);\n      } else {\n        scheduledFunctions[runAtMillis] = [funcToSchedule];\n        scheduledLookup.push(runAtMillis);\n        scheduledLookup.sort(function (a, b) {\n          return a - b;\n        });\n      }\n\n      return timeoutKey;\n    };\n\n    self.removeFunctionWithId = function(timeoutKey) {\n      for (var runAtMillis in scheduledFunctions) {\n        var funcs = scheduledFunctions[runAtMillis];\n        var i = indexOfFirstToPass(funcs, function (func) {\n          return func.timeoutKey === timeoutKey;\n        });\n\n        if (i > -1) {\n          if (funcs.length === 1) {\n            delete scheduledFunctions[runAtMillis];\n            deleteFromLookup(runAtMillis);\n          } else {\n            funcs.splice(i, 1);\n          }\n\n          // intervals get rescheduled when executed, so there's never more\n          // than a single scheduled function with a given timeoutKey\n          break;\n        }\n      }\n    };\n\n    return self;\n\n    function indexOfFirstToPass(array, testFn) {\n      var index = -1;\n\n      for (var i = 0; i < array.length; ++i) {\n        if (testFn(array[i])) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    }\n\n    function deleteFromLookup(key) {\n      var value = Number(key);\n      var i = indexOfFirstToPass(scheduledLookup, function (millis) {\n        return millis === value;\n      });\n\n      if (i > -1) {\n        scheduledLookup.splice(i, 1);\n      }\n    }\n\n    function reschedule(scheduledFn) {\n      self.scheduleFunction(scheduledFn.funcToCall,\n        scheduledFn.millis,\n        scheduledFn.params,\n        true,\n        scheduledFn.timeoutKey,\n        scheduledFn.runAtMillis + scheduledFn.millis);\n    }\n\n    function forEachFunction(funcsToRun, callback) {\n      for (var i = 0; i < funcsToRun.length; ++i) {\n        callback(funcsToRun[i]);\n      }\n    }\n\n    function runScheduledFunctions(endTime) {\n      if (scheduledLookup.length === 0 || scheduledLookup[0] > endTime) {\n        return;\n      }\n\n      do {\n        currentTime = scheduledLookup.shift();\n\n        var funcsToRun = scheduledFunctions[currentTime];\n        delete scheduledFunctions[currentTime];\n\n        forEachFunction(funcsToRun, function(funcToRun) {\n          if (funcToRun.recurring) {\n            reschedule(funcToRun);\n          }\n        });\n\n        forEachFunction(funcsToRun, function(funcToRun) {\n          funcToRun.funcToCall.apply(null, funcToRun.params || []);\n        });\n      } while (scheduledLookup.length > 0 &&\n              // checking first if we're out of time prevents setTimeout(0)\n              // scheduled in a funcToRun from forcing an extra iteration\n                 currentTime !== endTime  &&\n                 scheduledLookup[0] <= endTime);\n    }\n  }\n\n  return DelayedFunctionScheduler;\n}();\n\n\nj$.MockDate = function() {\n  function MockDate(global) {\n    var self = this;\n    var currentTime = 0;\n\n    if (!global || !global.Date) {\n      self.install = function() {};\n      self.tick = function() {};\n      self.uninstall = function() {};\n      return self;\n    }\n\n    var GlobalDate = global.Date;\n\n    self.install = function(mockDate) {\n      if (mockDate instanceof GlobalDate) {\n        currentTime = mockDate.getTime();\n      } else {\n        currentTime = new GlobalDate().getTime();\n      }\n\n      global.Date = FakeDate;\n    };\n\n    self.tick = function(millis) {\n      millis = millis || 0;\n      currentTime = currentTime + millis;\n    };\n\n    self.uninstall = function() {\n      currentTime = 0;\n      global.Date = GlobalDate;\n    };\n\n    createDateProperties();\n\n    return self;\n\n    function FakeDate() {\n      switch(arguments.length) {\n        case 0:\n          return new GlobalDate(currentTime);\n        case 1:\n          return new GlobalDate(arguments[0]);\n        case 2:\n          return new GlobalDate(arguments[0], arguments[1]);\n        case 3:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2]);\n        case 4:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);\n        case 5:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],\n                                arguments[4]);\n        case 6:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],\n                                arguments[4], arguments[5]);\n        default:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],\n                                arguments[4], arguments[5], arguments[6]);\n      }\n    }\n\n    function createDateProperties() {\n      FakeDate.prototype = GlobalDate.prototype;\n\n      FakeDate.now = function() {\n        if (GlobalDate.now) {\n          return currentTime;\n        } else {\n          throw new Error('Browser does not support Date.now()');\n        }\n      };\n\n      FakeDate.toSource = GlobalDate.toSource;\n      FakeDate.toString = GlobalDate.toString;\n      FakeDate.parse = GlobalDate.parse;\n      FakeDate.UTC = GlobalDate.UTC;\n    }\n\t}\n\n  return MockDate;\n}();\n\nvar clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));\n\nmodule.exports.clock = function() {\n    return clock;\n}\n\n\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/skinned-sdk.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","source":"var sdk = require(\"../src/index\");","fix":{"range":[357,360],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","source":"var skin = require('../src/component-index.js');","fix":{"range":[393,396],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","source":"var stubComponent = require('./components/stub-component.js');","fix":{"range":[442,445],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","source":"var components = skin.components;","fix":{"range":[506,509],"text":"let"}},{"ruleId":"max-len","severity":1,"message":"Line 29 exceeds the maximum line length of 90.","line":29,"column":1,"nodeType":"Program","source":"components['views.messages.DateSeparator'] = stubComponent({displayName: 'DateSeparator'});"},{"ruleId":"max-len","severity":1,"message":"Line 30 exceeds the maximum line length of 90.","line":30,"column":1,"nodeType":"Program","source":"components['views.messages.MessageTimestamp'] = stubComponent({displayName: 'MessageTimestamp'});"},{"ruleId":"max-len","severity":1,"message":"Line 31 exceeds the maximum line length of 90.","line":31,"column":1,"nodeType":"Program","source":"components['views.messages.SenderProfile'] = stubComponent({displayName: 'SenderProfile'});"}],"errorCount":0,"warningCount":7,"source":"/*\n * skinned-sdk.js\n *\n * Skins the react-sdk with a few stub components which we expect the\n * application to provide\n */\n\n/* this is a convenient place to ensure we load the compatibility libraries we expect our\n * app to provide\n */\n\n// for ES6 stuff like startsWith() and Object.values() that babel doesn't do by\n// default\nrequire('babel-polyfill');\n\nvar sdk = require(\"../src/index\");\n\nvar skin = require('../src/component-index.js');\nvar stubComponent = require('./components/stub-component.js');\n\nvar components = skin.components;\ncomponents['structures.LeftPanel'] = stubComponent();\ncomponents['structures.RightPanel'] = stubComponent();\ncomponents['structures.RoomDirectory'] = stubComponent();\ncomponents['views.globals.MatrixToolbar'] = stubComponent();\ncomponents['views.globals.GuestWarningBar'] = stubComponent();\ncomponents['views.globals.NewVersionBar'] = stubComponent();\ncomponents['views.elements.Spinner'] = stubComponent({displayName: 'Spinner'});\ncomponents['views.messages.DateSeparator'] = stubComponent({displayName: 'DateSeparator'});\ncomponents['views.messages.MessageTimestamp'] = stubComponent({displayName: 'MessageTimestamp'});\ncomponents['views.messages.SenderProfile'] = stubComponent({displayName: 'SenderProfile'});\ncomponents['views.rooms.SearchBar'] = stubComponent();\n\nsdk.loadSkin(skin);\n\nmodule.exports = sdk;\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/test-utils.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":3,"column":1,"nodeType":"VariableDeclaration","source":"var sinon = require('sinon');","fix":{"range":[15,18],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":4,"column":1,"nodeType":"VariableDeclaration","source":"var q = require('q');","fix":{"range":[45,48],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":6,"column":1,"nodeType":"VariableDeclaration","source":"var peg = require('../src/MatrixClientPeg.js');","fix":{"range":[68,71],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":7,"column":1,"nodeType":"VariableDeclaration","source":"var jssdk = require('matrix-js-sdk');","fix":{"range":[116,119],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":8,"column":1,"nodeType":"VariableDeclaration","source":"var MatrixEvent = jssdk.MatrixEvent;","fix":{"range":[154,157],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":5,"nodeType":"VariableDeclaration","source":"    var desc = context.currentTest.fullTitle();","fix":{"range":[390,393],"text":"let"}},{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":20,"column":2,"nodeType":"EmptyStatement","source":"};","fix":{"range":[532,533],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":34,"column":5,"nodeType":"VariableDeclaration","source":"    var sandbox = sinon.sandbox.create();","fix":{"range":[944,947],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":36,"column":5,"nodeType":"VariableDeclaration","source":"    var client = createTestClient();","fix":{"range":[987,990],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":42,"column":5,"nodeType":"VariableDeclaration","source":"    var methods = ['get', 'unset', 'replaceUsingCreds'];","fix":{"range":[1188,1191],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":43,"column":10,"nodeType":"VariableDeclaration","source":"    for (var i = 0; i < methods.length; i++) {"},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":106,"column":5,"nodeType":"VariableDeclaration","source":"    var event = {","fix":{"range":[3392,3395],"text":"let"}},{"ruleId":"brace-style","severity":1,"message":"Closing curly brace does not appear on the same line as the subsequent block.","line":117,"column":5,"nodeType":"Punctuator","source":"    }","fix":{"range":[3724,3729],"text":"    "}},{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":124,"column":2,"nodeType":"EmptyStatement","source":"};","fix":{"range":[4008,4009],"text":""}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":135,"column":5,"nodeType":"VariableDeclaration","source":"    var event = {","fix":{"range":[4249,4252],"text":"let"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":143,"column":49,"nodeType":"Property","source":"            presence: opts.presence || \"offline\"","fix":{"range":[4555,4555],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":144,"column":10,"nodeType":"Property","source":"        }","fix":{"range":[4565,4565],"text":","}},{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":147,"column":2,"nodeType":"EmptyStatement","source":"};","fix":{"range":[4630,4631],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":173,"column":31,"nodeType":"Property","source":"        membership: opts.mship","fix":{"range":[5658,5658],"text":","}},{"ruleId":"prefer-const","severity":1,"message":"'e' is never reassigned. Use 'const' instead.","line":180,"column":9,"nodeType":"Identifier","source":"    let e = mkEvent(opts);","fix":{"range":[5881,5884],"text":"const"}},{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":185,"column":2,"nodeType":"EmptyStatement","source":"};","fix":{"range":[5980,5981],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":206,"column":23,"nodeType":"Property","source":"        body: opts.msg","fix":{"range":[6672,6672],"text":","}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":212,"column":5,"nodeType":"VariableDeclaration","source":"    var stubTimeline = { getEvents: () => [] };","fix":{"range":[6757,6760],"text":"let"}}],"errorCount":8,"warningCount":15,"source":"\"use strict\";\n\nvar sinon = require('sinon');\nvar q = require('q');\n\nvar peg = require('../src/MatrixClientPeg.js');\nvar jssdk = require('matrix-js-sdk');\nvar MatrixEvent = jssdk.MatrixEvent;\n\n/**\n * Perform common actions before each test case, e.g. printing the test case\n * name to stdout.\n * @param {Mocha.Context} context  The test context\n */\nexport function beforeEach(context) {\n    var desc = context.currentTest.fullTitle();\n    console.log();\n    console.log(desc);\n    console.log(new Array(1 + desc.length).join(\"=\"));\n};\n\n\n/**\n * Stub out the MatrixClient, and configure the MatrixClientPeg object to\n * return it when get() is called.\n *\n * TODO: once the components are updated to get their MatrixClients from\n * the react context, we can get rid of this and just inject a test client\n * via the context instead.\n *\n * @returns {sinon.Sandbox}; remember to call sandbox.restore afterwards.\n */\nexport function stubClient() {\n    var sandbox = sinon.sandbox.create();\n\n    var client = createTestClient();\n\n    // stub out the methods in MatrixClientPeg\n    //\n    // 'sandbox.restore()' doesn't work correctly on inherited methods,\n    // so we do this for each method\n    var methods = ['get', 'unset', 'replaceUsingCreds'];\n    for (var i = 0; i < methods.length; i++) {\n        sandbox.stub(peg, methods[i]);\n    }\n    // MatrixClientPeg.get() is called a /lot/, so implement it with our own\n    // fast stub function rather than a sinon stub\n    peg.get = function() { return client; };\n    return sandbox;\n}\n\n/**\n * Create a stubbed-out MatrixClient\n *\n * @returns {object} MatrixClient stub\n */\nexport function createTestClient() {\n    return {\n        getHomeserverUrl: sinon.stub(),\n        getIdentityServerUrl: sinon.stub(),\n\n        getPushActionsForEvent: sinon.stub(),\n        getRoom: sinon.stub().returns(mkStubRoom()),\n        getRooms: sinon.stub().returns([]),\n        loginFlows: sinon.stub(),\n        on: sinon.stub(),\n        removeListener: sinon.stub(),\n        isRoomEncrypted: sinon.stub().returns(false),\n        peekInRoom: sinon.stub().returns(q(mkStubRoom())),\n\n        paginateEventTimeline: sinon.stub().returns(q()),\n        sendReadReceipt: sinon.stub().returns(q()),\n        getRoomIdForAlias: sinon.stub().returns(q()),\n        getProfileInfo: sinon.stub().returns(q({})),\n        getAccountData: (type) => {\n            return mkEvent({\n                type,\n                event: true,\n                content: {},\n            });\n        },\n        setAccountData: sinon.stub(),\n        sendTyping: sinon.stub().returns(q({})),\n        sendTextMessage: () => q({}),\n        sendHtmlMessage: () => q({}),\n        getSyncState: () => \"SYNCING\",\n    };\n}\n\n/**\n * Create an Event.\n * @param {Object} opts Values for the event.\n * @param {string} opts.type The event.type\n * @param {string} opts.room The event.room_id\n * @param {string} opts.user The event.user_id\n * @param {string} opts.skey Optional. The state key (auto inserts empty string)\n * @param {Number} opts.ts   Optional. Timestamp for the event\n * @param {Object} opts.content The event.content\n * @param {boolean} opts.event True to make a MatrixEvent.\n * @return {Object} a JSON object representing this event.\n */\nexport function mkEvent(opts) {\n    if (!opts.type || !opts.content) {\n        throw new Error(\"Missing .type or .content =>\" + JSON.stringify(opts));\n    }\n    var event = {\n        type: opts.type,\n        room_id: opts.room,\n        sender: opts.user,\n        content: opts.content,\n        prev_content: opts.prev_content,\n        event_id: \"$\" + Math.random() + \"-\" + Math.random(),\n        origin_server_ts: opts.ts,\n    };\n    if (opts.skey) {\n        event.state_key = opts.skey;\n    }\n    else if ([\"m.room.name\", \"m.room.topic\", \"m.room.create\", \"m.room.join_rules\",\n         \"m.room.power_levels\", \"m.room.topic\",\n         \"com.example.state\"].indexOf(opts.type) !== -1) {\n        event.state_key = \"\";\n    }\n    return opts.event ? new MatrixEvent(event) : event;\n};\n\n/**\n * Create an m.presence event.\n * @param {Object} opts Values for the presence.\n * @return {Object|MatrixEvent} The event\n */\nexport function mkPresence(opts) {\n    if (!opts.user) {\n        throw new Error(\"Missing user\");\n    }\n    var event = {\n        event_id: \"$\" + Math.random() + \"-\" + Math.random(),\n        type: \"m.presence\",\n        sender: opts.user,\n        content: {\n            avatar_url: opts.url,\n            displayname: opts.name,\n            last_active_ago: opts.ago,\n            presence: opts.presence || \"offline\"\n        }\n    };\n    return opts.event ? new MatrixEvent(event) : event;\n};\n\n/**\n * Create an m.room.member event.\n * @param {Object} opts Values for the membership.\n * @param {string} opts.room The room ID for the event.\n * @param {string} opts.mship The content.membership for the event.\n * @param {string} opts.prevMship The prev_content.membership for the event.\n * @param {string} opts.user The user ID for the event.\n * @param {RoomMember} opts.target The target of the event.\n * @param {string} opts.skey The other user ID for the event if applicable\n * e.g. for invites/bans.\n * @param {string} opts.name The content.displayname for the event.\n * @param {string} opts.url The content.avatar_url for the event.\n * @param {boolean} opts.event True to make a MatrixEvent.\n * @return {Object|MatrixEvent} The event\n */\nexport function mkMembership(opts) {\n    opts.type = \"m.room.member\";\n    if (!opts.skey) {\n        opts.skey = opts.user;\n    }\n    if (!opts.mship) {\n        throw new Error(\"Missing .mship => \" + JSON.stringify(opts));\n    }\n    opts.content = {\n        membership: opts.mship\n    };\n    if (opts.prevMship) {\n        opts.prev_content = { membership: opts.prevMship };\n    }\n    if (opts.name) { opts.content.displayname = opts.name; }\n    if (opts.url) { opts.content.avatar_url = opts.url; }\n    let e = mkEvent(opts);\n    if (opts.target) {\n        e.target = opts.target;\n    }\n    return e;\n};\n\n/**\n * Create an m.room.message event.\n * @param {Object} opts Values for the message\n * @param {string} opts.room The room ID for the event.\n * @param {string} opts.user The user ID for the event.\n * @param {string} opts.msg Optional. The content.body for the event.\n * @param {boolean} opts.event True to make a MatrixEvent.\n * @return {Object|MatrixEvent} The event\n */\nexport function mkMessage(opts) {\n    opts.type = \"m.room.message\";\n    if (!opts.msg) {\n        opts.msg = \"Random->\" + Math.random();\n    }\n    if (!opts.room || !opts.user) {\n        throw new Error(\"Missing .room or .user from\", opts);\n    }\n    opts.content = {\n        msgtype: \"m.text\",\n        body: opts.msg\n    };\n    return mkEvent(opts);\n}\n\nexport function mkStubRoom(roomId = null) {\n    var stubTimeline = { getEvents: () => [] };\n    return {\n        roomId,\n        getReceiptsForEvent: sinon.stub().returns([]),\n        getMember: sinon.stub().returns({}),\n        getJoinedMembers: sinon.stub().returns([]),\n        getPendingEvents: () => [],\n        getLiveTimeline: () => stubTimeline,\n        getUnfilteredTimelineSet: () => null,\n        getAccountData: () => null,\n        hasMembershipState: () => null,\n        currentState: {\n            getStateEvents: sinon.stub(),\n            members: [],\n        },\n    };\n}\n"},{"filePath":"/home/rav/work/matrix-react-sdk/test/utils/MegolmExportEncryption-test.js","messages":[{"ruleId":"max-len","severity":1,"message":"Line 28 exceeds the maximum line length of 90.","line":28,"column":1,"nodeType":"Program","source":"        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXNhbHRzYWx0c2FsdHNhbHSIiIiIiIiIiIiIiIiIiIiIAAAACmIRUW2OjZ3L2l6j9h0lHlV3M2dx\\ncissyYBxjsfsAndErh065A8=\\n-----END MEGOLM SESSION DATA-----\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":28,"column":185,"nodeType":"Literal","source":"        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXNhbHRzYWx0c2FsdHNhbHSIiIiIiIiIiIiIiIiIiIiIAAAACmIRUW2OjZ3L2l6j9h0lHlV3M2dx\\ncissyYBxjsfsAndErh065A8=\\n-----END MEGOLM SESSION DATA-----\"","fix":{"range":[978,978],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 33 exceeds the maximum line length of 90.","line":33,"column":1,"nodeType":"Program","source":"        \"-----BEGIN MEGOLM SESSION DATA-----\\nAW1vcmVzYWx0bW9yZXNhbHT//////////wAAAAAAAAAAAAAD6KyBpe1Niv5M5NPm4ZATsJo5nghk\\nKYu63a0YQ5DRhUWEKk7CcMkrKnAUiZny\\n-----END MEGOLM SESSION DATA-----\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":33,"column":193,"nodeType":"Literal","source":"        \"-----BEGIN MEGOLM SESSION DATA-----\\nAW1vcmVzYWx0bW9yZXNhbHT//////////wAAAAAAAAAAAAAD6KyBpe1Niv5M5NPm4ZATsJo5nghk\\nKYu63a0YQ5DRhUWEKk7CcMkrKnAUiZny\\n-----END MEGOLM SESSION DATA-----\"","fix":{"range":[1234,1234],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 38 exceeds the maximum line length of 90.","line":38,"column":1,"nodeType":"Program","source":"        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXllc3NhbHR5Z29vZG5lc3P//////////wAAAAAAAAAAAAAD6OIW+Je7gwvjd4kYrb+49gKCfExw\\nMgJBMD4mrhLkmgAngwR1pHjbWXaoGybtiAYr0moQ93GrBQsCzPbvl82rZhaXO3iH5uHo/RCEpOqp\\nPgg29363BGR+/Ripq/VCLKGNbw==\\n-----END MEGOLM SESSION DATA-----\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":38,"column":267,"nodeType":"Literal","source":"        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXllc3NhbHR5Z29vZG5lc3P//////////wAAAAAAAAAAAAAD6OIW+Je7gwvjd4kYrb+49gKCfExw\\nMgJBMD4mrhLkmgAngwR1pHjbWXaoGybtiAYr0moQ93GrBQsCzPbvl82rZhaXO3iH5uHo/RCEpOqp\\nPgg29363BGR+/Ripq/VCLKGNbw==\\n-----END MEGOLM SESSION DATA-----\"","fix":{"range":[1611,1611],"text":","}},{"ruleId":"max-len","severity":1,"message":"Line 42 exceeds the maximum line length of 90.","line":42,"column":1,"nodeType":"Program","source":"        \"passwordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpassword\","},{"ruleId":"max-len","severity":1,"message":"Line 43 exceeds the maximum line length of 90.","line":43,"column":1,"nodeType":"Program","source":"        \"-----BEGIN MEGOLM SESSION DATA-----\\nAf//////////////////////////////////////////AAAD6IAZJy7IQ7Y0idqSw/bmpngEEVVh\\ngsH+8ptgqxw6ZVWQnohr8JsuwH9SwGtiebZuBu5smPCO+RFVWH2cQYslZijXv/BEH/txvhUrrtCd\\nbWnSXS9oymiqwUIGs08sXI33ZA==\\n-----END MEGOLM SESSION DATA-----\""},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":43,"column":267,"nodeType":"Literal","source":"        \"-----BEGIN MEGOLM SESSION DATA-----\\nAf//////////////////////////////////////////AAAD6IAZJy7IQ7Y0idqSw/bmpngEEVVh\\ngsH+8ptgqxw6ZVWQnohr8JsuwH9SwGtiebZuBu5smPCO+RFVWH2cQYslZijXv/BEH/txvhUrrtCd\\nbWnSXS9oymiqwUIGs08sXI33ZA==\\n-----END MEGOLM SESSION DATA-----\"","fix":{"range":[2235,2235],"text":","}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":44,"column":6,"nodeType":"ArrayExpression","source":"    ]","fix":{"range":[2241,2241],"text":","}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":56,"column":13,"nodeType":"ThisExpression","source":"            this.skip();"},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":58,"column":7,"nodeType":"ExpressionStatement","source":"    })","fix":{"range":[2560,2560],"text":";"}},{"ruleId":"no-invalid-this","severity":2,"message":"Unexpected 'this'.","line":61,"column":30,"nodeType":"ThisExpression","source":"        testUtils.beforeEach(this);"},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":67,"column":79,"nodeType":"ExpressionStatement","source":"            expect(()=>{MegolmExportEncryption.decryptMegolmKeyFile(input, '')})","fix":{"range":[2854,2854],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":74,"column":79,"nodeType":"ExpressionStatement","source":"            expect(()=>{MegolmExportEncryption.decryptMegolmKeyFile(input, '')})","fix":{"range":[3140,3140],"text":";"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":87,"column":51,"nodeType":"Identifier","source":"                    stringToArray(input), password","fix":{"range":[3610,3610],"text":","}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":91,"column":19,"nodeType":"ReturnStatement","source":"                })","fix":{"range":[3761,3761],"text":";"}},{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":92,"column":14,"nodeType":"EmptyStatement","source":"            };","fix":{"range":[3775,3776],"text":""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":108,"column":41,"nodeType":"Identifier","source":"                    ciphertext, password","fix":{"range":[4348,4348],"text":","}}],"errorCount":14,"warningCount":5,"source":"/*\nCopyright 2017 Vector Creations Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n\"use strict\";\n\nimport * as MegolmExportEncryption from 'utils/MegolmExportEncryption';\n\nimport * as testUtils from '../test-utils';\nimport expect from 'expect';\n\nconst TEST_VECTORS=[\n    [\n        \"plain\",\n        \"password\",\n        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXNhbHRzYWx0c2FsdHNhbHSIiIiIiIiIiIiIiIiIiIiIAAAACmIRUW2OjZ3L2l6j9h0lHlV3M2dx\\ncissyYBxjsfsAndErh065A8=\\n-----END MEGOLM SESSION DATA-----\"\n    ],\n    [\n        \"Hello, World\",\n        \"betterpassword\",\n        \"-----BEGIN MEGOLM SESSION DATA-----\\nAW1vcmVzYWx0bW9yZXNhbHT//////////wAAAAAAAAAAAAAD6KyBpe1Niv5M5NPm4ZATsJo5nghk\\nKYu63a0YQ5DRhUWEKk7CcMkrKnAUiZny\\n-----END MEGOLM SESSION DATA-----\"\n    ],\n    [\n        \"alphanumericallyalphanumericallyalphanumericallyalphanumerically\",\n        \"SWORDFISH\",\n        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXllc3NhbHR5Z29vZG5lc3P//////////wAAAAAAAAAAAAAD6OIW+Je7gwvjd4kYrb+49gKCfExw\\nMgJBMD4mrhLkmgAngwR1pHjbWXaoGybtiAYr0moQ93GrBQsCzPbvl82rZhaXO3iH5uHo/RCEpOqp\\nPgg29363BGR+/Ripq/VCLKGNbw==\\n-----END MEGOLM SESSION DATA-----\"\n    ],\n    [\n        \"alphanumericallyalphanumericallyalphanumericallyalphanumerically\",\n        \"passwordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpassword\",\n        \"-----BEGIN MEGOLM SESSION DATA-----\\nAf//////////////////////////////////////////AAAD6IAZJy7IQ7Y0idqSw/bmpngEEVVh\\ngsH+8ptgqxw6ZVWQnohr8JsuwH9SwGtiebZuBu5smPCO+RFVWH2cQYslZijXv/BEH/txvhUrrtCd\\nbWnSXS9oymiqwUIGs08sXI33ZA==\\n-----END MEGOLM SESSION DATA-----\"\n    ]\n]\n;\n\nfunction stringToArray(s) {\n    return new TextEncoder().encode(s).buffer;\n}\n\ndescribe('MegolmExportEncryption', function() {\n    before(function() {\n        // if we don't have subtlecrypto, go home now\n        if (!window.crypto.subtle && !window.crypto.webkitSubtle) {\n            this.skip();\n        }\n    })\n\n    beforeEach(function() {\n        testUtils.beforeEach(this);\n    });\n\n    describe('decrypt', function() {\n        it('should handle missing header', function() {\n            const input=stringToArray(`-----`);\n            expect(()=>{MegolmExportEncryption.decryptMegolmKeyFile(input, '')})\n                .toThrow('Header line not found');\n        });\n\n        it('should handle missing trailer', function() {\n            const input=stringToArray(`-----BEGIN MEGOLM SESSION DATA-----\n-----`);\n            expect(()=>{MegolmExportEncryption.decryptMegolmKeyFile(input, '')})\n                .toThrow('Trailer line not found');\n        });\n\n        it('should decrypt a range of inputs', function(done) {\n            function next(i) {\n                if (i >= TEST_VECTORS.length) {\n                    done();\n                    return;\n                }\n\n                const [plain, password, input] = TEST_VECTORS[i];\n                return MegolmExportEncryption.decryptMegolmKeyFile(\n                    stringToArray(input), password\n                ).then((decrypted) => {\n                    expect(decrypted).toEqual(plain);\n                    return next(i+1);\n                })\n            };\n            return next(0).catch(done);\n        });\n    });\n\n    describe('encrypt', function() {\n        it('should round-trip', function(done) {\n            const input =\n                  'words words many words in plain text here'.repeat(100);\n\n            const password = 'my super secret passphrase';\n\n            return MegolmExportEncryption.encryptMegolmKeyFile(\n                input, password, {kdf_rounds: 1000},\n            ).then((ciphertext) => {\n                return MegolmExportEncryption.decryptMegolmKeyFile(\n                    ciphertext, password\n                );\n            }).then((plaintext) => {\n                expect(plaintext).toEqual(input);\n                done();\n            }).catch(done);\n        });\n    });\n});\n"}]
