[
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"./MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return MatrixClientPeg.get().requestAdd3pidEmailToken(emailAddress, this.clientSecret, 1).then((res) => {", 
                "message": "Line 41 exceeds the maximum line length of 90.", 
                "line": 41
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2418, 
                        2421
                    ]
                }, 
                "source": "        var identityServerDomain = MatrixClientPeg.get().idBaseUrl.split(\"://\")[1];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 61
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 44, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2667, 
                        2667
                    ]
                }, 
                "source": "            id_server: identityServerDomain", 
                "message": "Missing trailing comma.", 
                "line": 65
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                err.message = \"Failed to verify email address: make sure you clicked the link in the email\";", 
                "message": "Line 68 exceeds the maximum line length of 90.", 
                "line": 68
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        2876, 
                        2889
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 69
            }
        ], 
        "errorCount": 1, 
        "warningCount": 5, 
        "filePath": "src/AddThreepid.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var React = require(\"react\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        598, 
                        601
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        635, 
                        638
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1071, 
                        1074
                    ]
                }, 
                "source": "        var client = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 35
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1710, 
                        1713
                    ]
                }, 
                "source": "        var client = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            client.removeListener(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);", 
                "message": "Line 56 exceeds the maximum line length of 90.", 
                "line": 56
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2438, 
                        2441
                    ]
                }, 
                "source": "        var device = this.state.device;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 79
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2556, 
                        2559
                    ]
                }, 
                "source": "        var verificationStatus = (<b>NOT verified</b>);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 84
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3599, 
                        3602
                    ]
                }, 
                "source": "        var event = this.props.event;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 116
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <td><code>{ event.getKeysClaimed().ed25519 || <i>none</i> }</code></td>", 
                "message": "Line 131 exceeds the maximum line length of 90.", 
                "line": 131
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <td>{ event.getWireContent().algorithm || <i>unencrypted</i> }</td>", 
                "message": "Line 135 exceeds the maximum line length of 90.", 
                "line": 135
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <td><code>{ event.getWireContent().session_id || <i>none</i> }</code></td>", 
                "message": "Line 147 exceeds the maximum line length of 90.", 
                "line": 147
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5022, 
                        5025
                    ]
                }, 
                "source": "        var DeviceVerifyButtons = sdk.getComponent('elements.DeviceVerifyButtons');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 155
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5107, 
                        5110
                    ]
                }, 
                "source": "        var buttons = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 157
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <button className=\"mx_Dialog_primary\" onClick={ this.props.onFinished } autoFocus={ true }>", 
                "message": "Line 179 exceeds the maximum line length of 90.", 
                "line": 179
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6162, 
                        6162
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 186
            }
        ], 
        "errorCount": 1, 
        "warningCount": 15, 
        "filePath": "src/async-components/views/dialogs/EncryptedEventDialog.js"
    }, 
    {
        "messages": [], 
        "errorCount": 0, 
        "warningCount": 0, 
        "filePath": "src/async-components/views/dialogs/ExportE2eKeysDialog.js"
    }, 
    {
        "messages": [], 
        "errorCount": 0, 
        "warningCount": 0, 
        "filePath": "src/async-components/views/dialogs/ImportE2eKeysDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 14
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'query'.", 
                "line": 14
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'selection'.", 
                "line": 14
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'force'.", 
                "line": 14
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    getCurrentCommand(query: string, selection: {start: number, end: number}, force: boolean = false): ?string {", 
                "message": "Line 17 exceeds the maximum line length of 90.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 13, 
                "source": "            let matchStart = match.index,", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 32
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "source": "            let matchStart = match.index,", 
                "message": "'matchStart' is never reassigned. Use 'const' instead.", 
                "line": 32
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "source": "                matchEnd = matchStart + match[0].length;", 
                "message": "'matchEnd' is never reassigned. Use 'const' instead.", 
                "line": 33
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    async getCompletions(query: string, selection: SelectionRange, force: boolean = false): Array<Completion> {", 
                "message": "Line 53 exceeds the maximum line length of 90.", 
                "line": 53
            }
        ], 
        "errorCount": 0, 
        "warningCount": 9, 
        "filePath": "src/autocomplete/AutocompleteProvider.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 7, 
                "fix": {
                    "text": "(completer)", 
                    "range": [
                        630, 
                        639
                    ]
                }, 
                "source": "].map(completer => completer.getInstance());", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 29
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "export async function getCompletions(query: string, selection: SelectionRange, force: boolean = false): Array<Completion> {", 
                "message": "Line 34 exceeds the maximum line length of 90.", 
                "line": 34
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 23, 
                "fix": {
                    "text": "(provider)", 
                    "range": [
                        1397, 
                        1405
                    ]
                }, 
                "source": "        PROVIDERS.map(provider => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 43
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 20, 
                "source": "            return Q(provider.getCompletions(query, selection, force))", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 44
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 11, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1547, 
                        1547
                    ]
                }, 
                "source": "        })", 
                "message": "Missing trailing comma.", 
                "line": 46
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 17, 
                "fix": {
                    "text": "(completion)", 
                    "range": [
                        1599, 
                        1609
                    ]
                }, 
                "source": "        .filter(completion => completion.state === \"fulfilled\")", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 50
            }
        ], 
        "errorCount": 1, 
        "warningCount": 5, 
        "filePath": "src/autocomplete/Autocompleter.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1145, 
                        1145
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 46
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 5, 
                "fix": {
                    "text": "const", 
                    "range": [
                        1150, 
                        1153
                    ]
                }, 
                "source": "let COMMAND_RE = /(^\\/\\w*)/g;", 
                "message": "'COMMAND_RE' is never reassigned. Use 'const' instead.", 
                "line": 49
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 14, 
                "fix": {
                    "text": "const", 
                    "range": [
                        1552, 
                        1555
                    ]
                }, 
                "source": "        let {command, range} = this.getCurrentCommand(query, selection);", 
                "message": "'command' is never reassigned. Use 'const' instead.", 
                "line": 63
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 23, 
                "fix": {
                    "text": "const", 
                    "range": [
                        1552, 
                        1555
                    ]
                }, 
                "source": "        let {command, range} = this.getCurrentCommand(query, selection);", 
                "message": "'range' is never reassigned. Use 'const' instead.", 
                "line": 63
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 60, 
                "fix": {
                    "text": "(result)", 
                    "range": [
                        1699, 
                        1705
                    ]
                }, 
                "source": "            completions = this.fuse.search(command[0]).map(result => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 65
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        2255, 
                        2268
                    ]
                }, 
                "source": "            {instance = new CommandProvider();}", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 86
            }
        ], 
        "errorCount": 1, 
        "warningCount": 5, 
        "filePath": "src/autocomplete/CommandProvider.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import ReactDOM from 'react-dom';", 
                "message": "'ReactDOM' is defined but never used.", 
                "line": 2
            }, 
            {
                "nodeType": "ExperimentalRestProperty", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": "", 
                    "range": [
                        670, 
                        671
                    ]
                }, 
                "source": "            ...restProps,", 
                "message": "Unexpected trailing comma.", 
                "line": 18
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <div className={classNames('mx_Autocomplete_Completion_block', className)} {...restProps}>", 
                "message": "Line 21 exceeds the maximum line length of 90.", 
                "line": 21
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <span className=\"mx_Autocomplete_Completion_description\">{description}</span>", 
                "message": "Line 24 exceeds the maximum line length of 90.", 
                "line": 24
            }, 
            {
                "nodeType": "ExperimentalRestProperty", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": "", 
                    "range": [
                        1535, 
                        1536
                    ]
                }, 
                "source": "            ...restProps,", 
                "message": "Unexpected trailing comma.", 
                "line": 44
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <div className={classNames('mx_Autocomplete_Completion_pill', className)} {...restProps}>", 
                "message": "Line 47 exceeds the maximum line length of 90.", 
                "line": 47
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <span className=\"mx_Autocomplete_Completion_description\">{description}</span>", 
                "message": "Line 51 exceeds the maximum line length of 90.", 
                "line": 51
            }
        ], 
        "errorCount": 3, 
        "warningCount": 4, 
        "filePath": "src/autocomplete/Components.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 14, 
                "fix": {
                    "text": "const", 
                    "range": [
                        668, 
                        671
                    ]
                }, 
                "source": "        let {command, range} = this.getCurrentCommand(query, selection);", 
                "message": "'command' is never reassigned. Use 'const' instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 23, 
                "fix": {
                    "text": "const", 
                    "range": [
                        668, 
                        671
                    ]
                }, 
                "source": "        let {command, range} = this.getCurrentCommand(query, selection);", 
                "message": "'range' is never reassigned. Use 'const' instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        975, 
                        978
                    ]
                }, 
                "source": "        let results = json.Results.map(result => {", 
                "message": "'results' is never reassigned. Use 'const' instead.", 
                "line": 32
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 40, 
                "fix": {
                    "text": "(result)", 
                    "range": [
                        1006, 
                        1012
                    ]
                }, 
                "source": "        let results = json.Results.map(result => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 32
            }
        ], 
        "errorCount": 0, 
        "warningCount": 4, 
        "filePath": "src/autocomplete/DuckDuckGoProvider.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 23, 
                "source": "import {emojioneList, shortnameToImage, shortnameToUnicode} from 'emojione';", 
                "message": "'shortnameToImage' is defined but never used.", 
                "line": 3
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 30, 
                "source": "import type {SelectionRange, Completion} from './Autocompleter';", 
                "message": "'Completion' is defined but never used.", 
                "line": 7
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 14, 
                "fix": {
                    "text": "const", 
                    "range": [
                        785, 
                        788
                    ]
                }, 
                "source": "        let {command, range} = this.getCurrentCommand(query, selection);", 
                "message": "'command' is never reassigned. Use 'const' instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 23, 
                "fix": {
                    "text": "const", 
                    "range": [
                        785, 
                        788
                    ]
                }, 
                "source": "        let {command, range} = this.getCurrentCommand(query, selection);", 
                "message": "'range' is never reassigned. Use 'const' instead.", 
                "line": 24
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 60, 
                "fix": {
                    "text": "(result)", 
                    "range": [
                        932, 
                        938
                    ]
                }, 
                "source": "            completions = this.fuse.search(command[0]).map(result => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 26
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <PillCompletion title={shortname} initialComponent={<EmojiText style={{maxWidth: '1em'}}>{unicode}</EmojiText>} />", 
                "message": "Line 32 exceeds the maximum line length of 90.", 
                "line": 32
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        1553, 
                        1566
                    ]
                }, 
                "source": "            {instance = new EmojiProvider();}", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 47
            }
        ], 
        "errorCount": 2, 
        "warningCount": 5, 
        "filePath": "src/autocomplete/EmojiProvider.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    async getCompletions(query: string, selection: {start: number, end: number}, force = false) {", 
                "message": "Line 23 exceeds the maximum line length of 90.", 
                "line": 23
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        796, 
                        799
                    ]
                }, 
                "source": "        let client = MatrixClientPeg.get();", 
                "message": "'client' is never reassigned. Use 'const' instead.", 
                "line": 26
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 52, 
                "fix": {
                    "text": "(room)", 
                    "range": [
                        1111, 
                        1115
                    ]
                }, 
                "source": "            this.fuse.set(client.getRooms().filter(room => !!room).map(room => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 31
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 72, 
                "fix": {
                    "text": "(room)", 
                    "range": [
                        1131, 
                        1135
                    ]
                }, 
                "source": "            this.fuse.set(client.getRooms().filter(room => !!room).map(room => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 31
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 60, 
                "fix": {
                    "text": "(room)", 
                    "range": [
                        1378, 
                        1382
                    ]
                }, 
                "source": "            completions = this.fuse.search(command[0]).map(room => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 38
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        1404, 
                        1407
                    ]
                }, 
                "source": "                let displayAlias = getDisplayAliasForRoom(room.room) || room.roomId;", 
                "message": "'displayAlias' is never reassigned. Use 'const' instead.", 
                "line": 39
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <PillCompletion initialComponent={<RoomAvatar width={24} height={24} room={room.room} />} title={room.name} description={displayAlias} />", 
                "message": "Line 43 exceeds the maximum line length of 90.", 
                "line": 43
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            }).filter(completion => !!completion.completion && completion.completion.length > 0).slice(0, 4);", 
                "message": "Line 47 exceeds the maximum line length of 90.", 
                "line": 47
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 23, 
                "fix": {
                    "text": "(completion)", 
                    "range": [
                        1830, 
                        1840
                    ]
                }, 
                "source": "            }).filter(completion => !!completion.completion && completion.completion.length > 0).slice(0, 4);", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 47
            }
        ], 
        "errorCount": 0, 
        "warningCount": 9, 
        "filePath": "src/autocomplete/RoomProvider.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import Q from 'q';", 
                "message": "'Q' is defined but never used.", 
                "line": 3
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    async getCompletions(query: string, selection: {start: number, end: number}, force = false) {", 
                "message": "Line 23 exceeds the maximum line length of 90.", 
                "line": 23
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 14, 
                "fix": {
                    "text": "const", 
                    "range": [
                        752, 
                        755
                    ]
                }, 
                "source": "        let {command, range} = this.getCurrentCommand(query, selection, force);", 
                "message": "'command' is never reassigned. Use 'const' instead.", 
                "line": 27
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 23, 
                "fix": {
                    "text": "const", 
                    "range": [
                        752, 
                        755
                    ]
                }, 
                "source": "        let {command, range} = this.getCurrentCommand(query, selection, force);", 
                "message": "'range' is never reassigned. Use 'const' instead.", 
                "line": 27
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 60, 
                "fix": {
                    "text": "(user)", 
                    "range": [
                        945, 
                        949
                    ]
                }, 
                "source": "            completions = this.fuse.search(command[0]).map(user => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 30
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        971, 
                        974
                    ]
                }, 
                "source": "                let displayName = (user.name || user.userId || '').replace(' (IRC)', ''); // FIXME when groups are done", 
                "message": "'displayName' is never reassigned. Use 'const' instead.", 
                "line": 31
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            initialComponent={<MemberAvatar member={user} width={24} height={24}/>}", 
                "message": "Line 42 exceeds the maximum line length of 90.", 
                "line": 42
            }
        ], 
        "errorCount": 1, 
        "warningCount": 6, 
        "filePath": "src/autocomplete/UserProvider.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        582, 
                        585
                    ]
                }, 
                "source": "var ContentRepo = require(\"matrix-js-sdk\").ContentRepo;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        638, 
                        641
                    ]
                }, 
                "source": "var MatrixClientPeg = require('./MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        790, 
                        793
                    ]
                }, 
                "source": "        var url = member.getAvatarUrl(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        976, 
                        976
                    ]
                }, 
                "source": "            false", 
                "message": "Missing trailing comma.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1381, 
                        1384
                    ]
                }, 
                "source": "        var url = ContentRepo.getHttpUriForMxc(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 41
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1530, 
                        1530
                    ]
                }, 
                "source": "            width, height, resizeMethod", 
                "message": "Missing trailing comma.", 
                "line": 43
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1698, 
                        1701
                    ]
                }, 
                "source": "        var images = ['76cfa6', '50e2c2', 'f4c371'];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 52
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1751, 
                        1754
                    ]
                }, 
                "source": "        var total = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 53
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < s.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1928, 
                        1928
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 58
            }
        ], 
        "errorCount": 3, 
        "warningCount": 7, 
        "filePath": "src/Avatar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 40
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 48
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 1, 
                "ruleId": "flowtype/require-return-type", 
                "column": 29, 
                "source": "    screenCaptureErrorString() {", 
                "message": "Missing return type annotation.", 
                "line": 82
            }
        ], 
        "errorCount": 0, 
        "warningCount": 3, 
        "filePath": "src/BasePlatform.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1480, 
                        1483
                    ]
                }, 
                "source": "var MatrixClientPeg = require('./MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1532, 
                        1535
                    ]
                }, 
                "source": "var PlatformPeg = require(\"./PlatformPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 55
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1576, 
                        1579
                    ]
                }, 
                "source": "var Modal = require('./Modal');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 56
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1608, 
                        1611
                    ]
                }, 
                "source": "var sdk = require('./index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 57
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1638, 
                        1641
                    ]
                }, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 58
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1677, 
                        1680
                    ]
                }, 
                "source": "var dis = require(\"./dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 59
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1761, 
                        1764
                    ]
                }, 
                "source": "var calls = global.mxCalls;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 64
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1789, 
                        1792
                    ]
                }, 
                "source": "var ConferenceHandler = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 65
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1820, 
                        1823
                    ]
                }, 
                "source": "var audioPromises = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 67
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1954, 
                        1957
                    ]
                }, 
                "source": "    var audio = document.getElementById(audioId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 72
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2218, 
                        2227
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 79
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2414, 
                        2417
                    ]
                }, 
                "source": "    var audio = document.getElementById(audioId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 89
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2609, 
                        2618
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 93
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        3450, 
                        3459
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 117
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        3600, 
                        3609
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 121
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        3809, 
                        3818
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4174, 
                        4177
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 134
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 66, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4383, 
                        4383
                    ]
                }, 
                "source": "                description: \"The remote side failed to pick up.\"", 
                "message": "Missing trailing comma.", 
                "line": 137
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4409, 
                        4418
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 139
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4565, 
                        4574
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 143
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4716, 
                        4725
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 147
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        \"Call state in %s changed to %s (%s)\", roomId, status, (call ? call.call_state : \"-\")", 
                "message": "Line 157 exceeds the maximum line length of 90.", 
                "line": 157
            }, 
            {
                "nodeType": "ConditionalExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 94, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5035, 
                        5035
                    ]
                }, 
                "source": "        \"Call state in %s changed to %s (%s)\", roomId, status, (call ? call.call_state : \"-\")", 
                "message": "Missing trailing comma.", 
                "line": 157
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 5, 
                "fix": {
                    "text": "    ", 
                    "range": [
                        5134, 
                        5139
                    ]
                }, 
                "source": "    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 163
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 24, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5352, 
                        5352
                    ]
                }, 
                "source": "        room_id: roomId", 
                "message": "Missing trailing comma.", 
                "line": 173
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5611, 
                        5620
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 183
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5770, 
                        5770
                    ]
                }, 
                "source": "                payload.local_element", 
                "message": "Missing trailing comma.", 
                "line": 187
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5795, 
                        5804
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 189
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 54, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6356, 
                        6356
                    ]
                }, 
                "source": "                    description: screenCapErrorString", 
                "message": "Missing trailing comma.", 
                "line": 198
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6536, 
                        6536
                    ]
                }, 
                "source": "                payload.local_element", 
                "message": "Missing trailing comma.", 
                "line": 204
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        6561, 
                        6570
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 206
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 62, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7007, 
                        7007
                    ]
                }, 
                "source": "                    description: \"You are already in a call.\"", 
                "message": "Missing trailing comma.", 
                "line": 218
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 80, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7475, 
                        7475
                    ]
                }, 
                "source": "                    description: \"You cannot place VoIP calls in this browser.\"", 
                "message": "Missing trailing comma.", 
                "line": 228
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var room = MatrixClientPeg.get().getRoom(payload.room_id);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 233
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var members = room.getJoinedMembers();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 239
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 74, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8035, 
                        8035
                    ]
                }, 
                "source": "                    description: \"You cannot place a call with yourself.\"", 
                "message": "Missing trailing comma.", 
                "line": 243
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        8093, 
                        8106
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 246
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var call = Matrix.createNewMatrixCall(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 249
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 59, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8335, 
                        8335
                    ]
                }, 
                "source": "                    MatrixClientPeg.get(), payload.room_id", 
                "message": "Missing trailing comma.", 
                "line": 250
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        8401, 
                        8414
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 253
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 57, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8714, 
                        8714
                    ]
                }, 
                "source": "                    local_element: payload.local_element", 
                "message": "Missing trailing comma.", 
                "line": 260
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 85, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9128, 
                        9128
                    ]
                }, 
                "source": "                    description: \"Conference calls are not supported in this client\"", 
                "message": "Missing trailing comma.", 
                "line": 269
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        9162, 
                        9175
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 271
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 80, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9481, 
                        9481
                    ]
                }, 
                "source": "                    description: \"You cannot place VoIP calls in this browser.\"", 
                "message": "Missing trailing comma.", 
                "line": 276
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        9515, 
                        9528
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 278
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        10292, 
                        10305
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 290
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10328, 
                        10331
                    ]
                }, 
                "source": "                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 292
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    description: \"Conference calling is in development and may not be reliable.\",", 
                "message": "Line 295 exceeds the maximum line length of 90.", 
                "line": 295
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 33, 
                "fix": {
                    "text": "(confirm)", 
                    "range": [
                        10615, 
                        10622
                    ]
                }, 
                "source": "                    onFinished: confirm=>{", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 296
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 71, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10802, 
                        10802
                    ]
                }, 
                "source": "                                MatrixClientPeg.get(), payload.room_id", 
                "message": "Missing trailing comma.", 
                "line": 299
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                const ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Line 303 exceeds the maximum line length of 90.", 
                "line": 303
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var call = payload.call;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 328
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var call = payload.call;", 
                "message": "'call' is already defined.", 
                "line": 328
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12844, 
                        12844
                    ]
                }, 
                "source": "                room_id: payload.room_id", 
                "message": "Missing trailing comma.", 
                "line": 347
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13029, 
                        13032
                    ]
                }, 
                "source": "var callHandler = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 358
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13096, 
                        13099
                    ]
                }, 
                "source": "        var call = module.exports.getCall(roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 360
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13467, 
                        13470
                    ]
                }, 
                "source": "        var roomsWithCalls = Object.keys(calls);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 376
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < roomsWithCalls.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 377
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        13960, 
                        13960
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 392
            }
        ], 
        "errorCount": 17, 
        "warningCount": 42, 
        "filePath": "src/CallHandler.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        584, 
                        587
                    ]
                }, 
                "source": "var classNames = require('classnames');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        624, 
                        627
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        654, 
                        657
                    ]
                }, 
                "source": "var ReactDOM = require('react-dom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1211, 
                        1214
                    ]
                }, 
                "source": "        var container = document.getElementById(this.ContextualMenuContainerId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 39
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1571, 
                        1574
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 51
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1597, 
                        1600
                    ]
                }, 
                "source": "        var closeMenu = function() {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 53
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 46, 
                "source": "                props.onFinished.apply(null, arguments);", 
                "endLine": 57, 
                "endColumn": 55, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 57
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1837, 
                        1840
                    ]
                }, 
                "source": "        var position = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 61
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1902, 
                        1905
                    ]
                }, 
                "source": "        var chevronOffset = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 65
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2101, 
                        2104
                    ]
                }, 
                "source": "        var chevronCSS = \"\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 71
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2486, 
                        2489
                    ]
                }, 
                "source": "        var chevron = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 84
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            chevron = <div style={chevronOffset} className=\"mx_ContextualMenu_chevron_left\"></div>;", 
                "message": "Line 86 exceeds the maximum line length of 90.", 
                "line": 86
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            chevron = <div style={chevronOffset} className=\"mx_ContextualMenu_chevron_right\"></div>;", 
                "message": "Line 89 exceeds the maximum line length of 90.", 
                "line": 89
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2851, 
                        2854
                    ]
                }, 
                "source": "        var className = 'mx_ContextualMenu_wrapper';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 93
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2905, 
                        2908
                    ]
                }, 
                "source": "        var menuClasses = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 95
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3098, 
                        3101
                    ]
                }, 
                "source": "        var menuStyle = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 101
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3565, 
                        3568
                    ]
                }, 
                "source": "        var menu = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 116
            }
        ], 
        "errorCount": 0, 
        "warningCount": 17, 
        "filePath": "src/components/structures/ContextualMenu.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require(\"react\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        669, 
                        672
                    ]
                }, 
                "source": "var PresetValues = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        779, 
                        782
                    ]
                }, 
                "source": "var q = require('q');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var q = require('q');", 
                "message": "'q' is assigned a value but never used.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        801, 
                        804
                    ]
                }, 
                "source": "var sdk = require('../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1815, 
                        1818
                    ]
                }, 
                "source": "        var options = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 64
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 85, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2419, 
                        2419
                    ]
                }, 
                "source": "                            \"join_rule\": this.state.is_private ? \"invite\" : \"public\"", 
                "message": "Missing trailing comma.", 
                "line": 82
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2445, 
                        2445
                    ]
                }, 
                "source": "                        }", 
                "message": "Missing trailing comma.", 
                "line": 83
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            \"history_visibility\": this.state.share_history ? \"shared\" : \"invited\"", 
                "message": "Line 88 exceeds the maximum line length of 90.", 
                "line": 88
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 98, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2682, 
                        2682
                    ]
                }, 
                "source": "                            \"history_visibility\": this.state.share_history ? \"shared\" : \"invited\"", 
                "message": "Missing trailing comma.", 
                "line": 88
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2708, 
                        2708
                    ]
                }, 
                "source": "                        }", 
                "message": "Missing trailing comma.", 
                "line": 89
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2836, 
                        2839
                    ]
                }, 
                "source": "        var alias = this.getAliasLocalpart();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 97
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2959, 
                        2962
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 102
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3147, 
                        3150
                    ]
                }, 
                "source": "        var deferred = cli.createRoom(options);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 109
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3339, 
                        3342
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 119
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 31, 
                "source": "    onInviteChanged: function(invited_users) {", 
                "message": "Identifier 'invited_users' is not in camel case.", 
                "line": 204
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5637, 
                        5637
                    ]
                }, 
                "source": "            alias: alias", 
                "message": "Missing trailing comma.", 
                "line": 212
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5812, 
                        5815
                    ]
                }, 
                "source": "        var curr_phase = this.state.phase;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 223
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var curr_phase = this.state.phase;", 
                "message": "Identifier 'curr_phase' is not in camel case.", 
                "line": 223
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        if (curr_phase == this.phases.CREATING) {", 
                "message": "Identifier 'curr_phase' is not in camel case.", 
                "line": 224
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5909, 
                        5912
                    ]
                }, 
                "source": "            var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 225
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6051, 
                        6054
                    ]
                }, 
                "source": "            var error_box = \"\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 230
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var error_box = \"\";", 
                "message": "Identifier 'error_box' is not in camel case.", 
                "line": 230
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            if (curr_phase == this.phases.ERROR) {", 
                "message": "Identifier 'curr_phase' is not in camel case.", 
                "line": 231
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                error_box = (", 
                "message": "Identifier 'error_box' is not in camel case.", 
                "line": 232
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6340, 
                        6343
                    ]
                }, 
                "source": "            var CreateRoomButton = sdk.getComponent(\"create_room.CreateRoomButton\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 239
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6425, 
                        6428
                    ]
                }, 
                "source": "            var RoomAlias = sdk.getComponent(\"create_room.RoomAlias\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 240
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6496, 
                        6499
                    ]
                }, 
                "source": "            var Presets = sdk.getComponent(\"create_room.Presets\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 241
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6563, 
                        6566
                    ]
                }, 
                "source": "            var UserSelector = sdk.getComponent(\"elements.UserSelector\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 242
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6637, 
                        6640
                    ]
                }, 
                "source": "            var SimpleRoomHeader = sdk.getComponent(\"rooms.SimpleRoomHeader\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 243
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6717, 
                        6720
                    ]
                }, 
                "source": "            var domain = MatrixClientPeg.get().getDomain();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 245
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <SimpleRoomHeader title=\"CreateRoom\" collapsedRhs={ this.props.collapsedRhs }/>", 
                "message": "Line 249 exceeds the maximum line length of 90.", 
                "line": 249
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <input type=\"text\" ref=\"room_name\" value={this.state.room_name} onChange={this.onNameChange} placeholder=\"Name\"/> <br />", 
                "message": "Line 251 exceeds the maximum line length of 90.", 
                "line": 251
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <textarea className=\"mx_CreateRoom_description\" ref=\"topic\" value={this.state.topic} onChange={this.onTopicChange} placeholder=\"Topic\"/> <br />", 
                "message": "Line 252 exceeds the maximum line length of 90.", 
                "line": 252
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <RoomAlias ref=\"alias\" alias={this.state.alias} homeserver={ domain } onChange={this.onAliasChanged}/> <br />", 
                "message": "Line 253 exceeds the maximum line length of 90.", 
                "line": 253
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <UserSelector ref=\"user_selector\" selected_users={this.state.invited_users} onChange={this.onInviteChanged}/> <br />", 
                "message": "Line 254 exceeds the maximum line length of 90.", 
                "line": 254
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <Presets ref=\"presets\" onChange={this.onPresetChanged} preset={this.state.preset}/> <br />", 
                "message": "Line 255 exceeds the maximum line length of 90.", 
                "line": 255
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <input type=\"checkbox\" ref=\"is_private\" checked={this.state.is_private} onChange={this.onPrivateChanged}/>", 
                "message": "Line 258 exceeds the maximum line length of 90.", 
                "line": 258
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <input type=\"checkbox\" ref=\"share_history\" checked={this.state.share_history} onChange={this.onShareHistoryChanged}/>", 
                "message": "Line 264 exceeds the maximum line length of 90.", 
                "line": 264
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <input type=\"checkbox\" ref=\"encrypt\" checked={this.state.encrypt} onChange={this.onEncryptChanged}/>", 
                "message": "Line 270 exceeds the maximum line length of 90.", 
                "line": 270
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 22, 
                "source": "                    {error_box}", 
                "message": "Identifier 'error_box' is not in camel case.", 
                "line": 277
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8860, 
                        8860
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 282
            }
        ], 
        "errorCount": 7, 
        "warningCount": 36, 
        "filePath": "src/components/structures/CreateRoom.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        592, 
                        595
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "'ReactDOM' is assigned a value but never used.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        630, 
                        633
                    ]
                }, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        669, 
                        672
                    ]
                }, 
                "source": "var sdk = require('../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        703, 
                        706
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        759, 
                        762
                    ]
                }, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "'dis' is assigned a value but never used.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        871, 
                        874
                    ]
                }, 
                "source": "var FilePanel = React.createClass({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1994, 
                        1997
                    ]
                }, 
                "source": "        var client = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 59
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2038, 
                        2041
                    ]
                }, 
                "source": "        var room = client.getRoom(roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 60
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2106, 
                        2109
                    ]
                }, 
                "source": "            var filter = new Matrix.Filter(client.credentials.userId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 63
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2333, 
                        2333
                    ]
                }, 
                "source": "                            \"contains_url\": true", 
                "message": "Missing trailing comma.", 
                "line": 68
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2382, 
                        2382
                    ]
                }, 
                "source": "                    }", 
                "message": "Missing trailing comma.", 
                "line": 70
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2400, 
                        2400
                    ]
                }, 
                "source": "                }", 
                "message": "Missing trailing comma.", 
                "line": 71
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            client.getOrCreateFilter(\"FILTER_FILES_\" + client.credentials.userId, filter).then(", 
                "message": "Line 75 exceeds the maximum line length of 90.", 
                "line": 75
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2707, 
                        2710
                    ]
                }, 
                "source": "                    var timelineSet = room.getOrCreateFilteredTimelineSet(filter);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 78
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2985, 
                        2985
                    ]
                }, 
                "source": "                }", 
                "message": "Missing trailing comma.", 
                "line": 83
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        3010, 
                        3019
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 85
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3240, 
                        3243
                    ]
                }, 
                "source": "        var TimelinePanel = sdk.getComponent(\"structures.TimelinePanel\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 93
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3314, 
                        3317
                    ]
                }, 
                "source": "        var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 94
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4109, 
                        4118
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 110
            }
        ], 
        "errorCount": 6, 
        "warningCount": 16, 
        "filePath": "src/components/structures/FilePanel.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3007, 
                        3010
                    ]
                }, 
                "source": "        var handled = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 92
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3172, 
                        3175
                    ]
                }, 
                "source": "                    var action = ev.keyCode == KeyCode.UP ?", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 98
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /** dispatch a page-up/page-down/etc to the appropriate component */", 
                "message": "Missing JSDoc for parameter 'ev'.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4166, 
                        4169
                    ]
                }, 
                "source": "        var LeftPanel = sdk.getComponent('structures.LeftPanel');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 134
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4232, 
                        4235
                    ]
                }, 
                "source": "        var RightPanel = sdk.getComponent('structures.RightPanel');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 135
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4300, 
                        4303
                    ]
                }, 
                "source": "        var RoomView = sdk.getComponent('structures.RoomView');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 136
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4364, 
                        4367
                    ]
                }, 
                "source": "        var UserSettings = sdk.getComponent('structures.UserSettings');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 137
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4436, 
                        4439
                    ]
                }, 
                "source": "        var CreateRoom = sdk.getComponent('structures.CreateRoom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 138
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4504, 
                        4507
                    ]
                }, 
                "source": "        var RoomDirectory = sdk.getComponent('structures.RoomDirectory');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 139
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4578, 
                        4581
                    ]
                }, 
                "source": "        var MatrixToolbar = sdk.getComponent('globals.MatrixToolbar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 140
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4649, 
                        4652
                    ]
                }, 
                "source": "        var GuestWarningBar = sdk.getComponent('globals.GuestWarningBar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 141
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4724, 
                        4727
                    ]
                }, 
                "source": "        var NewVersionBar = sdk.getComponent('globals.NewVersionBar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 142
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4796, 
                        4799
                    ]
                }, 
                "source": "        var page_element;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 144
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var page_element;", 
                "message": "Identifier 'page_element' is not in camel case.", 
                "line": 144
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4822, 
                        4825
                    ]
                }, 
                "source": "        var right_panel = '';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 145
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var right_panel = '';", 
                "message": "Identifier 'right_panel' is not in camel case.", 
                "line": 145
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                page_element = <RoomView", 
                "message": "Identifier 'page_element' is not in camel case.", 
                "line": 149
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        roomAddress={this.props.currentRoomAlias || this.props.currentRoomId}", 
                "message": "Line 151 exceeds the maximum line length of 90.", 
                "line": 151
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (!this.props.collapse_rhs) right_panel = <RightPanel roomId={this.props.currentRoomId} opacity={this.props.sideOpacity} />;", 
                "message": "Line 165 exceeds the maximum line length of 90.", 
                "line": 165
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 47, 
                "source": "                if (!this.props.collapse_rhs) right_panel = <RightPanel roomId={this.props.currentRoomId} opacity={this.props.sideOpacity} />;", 
                "message": "Identifier 'right_panel' is not in camel case.", 
                "line": 165
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                page_element = <UserSettings", 
                "message": "Identifier 'page_element' is not in camel case.", 
                "line": 169
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;", 
                "message": "Line 175 exceeds the maximum line length of 90.", 
                "line": 175
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 47, 
                "source": "                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;", 
                "message": "Identifier 'right_panel' is not in camel case.", 
                "line": 175
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                page_element = <CreateRoom", 
                "message": "Identifier 'page_element' is not in camel case.", 
                "line": 179
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;", 
                "message": "Line 183 exceeds the maximum line length of 90.", 
                "line": 183
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 47, 
                "source": "                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;", 
                "message": "Identifier 'right_panel' is not in camel case.", 
                "line": 183
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                page_element = <RoomDirectory", 
                "message": "Identifier 'page_element' is not in camel case.", 
                "line": 187
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;", 
                "message": "Line 191 exceeds the maximum line length of 90.", 
                "line": 191
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 47, 
                "source": "                if (!this.props.collapse_rhs) right_panel = <RightPanel opacity={this.props.sideOpacity}/>;", 
                "message": "Identifier 'right_panel' is not in camel case.", 
                "line": 191
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                page_element = null; // deliberately null for now", 
                "message": "Identifier 'page_element' is not in camel case.", 
                "line": 194
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                right_panel = <RightPanel userId={this.props.viewUserId} opacity={this.props.sideOpacity} />;", 
                "message": "Line 195 exceeds the maximum line length of 90.", 
                "line": 195
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                right_panel = <RightPanel userId={this.props.viewUserId} opacity={this.props.sideOpacity} />;", 
                "message": "Identifier 'right_panel' is not in camel case.", 
                "line": 195
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7537, 
                        7540
                    ]
                }, 
                "source": "        var topBar;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 199
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            topBar = <NewVersionBar version={this.props.version} newVersion={this.props.newVersion}", 
                "message": "Line 201 exceeds the maximum line length of 90.", 
                "line": 201
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        7779, 
                        7788
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 204
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        7885, 
                        7894
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 207
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        else if (Notifier.supportsDesktopNotifications() && !Notifier.isEnabled() && !Notifier.isToolbarHidden()) {", 
                "message": "Line 208 exceeds the maximum line length of 90.", 
                "line": 208
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8061, 
                        8064
                    ]
                }, 
                "source": "        var bodyClasses = 'mx_MatrixChat';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 212
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <LeftPanel selectedRoom={this.props.currentRoomId} collapsed={this.props.collapse_lhs || false} opacity={this.props.sideOpacity}/>", 
                "message": "Line 221 exceeds the maximum line length of 90.", 
                "line": 221
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 26, 
                "source": "                        {page_element}", 
                "message": "Identifier 'page_element' is not in camel case.", 
                "line": 223
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 22, 
                "source": "                    {right_panel}", 
                "message": "Identifier 'right_panel' is not in camel case.", 
                "line": 225
            }
        ], 
        "errorCount": 0, 
        "warningCount": 41, 
        "filePath": "src/components/structures/LoggedInView.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        650, 
                        653
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        689, 
                        692
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "'MatrixClientPeg' is assigned a value but never used.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        749, 
                        752
                    ]
                }, 
                "source": "var PasswordReset = require(\"../../../PasswordReset\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 52, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1219, 
                        1219
                    ]
                }, 
                "source": "        onComplete: React.PropTypes.func.isRequired", 
                "message": "Missing trailing comma.", 
                "line": 36
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 27, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1479, 
                        1479
                    ]
                }, 
                "source": "            progress: null", 
                "message": "Missing trailing comma.", 
                "line": 43
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1633, 
                        1633
                    ]
                }, 
                "source": "            progress: \"sending_email\"", 
                "message": "Missing trailing comma.", 
                "line": 49
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 39, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1835, 
                        1835
                    ]
                }, 
                "source": "                progress: \"sent_email\"", 
                "message": "Missing trailing comma.", 
                "line": 54
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2006, 
                        2006
                    ]
                }, 
                "source": "                progress: null", 
                "message": "Missing trailing comma.", 
                "line": 59
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            this.showErrorDialog(\"The email address linked to your account must be entered.\");", 
                "message": "Line 81 exceeds the maximum line length of 90.", 
                "line": 81
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2633, 
                        2642
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 82
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2778, 
                        2787
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 85
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2927, 
                        2936
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 88
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2955, 
                        2958
                    ]
                }, 
                "source": "            var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 90
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        Resetting password will currently reset any end-to-end encryption keys on all devices,", 
                "message": "Line 95 exceeds the maximum line length of 90.", 
                "line": 95
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        In future this <a href=\"https://github.com/vector-im/riot-web/issues/2671\">may be improved</a>,", 
                "message": "Line 97 exceeds the maximum line length of 90.", 
                "line": 97
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            this.state.enteredHomeserverUrl, this.state.enteredIdentityServerUrl,", 
                "message": "Line 104 exceeds the maximum line length of 90.", 
                "line": 104
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 66, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3861, 
                        3861
                    ]
                }, 
                "source": "                            this.state.email, this.state.password", 
                "message": "Missing trailing comma.", 
                "line": 105
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4072, 
                        4072
                    ]
                }, 
                "source": "            [stateKey]: ev.target.value", 
                "message": "Missing trailing comma.", 
                "line": 115
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4200, 
                        4200
                    ]
                }, 
                "source": "            enteredHomeserverUrl: newHsUrl", 
                "message": "Missing trailing comma.", 
                "line": 121
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4332, 
                        4332
                    ]
                }, 
                "source": "            enteredIdentityServerUrl: newIsUrl", 
                "message": "Missing trailing comma.", 
                "line": 127
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4406, 
                        4409
                    ]
                }, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 132
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 30, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4562, 
                        4562
                    ]
                }, 
                "source": "            description: body", 
                "message": "Missing trailing comma.", 
                "line": 135
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4616, 
                        4619
                    ]
                }, 
                "source": "        var LoginHeader = sdk.getComponent(\"login.LoginHeader\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 140
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4681, 
                        4684
                    ]
                }, 
                "source": "        var LoginFooter = sdk.getComponent(\"login.LoginFooter\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 141
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4746, 
                        4749
                    ]
                }, 
                "source": "        var ServerConfig = sdk.getComponent(\"login.ServerConfig\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 142
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4813, 
                        4816
                    ]
                }, 
                "source": "        var Spinner = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 143
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4874, 
                        4877
                    ]
                }, 
                "source": "        var resetPasswordJsx;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 145
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5005, 
                        5014
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 149
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <input className=\"mx_Login_submit\" type=\"button\" onClick={this.onVerify}", 
                "message": "Line 156 exceeds the maximum line length of 90.", 
                "line": 156
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5499, 
                        5508
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 160
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <p>You have been logged out of all devices and will no longer receive push notifications.", 
                "message": "Line 165 exceeds the maximum line length of 90.", 
                "line": 165
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <input className=\"mx_Login_submit\" type=\"button\" onClick={this.props.onComplete}", 
                "message": "Line 167 exceeds the maximum line length of 90.", 
                "line": 167
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        6065, 
                        6074
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 171
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    To reset your password, enter the email address linked to your account:", 
                "message": "Line 176 exceeds the maximum line length of 90.", 
                "line": 176
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 29, 
                "source": "                            onChange={this.onInputChanged.bind(this, \"email\")}", 
                "message": "JSX props should not use .bind()", 
                "line": 183
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 39, 
                "source": "                            onChange={this.onInputChanged.bind(this, \"email\")}", 
                "message": "JSX props should not use .bind()", 
                "line": 183
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 29, 
                "source": "                            onChange={this.onInputChanged.bind(this, \"password\")}", 
                "message": "JSX props should not use .bind()", 
                "line": 189
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 39, 
                "source": "                            onChange={this.onInputChanged.bind(this, \"password\")}", 
                "message": "JSX props should not use .bind()", 
                "line": 189
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 29, 
                "source": "                            onChange={this.onInputChanged.bind(this, \"password2\")}", 
                "message": "JSX props should not use .bind()", 
                "line": 195
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 39, 
                "source": "                            onChange={this.onInputChanged.bind(this, \"password2\")}", 
                "message": "JSX props should not use .bind()", 
                "line": 195
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <input className=\"mx_Login_submit\" type=\"submit\" value=\"Send Reset Email\" />", 
                "message": "Line 198 exceeds the maximum line length of 90.", 
                "line": 198
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <a className=\"mx_Login_create\" onClick={this.props.onLoginClick} href=\"#\">", 
                "message": "Line 211 exceeds the maximum line length of 90.", 
                "line": 211
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <a className=\"mx_Login_create\" onClick={this.props.onRegisterClick} href=\"#\">", 
                "message": "Line 214 exceeds the maximum line length of 90.", 
                "line": 214
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8940, 
                        8940
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 232
            }
        ], 
        "errorCount": 18, 
        "warningCount": 29, 
        "filePath": "src/components/structures/login/ForgotPassword.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var ReactDOM = require('react-dom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var ReactDOM = require('react-dom');", 
                "message": "'ReactDOM' is assigned a value but never used.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        650, 
                        653
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        687, 
                        690
                    ]
                }, 
                "source": "var Signup = require(\"../../../Signup\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        728, 
                        731
                    ]
                }, 
                "source": "var PasswordLogin = require(\"../../views/login/PasswordLogin\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        792, 
                        795
                    ]
                }, 
                "source": "var CasLogin = require(\"../../views/login/CasLogin\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        846, 
                        849
                    ]
                }, 
                "source": "var ServerConfig = require(\"../../views/login/ServerConfig\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2594, 
                        2597
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 77
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3027, 
                        3027
                    ]
                }, 
                "source": "                busy: false", 
                "message": "Missing trailing comma.", 
                "line": 90
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3195, 
                        3198
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 100
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3606, 
                        3606
                    ]
                }, 
                "source": "                busy: false", 
                "message": "Missing trailing comma.", 
                "line": 113
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3798, 
                        3801
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 123
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4071, 
                        4074
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 133
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4359, 
                        4362
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 143
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var fallbackHsUrl = hsUrl == this.props.defaultHsUrl ? this.props.fallbackHsUrl : null;", 
                "message": "Line 147 exceeds the maximum line length of 90.", 
                "line": 147
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4505, 
                        4508
                    ]
                }, 
                "source": "        var fallbackHsUrl = hsUrl == this.props.defaultHsUrl ? this.props.fallbackHsUrl : null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 147
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4602, 
                        4605
                    ]
                }, 
                "source": "        var loginLogic = new Signup.Login(hsUrl, isUrl, fallbackHsUrl, {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 149
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5262, 
                        5262
                    ]
                }, 
                "source": "                busy: false", 
                "message": "Missing trailing comma.", 
                "line": 163
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            loginIncorrect: isLoginAttempt && (err.httpStatus == 401 || err.httpStatus == 403)", 
                "message": "Line 183 exceeds the maximum line length of 90.", 
                "line": 183
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 95, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5889, 
                        5889
                    ]
                }, 
                "source": "            loginIncorrect: isLoginAttempt && (err.httpStatus == 401 || err.httpStatus == 403)", 
                "message": "Missing trailing comma.", 
                "line": 183
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        6534, 
                        6547
                    ]
                }, 
                "source": "            {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 204
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Can't connect to homeserver via HTTP when an HTTPS URL is in your browser bar.", 
                "message": "Line 206 exceeds the maximum line length of 90.", 
                "line": 206
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Either use HTTPS or <a href='https://www.google.com/search?&q=enable%20unsafe%20scripts'>enable unsafe scripts</a>", 
                "message": "Line 207 exceeds the maximum line length of 90.", 
                "line": 207
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        6856, 
                        6869
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 209
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Can't connect to homeserver - please check your connectivity and ensure", 
                "message": "Line 212 exceeds the maximum line length of 90.", 
                "line": 212
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    your <a href={ this.state.enteredHomeserverUrl }>homeserver's SSL certificate</a> is trusted.", 
                "message": "Line 213 exceeds the maximum line length of 90.", 
                "line": 213
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8229, 
                        8232
                    ]
                }, 
                "source": "        var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 251
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8288, 
                        8291
                    ]
                }, 
                "source": "        var LoginHeader = sdk.getComponent(\"login.LoginHeader\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 252
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8353, 
                        8356
                    ]
                }, 
                "source": "        var LoginFooter = sdk.getComponent(\"login.LoginFooter\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 253
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var loader = this.state.busy ? <div className=\"mx_Login_loader\"><Loader /></div> : null;", 
                "message": "Line 254 exceeds the maximum line length of 90.", 
                "line": 254
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8418, 
                        8421
                    ]
                }, 
                "source": "        var loader = this.state.busy ? <div className=\"mx_Login_loader\"><Loader /></div> : null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 254
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8516, 
                        8519
                    ]
                }, 
                "source": "        var loginAsGuestJsx;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 256
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <a className=\"mx_Login_create\" onClick={this._onLoginAsGuestClick} href=\"#\">", 
                "message": "Line 259 exceeds the maximum line length of 90.", 
                "line": 259
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8774, 
                        8777
                    ]
                }, 
                "source": "        var returnToAppJsx;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 264
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <a className=\"mx_Login_create\" onClick={this.props.onCancelClick} href=\"#\">", 
                "message": "Line 267 exceeds the maximum line length of 90.", 
                "line": 267
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <a className=\"mx_Login_create\" onClick={this.props.onRegisterClick} href=\"#\">", 
                "message": "Line 293 exceeds the maximum line length of 90.", 
                "line": 293
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10459, 
                        10459
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 303
            }
        ], 
        "errorCount": 6, 
        "warningCount": 32, 
        "filePath": "src/components/structures/login/Login.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        650, 
                        653
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 52, 
                "fix": {
                    "text": ",", 
                    "range": [
                        853, 
                        853
                    ]
                }, 
                "source": "        onComplete: React.PropTypes.func.isRequired", 
                "message": "Missing trailing comma.", 
                "line": 27
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 24, 
                "fix": {
                    "text": ",", 
                    "range": [
                        996, 
                        996
                    ]
                }, 
                "source": "            busy: false", 
                "message": "Missing trailing comma.", 
                "line": 34
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1302, 
                        1305
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 42
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1380, 
                        1383
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 44
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1609, 
                        1609
                    ]
                }, 
                "source": "                busy: false", 
                "message": "Missing trailing comma.", 
                "line": 48
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1769, 
                        1769
                    ]
                }, 
                "source": "                busy: false", 
                "message": "Missing trailing comma.", 
                "line": 53
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1839, 
                        1842
                    ]
                }, 
                "source": "        var ChangeDisplayName = sdk.getComponent('settings.ChangeDisplayName');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 59
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1919, 
                        1922
                    ]
                }, 
                "source": "        var ChangeAvatar = sdk.getComponent('settings.ChangeAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 60
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1989, 
                        1992
                    ]
                }, 
                "source": "        var LoginHeader = sdk.getComponent('login.LoginHeader');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 61
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2697, 
                        2697
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 78
            }
        ], 
        "errorCount": 5, 
        "warningCount": 8, 
        "filePath": "src/components/structures/login/PostRegistration.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        651, 
                        654
                    ]
                }, 
                "source": "var dis = require('../../../dispatcher');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        693, 
                        696
                    ]
                }, 
                "source": "var Signup = require(\"../../../Signup\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        734, 
                        737
                    ]
                }, 
                "source": "var ServerConfig = require(\"../../views/login/ServerConfig\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        796, 
                        799
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        855, 
                        858
                    ]
                }, 
                "source": "var RegistrationForm = require(\"../../views/login/RegistrationForm\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        925, 
                        928
                    ]
                }, 
                "source": "var CaptchaForm = require(\"../../views/login/CaptchaForm\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        985, 
                        988
                    ]
                }, 
                "source": "var RtsClient = require(\"../../../RtsClient\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1033, 
                        1036
                    ]
                }, 
                "source": "var MIN_PASSWORD_LENGTH = 6;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 44, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2476, 
                        2476
                    ]
                }, 
                "source": "        onCancelClick: React.PropTypes.func", 
                "message": "Missing trailing comma.", 
                "line": 66
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3599, 
                        3599
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 94
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5389, 
                        5392
                    ]
                }, 
                "source": "        var promise = this.registerLogic.getPromise();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 142
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 24, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6099, 
                        6099
                    ]
                }, 
                "source": "            busy: false", 
                "message": "Missing trailing comma.", 
                "line": 164
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6167, 
                        6170
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 169
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var self = this;", 
                "message": "'self' is assigned a value but never used.", 
                "line": 169
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6712, 
                        6715
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 186
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6826, 
                        6826
                    ]
                }, 
                "source": "                busy: false", 
                "message": "Missing trailing comma.", 
                "line": 189
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 55, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7059, 
                        7059
                    ]
                }, 
                "source": "                    \"did you break the promise chain?\"", 
                "message": "Missing trailing comma.", 
                "line": 194
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 63, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7444, 
                        7444
                    ]
                }, 
                "source": "                    errorText: \"Registration failed on server\"", 
                "message": "Missing trailing comma.", 
                "line": 202
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 51, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7825, 
                        7825
                    ]
                }, 
                "source": "                accessToken: response.access_token", 
                "message": "Missing trailing comma.", 
                "line": 211
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8244, 
                        8244
                    ]
                }, 
                "source": "                    self.state.formVals.email", 
                "message": "Missing trailing comma.", 
                "line": 223
            }, 
            {
                "nodeType": "TemplateLiteral", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 82, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8706, 
                        8706
                    ]
                }, 
                "source": "                            `User successfully registered with team ${team.name}`", 
                "message": "Missing trailing comma.", 
                "line": 232
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9601, 
                        9604
                    ]
                }, 
                "source": "                    var pushers = resp.pushers;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 254
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 26, 
                "source": "                    for (var i = 0; i < pushers.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 255
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 29, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9778, 
                        9781
                    ]
                }, 
                "source": "                            var emailPusher = pushers[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 257
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 9, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        10406, 
                        10408
                    ]
                }, 
                "source": "        }, function(err) {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 271
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10540, 
                        10540
                    ]
                }, 
                "source": "                    errorText: err.message", 
                "message": "Missing trailing comma.", 
                "line": 274
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10630, 
                        10630
                    ]
                }, 
                "source": "                busy: false", 
                "message": "Missing trailing comma.", 
                "line": 278
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10753, 
                        10756
                    ]
                }, 
                "source": "        var errMsg;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 285
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                errMsg = \"User names may only contain letters, numbers, dots, hyphens and underscores.\";", 
                "message": "Line 300 exceeds the maximum line length of 90.", 
                "line": 300
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 30, 
                "fix": {
                    "text": ",", 
                    "range": [
                        11911, 
                        11911
                    ]
                }, 
                "source": "            errorText: errMsg", 
                "message": "Missing trailing comma.", 
                "line": 311
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12066, 
                        12066
                    ]
                }, 
                "source": "            response: response", 
                "message": "Missing trailing comma.", 
                "line": 317
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12339, 
                        12342
                    ]
                }, 
                "source": "        var currStep = this.registerLogic.getStep();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 330
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12392, 
                        12395
                    ]
                }, 
                "source": "        var registerStep;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 331
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var publicKey;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 366
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var serverParams = this.registerLogic.getServerData().params;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 367
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14538, 
                        14541
                    ]
                }, 
                "source": "        var busySpinner;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 382
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14676, 
                        14679
                    ]
                }, 
                "source": "        var returnToAppJsx;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 389
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <a className=\"mx_Login_create\" onClick={this.props.onCancelClick} href=\"#\">", 
                "message": "Line 392 exceeds the maximum line length of 90.", 
                "line": 392
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16004, 
                        16007
                    ]
                }, 
                "source": "        var LoginHeader = sdk.getComponent('login.LoginHeader');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 423
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16069, 
                        16072
                    ]
                }, 
                "source": "        var LoginFooter = sdk.getComponent('login.LoginFooter');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 424
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <LoginHeader icon={this.state.teamSelected ? this.state.teamSelected.icon : null}/>", 
                "message": "Line 428 exceeds the maximum line length of 90.", 
                "line": 428
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        16479, 
                        16479
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 434
            }
        ], 
        "errorCount": 15, 
        "warningCount": 29, 
        "filePath": "src/components/structures/login/Registration.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        588, 
                        591
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        618, 
                        621
                    ]
                }, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        658, 
                        661
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        714, 
                        717
                    ]
                }, 
                "source": "var PlatformPeg = require(\"../../PlatformPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        762, 
                        765
                    ]
                }, 
                "source": "var SdkConfig = require(\"../../SdkConfig\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        806, 
                        809
                    ]
                }, 
                "source": "var ContextualMenu = require(\"./ContextualMenu\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var ContextualMenu = require(\"./ContextualMenu\");", 
                "message": "'ContextualMenu' is assigned a value but never used.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        856, 
                        859
                    ]
                }, 
                "source": "var RoomListSorter = require(\"../../RoomListSorter\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        910, 
                        913
                    ]
                }, 
                "source": "var UserActivity = require(\"../../UserActivity\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var UserActivity = require(\"../../UserActivity\");", 
                "message": "'UserActivity' is assigned a value but never used.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        960, 
                        963
                    ]
                }, 
                "source": "var Presence = require(\"../../Presence\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Presence = require(\"../../Presence\");", 
                "message": "'Presence' is assigned a value but never used.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1002, 
                        1005
                    ]
                }, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1042, 
                        1045
                    ]
                }, 
                "source": "var Login = require(\"./login/Login\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1080, 
                        1083
                    ]
                }, 
                "source": "var Registration = require(\"./login/Registration\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 32
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1132, 
                        1135
                    ]
                }, 
                "source": "var PostRegistration = require(\"./login/PostRegistration\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1193, 
                        1196
                    ]
                }, 
                "source": "var Modal = require(\"../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 35
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1229, 
                        1232
                    ]
                }, 
                "source": "var Tinter = require(\"../../Tinter\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1267, 
                        1270
                    ]
                }, 
                "source": "var sdk = require('../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1301, 
                        1304
                    ]
                }, 
                "source": "var Rooms = require('../../Rooms');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 38
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1337, 
                        1340
                    ]
                }, 
                "source": "var linkifyMatrix = require(\"../../linkify-matrix\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 39
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1390, 
                        1393
                    ]
                }, 
                "source": "var Lifecycle = require('../../Lifecycle');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 40
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1434, 
                        1437
                    ]
                }, 
                "source": "var PageTypes = require('../../PageTypes');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 41
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1479, 
                        1482
                    ]
                }, 
                "source": "var createRoom = require(\"../../createRoom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 43
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2654, 
                        2657
                    ]
                }, 
                "source": "        var s = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 84
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4629, 
                        4638
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 144
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4784, 
                        4793
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 147
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5300, 
                        5309
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 166
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5455, 
                        5464
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 169
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8518, 
                        8521
                    ]
                }, 
                "source": "        var roomIndexDelta = 1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 262
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8551, 
                        8554
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 264
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var self = this;", 
                "message": "'self' is assigned a value but never used.", 
                "line": 264
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var newState = payload.params || {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 273
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10203, 
                        10203
                    ]
                }, 
                "source": "                    screen: 'post_registration'", 
                "message": "Missing trailing comma.", 
                "line": 301
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 322
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 323
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var roomId = payload.room_id;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 325
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 42, 
                "source": "                    onFinished: function(should_leave) {", 
                "message": "Identifier 'should_leave' is not in camel case.", 
                "line": 329
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 29, 
                "source": "                        if (should_leave) {", 
                "message": "Identifier 'should_leave' is not in camel case.", 
                "line": 330
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 29, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11586, 
                        11589
                    ]
                }, 
                "source": "                            var d = MatrixClientPeg.get().leave(roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 331
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 29, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11740, 
                        11743
                    ]
                }, 
                "source": "                            var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 334
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            var modal = Modal.createDialog(Loader, null, 'mx_Dialog_spinner');", 
                "message": "Line 335 exceeds the maximum line length of 90.", 
                "line": 335
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 29, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11819, 
                        11822
                    ]
                }, 
                "source": "                            var modal = Modal.createDialog(Loader, null, 'mx_Dialog_spinner');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 335
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 64, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12346, 
                        12346
                    ]
                }, 
                "source": "                                    description: err.toString()", 
                "message": "Missing trailing comma.", 
                "line": 344
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12462, 
                        12462
                    ]
                }, 
                "source": "                    }", 
                "message": "Missing trailing comma.", 
                "line": 348
            }, 
            {
                "nodeType": "SwitchCase", 
                "severity": 2, 
                "ruleId": "no-fallthrough", 
                "column": 13, 
                "source": "            case 'view_next_room':", 
                "message": "Expected a 'break' statement before 'case'.", 
                "line": 374
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var allRooms = RoomListSorter.mostRecentActivityFirst(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 375
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 53, 
                "fix": {
                    "text": ",", 
                    "range": [
                        13785, 
                        13785
                    ]
                }, 
                "source": "                    MatrixClientPeg.get().getRooms()", 
                "message": "Missing trailing comma.", 
                "line": 376
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var roomIndex = -1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 378
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 22, 
                "source": "                for (var i = 0; i < allRooms.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 379
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var allRooms = RoomListSorter.mostRecentActivityFirst(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 390
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 21, 
                "source": "                var allRooms = RoomListSorter.mostRecentActivityFirst(", 
                "message": "'allRooms' is already defined.", 
                "line": 390
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 53, 
                "fix": {
                    "text": ",", 
                    "range": [
                        14486, 
                        14486
                    ]
                }, 
                "source": "                    MatrixClientPeg.get().getRooms()", 
                "message": "Missing trailing comma.", 
                "line": 391
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var roomIndex = payload.roomIndex;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 393
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 21, 
                "source": "                var roomIndex = payload.roomIndex;", 
                "message": "'roomIndex' is already defined.", 
                "line": 393
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var TextInputDialog = sdk.getComponent(\"dialogs.TextInputDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 406
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 34, 
                "source": "                    onFinished: (should_create, name) => {", 
                "message": "Identifier 'should_create' is not in camel case.", 
                "line": 411
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 29, 
                "source": "                        if (should_create) {", 
                "message": "Identifier 'should_create' is not in camel case.", 
                "line": 412
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15629, 
                        15629
                    ]
                }, 
                "source": "                    }", 
                "message": "Missing trailing comma.", 
                "line": 417
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        17621, 
                        17621
                    ]
                }, 
                "source": "                    payload.releaseNotes", 
                "message": "Missing trailing comma.", 
                "line": 477
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 25, 
                "source": "    _viewRoom: function(room_info) {", 
                "message": "Identifier 'room_info' is not in camel case.", 
                "line": 505
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19243, 
                        19246
                    ]
                }, 
                "source": "        var newState = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 508
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var scrollState = this.refs.loggedInView.getScrollStateForRoom(room_info.room_id);", 
                "message": "Line 528 exceeds the maximum line length of 90.", 
                "line": 528
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20004, 
                        20007
                    ]
                }, 
                "source": "            var scrollState = this.refs.loggedInView.getScrollStateForRoom(room_info.room_id);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 528
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20637, 
                        20640
                    ]
                }, 
                "source": "            var presentedId = room_info.room_alias || room_info.room_id;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 541
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20710, 
                        20713
                    ]
                }, 
                "source": "            var room = MatrixClientPeg.get().getRoom(room_info.room_id);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 542
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20811, 
                        20814
                    ]
                }, 
                "source": "                var theAlias = Rooms.getDisplayAliasForRoom(room);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 544
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21781, 
                        21784
                    ]
                }, 
                "source": "        var ChatInviteDialog = sdk.getComponent(\"dialogs.ChatInviteDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 568
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21996, 
                        21999
                    ]
                }, 
                "source": "        var ChatInviteDialog = sdk.getComponent(\"dialogs.ChatInviteDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 575
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'theme'.", 
                "line": 592
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22783, 
                        22786
                    ]
                }, 
                "source": "        var styleElements = Object.create(null);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 602
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var i, a;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 603
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22832, 
                        22835
                    ]
                }, 
                "source": "        var i, a;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 603
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22929, 
                        22932
                    ]
                }, 
                "source": "            var href = a.getAttribute(\"href\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 605
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        23051, 
                        23054
                    ]
                }, 
                "source": "            var match = href.match(/^bundles\\/.*\\/theme-(.*)\\.css$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 607
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        23899, 
                        23908
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 630
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'credentials'.", 
                "line": 636
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24829, 
                        24832
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 669
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24871, 
                        24874
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 671
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25542, 
                        25545
                    ]
                }, 
                "source": "                    var firstRoom = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 686
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        25749, 
                        25749
                    ]
                }, 
                "source": "                            cli.getRooms()", 
                "message": "Missing trailing comma.", 
                "line": 689
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        self.setState({ready: true, currentRoomId: firstRoom, page_type: PageTypes.RoomView});", 
                "message": "Line 691 exceeds the maximum line length of 90.", 
                "line": 691
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        26337, 
                        26340
                    ]
                }, 
                "source": "                var presentedId = self.state.currentRoomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 701
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        26397, 
                        26400
                    ]
                }, 
                "source": "                var room = MatrixClientPeg.get().getRoom(self.state.currentRoomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 702
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        26513, 
                        26516
                    ]
                }, 
                "source": "                    var theAlias = Rooms.getDisplayAliasForRoom(room);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 704
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 27, 
                "fix": {
                    "text": ",", 
                    "range": [
                        27272, 
                        27272
                    ]
                }, 
                "source": "                call: call", 
                "message": "Missing trailing comma.", 
                "line": 724
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27367, 
                        27370
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 728
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                description: \"For security, this session has been signed out. Please sign in again.\"", 
                "message": "Line 731 exceeds the maximum line length of 90.", 
                "line": 731
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 101, 
                "fix": {
                    "text": ",", 
                    "range": [
                        27609, 
                        27609
                    ]
                }, 
                "source": "                description: \"For security, this session has been signed out. Please sign in again.\"", 
                "message": "Missing trailing comma.", 
                "line": 731
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 33, 
                "fix": {
                    "text": ",", 
                    "range": [
                        27685, 
                        27685
                    ]
                }, 
                "source": "                action: 'logout'", 
                "message": "Missing trailing comma.", 
                "line": 734
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        28362, 
                        28362
                    ]
                }, 
                "source": "                params: params", 
                "message": "Missing trailing comma.", 
                "line": 757
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        28515, 
                        28515
                    ]
                }, 
                "source": "                params: params", 
                "message": "Missing trailing comma.", 
                "line": 762
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        28690, 
                        28690
                    ]
                }, 
                "source": "                params: params", 
                "message": "Missing trailing comma.", 
                "line": 767
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        29307, 
                        29310
                    ]
                }, 
                "source": "            var segments = screen.substring(5).split('/');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 786
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        29366, 
                        29369
                    ]
                }, 
                "source": "            var roomString = segments[0];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 787
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        29408, 
                        29411
                    ]
                }, 
                "source": "            var eventId = segments[1]; // undefined if no event id given", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 788
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        29529, 
                        29532
                    ]
                }, 
                "source": "            var third_party_invite = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 791
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var third_party_invite = {", 
                "message": "Identifier 'third_party_invite' is not in camel case.", 
                "line": 791
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        29674, 
                        29677
                    ]
                }, 
                "source": "            var oob_data = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 795
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var oob_data = {", 
                "message": "Identifier 'oob_data' is not in camel case.", 
                "line": 795
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        29860, 
                        29863
                    ]
                }, 
                "source": "            var payload = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 801
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        30802, 
                        30805
                    ]
                }, 
                "source": "            var userId = screen.substring(5);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 824
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        30998, 
                        31001
                    ]
                }, 
                "source": "            var member = new Matrix.RoomMember(null, userId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 828
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        31225, 
                        31234
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 835
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        32008, 
                        32011
                    ]
                }, 
                "source": "        var member = new Matrix.RoomMember(null, userId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 863
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 29, 
                "fix": {
                    "text": ",", 
                    "range": [
                        32283, 
                        32283
                    ]
                }, 
                "source": "            action: 'logout'", 
                "message": "Missing trailing comma.", 
                "line": 873
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        32409, 
                        32412
                    ]
                }, 
                "source": "        var hideLhsThreshold = 1000;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 880
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        32446, 
                        32449
                    ]
                }, 
                "source": "        var showLhsThreshold = 1000;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 881
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        32483, 
                        32486
                    ]
                }, 
                "source": "        var hideRhsThreshold = 820;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 882
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        32519, 
                        32522
                    ]
                }, 
                "source": "        var showRhsThreshold = 820;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 883
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.state.width > hideLhsThreshold && window.innerWidth <= hideLhsThreshold) {", 
                "message": "Line 885 exceeds the maximum line length of 90.", 
                "line": 885
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.state.width <= showLhsThreshold && window.innerWidth > showLhsThreshold) {", 
                "message": "Line 888 exceeds the maximum line length of 90.", 
                "line": 888
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.state.width > hideRhsThreshold && window.innerWidth <= hideRhsThreshold) {", 
                "message": "Line 891 exceeds the maximum line length of 90.", 
                "line": 891
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.state.width <= showRhsThreshold && window.innerWidth > showRhsThreshold) {", 
                "message": "Line 894 exceeds the maximum line length of 90.", 
                "line": 894
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 29, 
                "source": "    onRoomCreated: function(room_id) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 901
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 30, 
                "fix": {
                    "text": ",", 
                    "range": [
                        34624, 
                        34624
                    ]
                }, 
                "source": "            screen: undefined", 
                "message": "Missing trailing comma.", 
                "line": 945
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        35006, 
                        35009
                    ]
                }, 
                "source": "        var notifCount = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 960
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        35035, 
                        35038
                    ]
                }, 
                "source": "        var rooms = MatrixClientPeg.get().getRooms();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 962
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < rooms.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 963
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            if (rooms[i].hasMembershipState(MatrixClientPeg.get().credentials.userId, 'invite')) {", 
                "message": "Line 964 exceeds the maximum line length of 90.", 
                "line": 964
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        document.title = `Riot ${state === \"ERROR\" ? \" [offline]\" : \"\"}${notifCount > 0 ? ` [${notifCount}]` : \"\"}`;", 
                "message": "Line 979 exceeds the maximum line length of 90.", 
                "line": 979
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        36228, 
                        36237
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 990
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 32, 
                "source": "    onRoomIdResolved: function(room_id) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 998
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        36739, 
                        36742
                    ]
                }, 
                "source": "        var ForgotPassword = sdk.getComponent('structures.login.ForgotPassword');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1006
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        36821, 
                        36824
                    ]
                }, 
                "source": "        var LoggedInView = sdk.getComponent('structures.LoggedInView');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1007
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var Spinner = sdk.getComponent('elements.Spinner');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1013
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 1019
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var Spinner = sdk.getComponent('elements.Spinner');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1042
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var Spinner = sdk.getComponent('elements.Spinner');", 
                "message": "'Spinner' is already defined.", 
                "line": 1042
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <a href=\"#\" className=\"mx_MatrixChat_splashButtons\" onClick={ this.onLogoutClick }>", 
                "message": "Line 1046 exceeds the maximum line length of 90.", 
                "line": 1046
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        40779, 
                        40782
                    ]
                }, 
                "source": "            var r = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1087
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        41896, 
                        41896
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 1111
            }
        ], 
        "errorCount": 25, 
        "warningCount": 107, 
        "filePath": "src/components/structures/MatrixChat.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        592, 
                        595
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        629, 
                        632
                    ]
                }, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        668, 
                        671
                    ]
                }, 
                "source": "var sdk = require('../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        703, 
                        706
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4874, 
                        4877
                    ]
                }, 
                "source": "        var readMarker = this.refs.readMarkerNode;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 147
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4925, 
                        4928
                    ]
                }, 
                "source": "        var messageWrapper = this.refs.scrollPanel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 148
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5060, 
                        5063
                    ]
                }, 
                "source": "        var wrapperRect = ReactDOM.findDOMNode(messageWrapper).getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 154
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5148, 
                        5151
                    ]
                }, 
                "source": "        var readMarkerRect = readMarker.getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 155
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'mult'.", 
                "line": 184
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'ev'.", 
                "line": 195
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7374, 
                        7377
                    ]
                }, 
                "source": "        var EventTile = sdk.getComponent('rooms.EventTile');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 233
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7435, 
                        7438
                    ]
                }, 
                "source": "        var DateSeparator = sdk.getComponent('messages.DateSeparator');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 234
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const MemberEventListSummary = sdk.getComponent('views.elements.MemberEventListSummary');", 
                "message": "Line 235 exceeds the maximum line length of 90.", 
                "line": 235
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7637, 
                        7640
                    ]
                }, 
                "source": "        var i;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 239
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7998, 
                        8001
                    ]
                }, 
                "source": "        var lastShownEventIndex = -1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 247
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8036, 
                        8039
                    ]
                }, 
                "source": "        var lastShownNonLocalEchoIndex = -1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 248
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var mxEv = this.props.events[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 250
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8565, 
                        8568
                    ]
                }, 
                "source": "        var ret = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 268
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8588, 
                        8591
                    ]
                }, 
                "source": "        var prevEvent = null; // the last event we showed", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 270
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8712, 
                        8715
                    ]
                }, 
                "source": "        var readMarkerVisible = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 273
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9079, 
                        9082
                    ]
                }, 
                "source": "        var isMembershipChange = (e) =>", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 282
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            && (!e.getPrevContent() || e.getContent().membership !== e.getPrevContent().membership);", 
                "message": "Line 284 exceeds the maximum line length of 90.", 
                "line": 284
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var mxEv = this.props.events[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 287
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var mxEv = this.props.events[i];", 
                "message": "'mxEv' is already defined.", 
                "line": 287
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9371, 
                        9374
                    ]
                }, 
                "source": "            var wantTile = true;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 288
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9404, 
                        9407
                    ]
                }, 
                "source": "            var eventId = mxEv.getId();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 289
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9547, 
                        9550
                    ]
                }, 
                "source": "            var last = (i == lastShownEventIndex);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 295
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9766, 
                        9769
                    ]
                }, 
                "source": "                let ts1 = mxEv.getTs();", 
                "message": "'ts1' is never reassigned. Use 'const' instead.", 
                "line": 299
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                const key = \"membereventlistsummary-\" + (prevEvent ? mxEv.getId() : \"initial\");", 
                "message": "Line 308 exceeds the maximum line length of 90.", 
                "line": 308
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    let dateSeparator = <li key={ts1+'~'}><DateSeparator key={ts1+'~'} ts={ts1}/></li>;", 
                "message": "Line 311 exceeds the maximum line length of 90.", 
                "line": 311
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 25, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10663, 
                        10666
                    ]
                }, 
                "source": "                    let dateSeparator = <li key={ts1+'~'}><DateSeparator key={ts1+'~'} ts={ts1}/></li>;", 
                "message": "'dateSeparator' is never reassigned. Use 'const' instead.", 
                "line": 311
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10827, 
                        10830
                    ]
                }, 
                "source": "                let summarisedEvents = [mxEv];", 
                "message": "'summarisedEvents' is never reassigned. Use 'const' instead.", 
                "line": 315
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 25, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10941, 
                        10944
                    ]
                }, 
                "source": "                    let collapsedMxEv = this.props.events[i + 1];", 
                "message": "'collapsedMxEv' is never reassigned. Use 'const' instead.", 
                "line": 317
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        this._wantsDateSeparator(this.props.events[i], collapsedMxEv.getDate())) {", 
                "message": "Line 325 exceeds the maximum line length of 90.", 
                "line": 325
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 29, 
                "fix": {
                    "text": "const", 
                    "range": [
                        12043, 
                        12046
                    ]
                }, 
                "source": "                        let ret = this._getTilesForEvent(e, e);", 
                "message": "'ret' is never reassigned. Use 'const' instead.", 
                "line": 338
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12179, 
                        12179
                    ]
                }, 
                "source": "                    }", 
                "message": "Missing trailing comma.", 
                "line": 341
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12628, 
                        12628
                    ]
                }, 
                "source": "                    </MemberEventListSummary>", 
                "message": "Missing trailing comma.", 
                "line": 354
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13351, 
                        13354
                    ]
                }, 
                "source": "            var isVisibleReadMarker = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 371
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13460, 
                        13463
                    ]
                }, 
                "source": "                var visible = this.props.readMarkerVisible;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 374
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        this.currentReadMarkerEventId = readMarkerVisible ? this.props.readMarkerEventId : null;", 
                "message": "Line 402 exceeds the maximum line length of 90.", 
                "line": 402
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14966, 
                        14969
                    ]
                }, 
                "source": "        var EventTile = sdk.getComponent('rooms.EventTile');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 407
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15027, 
                        15030
                    ]
                }, 
                "source": "        var DateSeparator = sdk.getComponent('messages.DateSeparator');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 408
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15099, 
                        15102
                    ]
                }, 
                "source": "        var ret = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 409
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15181, 
                        15184
                    ]
                }, 
                "source": "        var continuation = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 412
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16249, 
                        16252
                    ]
                }, 
                "source": "        var ts1 = mxEv.getTs();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 435
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16281, 
                        16284
                    ]
                }, 
                "source": "        var eventDate = mxEv.getDate();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 436
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16561, 
                        16564
                    ]
                }, 
                "source": "            var dateSeparator = <li key={ts1}><DateSeparator key={ts1} ts={ts1}/></li>;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 444
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16727, 
                        16730
                    ]
                }, 
                "source": "        var eventId = mxEv.getId();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 449
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16763, 
                        16766
                    ]
                }, 
                "source": "        var highlight = (eventId == this.props.highlightedEventId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 450
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16964, 
                        16967
                    ]
                }, 
                "source": "        var scrollToken = mxEv.status ? undefined : eventId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 454
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17026, 
                        17029
                    ]
                }, 
                "source": "        var readReceipts;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 456
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        17918, 
                        17918
                    ]
                }, 
                "source": "                </li>", 
                "message": "Missing trailing comma.", 
                "line": 474
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        18962, 
                        18965
                    ]
                }, 
                "source": "        let receipts = [];", 
                "message": "'receipts' is never reassigned. Use 'const' instead.", 
                "line": 505
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        19217, 
                        19220
                    ]
                }, 
                "source": "            let member = room.getMember(r.userId);", 
                "message": "'member' is never reassigned. Use 'const' instead.", 
                "line": 510
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19634, 
                        19637
                    ]
                }, 
                "source": "        var hr;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 526
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-undef", 
                "column": 13, 
                "source": "            Velocity.Utilities.removeData(this._readMarkerGhostNode);", 
                "message": "'Velocity' is not defined.", 
                "line": 543
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-undef", 
                "column": 13, 
                "source": "            Velocity(ghostNode, {opacity: '0', width: '10%'},", 
                "message": "'Velocity' is not defined.", 
                "line": 548
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 13, 
                "source": "            Velocity(ghostNode, {opacity: '0', width: '10%'},", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 548
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20466, 
                        20469
                    ]
                }, 
                "source": "        var hr = <hr className=\"mx_RoomView_myReadMarker\"", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 555
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21269, 
                        21272
                    ]
                }, 
                "source": "        var scrollPanel = this.refs.scrollPanel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 578
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21521, 
                        21524
                    ]
                }, 
                "source": "        var ScrollPanel = sdk.getComponent(\"structures.ScrollPanel\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 589
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21591, 
                        21594
                    ]
                }, 
                "source": "        var Spinner = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 590
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21651, 
                        21654
                    ]
                }, 
                "source": "        var topSpinner, bottomSpinner;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 591
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var topSpinner, bottomSpinner;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 591
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21932, 
                        21935
                    ]
                }, 
                "source": "        var style = this.props.hidden ? { display: 'none' } : {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 599
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <ScrollPanel ref=\"scrollPanel\" className={ this.props.className + \" mx_fadable\" }", 
                "message": "Line 603 exceeds the maximum line length of 90.", 
                "line": 603
            }
        ], 
        "errorCount": 6, 
        "warningCount": 61, 
        "filePath": "src/components/structures/MessagePanel.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        592, 
                        595
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "'ReactDOM' is assigned a value but never used.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        630, 
                        633
                    ]
                }, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "'Matrix' is assigned a value but never used.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        669, 
                        672
                    ]
                }, 
                "source": "var sdk = require('../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        703, 
                        706
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        759, 
                        762
                    ]
                }, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "'dis' is assigned a value but never used.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        882, 
                        885
                    ]
                }, 
                "source": "var NotificationPanel = React.createClass({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1095, 
                        1098
                    ]
                }, 
                "source": "        var TimelinePanel = sdk.getComponent(\"structures.TimelinePanel\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1169, 
                        1172
                    ]
                }, 
                "source": "        var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1229, 
                        1232
                    ]
                }, 
                "source": "        var timelineSet = MatrixClientPeg.get().getNotifTimelineSet();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 39
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        1790, 
                        1799
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 53
            }
        ], 
        "errorCount": 3, 
        "warningCount": 11, 
        "filePath": "src/components/structures/NotificationPanel.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        598, 
                        601
                    ]
                }, 
                "source": "var sdk = require('../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        632, 
                        635
                    ]
                }, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "'dis' is assigned a value but never used.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        671, 
                        674
                    ]
                }, 
                "source": "var WhoIsTyping = require(\"../../WhoIsTyping\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        719, 
                        722
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 44, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3402, 
                        3402
                    ]
                }, 
                "source": "                this.props.whoIsTypingLimit", 
                "message": "Missing trailing comma.", 
                "line": 93
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4351, 
                        4354
                    ]
                }, 
                "source": "        var client = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 123
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 29, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4771, 
                        4771
                    ]
                }, 
                "source": "            syncState: state", 
                "message": "Missing trailing comma.", 
                "line": 135
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 44, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5001, 
                        5001
                    ]
                }, 
                "source": "                this.props.whoIsTypingLimit", 
                "message": "Missing trailing comma.", 
                "line": 143
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return this._getSize(prevProps, prevState) !== this._getSize(this.props, this.state);", 
                "message": "Line 169 exceeds the maximum line length of 90.", 
                "line": 169
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7717, 
                        7720
                    ]
                }, 
                "source": "        let othersCount = Math.max(users.length - limit, 0);", 
                "message": "'othersCount' is never reassigned. Use 'const' instead.", 
                "line": 222
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7818, 
                        7821
                    ]
                }, 
                "source": "        let avatars = users.map((u, index) => {", 
                "message": "'avatars' is never reassigned. Use 'const' instead.", 
                "line": 225
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7870, 
                        7873
                    ]
                }, 
                "source": "            let showInitial = othersCount === 0 && index === users.length - 1;", 
                "message": "'showInitial' is never reassigned. Use 'const' instead.", 
                "line": 226
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 24, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8453, 
                        8453
                    ]
                }, 
                "source": "                </span>", 
                "message": "Missing trailing comma.", 
                "line": 243
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8625, 
                        8628
                    ]
                }, 
                "source": "        var TabCompleteBar = sdk.getComponent('rooms.TabCompleteBar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 252
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8696, 
                        8699
                    ]
                }, 
                "source": "        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 253
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img src=\"img/warning.svg\" width=\"24\" height=\"23\" title=\"/!\\ \" alt=\"/!\\ \"/>", 
                "message": "Line 263 exceeds the maximum line length of 90.", 
                "line": 263
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img src=\"img/warning.svg\" width=\"24\" height=\"23\" title=\"/!\\ \" alt=\"/!\\ \"/>", 
                "message": "Line 291 exceeds the maximum line length of 90.", 
                "line": 291
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11578, 
                        11581
                    ]
                }, 
                "source": "            var unreadMsgs = this.props.numUnreadMessages + \" new message\" +", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 313
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11956, 
                        11959
                    ]
                }, 
                "source": "        var typingString = this.state.whoisTypingString;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 324
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12493, 
                        12496
                    ]
                }, 
                "source": "        var content = this._getContent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 346
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12535, 
                        12538
                    ]
                }, 
                "source": "        var indicator = this._getIndicator(this.state.whoisTypingString !== null);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 347
            }
        ], 
        "errorCount": 5, 
        "warningCount": 18, 
        "filePath": "src/components/structures/RoomStatusBar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        741, 
                        744
                    ]
                }, 
                "source": "var React = require(\"react\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        771, 
                        774
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        808, 
                        811
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        830, 
                        833
                    ]
                }, 
                "source": "var classNames = require(\"classnames\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        870, 
                        873
                    ]
                }, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        910, 
                        913
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        966, 
                        969
                    ]
                }, 
                "source": "var ContentMessages = require(\"../../ContentMessages\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1022, 
                        1025
                    ]
                }, 
                "source": "var Modal = require(\"../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1058, 
                        1061
                    ]
                }, 
                "source": "var sdk = require('../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1092, 
                        1095
                    ]
                }, 
                "source": "var CallHandler = require('../../CallHandler');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 32
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1140, 
                        1143
                    ]
                }, 
                "source": "var TabComplete = require(\"../../TabComplete\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1188, 
                        1191
                    ]
                }, 
                "source": "var Resend = require(\"../../Resend\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1226, 
                        1229
                    ]
                }, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 35
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1265, 
                        1268
                    ]
                }, 
                "source": "var Tinter = require(\"../../Tinter\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1303, 
                        1306
                    ]
                }, 
                "source": "var rate_limited_func = require('../../ratelimitedfunc');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 5, 
                "source": "var rate_limited_func = require('../../ratelimitedfunc');", 
                "message": "Identifier 'rate_limited_func' is not in camel case.", 
                "line": 37
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1361, 
                        1364
                    ]
                }, 
                "source": "var ObjectUtils = require('../../ObjectUtils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 38
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1409, 
                        1412
                    ]
                }, 
                "source": "var Rooms = require('../../Rooms');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 39
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1545, 
                        1548
                    ]
                }, 
                "source": "var DEBUG = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 45
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "source": "    var debuglog = console.log.bind(console);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "source": "    var debuglog = function() {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 51
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 9, 
                "source": "    var debuglog = function() {};", 
                "message": "'debuglog' is already defined.", 
                "line": 51
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6643, 
                        6643
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 168
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            MatrixClientPeg.get().getRoomIdForAlias(this.props.roomAddress).done((result) => {", 
                "message": "Line 176 exceeds the maximum line length of 90.", 
                "line": 176
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7236, 
                        7239
                    ]
                }, 
                "source": "                var room = MatrixClientPeg.get().getRoom(result.room_id);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 180
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7753, 
                        7756
                    ]
                }, 
                "source": "            var room = MatrixClientPeg.get().getRoom(this.props.roomAddress);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 194
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9132, 
                        9135
                    ]
                }, 
                "source": "        var user_is_in_room = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 219
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var user_is_in_room = null;", 
                "message": "Identifier 'user_is_in_room' is not in camel case.", 
                "line": 219
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            user_is_in_room = this.state.room.hasMembershipState(", 
                "message": "Identifier 'user_is_in_room' is not in camel case.", 
                "line": 221
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 65, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9321, 
                        9321
                    ]
                }, 
                "source": "                MatrixClientPeg.get().credentials.userId, 'join'", 
                "message": "Missing trailing comma.", 
                "line": 222
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 14, 
                "source": "        if (!user_is_in_room && this.state.roomId) {", 
                "message": "Identifier 'user_is_in_room' is not in camel case.", 
                "line": 229
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 20, 
                "source": "        } else if (user_is_in_room) {", 
                "message": "Identifier 'user_is_in_room' is not in camel case.", 
                "line": 255
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10821, 
                        10824
                    ]
                }, 
                "source": "        var call = this._getCallForRoom();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 262
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10864, 
                        10867
                    ]
                }, 
                "source": "        var callState = call ? call.call_state : \"ended\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 263
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 33, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10970, 
                        10970
                    ]
                }, 
                "source": "            callState: callState", 
                "message": "Missing trailing comma.", 
                "line": 265
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        11583, 
                        11592
                    ]
                }, 
                "source": "        {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 282
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11606, 
                        11609
                    ]
                }, 
                "source": "            var inviteBox = document.getElementById(\"mx_SearchableEntityList_query\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 283
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12528, 
                        12531
                    ]
                }, 
                "source": "            var roomView = ReactDOM.findDOMNode(this.refs.roomView);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 310
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13614, 
                        13617
                    ]
                }, 
                "source": "            var roomView = ReactDOM.findDOMNode(this.refs.roomView);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 335
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            MatrixClientPeg.get().removeListener(\"Room.accountData\", this.onRoomAccountData);", 
                "message": "Line 345 exceeds the maximum line length of 90.", 
                "line": 345
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            MatrixClientPeg.get().removeListener(\"RoomState.members\", this.onRoomStateMember);", 
                "message": "Line 346 exceeds the maximum line length of 90.", 
                "line": 346
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 80, 
                "fix": {
                    "text": ",", 
                    "range": [
                        16138, 
                        16138
                    ]
                }, 
                "source": "                    hasUnsentMessages: this._hasUnsentMessages(this.state.room)", 
                "message": "Missing trailing comma.", 
                "line": 400
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var call = this._getCallForRoom();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 417
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var callState;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 418
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        16828, 
                        16845
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 422
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        17143, 
                        17143
                    ]
                }, 
                "source": "                    callState: callState", 
                "message": "Missing trailing comma.", 
                "line": 432
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        18362, 
                        18375
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 465
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var guestAccessEvent = room.currentState.getStateEvents(\"m.room.guest_access\", \"\");", 
                "message": "Line 490 exceeds the maximum line length of 90.", 
                "line": 490
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19246, 
                        19249
                    ]
                }, 
                "source": "        var guestAccessEvent = room.currentState.getStateEvents(\"m.room.guest_access\", \"\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 490
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (guestAccessEvent && guestAccessEvent.getContent().guest_access === \"can_join\") {", 
                "message": "Line 491 exceeds the maximum line length of 90.", 
                "line": 491
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 36, 
                "fix": {
                    "text": ",", 
                    "range": [
                        19486, 
                        19486
                    ]
                }, 
                "source": "                guestsCanJoin: true", 
                "message": "Missing trailing comma.", 
                "line": 493
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var historyVisibility = room.currentState.getStateEvents(\"m.room.history_visibility\", \"\");", 
                "message": "Line 497 exceeds the maximum line length of 90.", 
                "line": 497
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19522, 
                        19525
                    ]
                }, 
                "source": "        var historyVisibility = room.currentState.getStateEvents(\"m.room.history_visibility\", \"\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 497
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (historyVisibility && historyVisibility.getContent().history_visibility === \"world_readable\") {", 
                "message": "Line 498 exceeds the maximum line length of 90.", 
                "line": 498
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 30, 
                "fix": {
                    "text": ",", 
                    "range": [
                        19777, 
                        19777
                    ]
                }, 
                "source": "                canPeek: true", 
                "message": "Missing trailing comma.", 
                "line": 500
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19966, 
                        19969
                    ]
                }, 
                "source": "        var roomPreviewUrls = room.getAccountData(\"org.matrix.room.preview_urls\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 509
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 70, 
                "fix": {
                    "text": ",", 
                    "range": [
                        20223, 
                        20223
                    ]
                }, 
                "source": "                showUrlPreview: !roomPreviewUrls.getContent().disable", 
                "message": "Missing trailing comma.", 
                "line": 512
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var userRoomPreviewUrls = MatrixClientPeg.get().getAccountData(\"org.matrix.preview_urls\");", 
                "message": "Line 518 exceeds the maximum line length of 90.", 
                "line": 518
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20324, 
                        20327
                    ]
                }, 
                "source": "        var userRoomPreviewUrls = MatrixClientPeg.get().getAccountData(\"org.matrix.preview_urls\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 518
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        20559, 
                        20559
                    ]
                }, 
                "source": "                showUrlPreview: false", 
                "message": "Missing trailing comma.", 
                "line": 521
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var roomStatePreviewUrls = room.currentState.getStateEvents('org.matrix.room.preview_urls', '');", 
                "message": "Line 527 exceeds the maximum line length of 90.", 
                "line": 527
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20653, 
                        20656
                    ]
                }, 
                "source": "        var roomStatePreviewUrls = room.currentState.getStateEvents('org.matrix.room.preview_urls', '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 527
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        20896, 
                        20896
                    ]
                }, 
                "source": "                showUrlPreview: false", 
                "message": "Missing trailing comma.", 
                "line": 530
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 33, 
                "fix": {
                    "text": ",", 
                    "range": [
                        21044, 
                        21044
                    ]
                }, 
                "source": "            showUrlPreview: true", 
                "message": "Missing trailing comma.", 
                "line": 537
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21776, 
                        21779
                    ]
                }, 
                "source": "        var room = this.state.room;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 559
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21840, 
                        21843
                    ]
                }, 
                "source": "        var color_scheme_event = room.getAccountData(\"org.matrix.room.color_scheme\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 562
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var color_scheme_event = room.getAccountData(\"org.matrix.room.color_scheme\");", 
                "message": "Identifier 'color_scheme_event' is not in camel case.", 
                "line": 562
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21926, 
                        21929
                    ]
                }, 
                "source": "        var color_scheme = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 563
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var color_scheme = {};", 
                "message": "Identifier 'color_scheme' is not in camel case.", 
                "line": 563
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        if (color_scheme_event) {", 
                "message": "Identifier 'color_scheme_event' is not in camel case.", 
                "line": 564
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            color_scheme = color_scheme_event.getContent();", 
                "message": "Identifier 'color_scheme' is not in camel case.", 
                "line": 565
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22620, 
                        22623
                    ]
                }, 
                "source": "                var color_scheme = event.getContent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 581
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 21, 
                "source": "                var color_scheme = event.getContent();", 
                "message": "Identifier 'color_scheme' is not in camel case.", 
                "line": 581
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        22879, 
                        22892
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 585
            }, 
            {
                "nodeType": "NewExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 29, 
                "source": "    _updateRoomMembers: new rate_limited_func(function() {", 
                "message": "A constructor name should not start with a lowercase letter.", 
                "line": 608
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this._updateConfCallNotification();", 
                "message": "Unexpected 'this'.", 
                "line": 611
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this.tabComplete.loadEntries(this.state.room);", 
                "message": "Unexpected 'this'.", 
                "line": 614
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 38, 
                "source": "        this.tabComplete.loadEntries(this.state.room);", 
                "message": "Unexpected 'this'.", 
                "line": 614
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this._updateAutoComplete();", 
                "message": "Unexpected 'this'.", 
                "line": 615
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        23996, 
                        23999
                    ]
                }, 
                "source": "        var me = MatrixClientPeg.get().credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 620
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 13, 
                "source": "        if (this.state.joining && this.state.room.hasMembershipState(me, \"join\")) {", 
                "message": "Unexpected 'this'.", 
                "line": 621
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 35, 
                "source": "        if (this.state.joining && this.state.room.hasMembershipState(me, \"join\")) {", 
                "message": "Unexpected 'this'.", 
                "line": 621
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            const me = this.state.room.getMember(MatrixClientPeg.get().credentials.userId);", 
                "message": "Line 625 exceeds the maximum line length of 90.", 
                "line": 625
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 24, 
                "source": "            const me = this.state.room.getMember(MatrixClientPeg.get().credentials.userId);", 
                "message": "Unexpected 'this'.", 
                "line": 625
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 50, 
                "source": "            if (Rooms.looksLikeDirectMessageRoom(this.state.room, me)) {", 
                "message": "Unexpected 'this'.", 
                "line": 626
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                Rooms.setDMRoom(this.state.room.roomId, me.events.member.getSender()).done();", 
                "message": "Line 630 exceeds the maximum line length of 90.", 
                "line": 630
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 33, 
                "source": "                Rooms.setDMRoom(this.state.room.roomId, me.events.member.getSender()).done();", 
                "message": "Unexpected 'this'.", 
                "line": 630
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 13, 
                "source": "            this.setState({", 
                "message": "Unexpected 'this'.", 
                "line": 633
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        24953, 
                        24953
                    ]
                }, 
                "source": "                joining: false", 
                "message": "Missing trailing comma.", 
                "line": 634
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25372, 
                        25375
                    ]
                }, 
                "source": "        var room = this.state.room;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 651
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25492, 
                        25495
                    ]
                }, 
                "source": "        var confMember = room.getMember(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 655
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 81, 
                "fix": {
                    "text": ",", 
                    "range": [
                        25605, 
                        25605
                    ]
                }, 
                "source": "            this.props.ConferenceHandler.getConferenceUserIdForRoom(room.roomId)", 
                "message": "Missing trailing comma.", 
                "line": 656
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var confCall = this.props.ConferenceHandler.getConferenceCallForRoom(confMember.roomId);", 
                "message": "Line 662 exceeds the maximum line length of 90.", 
                "line": 662
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25683, 
                        25686
                    ]
                }, 
                "source": "        var confCall = this.props.ConferenceHandler.getConferenceCallForRoom(confMember.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 662
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        26104, 
                        26104
                    ]
                }, 
                "source": "            )", 
                "message": "Missing trailing comma.", 
                "line": 670
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        26471, 
                        26474
                    ]
                }, 
                "source": "            var searchPromise = MatrixClientPeg.get().backPaginateRoomEventsSearch(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 685
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        26801, 
                        26804
                    ]
                }, 
                "source": "        var eventsToResend = this._getUnsentMessages(this.state.room);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 695
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27010, 
                        27013
                    ]
                }, 
                "source": "        var eventsToResend = this._getUnsentMessages(this.state.room);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 702
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27233, 
                        27236
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 709
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27259, 
                        27262
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 711
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27300, 
                        27303
                    ]
                }, 
                "source": "        var display_name_promise = q();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 712
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var display_name_promise = q();", 
                "message": "Identifier 'display_name_promise' is not in camel case.", 
                "line": 712
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            display_name_promise = cli.getProfileInfo(cli.credentials.userId).then((result) => {", 
                "message": "Line 721 exceeds the maximum line length of 90.", 
                "line": 721
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            display_name_promise = cli.getProfileInfo(cli.credentials.userId).then((result) => {", 
                "message": "Identifier 'display_name_promise' is not in camel case.", 
                "line": 721
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    var SetDisplayNameDialog = sdk.getComponent('views.dialogs.SetDisplayNameDialog');", 
                "message": "Line 723 exceeds the maximum line length of 90.", 
                "line": 723
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27997, 
                        28000
                    ]
                }, 
                "source": "                    var SetDisplayNameDialog = sdk.getComponent('views.dialogs.SetDisplayNameDialog');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 723
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        28100, 
                        28103
                    ]
                }, 
                "source": "                    var dialog_defer = q.defer();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 724
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 25, 
                "source": "                    var dialog_defer = q.defer();", 
                "message": "Identifier 'dialog_defer' is not in camel case.", 
                "line": 724
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 29, 
                "fix": {
                    "text": "                            ", 
                    "range": [
                        28576, 
                        28605
                    ]
                }, 
                "source": "                            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 732
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        28722, 
                        28722
                    ]
                }, 
                "source": "                        }", 
                "message": "Missing trailing comma.", 
                "line": 736
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                const me = this.state.room.getMember(MatrixClientPeg.get().credentials.userId);", 
                "message": "Line 746 exceeds the maximum line length of 90.", 
                "line": 746
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        return Rooms.setDMRoom(this.state.room.roomId, me.events.member.getSender());", 
                "message": "Line 751 exceeds the maximum line length of 90.", 
                "line": 751
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var sign_url = this.props.thirdPartyInvite ? this.props.thirdPartyInvite.inviteSignUrl : undefined;", 
                "message": "Line 758 exceeds the maximum line length of 90.", 
                "line": 758
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        29586, 
                        29589
                    ]
                }, 
                "source": "            var sign_url = this.props.thirdPartyInvite ? this.props.thirdPartyInvite.inviteSignUrl : undefined;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 758
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var sign_url = this.props.thirdPartyInvite ? this.props.thirdPartyInvite.inviteSignUrl : undefined;", 
                "message": "Identifier 'sign_url' is not in camel case.", 
                "line": 758
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        29886, 
                        29889
                    ]
                }, 
                "source": "            var roomId = resp.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 762
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        30432, 
                        30435
                    ]
                }, 
                "source": "            var room = MatrixClientPeg.get().getRoom(roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 772
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        30935, 
                        30938
                    ]
                }, 
                "source": "                var me = MatrixClientPeg.get().credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 781
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        31115, 
                        31115
                    ]
                }, 
                "source": "                    room: room", 
                "message": "Missing trailing comma.", 
                "line": 784
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 33, 
                "fix": {
                    "text": ",", 
                    "range": [
                        31277, 
                        31277
                    ]
                }, 
                "source": "                joinError: error", 
                "message": "Missing trailing comma.", 
                "line": 790
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Line 804 exceeds the maximum line length of 90.", 
                "line": 804
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        31768, 
                        31771
                    ]
                }, 
                "source": "                var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 804
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    description: \"This room is private or inaccessible to guests. You may be able to join if you register.\"", 
                "message": "Line 807 exceeds the maximum line length of 90.", 
                "line": 807
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 124, 
                "fix": {
                    "text": ",", 
                    "range": [
                        32081, 
                        32081
                    ]
                }, 
                "source": "                    description: \"This room is private or inaccessible to guests. You may be able to join if you register.\"", 
                "message": "Missing trailing comma.", 
                "line": 807
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        32139, 
                        32142
                    ]
                }, 
                "source": "                var msg = error.message ? error.message : JSON.stringify(error);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 810
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        32220, 
                        32223
                    ]
                }, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 811
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 37, 
                "fix": {
                    "text": ",", 
                    "range": [
                        32415, 
                        32415
                    ]
                }, 
                "source": "                    description: msg", 
                "message": "Missing trailing comma.", 
                "line": 814
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        32519, 
                        32519
                    ]
                }, 
                "source": "            joining: true", 
                "message": "Missing trailing comma.", 
                "line": 820
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        32776, 
                        32785
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 830
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        33087, 
                        33090
                    ]
                }, 
                "source": "        var items = ev.dataTransfer.items;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 845
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 33, 
                "fix": {
                    "text": "", 
                    "range": [
                        33242, 
                        33243
                    ]
                }, 
                "source": "                this.setState({ draggingFile : true });", 
                "message": "Extra space after key 'draggingFile'.", 
                "line": 848
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 25, 
                "fix": {
                    "text": "", 
                    "range": [
                        33461, 
                        33462
                    ]
                }, 
                "source": "        this.setState({ draggingFile : false });", 
                "message": "Extra space after key 'draggingFile'.", 
                "line": 857
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        33482, 
                        33485
                    ]
                }, 
                "source": "        var files = ev.dataTransfer.files;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 858
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 25, 
                "fix": {
                    "text": "", 
                    "range": [
                        33739, 
                        33740
                    ]
                }, 
                "source": "        this.setState({ draggingFile : false });", 
                "message": "Extra space after key 'draggingFile'.", 
                "line": 867
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        33801, 
                        33804
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 871
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var self = this;", 
                "message": "'self' is assigned a value but never used.", 
                "line": 871
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        33878, 
                        33881
                    ]
                }, 
                "source": "            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 874
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 90, 
                "fix": {
                    "text": ",", 
                    "range": [
                        34141, 
                        34141
                    ]
                }, 
                "source": "                description: \"Guest users can't upload files. Please register to upload.\"", 
                "message": "Missing trailing comma.", 
                "line": 877
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 64, 
                "fix": {
                    "text": ",", 
                    "range": [
                        34295, 
                        34295
                    ]
                }, 
                "source": "            file, this.state.room.roomId, MatrixClientPeg.get()", 
                "message": "Missing trailing comma.", 
                "line": 883
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        34352, 
                        34355
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 885
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        34550, 
                        34550
                    ]
                }, 
                "source": "                description: error.toString()", 
                "message": "Missing trailing comma.", 
                "line": 888
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        35258, 
                        35261
                    ]
                }, 
                "source": "        var filter;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 913
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        35515, 
                        35515
                    ]
                }, 
                "source": "                    this.state.room.roomId", 
                "message": "Missing trailing comma.", 
                "line": 918
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        35533, 
                        35533
                    ]
                }, 
                "source": "                ]", 
                "message": "Missing trailing comma.", 
                "line": 919
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        35613, 
                        35616
                    ]
                }, 
                "source": "        var searchPromise = MatrixClientPeg.get().searchRoomEvents({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 925
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        35861, 
                        35864
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 933
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        36037, 
                        36040
                    ]
                }, 
                "source": "        var localSearchId = this.searchId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 937
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            if (self.unmounted || !self.state.searching || self.searchId != localSearchId) {", 
                "message": "Line 945 exceeds the maximum line length of 90.", 
                "line": 945
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        36744, 
                        36747
                    ]
                }, 
                "source": "            var highlights = results.highlights;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 956
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 45, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        37134, 
                        37134
                    ]
                }, 
                "source": "                return b.length - a.length; });", 
                "message": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.", 
                "line": 964
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        37310, 
                        37313
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 971
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        37500, 
                        37500
                    ]
                }, 
                "source": "                description: error.toString()", 
                "message": "Missing trailing comma.", 
                "line": 974
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        37616, 
                        37616
                    ]
                }, 
                "source": "                searchInProgress: false", 
                "message": "Missing trailing comma.", 
                "line": 978
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        37700, 
                        37703
                    ]
                }, 
                "source": "        var EventTile = sdk.getComponent('rooms.EventTile');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 984
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        37761, 
                        37764
                    ]
                }, 
                "source": "        var SearchResultTile = sdk.getComponent('rooms.SearchResultTile');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 985
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        37836, 
                        37839
                    ]
                }, 
                "source": "        var Spinner = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 986
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        37897, 
                        37900
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 988
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        38177, 
                        38180
                    ]
                }, 
                "source": "        var ret = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 998
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        38638, 
                        38638
                    ]
                }, 
                "source": "                         </li>", 
                "message": "Missing trailing comma.", 
                "line": 1010
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        38855, 
                        38855
                    ]
                }, 
                "source": "                         </li>", 
                "message": "Missing trailing comma.", 
                "line": 1015
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        39034, 
                        39037
                    ]
                }, 
                "source": "        var onWidgetLoad = () => {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1022
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        39073, 
                        39076
                    ]
                }, 
                "source": "            var scrollPanel = this.refs.searchResultsPanel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1023
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        39229, 
                        39232
                    ]
                }, 
                "source": "        var lastRoomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1029
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = this.state.searchResults.results.length - 1; i >= 0; i--) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1031
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        39339, 
                        39342
                    ]
                }, 
                "source": "            var result = this.state.searchResults.results[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1032
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        39402, 
                        39405
                    ]
                }, 
                "source": "            var mxEv = result.context.getEvent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1034
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        39452, 
                        39455
                    ]
                }, 
                "source": "            var roomId = mxEv.getRoomId();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1035
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        39819, 
                        39822
                    ]
                }, 
                "source": "                    var room = cli.getRoom(roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1045
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        40170, 
                        40173
                    ]
                }, 
                "source": "                    var roomName = room ? room.name : \"Unknown room \"+roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1051
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        40476, 
                        40479
                    ]
                }, 
                "source": "            var resultLink = \"#/room/\"+roomId+\"/\"+mxEv.getId();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1060
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        41080, 
                        41083
                    ]
                }, 
                "source": "        var newName = this.refs.header.getEditedName();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1082
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        41237, 
                        41240
                    ]
                }, 
                "source": "        var newTopic = this.refs.header.getEditedTopic();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1086
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var fails = results.filter(function(result) { return result.state !== \"fulfilled\"; });", 
                "message": "Line 1092 exceeds the maximum line length of 90.", 
                "line": 1092
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        41463, 
                        41466
                    ]
                }, 
                "source": "            var fails = results.filter(function(result) { return result.state !== \"fulfilled\"; });", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1092
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        41789, 
                        41792
                    ]
                }, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1098
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    description: fails.map(function(result) { return result.reason; }).join(\"\\n\"),", 
                "message": "Line 1101 exceeds the maximum line length of 90.", 
                "line": 1101
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        42131, 
                        42144
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 1104
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        42229, 
                        42229
                    ]
                }, 
                "source": "                    editingRoomSettings: false", 
                "message": "Missing trailing comma.", 
                "line": 1107
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        42407, 
                        42407
                    ]
                }, 
                "source": "                editingRoomSettings: false", 
                "message": "Missing trailing comma.", 
                "line": 1113
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        42984, 
                        42987
                    ]
                }, 
                "source": "            var errCode = err.errcode || \"unknown error code\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1135
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        43047, 
                        43050
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1136
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 66, 
                "fix": {
                    "text": ",", 
                    "range": [
                        43249, 
                        43249
                    ]
                }, 
                "source": "                description: `Failed to forget room (${errCode})`", 
                "message": "Missing trailing comma.", 
                "line": 1139
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        43336, 
                        43339
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1145
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        43404, 
                        43404
                    ]
                }, 
                "source": "            rejecting: true", 
                "message": "Missing trailing comma.", 
                "line": 1147
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 33, 
                "fix": {
                    "text": ",", 
                    "range": [
                        43606, 
                        43606
                    ]
                }, 
                "source": "                rejecting: false", 
                "message": "Missing trailing comma.", 
                "line": 1152
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        43730, 
                        43733
                    ]
                }, 
                "source": "            var msg = error.message ? error.message : JSON.stringify(error);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1157
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        43807, 
                        43810
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1158
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 33, 
                "fix": {
                    "text": ",", 
                    "range": [
                        43994, 
                        43994
                    ]
                }, 
                "source": "                description: msg", 
                "message": "Missing trailing comma.", 
                "line": 1161
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        44108, 
                        44108
                    ]
                }, 
                "source": "                rejectError: error", 
                "message": "Missing trailing comma.", 
                "line": 1166
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        45449, 
                        45452
                    ]
                }, 
                "source": "        var pos = this.refs.messagePanel.getReadMarkerPosition();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1214
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        45611, 
                        45614
                    ]
                }, 
                "source": "        var showBar = (pos < 0);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1218
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        46106, 
                        46109
                    ]
                }, 
                "source": "        var roomId = this.state.room.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1234
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        46152, 
                        46155
                    ]
                }, 
                "source": "        var state = this._getScrollState();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1236
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        46410, 
                        46413
                    ]
                }, 
                "source": "        var messagePanel = this.refs.messagePanel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1245
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        47018, 
                        47021
                    ]
                }, 
                "source": "        var scrollState = messagePanel.getScrollState();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1260
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        48266, 
                        48269
                    ]
                }, 
                "source": "        var auxPanelMaxHeight = window.innerHeight -", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1287
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 29, 
                "fix": {
                    "text": ",", 
                    "range": [
                        49161, 
                        49161
                    ]
                }, 
                "source": "            fullscreen: true", 
                "message": "Missing trailing comma.", 
                "line": 1306
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        49231, 
                        49234
                    ]
                }, 
                "source": "        var call = this._getCallForRoom();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1311
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        49325, 
                        49328
                    ]
                }, 
                "source": "        var newState = !call.isMicrophoneMuted();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1315
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        49527, 
                        49530
                    ]
                }, 
                "source": "        var call = this._getCallForRoom();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1321
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        49621, 
                        49624
                    ]
                }, 
                "source": "        var newState = !call.isLocalVideoMuted();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1325
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'ev'.", 
                "line": 1355
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        50551, 
                        50554
                    ]
                }, 
                "source": "        var panel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1361
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 1373
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        51772, 
                        51775
                    ]
                }, 
                "source": "        var RoomHeader = sdk.getComponent('rooms.RoomHeader');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1402
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        51835, 
                        51838
                    ]
                }, 
                "source": "        var MessageComposer = sdk.getComponent('rooms.MessageComposer');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1403
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        51908, 
                        51911
                    ]
                }, 
                "source": "        var RoomSettings = sdk.getComponent(\"rooms.RoomSettings\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1404
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        51975, 
                        51978
                    ]
                }, 
                "source": "        var AuxPanel = sdk.getComponent(\"rooms.AuxPanel\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1405
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        52034, 
                        52037
                    ]
                }, 
                "source": "        var SearchBar = sdk.getComponent(\"rooms.SearchBar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1406
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        52095, 
                        52098
                    ]
                }, 
                "source": "        var ScrollPanel = sdk.getComponent(\"structures.ScrollPanel\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1407
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        52165, 
                        52168
                    ]
                }, 
                "source": "        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1408
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        52233, 
                        52236
                    ]
                }, 
                "source": "        var RoomPreviewBar = sdk.getComponent(\"rooms.RoomPreviewBar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1409
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        52304, 
                        52307
                    ]
                }, 
                "source": "        var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1410
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        52363, 
                        52366
                    ]
                }, 
                "source": "        var TimelinePanel = sdk.getComponent(\"structures.TimelinePanel\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1411
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        52701, 
                        52718
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 1420
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "source": "                    var inviterName = undefined;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1422
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "source": "                    var invitedEmail = undefined;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1426
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    var room_alias = this.props.roomAddress[0] == '#' ? this.props.roomAddress : null;", 
                "message": "Line 1433 exceeds the maximum line length of 90.", 
                "line": 1433
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        53313, 
                        53316
                    ]
                }, 
                "source": "                    var room_alias = this.props.roomAddress[0] == '#' ? this.props.roomAddress : null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1433
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 25, 
                "source": "                    var room_alias = this.props.roomAddress[0] == '#' ? this.props.roomAddress : null;", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 1433
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                                onRejectClick={ this.onRejectThreepidInviteButtonClicked }", 
                "message": "Line 1443 exceeds the maximum line length of 90.", 
                "line": 1443
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                                canPreview={ false } error={ this.state.roomLoadError }", 
                "message": "Line 1444 exceeds the maximum line length of 90.", 
                "line": 1444
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 60, 
                "source": "                                                roomAlias={room_alias}", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 1445
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        54726, 
                        54729
                    ]
                }, 
                "source": "        var myUserId = MatrixClientPeg.get().credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1458
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        54791, 
                        54794
                    ]
                }, 
                "source": "        var myMember = this.state.room.getMember(myUserId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1459
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        55157, 
                        55160
                    ]
                }, 
                "source": "                var inviteEvent = myMember.events.member;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1468
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                var inviterName = inviteEvent.sender ? inviteEvent.sender.name : inviteEvent.getSender();", 
                "message": "Line 1469 exceeds the maximum line length of 90.", 
                "line": 1469
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var inviterName = inviteEvent.sender ? inviteEvent.sender.name : inviteEvent.getSender();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1469
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 21, 
                "source": "                var inviterName = inviteEvent.sender ? inviteEvent.sender.name : inviteEvent.getSender();", 
                "message": "'inviterName' is already defined.", 
                "line": 1469
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        56774, 
                        56777
                    ]
                }, 
                "source": "        var call = this._getCallForRoom();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1501
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        56817, 
                        56820
                    ]
                }, 
                "source": "        var inCall = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1502
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (call && (this.state.callState !== 'ended' && this.state.callState !== 'ringing')) {", 
                "message": "Line 1503 exceeds the maximum line length of 90.", 
                "line": 1503
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        56979, 
                        56982
                    ]
                }, 
                "source": "        var scrollheader_classes = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1507
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var scrollheader_classes = classNames({", 
                "message": "Identifier 'scrollheader_classes' is not in camel case.", 
                "line": 1507
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        57084, 
                        57087
                    ]
                }, 
                "source": "        var statusBar;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1511
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        57215, 
                        57218
                    ]
                }, 
                "source": "            var UploadBar = sdk.getComponent('structures.UploadBar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1515
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        57395, 
                        57398
                    ]
                }, 
                "source": "            var RoomStatusBar = sdk.getComponent('structures.RoomStatusBar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1518
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        58286, 
                        58289
                    ]
                }, 
                "source": "        var aux = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1537
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            aux = <RoomSettings ref=\"room_settings\" onSaveClick={this.onSettingsSaveClick} onCancelClick={this.onCancelClick} room={this.state.room} />;", 
                "message": "Line 1539 exceeds the maximum line length of 90.", 
                "line": 1539
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        58510, 
                        58519
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 1540
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        58602, 
                        58611
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 1543
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            aux = <SearchBar ref=\"search_bar\" searchInProgress={this.state.searchInProgress } onCancelClick={this.onCancelSearchClick} onSearch={this.onSearch}/>;", 
                "message": "Line 1545 exceeds the maximum line length of 90.", 
                "line": 1545
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        58816, 
                        58825
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 1546
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var inviterName = undefined;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1550
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var inviterName = undefined;", 
                "message": "'inviterName' is already defined.", 
                "line": 1550
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var invitedEmail = undefined;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1554
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var invitedEmail = undefined;", 
                "message": "'invitedEmail' is already defined.", 
                "line": 1554
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        59882, 
                        59885
                    ]
                }, 
                "source": "        var auxPanel = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1570
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var messageComposer, searchInfo;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 1581
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        60327, 
                        60330
                    ]
                }, 
                "source": "        var messageComposer, searchInfo;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1581
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        60368, 
                        60371
                    ]
                }, 
                "source": "        var canSpeak = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1582
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    room={this.state.room} onResize={this.onChildResize} uploadFile={this.uploadFile}", 
                "message": "Line 1589 exceeds the maximum line length of 90.", 
                "line": 1589
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    callState={this.state.callState} tabComplete={this.tabComplete} opacity={ this.props.opacity }/>;", 
                "message": "Line 1590 exceeds the maximum line length of 90.", 
                "line": 1590
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 17, 
                "fix": {
                    "text": "", 
                    "range": [
                        61081, 
                        61082
                    ]
                }, 
                "source": "                searchTerm : this.state.searchTerm,", 
                "message": "Extra space after key 'searchTerm'.", 
                "line": 1597
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 17, 
                "fix": {
                    "text": "", 
                    "range": [
                        61134, 
                        61135
                    ]
                }, 
                "source": "                searchScope : this.state.searchScope,", 
                "message": "Extra space after key 'searchScope'.", 
                "line": 1598
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 17, 
                "fix": {
                    "text": "", 
                    "range": [
                        61188, 
                        61189
                    ]
                }, 
                "source": "                searchCount : this.state.searchResults.count,", 
                "message": "Extra space after key 'searchCount'.", 
                "line": 1599
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        61283, 
                        61286
                    ]
                }, 
                "source": "            var zoomButton, voiceMuteButton, videoMuteButton;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1604
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 13, 
                "source": "            var zoomButton, voiceMuteButton, videoMuteButton;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 1604
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_RoomView_voipButton\" onClick={this.onFullscreenClick} title=\"Fill screen\">", 
                "message": "Line 1608 exceeds the maximum line length of 90.", 
                "line": 1608
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <TintableSvg src=\"img/fullscreen.svg\" width=\"29\" height=\"22\" style={{ marginTop: 1, marginRight: 4 }}/>", 
                "message": "Line 1609 exceeds the maximum line length of 90.", 
                "line": 1609
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_RoomView_voipButton\" onClick={this.onMuteVideoClick}>", 
                "message": "Line 1614 exceeds the maximum line length of 90.", 
                "line": 1614
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <img src={call.isLocalVideoMuted() ? \"img/video-unmute.svg\" : \"img/video-mute.svg\"}", 
                "message": "Line 1615 exceeds the maximum line length of 90.", 
                "line": 1615
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                             alt={call.isLocalVideoMuted() ? \"Click to unmute video\" : \"Click to mute video\"}", 
                "message": "Line 1616 exceeds the maximum line length of 90.", 
                "line": 1616
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img src={call.isMicrophoneMuted() ? \"img/voice-unmute.svg\" : \"img/voice-mute.svg\"}", 
                "message": "Line 1622 exceeds the maximum line length of 90.", 
                "line": 1622
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                         alt={call.isMicrophoneMuted() ? \"Click to unmute audio\" : \"Click to mute audio\"}", 
                "message": "Line 1623 exceeds the maximum line length of 90.", 
                "line": 1623
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <TintableSvg className=\"mx_RoomView_voipChevron\" src=\"img/voip-chevron.svg\" width=\"22\" height=\"17\"/>", 
                "message": "Line 1634 exceeds the maximum line length of 90.", 
                "line": 1634
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        63155, 
                        63158
                    ]
                }, 
                "source": "        var searchResultsPanel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1640
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        63187, 
                        63190
                    ]
                }, 
                "source": "        var hideMessagePanel = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1641
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 36, 
                "source": "                    <li className={scrollheader_classes}></li>", 
                "message": "Identifier 'scrollheader_classes' is not in camel case.", 
                "line": 1651
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        63965, 
                        63968
                    ]
                }, 
                "source": "        var messagePanel = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1660
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        64737, 
                        64740
                    ]
                }, 
                "source": "        var topUnreadMessagesBar = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1676
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        64833, 
                        64836
                    ]
                }, 
                "source": "            var TopUnreadMessagesBar = sdk.getComponent('rooms.TopUnreadMessagesBar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1678
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <div className=\"mx_RoomView_topUnreadMessagesBar mx_fadable\" style={{ opacity: this.props.opacity }}>", 
                "message": "Line 1680 exceeds the maximum line length of 90.", 
                "line": 1680
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <div className={ \"mx_RoomView\" + (inCall ? \" mx_RoomView_inCall\" : \"\") } ref=\"roomView\">", 
                "message": "Line 1694 exceeds the maximum line length of 90.", 
                "line": 1694
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        (myMember && myMember.membership === \"leave\") ? this.onForgetClick : null", 
                "message": "Line 1705 exceeds the maximum line length of 90.", 
                "line": 1705
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        (myMember && myMember.membership === \"join\") ? this.onLeaveClick : null", 
                "message": "Line 1708 exceeds the maximum line length of 90.", 
                "line": 1708
            }
        ], 
        "errorCount": 52, 
        "warningCount": 224, 
        "filePath": "src/components/structures/RoomView.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var React = require(\"react\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        598, 
                        601
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        635, 
                        638
                    ]
                }, 
                "source": "var GeminiScrollbar = require('react-gemini-scrollbar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        692, 
                        695
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        714, 
                        717
                    ]
                }, 
                "source": "var KeyCode = require('../../KeyCode');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        755, 
                        758
                    ]
                }, 
                "source": "var DEBUG_SCROLL = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "source": "    var debuglog = console.log.bind(console);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 35
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "source": "    var debuglog = function() {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 9, 
                "source": "    var debuglog = function() {};", 
                "message": "'debuglog' is already defined.", 
                "line": 37
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6926, 
                        6929
                    ]
                }, 
                "source": "        var sn = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 177
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9475, 
                        9478
                    ]
                }, 
                "source": "        var sn = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 237
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11737, 
                        11740
                    ]
                }, 
                "source": "        var sn = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 280
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            return sn.scrollHeight - (sn.scrollTop + 2*sn.clientHeight) - UNPAGINATION_PADDING;", 
                "message": "Line 284 exceeds the maximum line length of 90.", 
                "line": 284
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12176, 
                        12179
                    ]
                }, 
                "source": "        var sn = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 294
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13785, 
                        13788
                    ]
                }, 
                "source": "        var itemlist = this.refs.itemlist;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 336
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13828, 
                        13831
                    ]
                }, 
                "source": "        var tiles = itemlist.children;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 337
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15641, 
                        15644
                    ]
                }, 
                "source": "        var dir = backwards ? 'b' : 'f';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 381
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            debuglog(\"ScrollPanel: Already a \"+dir+\" fill in progress - not starting another\");", 
                "message": "Line 383 exceeds the maximum line length of 90.", 
                "line": 383
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16239, 
                        16242
                    ]
                }, 
                "source": "        var fillPromise;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 394
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            debuglog(\"ScrollPanel: \"+dir+\" fill complete; hasMoreResults:\"+hasMoreResults);", 
                "message": "Line 411 exceeds the maximum line length of 90.", 
                "line": 411
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'mult'.", 
                "line": 474
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19270, 
                        19273
                    ]
                }, 
                "source": "        var scrollNode = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 480
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19318, 
                        19321
                    ]
                }, 
                "source": "        var delta = mult * scrollNode.clientHeight * 0.5;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 481
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'ev'.", 
                "line": 486
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 37, 
                "fix": {
                    "text": ",", 
                    "range": [
                        21545, 
                        21545
                    ]
                }, 
                "source": "            pixelOffset: pixelOffset", 
                "message": "Missing trailing comma.", 
                "line": 541
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21921, 
                        21924
                    ]
                }, 
                "source": "        var node;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 552
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21939, 
                        21942
                    ]
                }, 
                "source": "        var messages = this.refs.itemlist.children;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 553
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = messages.length-1; i >= 0; --i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 554
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22050, 
                        22053
                    ]
                }, 
                "source": "            var m = messages[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 555
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22392, 
                        22395
                    ]
                }, 
                "source": "        var scrollNode = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 568
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22440, 
                        22443
                    ]
                }, 
                "source": "        var wrapperRect = ReactDOM.findDOMNode(this).getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 569
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22518, 
                        22521
                    ]
                }, 
                "source": "        var boundingRect = node.getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 570
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22575, 
                        22578
                    ]
                }, 
                "source": "        var scrollDelta = boundingRect.bottom + pixelOffset - wrapperRect.bottom;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 571
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 5, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        22896, 
                        22898
                    ]
                }, 
                "source": "    },", 
                "message": "Block must not be padded by blank lines.", 
                "line": 580
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        23158, 
                        23161
                    ]
                }, 
                "source": "        var itemlist = this.refs.itemlist;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 589
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        23201, 
                        23204
                    ]
                }, 
                "source": "        var wrapperRect = ReactDOM.findDOMNode(this).getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 590
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        23279, 
                        23282
                    ]
                }, 
                "source": "        var messages = itemlist.children;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 591
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = messages.length-1; i >= 0; --i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 593
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        23381, 
                        23384
                    ]
                }, 
                "source": "            var node = messages[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 594
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        23471, 
                        23474
                    ]
                }, 
                "source": "            var boundingRect = node.getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 597
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24077, 
                        24080
                    ]
                }, 
                "source": "        var scrollState = this.scrollState;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 613
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24121, 
                        24124
                    ]
                }, 
                "source": "        var scrollNode = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 614
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var scrollNode = this._getScrollNode();", 
                "message": "'scrollNode' is assigned a value but never used.", 
                "line": 614
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24494, 
                        24497
                    ]
                }, 
                "source": "        var scrollNode = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 625
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24543, 
                        24546
                    ]
                }, 
                "source": "        var prevScroll = scrollNode.scrollTop;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 627
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <ol ref=\"itemlist\" className=\"mx_RoomView_MessageList\" aria-live=\"polite\">", 
                "message": "Line 669 exceeds the maximum line length of 90.", 
                "line": 669
            }
        ], 
        "errorCount": 3, 
        "warningCount": 43, 
        "filePath": "src/components/structures/ScrollPanel.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        592, 
                        595
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        629, 
                        632
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        652, 
                        655
                    ]
                }, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        691, 
                        694
                    ]
                }, 
                "source": "var EventTimeline = Matrix.EventTimeline;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        734, 
                        737
                    ]
                }, 
                "source": "var sdk = require('../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        768, 
                        771
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        824, 
                        827
                    ]
                }, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        863, 
                        866
                    ]
                }, 
                "source": "var ObjectUtils = require('../../ObjectUtils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        911, 
                        914
                    ]
                }, 
                "source": "var Modal = require(\"../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        947, 
                        950
                    ]
                }, 
                "source": "var UserActivity = require(\"../../UserActivity\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        997, 
                        1000
                    ]
                }, 
                "source": "var KeyCode = require('../../KeyCode');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1038, 
                        1041
                    ]
                }, 
                "source": "var PAGINATE_SIZE = 20;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 32
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1062, 
                        1065
                    ]
                }, 
                "source": "var INITIAL_SIZE = 20;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1086, 
                        1089
                    ]
                }, 
                "source": "var DEBUG = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 35
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "source": "    var debuglog = console.log.bind(console);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 39
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "source": "    var debuglog = function() {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 41
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 9, 
                "source": "    var debuglog = function() {};", 
                "message": "'debuglog' is already defined.", 
                "line": 41
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "source": "var TimelinePanel = React.createClass({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var initialReadMarker =", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 122
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            console.warn(\"Replacing timelineSet on a TimelinePanel - confusion may ensue\");", 
                "message": "Line 197 exceeds the maximum line length of 90.", 
                "line": 197
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8891, 
                        8894
                    ]
                }, 
                "source": "        var client = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 240
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9429, 
                        9432
                    ]
                }, 
                "source": "        let dir = backwards ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS;", 
                "message": "'dir' is never reassigned. Use 'const' instead.", 
                "line": 251
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9668, 
                        9671
                    ]
                }, 
                "source": "        let eventId = scrollToken;", 
                "message": "'eventId' is never reassigned. Use 'const' instead.", 
                "line": 255
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9704, 
                        9707
                    ]
                }, 
                "source": "        let marker = this.state.events.findIndex(", 
                "message": "'marker' is never reassigned. Use 'const' instead.", 
                "line": 257
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9828, 
                        9828
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 260
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9849, 
                        9852
                    ]
                }, 
                "source": "        let count = backwards ? marker + 1 : this.state.events.length - marker;", 
                "message": "'count' is never reassigned. Use 'const' instead.", 
                "line": 263
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10489, 
                        10492
                    ]
                }, 
                "source": "        var dir = backwards ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 280
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10569, 
                        10572
                    ]
                }, 
                "source": "        var canPaginateKey = backwards ? 'canBackPaginate' : 'canForwardPaginate';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 281
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10652, 
                        10655
                    ]
                }, 
                "source": "        var paginatingKey = backwards ? 'backPaginating' : 'forwardPaginating';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 282
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            debuglog(\"TimelinePanel: paginate complete backwards:\"+backwards+\"; success:\"+r);", 
                "message": "Line 301 exceeds the maximum line length of 90.", 
                "line": 301
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11475, 
                        11478
                    ]
                }, 
                "source": "            var newState = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 303
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var otherDirection = backwards ? EventTimeline.FORWARDS : EventTimeline.BACKWARDS;", 
                "message": "Line 311 exceeds the maximum line length of 90.", 
                "line": 311
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11784, 
                        11787
                    ]
                }, 
                "source": "            var otherDirection = backwards ? EventTimeline.FORWARDS : EventTimeline.BACKWARDS;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 311
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var canPaginateOtherWayKey = backwards ? 'canForwardPaginate' : 'canBackPaginate';", 
                "message": "Line 312 exceeds the maximum line length of 90.", 
                "line": 312
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11879, 
                        11882
                    ]
                }, 
                "source": "            var canPaginateOtherWayKey = backwards ? 'canForwardPaginate' : 'canBackPaginate';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 312
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14880, 
                        14883
                    ]
                }, 
                "source": "            var events = this._timelineWindow.getEvents();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 385
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14939, 
                        14942
                    ]
                }, 
                "source": "            var lastEv = events[events.length-1];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 386
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            if (this.props.timelineSet.room && !this._timelineWindow.canPaginate(EventTimeline.FORWARDS)) {", 
                "message": "Line 389 exceeds the maximum line length of 90.", 
                "line": 389
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15276, 
                        15279
                    ]
                }, 
                "source": "            var updatedState = {events: events};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 393
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15857, 
                        15860
                    ]
                }, 
                "source": "                var myUserId = MatrixClientPeg.get().credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 404
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15930, 
                        15933
                    ]
                }, 
                "source": "                var sender = ev.sender ? ev.sender.userId : null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 405
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var callback = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 406
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18637, 
                        18640
                    ]
                }, 
                "source": "        var currentReadUpToEventId = this._getCurrentReadReceipt(true);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 477
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18709, 
                        18712
                    ]
                }, 
                "source": "        var currentReadUpToEventIndex = this._indexForEventId(currentReadUpToEventId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 478
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19730, 
                        19733
                    ]
                }, 
                "source": "        var lastReadEventIndex = this._getLastDisplayedEventIndex({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 498
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        19817, 
                        19817
                    ]
                }, 
                "source": "            ignoreOwn: true", 
                "message": "Missing trailing comma.", 
                "line": 499
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19888, 
                        19891
                    ]
                }, 
                "source": "        var lastReadEvent = this.state.events[lastReadEventIndex];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 503
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21365, 
                        21368
                    ]
                }, 
                "source": "        var lastDisplayedIndex = this._getLastDisplayedEventIndex({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 533
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21584, 
                        21587
                    ]
                }, 
                "source": "        var lastDisplayedEvent = this.state.events[lastDisplayedIndex];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 542
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22392, 
                        22395
                    ]
                }, 
                "source": "        var events = this._timelineWindow.getEvents();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 563
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < events.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 566
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22765, 
                        22768
                    ]
                }, 
                "source": "        var myUserId = MatrixClientPeg.get().credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 576
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var ev = events[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 578
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "source": "        var ev = events[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 586
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 13, 
                "source": "        var ev = events[i];", 
                "message": "'ev' is already defined.", 
                "line": 586
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24465, 
                        24468
                    ]
                }, 
                "source": "        var ret = this.refs.messagePanel.getReadMarkerPosition();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 621
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25261, 
                        25264
                    ]
                }, 
                "source": "        var rmId = this._getCurrentReadReceipt();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 642
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25369, 
                        25372
                    ]
                }, 
                "source": "        var tl = this.props.timelineSet.getTimelineForEvent(rmId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 645
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25436, 
                        25439
                    ]
                }, 
                "source": "        var rmTs;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 646
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25476, 
                        25479
                    ]
                }, 
                "source": "            var event = tl.getEvents().find((e) => { return e.getId() == rmId; });", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 648
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        26691, 
                        26694
                    ]
                }, 
                "source": "        var ret = this.refs.messagePanel.getReadMarkerPosition();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 688
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        26971, 
                        26974
                    ]
                }, 
                "source": "        var rmTs = TimelinePanel.roomReadMarkerTsMap[this.props.timelineSet.roomId];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 695
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'ev'.", 
                "line": 707
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27842, 
                        27845
                    ]
                }, 
                "source": "        var initialEvent = props.eventId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 725
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27884, 
                        27887
                    ]
                }, 
                "source": "        var pixelOffset = props.eventPixelOffset;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 726
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        28085, 
                        28088
                    ]
                }, 
                "source": "        var offsetBase = 1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 730
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        29224, 
                        29227
                    ]
                }, 
                "source": "        var onLoaded = () => {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 759
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                canBackPaginate: this._timelineWindow.canPaginate(EventTimeline.BACKWARDS),", 
                "message": "Line 768 exceeds the maximum line length of 90.", 
                "line": 768
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                canForwardPaginate: this._timelineWindow.canPaginate(EventTimeline.FORWARDS),", 
                "message": "Line 769 exceeds the maximum line length of 90.", 
                "line": 769
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        30805, 
                        30808
                    ]
                }, 
                "source": "        var onError = (error) => {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 794
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        30897, 
                        30900
                    ]
                }, 
                "source": "            var msg = error.message ? error.message : JSON.stringify(error);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 796
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 17, 
                "source": "            var msg = error.message ? error.message : JSON.stringify(error);", 
                "message": "'msg' is assigned a value but never used.", 
                "line": 796
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        30974, 
                        30977
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 797
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        31046, 
                        31049
                    ]
                }, 
                "source": "            var onFinished;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 799
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        31702, 
                        31705
                    ]
                }, 
                "source": "            var message = \"Tried to load a specific point in this room's timeline, but \";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 814
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        32227, 
                        32230
                    ]
                }, 
                "source": "        var prom = this._timelineWindow.load(eventId, INITIAL_SIZE);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 827
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        33605, 
                        33608
                    ]
                }, 
                "source": "        var events = this._timelineWindow.getEvents();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 868
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < this.state.events.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 879
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        34238, 
                        34241
                    ]
                }, 
                "source": "        var ignoreOwn = opts.ignoreOwn || false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 889
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        34287, 
                        34290
                    ]
                }, 
                "source": "        var ignoreEchoes = opts.ignoreEchoes || false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 890
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        34342, 
                        34345
                    ]
                }, 
                "source": "        var allowPartial = opts.allowPartial || false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 891
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        34398, 
                        34401
                    ]
                }, 
                "source": "        var messagePanel = this.refs.messagePanel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 893
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        34503, 
                        34506
                    ]
                }, 
                "source": "        var wrapperRect = ReactDOM.findDOMNode(messagePanel).getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 896
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        34589, 
                        34592
                    ]
                }, 
                "source": "        var myUserId = MatrixClientPeg.get().credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 897
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = this.state.events.length-1; i >= 0; --i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 899
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        34723, 
                        34726
                    ]
                }, 
                "source": "            var ev = this.state.events[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 900
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        35017, 
                        35020
                    ]
                }, 
                "source": "            var node = messagePanel.getNodeForEventId(ev.getId());", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 911
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        35118, 
                        35121
                    ]
                }, 
                "source": "            var boundingRect = node.getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 914
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 923
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        35845, 
                        35848
                    ]
                }, 
                "source": "        var client = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 932
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        35999, 
                        36002
                    ]
                }, 
                "source": "        var myUserId = client.credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 938
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        36213, 
                        36216
                    ]
                }, 
                "source": "        var roomId = this.props.timelineSet.room.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 943
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        37166, 
                        37169
                    ]
                }, 
                "source": "        var MessagePanel = sdk.getComponent(\"structures.MessagePanel\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 971
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        37238, 
                        37241
                    ]
                }, 
                "source": "        var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 972
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className={ this.props.className + \" mx_RoomView_messageListWrapper\" }>", 
                "message": "Line 987 exceeds the maximum line length of 90.", 
                "line": 987
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        38578, 
                        38581
                    ]
                }, 
                "source": "        var stickyBottom = !this._timelineWindow.canPaginate(EventTimeline.FORWARDS);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1001
            }
        ], 
        "errorCount": 5, 
        "warningCount": 92, 
        "filePath": "src/components/structures/TimelinePanel.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        598, 
                        601
                    ]
                }, 
                "source": "var ContentMessages = require('../../ContentMessages');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        654, 
                        657
                    ]
                }, 
                "source": "var dis = require('../../dispatcher');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        693, 
                        696
                    ]
                }, 
                "source": "var filesize = require('filesize');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 37, 
                "fix": {
                    "text": ",", 
                    "range": [
                        845, 
                        845
                    ]
                }, 
                "source": "        room: React.PropTypes.object", 
                "message": "Missing trailing comma.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1343, 
                        1346
                    ]
                }, 
                "source": "        var uploads = ContentMessages.getCurrentUploads();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 47
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1802, 
                        1805
                    ]
                }, 
                "source": "        var upload;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 63
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < uploads.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 64
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2082, 
                        2085
                    ]
                }, 
                "source": "        var innerProgressStyle = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 74
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 71, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2179, 
                        2179
                    ]
                }, 
                "source": "            width: ((upload.loaded / (upload.total || 1)) * 100) + '%'", 
                "message": "Missing trailing comma.", 
                "line": 75
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2199, 
                        2202
                    ]
                }, 
                "source": "        var uploadedSize = filesize(upload.loaded);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 77
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2251, 
                        2254
                    ]
                }, 
                "source": "        var totalSize = filesize(upload.total);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 78
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2452, 
                        2455
                    ]
                }, 
                "source": "        var others;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 83
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            others = ' and ' + (uploads.length - 1) + ' other' + (uploads.length > 2 ? 's' : '');", 
                "message": "Line 85 exceeds the maximum line length of 90.", 
                "line": 85
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_UploadBar_uploadProgressInner\" style={innerProgressStyle}></div>", 
                "message": "Line 91 exceeds the maximum line length of 90.", 
                "line": 91
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <img className=\"mx_UploadBar_uploadIcon\" src=\"img/fileicon.png\" width=\"17\" height=\"22\"/>", 
                "message": "Line 93 exceeds the maximum line length of 90.", 
                "line": 93
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <img className=\"mx_UploadBar_uploadCancel\" src=\"img/cancel.svg\" width=\"18\" height=\"18\"", 
                "message": "Line 94 exceeds the maximum line length of 90.", 
                "line": 94
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <div className=\"mx_UploadBar_uploadFilename\">Uploading {upload.fileName}{others}</div>", 
                "message": "Line 100 exceeds the maximum line length of 90.", 
                "line": 100
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3452, 
                        3452
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 103
            }
        ], 
        "errorCount": 3, 
        "warningCount": 16, 
        "filePath": "src/components/structures/UploadBar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        567, 
                        570
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        597, 
                        600
                    ]
                }, 
                "source": "var ReactDOM = require('react-dom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        634, 
                        637
                    ]
                }, 
                "source": "var sdk = require('../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        668, 
                        671
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        724, 
                        727
                    ]
                }, 
                "source": "var PlatformPeg = require(\"../../PlatformPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        772, 
                        775
                    ]
                }, 
                "source": "var Modal = require('../../Modal');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        808, 
                        811
                    ]
                }, 
                "source": "var dis = require(\"../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        847, 
                        850
                    ]
                }, 
                "source": "var q = require('q');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        869, 
                        872
                    ]
                }, 
                "source": "var package_json = require('../../../package.json');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 5, 
                "source": "var package_json = require('../../../package.json');", 
                "message": "Identifier 'package_json' is not in camel case.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        922, 
                        925
                    ]
                }, 
                "source": "var UserSettingsStore = require('../../UserSettingsStore');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        982, 
                        985
                    ]
                }, 
                "source": "var GeminiScrollbar = require('react-gemini-scrollbar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1039, 
                        1042
                    ]
                }, 
                "source": "var Email = require('../../email');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1075, 
                        1078
                    ]
                }, 
                "source": "var AddThreepid = require('../../AddThreepid');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1123, 
                        1126
                    ]
                }, 
                "source": "var SdkConfig = require('../../SdkConfig');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "      'dist' in package_json ? package_json.version : package_json.gitHead || \"<local>\";", 
                "message": "Identifier 'package_json' is not in camel case.", 
                "line": 35
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2701, 
                        2701
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 80
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4604, 
                        4607
                    ]
                }, 
                "source": "        var syncedSettings = UserSettingsStore.getSyncedSettings();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 146
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        5227, 
                        5230
                    ]
                }, 
                "source": "        let cli = MatrixClientPeg.get();", 
                "message": "'cli' is never reassigned. Use 'const' instead.", 
                "line": 166
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5426, 
                        5429
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 173
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 83, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5541, 
                        5541
                    ]
                }, 
                "source": "            UserSettingsStore.loadProfileInfo(), UserSettingsStore.loadThreePids()", 
                "message": "Missing trailing comma.", 
                "line": 175
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5803, 
                        5806
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 183
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6004, 
                        6004
                    ]
                }, 
                "source": "                description: error.toString()", 
                "message": "Missing trailing comma.", 
                "line": 186
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6277, 
                        6280
                    ]
                }, 
                "source": "            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 199
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6714, 
                        6717
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 213
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6739, 
                        6742
                    ]
                }, 
                "source": "        var changeAvatar = this.refs.changeAvatar;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 214
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7106, 
                        7109
                    ]
                }, 
                "source": "            var errMsg = (typeof err === \"string\") ? err : (err.error || \"\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 223
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7184, 
                        7187
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 224
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 63, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7383, 
                        7383
                    ]
                }, 
                "source": "                description: \"Failed to set avatar. \" + errMsg", 
                "message": "Missing trailing comma.", 
                "line": 227
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7464, 
                        7467
                    ]
                }, 
                "source": "        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 233
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    For security, logging out will delete any end-to-end encryption keys from this browser,", 
                "message": "Line 238 exceeds the maximum line length of 90.", 
                "line": 238
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    In future this <a href=\"https://github.com/vector-im/riot-web/issues/2108\">will be improved</a>,", 
                "message": "Line 240 exceeds the maximum line length of 90.", 
                "line": 240
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8419, 
                        8422
                    ]
                }, 
                "source": "        var errMsg = err.error || \"\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 256
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        8573, 
                        8582
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 259
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8685, 
                        8688
                    ]
                }, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 263
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 32, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8845, 
                        8845
                    ]
                }, 
                "source": "            description: errMsg", 
                "message": "Missing trailing comma.", 
                "line": 266
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8910, 
                        8913
                    ]
                }, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 271
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9247, 
                        9247
                    ]
                }, 
                "source": "                          log back in to them.`", 
                "message": "Missing trailing comma.", 
                "line": 276
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9374, 
                        9374
                    ]
                }, 
                "source": "            action: \"start_upgrade_registration\"", 
                "message": "Missing trailing comma.", 
                "line": 282
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9627, 
                        9630
                    ]
                }, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 292
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9694, 
                        9697
                    ]
                }, 
                "source": "        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 293
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9768, 
                        9771
                    ]
                }, 
                "source": "        var email_address = this.refs.add_threepid_input.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 295
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var email_address = this.refs.add_threepid_input.value;", 
                "message": "Identifier 'email_address' is not in camel case.", 
                "line": 295
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                description: \"Please check your email and click on the link it contains. Once this is done, click continue.\",", 
                "message": "Line 309 exceeds the maximum line length of 90.", 
                "line": 309
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10851, 
                        10851
                    ]
                }, 
                "source": "                description: err.message", 
                "message": "Missing trailing comma.", 
                "line": 317
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    MatrixClientPeg.get().deleteThreePid(threepid.medium, threepid.address).then(() => {", 
                "message": "Line 335 exceeds the maximum line length of 90.", 
                "line": 335
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12758, 
                        12761
                    ]
                }, 
                "source": "                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 368
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12839, 
                        12842
                    ]
                }, 
                "source": "                var message = \"Unable to verify email address. \";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 369
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                message += \"Please check your email and click on the link it contains. Once this is done, click continue.\";", 
                "message": "Line 370 exceeds the maximum line length of 90.", 
                "line": 370
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13316, 
                        13319
                    ]
                }, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 378
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const DeactivateAccountDialog = sdk.getComponent(\"dialogs.DeactivateAccountDialog\");", 
                "message": "Line 388 exceeds the maximum line length of 90.", 
                "line": 388
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        14328, 
                        14328
                    ]
                }, 
                "source": "            rejectingInvites: true", 
                "message": "Missing trailing comma.", 
                "line": 408
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        14379, 
                        14382
                    ]
                }, 
                "source": "        let promises = rooms.map((room) => {", 
                "message": "'promises' is never reassigned. Use 'const' instead.", 
                "line": 411
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        14745, 
                        14745
                    ]
                }, 
                "source": "                rejectingInvites: false", 
                "message": "Missing trailing comma.", 
                "line": 418
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                require.ensure(['../../async-components/views/dialogs/ExportE2eKeysDialog'], () => {", 
                "message": "Line 426 exceeds the maximum line length of 90.", 
                "line": 426
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    cb(require('../../async-components/views/dialogs/ExportE2eKeysDialog'));", 
                "message": "Line 427 exceeds the maximum line length of 90.", 
                "line": 427
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15197, 
                        15197
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 431
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                require.ensure(['../../async-components/views/dialogs/ImportE2eKeysDialog'], () => {", 
                "message": "Line 438 exceeds the maximum line length of 90.", 
                "line": 438
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    cb(require('../../async-components/views/dialogs/ImportE2eKeysDialog'));", 
                "message": "Line 439 exceeds the maximum line length of 90.", 
                "line": 439
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15625, 
                        15625
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 443
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15700, 
                        15703
                    ]
                }, 
                "source": "        var client = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 448
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var client = MatrixClientPeg.get();", 
                "message": "'client' is assigned a value but never used.", 
                "line": 448
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                   onChange={ e => UserSettingsStore.setUrlPreviewsDisabled(e.target.checked) }", 
                "message": "Line 467 exceeds the maximum line length of 90.", 
                "line": 467
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 20, 
                "source": "                   onChange={ e => UserSettingsStore.setUrlPreviewsDisabled(e.target.checked) }", 
                "message": "JSX props should not use arrow functions", 
                "line": 467
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 31, 
                "fix": {
                    "text": "(e)", 
                    "range": [
                        16415, 
                        16416
                    ]
                }, 
                "source": "                   onChange={ e => UserSettingsStore.setUrlPreviewsDisabled(e.target.checked) }", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 467
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                   onChange={ e => UserSettingsStore.setSyncedSetting(setting.id, e.target.checked) }", 
                "message": "Line 480 exceeds the maximum line length of 90.", 
                "line": 480
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 20, 
                "source": "                   onChange={ e => UserSettingsStore.setSyncedSetting(setting.id, e.target.checked) }", 
                "message": "JSX props should not use arrow functions", 
                "line": 480
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 31, 
                "fix": {
                    "text": "(e)", 
                    "range": [
                        16940, 
                        16941
                    ]
                }, 
                "source": "                   onChange={ e => UserSettingsStore.setSyncedSetting(setting.id, e.target.checked) }", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 480
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return <div className=\"mx_UserSettings_toggle\" key={ setting.id + \"_\" + setting.value }>", 
                "message": "Line 489 exceeds the maximum line length of 90.", 
                "line": 489
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 20, 
                "source": "                   onChange={ e => {", 
                "message": "JSX props should not use arrow functions", 
                "line": 495
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 31, 
                "fix": {
                    "text": "(e)", 
                    "range": [
                        17584, 
                        17585
                    ]
                }, 
                "source": "                   onChange={ e => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 495
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                UserSettingsStore.setSyncedSetting(setting.id, setting.value);", 
                "message": "Line 497 exceeds the maximum line length of 90.", 
                "line": 497
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        let exportButton = null,", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 517
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <li><label>Device ID:</label>             <span><code>{deviceId}</code></span></li>", 
                "message": "Line 539 exceeds the maximum line length of 90.", 
                "line": 539
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 2, 
                "ruleId": "no-multi-spaces", 
                "column": 67, 
                "fix": {
                    "text": " ", 
                    "range": [
                        19235, 
                        19235
                    ]
                }, 
                "source": "                        <li><label>Device ID:</label>             <span><code>{deviceId}</code></span></li>", 
                "message": "Multiple spaces found before '<'.", 
                "line": 539
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <li><label>Device key:</label>            <span><code><b>{identityKey}</b></code></span></li>", 
                "message": "Line 540 exceeds the maximum line length of 90.", 
                "line": 540
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 2, 
                "ruleId": "no-multi-spaces", 
                "column": 67, 
                "fix": {
                    "text": " ", 
                    "range": [
                        19343, 
                        19343
                    ]
                }, 
                "source": "                        <li><label>Device key:</label>            <span><code><b>{identityKey}</b></code></span></li>", 
                "message": "Multiple spaces found before '<'.", 
                "line": 540
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19598, 
                        19601
                    ]
                }, 
                "source": "        var DevicesPanel = sdk.getComponent('settings.DevicesPanel');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 550
            }, 
            {
                "nodeType": "ReturnStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 27, 
                "fix": {
                    "text": ";", 
                    "range": [
                        19951, 
                        19951
                    ]
                }, 
                "source": "            return <div />", 
                "message": "Missing semicolon.", 
                "line": 561
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        20501, 
                        20504
                    ]
                }, 
                "source": "        let features = UserSettingsStore.LABS_FEATURES.map(feature => (", 
                "message": "'features' is never reassigned. Use 'const' instead.", 
                "line": 580
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 60, 
                "fix": {
                    "text": "(feature)", 
                    "range": [
                        20552, 
                        20559
                    ]
                }, 
                "source": "        let features = UserSettingsStore.LABS_FEATURES.map(feature => (", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 580
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 21, 
                "source": "                    onChange={e => {", 
                "message": "JSX props should not use arrow functions", 
                "line": 587
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 31, 
                "fix": {
                    "text": "(e)", 
                    "range": [
                        20884, 
                        20885
                    ]
                }, 
                "source": "                    onChange={e => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 587
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Line 590 exceeds the maximum line length of 90.", 
                "line": 590
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 29, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21036, 
                        21039
                    ]
                }, 
                "source": "                            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 590
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                description: \"Guests can't use labs features. Please register.\",", 
                "message": "Line 593 exceeds the maximum line length of 90.", 
                "line": 593
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <p>These are experimental features that may break in unexpected ways. Use with caution.</p>", 
                "message": "Line 608 exceeds the maximum line length of 90.", 
                "line": 608
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        22589, 
                        22592
                    ]
                }, 
                "source": "        let invitedRooms = MatrixClientPeg.get().getRooms().filter((r) => {", 
                "message": "'invitedRooms' is never reassigned. Use 'const' instead.", 
                "line": 630
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        22815, 
                        22818
                    ]
                }, 
                "source": "        let Spinner = sdk.getComponent(\"elements.Spinner\");", 
                "message": "'Spinner' is never reassigned. Use 'const' instead.", 
                "line": 637
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 17, 
                "source": "                onClick={this._onRejectAllInvitesClicked.bind(this, invitedRooms)}>", 
                "message": "JSX props should not use .bind()", 
                "line": 645
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        23785, 
                        23788
                    ]
                }, 
                "source": "        var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 665
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24278, 
                        24281
                    ]
                }, 
                "source": "        var SimpleRoomHeader = sdk.getComponent('rooms.SimpleRoomHeader');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 677
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24353, 
                        24356
                    ]
                }, 
                "source": "        var ChangeDisplayName = sdk.getComponent(\"views.settings.ChangeDisplayName\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 678
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24439, 
                        24442
                    ]
                }, 
                "source": "        var ChangePassword = sdk.getComponent(\"views.settings.ChangePassword\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 679
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24519, 
                        24522
                    ]
                }, 
                "source": "        var ChangeAvatar = sdk.getComponent('settings.ChangeAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 680
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24589, 
                        24592
                    ]
                }, 
                "source": "        var Notifications = sdk.getComponent(\"settings.Notifications\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 681
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24661, 
                        24664
                    ]
                }, 
                "source": "        var EditableText = sdk.getComponent('elements.EditableText');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 682
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24732, 
                        24735
                    ]
                }, 
                "source": "        var avatarUrl = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 684
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            this.state.avatarUrl ? MatrixClientPeg.get().mxcUrlToHttp(this.state.avatarUrl) : null", 
                "message": "Line 685 exceeds the maximum line length of 90.", 
                "line": 685
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24869, 
                        24872
                    ]
                }, 
                "source": "        var threepidsSection = this.state.threepids.map((val, pidIndex) => {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 688
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <input type=\"text\" key={val.address} id={id} value={val.address} disabled />", 
                "message": "Line 696 exceeds the maximum line length of 90.", 
                "line": 696
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <img src=\"img/cancel-small.svg\" width=\"14\" height=\"14\" alt=\"Remove\" onClick={this.onRemoveThreepidClicked.bind(this, val)} />", 
                "message": "Line 699 exceeds the maximum line length of 90.", 
                "line": 699
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 93, 
                "source": "                        <img src=\"img/cancel-small.svg\" width=\"14\" height=\"14\" alt=\"Remove\" onClick={this.onRemoveThreepidClicked.bind(this, val)} />", 
                "message": "JSX props should not use .bind()", 
                "line": 699
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 102, 
                "source": "                        <img src=\"img/cancel-small.svg\" width=\"14\" height=\"14\" alt=\"Remove\" onClick={this.onRemoveThreepidClicked.bind(this, val)} />", 
                "message": "JSX props should not use .bind()", 
                "line": 699
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25791, 
                        25794
                    ]
                }, 
                "source": "        var addThreepidSection;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 704
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                         <img src=\"img/plus.svg\" width=\"14\" height=\"14\" alt=\"Add\" onClick={ this.onAddThreepidClicked.bind(this, undefined, true) }/>", 
                "message": "Line 722 exceeds the maximum line length of 90.", 
                "line": 722
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 83, 
                "source": "                         <img src=\"img/plus.svg\" width=\"14\" height=\"14\" alt=\"Add\" onClick={ this.onAddThreepidClicked.bind(this, undefined, true) }/>", 
                "message": "JSX props should not use .bind()", 
                "line": 722
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 93, 
                "source": "                         <img src=\"img/plus.svg\" width=\"14\" height=\"14\" alt=\"Add\" onClick={ this.onAddThreepidClicked.bind(this, undefined, true) }/>", 
                "message": "JSX props should not use .bind()", 
                "line": 722
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27073, 
                        27076
                    ]
                }, 
                "source": "        var accountJsx;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 729
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        27338, 
                        27347
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 737
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        buttonClassName=\"mx_UserSettings_button mx_UserSettings_changePasswordButton\"", 
                "message": "Line 745 exceeds the maximum line length of 90.", 
                "line": 745
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        27962, 
                        27965
                    ]
                }, 
                "source": "        var notification_area;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 750
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var notification_area;", 
                "message": "Identifier 'notification_area' is not in camel case.", 
                "line": 750
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            notification_area = (<div>", 
                "message": "Identifier 'notification_area' is not in camel case.", 
                "line": 752
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <Notifications threepids={this.state.threepids} brand={this.props.brand} />", 
                "message": "Line 756 exceeds the maximum line length of 90.", 
                "line": 756
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        28367, 
                        28370
                    ]
                }, 
                "source": "        var olmVersion = MatrixClientPeg.get().olmVersion;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 761
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        28581, 
                        28584
                    ]
                }, 
                "source": "        var olmVersionString = \"<not-enabled>\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 764
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                showUploadSection={false} className=\"mx_UserSettings_avatarPicker_img\"/>", 
                "message": "Line 798 exceeds the maximum line length of 90.", 
                "line": 798
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <input id=\"avatarInput\" type=\"file\" onChange={this.onAvatarSelected}/>", 
                "message": "Line 806 exceeds the maximum line length of 90.", 
                "line": 806
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <AccessibleButton className=\"mx_UserSettings_logout mx_UserSettings_button\" onClick={this.onLogoutClicked}>", 
                "message": "Line 815 exceeds the maximum line length of 90.", 
                "line": 815
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 18, 
                "source": "                {notification_area}", 
                "message": "Identifier 'notification_area' is not in camel case.", 
                "line": 822
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        Identity Server is { MatrixClientPeg.get().getIdentityServerUrl() }", 
                "message": "Line 841 exceeds the maximum line length of 90.", 
                "line": 841
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        vector-web version: {this.state.vectorVersion !== null ? this.state.vectorVersion : 'unknown'}<br/>", 
                "message": "Line 845 exceeds the maximum line length of 90.", 
                "line": 845
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        32544, 
                        32544
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 855
            }
        ], 
        "errorCount": 26, 
        "warningCount": 98, 
        "filePath": "src/components/structures/UserSettings.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var AvatarLogic = require(\"../../../Avatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 53, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1425, 
                        1425
                    ]
                }, 
                "source": "        defaultToInitialLetter: React.PropTypes.bool // true to add default url", 
                "message": "Missing trailing comma.", 
                "line": 36
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1633, 
                        1633
                    ]
                }, 
                "source": "            defaultToInitialLetter: true", 
                "message": "Missing trailing comma.", 
                "line": 44
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1885, 
                        1888
                    ]
                }, 
                "source": "        var newState = this._getState(nextProps);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1935, 
                        1938
                    ]
                }, 
                "source": "        var newImageUrls = newState.imageUrls;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 55
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1982, 
                        1985
                    ]
                }, 
                "source": "        var oldImageUrls = this.state.imageUrls;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 56
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2152, 
                        2161
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 59
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var i = 0; i < newImageUrls.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 62
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2672, 
                        2675
                    ]
                }, 
                "source": "        var urls = props.urls || [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 75
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2800, 
                        2803
                    ]
                }, 
                "source": "        var defaultImageUrl = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 80
            }, 
            {
                "nodeType": "LogicalExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2983, 
                        2983
                    ]
                }, 
                "source": "                props.idName || props.name", 
                "message": "Missing trailing comma.", 
                "line": 83
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3184, 
                        3184
                    ]
                }, 
                "source": "            urlsIndex: 0", 
                "message": "Missing trailing comma.", 
                "line": 90
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3240, 
                        3243
                    ]
                }, 
                "source": "        var nextIndex = this.state.urlsIndex + 1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 95
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 37, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3433, 
                        3433
                    ]
                }, 
                "source": "                urlsIndex: nextIndex", 
                "message": "Missing trailing comma.", 
                "line": 99
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 104
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'name'.", 
                "line": 104
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3692, 
                        3695
                    ]
                }, 
                "source": "        var idx = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 113
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3713, 
                        3716
                    ]
                }, 
                "source": "        var initial = name[0];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 114
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3959, 
                        3962
                    ]
                }, 
                "source": "        var chars = 1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 121
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3982, 
                        3985
                    ]
                }, 
                "source": "        var first = name.charCodeAt(idx);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 122
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4149, 
                        4152
                    ]
                }, 
                "source": "            var second = name.charCodeAt(idx+1);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4300, 
                        4303
                    ]
                }, 
                "source": "        var firstChar = name.substring(idx, idx+chars);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 132
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4495, 
                        4498
                    ]
                }, 
                "source": "        var imageUrl = this.state.imageUrls[this.state.urlsIndex];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 138
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 19, 
                "source": "            name, idName, title, url, urls, width, height, resizeMethod,", 
                "message": "'idName' is assigned a value but never used.", 
                "line": 141
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 34, 
                "source": "            name, idName, title, url, urls, width, height, resizeMethod,", 
                "message": "'url' is assigned a value but never used.", 
                "line": 141
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 39, 
                "source": "            name, idName, title, url, urls, width, height, resizeMethod,", 
                "message": "'urls' is assigned a value but never used.", 
                "line": 141
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 60, 
                "source": "            name, idName, title, url, urls, width, height, resizeMethod,", 
                "message": "'resizeMethod' is assigned a value but never used.", 
                "line": 141
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "            defaultToInitialLetter, onClick,", 
                "message": "'defaultToInitialLetter' is assigned a value but never used.", 
                "line": 142
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    lineHeight: height + \"px\" }}>{initialLetter}</EmojiText>", 
                "message": "Line 153 exceeds the maximum line length of 90.", 
                "line": 153
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6261, 
                        6261
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 179
            }
        ], 
        "errorCount": 11, 
        "warningCount": 20, 
        "filePath": "src/components/views/avatars/BaseAvatar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var Avatar = require('../../../Avatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        654, 
                        657
                    ]
                }, 
                "source": "var sdk = require(\"../../../index\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 61, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2141, 
                        2141
                    ]
                }, 
                "source": "                                         props.resizeMethod)", 
                "message": "Missing trailing comma.", 
                "line": 66
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2194, 
                        2197
                    ]
                }, 
                "source": "        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 71
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2260, 
                        2263
                    ]
                }, 
                "source": "        var {member, onClick, viewUserOnClick, ...otherProps} = this.props;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 73
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2768, 
                        2768
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 88
            }
        ], 
        "errorCount": 2, 
        "warningCount": 5, 
        "filePath": "src/components/views/avatars/MemberAvatar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        567, 
                        570
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        597, 
                        600
                    ]
                }, 
                "source": "var ContentRepo = require(\"matrix-js-sdk\").ContentRepo;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        653, 
                        656
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        712, 
                        715
                    ]
                }, 
                "source": "var Avatar = require('../../../Avatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        753, 
                        756
                    ]
                }, 
                "source": "var sdk = require(\"../../../index\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 45, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1228, 
                        1228
                    ]
                }, 
                "source": "        resizeMethod: React.PropTypes.string", 
                "message": "Missing trailing comma.", 
                "line": 33
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1511, 
                        1511
                    ]
                }, 
                "source": "            urls: this.getImageUrls(this.props)", 
                "message": "Missing trailing comma.", 
                "line": 47
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1652, 
                        1652
                    ]
                }, 
                "source": "            urls: this.getImageUrls(newProps)", 
                "message": "Missing trailing comma.", 
                "line": 53
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 62, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1928, 
                        1928
                    ]
                }, 
                "source": "                props.width, props.height, props.resizeMethod", 
                "message": "Missing trailing comma.", 
                "line": 62
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 42, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2090, 
                        2090
                    ]
                }, 
                "source": "            this.getFallbackAvatar(props) // lowest priority", 
                "message": "Missing trailing comma.", 
                "line": 66
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2464, 
                        2464
                    ]
                }, 
                "source": "            false", 
                "message": "Missing trailing comma.", 
                "line": 78
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2577, 
                        2580
                    ]
                }, 
                "source": "        var mlist = props.room.currentState.members;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 85
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2630, 
                        2633
                    ]
                }, 
                "source": "        var userIds = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 86
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2732, 
                        2735
                    ]
                }, 
                "source": "        for (var uid in mlist) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 88
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2985, 
                        2988
                    ]
                }, 
                "source": "            var theOtherGuy = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 98
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3417, 
                        3417
                    ]
                }, 
                "source": "                false", 
                "message": "Missing trailing comma.", 
                "line": 107
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3672, 
                        3672
                    ]
                }, 
                "source": "                    false", 
                "message": "Missing trailing comma.", 
                "line": 113
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3941, 
                        3944
                    ]
                }, 
                "source": "        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 127
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4007, 
                        4010
                    ]
                }, 
                "source": "        var {room, oobData, ...otherProps} = this.props;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 129
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4065, 
                        4068
                    ]
                }, 
                "source": "        var roomName = room ? room.name : oobData.name;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 131
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4296, 
                        4296
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 138
            }
        ], 
        "errorCount": 9, 
        "warningCount": 12, 
        "filePath": "src/components/views/avatars/RoomAvatar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <button className=\"mx_CreateRoomButton\" onClick={this.onClick}>Create Room</button>", 
                "message": "Line 39 exceeds the maximum line length of 90.", 
                "line": 39
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1091, 
                        1091
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 41
            }
        ], 
        "errorCount": 1, 
        "warningCount": 2, 
        "filePath": "src/components/views/create_room/CreateRoomButton.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var Presets = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 39, 
                "fix": {
                    "text": ",", 
                    "range": [
                        890, 
                        890
                    ]
                }, 
                "source": "        preset: React.PropTypes.string", 
                "message": "Missing trailing comma.", 
                "line": 31
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <select className=\"mx_Presets\" onChange={this.onValueChanged} value={this.props.preset}>", 
                "message": "Line 48 exceeds the maximum line length of 90.", 
                "line": 48
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1523, 
                        1523
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 54
            }
        ], 
        "errorCount": 2, 
        "warningCount": 3, 
        "filePath": "src/components/views/create_room/Presets.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1117, 
                        1120
                    ]
                }, 
                "source": "        var room_alias = this.props.alias;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var room_alias = this.props.alias;", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 37
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        if (room_alias && this.props.homeserver) {", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 39
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1216, 
                        1219
                    ]
                }, 
                "source": "            var suffix = \":\" + this.props.homeserver;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 40
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                room_alias = room_alias.slice(1, -suffix.length);", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 42
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 16, 
                "source": "        return room_alias;", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 46
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1586, 
                        1589
                    ]
                }, 
                "source": "        var target = ev.target;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1618, 
                        1621
                    ]
                }, 
                "source": "        var curr_val = ev.target.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 55
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var curr_val = ev.target.value;", 
                "message": "Identifier 'curr_val' is not in camel case.", 
                "line": 55
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            if (curr_val == \"\") {", 
                "message": "Identifier 'curr_val' is not in camel case.", 
                "line": 58
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1738, 
                        1741
                    ]
                }, 
                "source": "                var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 59
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1972, 
                        1975
                    ]
                }, 
                "source": "                var suffix = \":\" + this.props.homeserver;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 65
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        curr_val.endsWith(suffix) ? (target.value.length - suffix.length) : target.value.length", 
                "message": "Line 69 exceeds the maximum line length of 90.", 
                "line": 69
            }, 
            {
                "nodeType": "ConditionalExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 112, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2269, 
                        2269
                    ]
                }, 
                "source": "                        curr_val.endsWith(suffix) ? (target.value.length - suffix.length) : target.value.length", 
                "message": "Missing trailing comma.", 
                "line": 69
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2383, 
                        2386
                    ]
                }, 
                "source": "        var curr_val = ev.target.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 77
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var curr_val = ev.target.value;", 
                "message": "Identifier 'curr_val' is not in camel case.", 
                "line": 77
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            if (curr_val == \"#:\" + this.props.homeserver) {", 
                "message": "Identifier 'curr_val' is not in camel case.", 
                "line": 80
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            if (curr_val != \"\") {", 
                "message": "Identifier 'curr_val' is not in camel case.", 
                "line": 85
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2640, 
                        2643
                    ]
                }, 
                "source": "                var new_val = ev.target.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 86
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 21, 
                "source": "                var new_val = ev.target.value;", 
                "message": "Identifier 'new_val' is not in camel case.", 
                "line": 86
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2687, 
                        2690
                    ]
                }, 
                "source": "                var suffix = \":\" + this.props.homeserver;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 87
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 48, 
                "source": "                if (!curr_val.startsWith(\"#\")) new_val = \"#\" + new_val;", 
                "message": "Identifier 'new_val' is not in camel case.", 
                "line": 88
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 64, 
                "source": "                if (!curr_val.startsWith(\"#\")) new_val = \"#\" + new_val;", 
                "message": "Identifier 'new_val' is not in camel case.", 
                "line": 88
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 49, 
                "source": "                if (!curr_val.endsWith(suffix)) new_val = new_val + suffix;", 
                "message": "Identifier 'new_val' is not in camel case.", 
                "line": 89
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 59, 
                "source": "                if (!curr_val.endsWith(suffix)) new_val = new_val + suffix;", 
                "message": "Identifier 'new_val' is not in camel case.", 
                "line": 89
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 35, 
                "source": "                ev.target.value = new_val;", 
                "message": "Identifier 'new_val' is not in camel case.", 
                "line": 90
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3231, 
                        3231
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 101
            }
        ], 
        "errorCount": 2, 
        "warningCount": 26, 
        "filePath": "src/components/views/create_room/RoomAlias.js"
    }, 
    {
        "messages": [], 
        "errorCount": 0, 
        "warningCount": 0, 
        "filePath": "src/components/views/dialogs/BaseDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import classNames from 'classnames';", 
                "message": "'classNames' is defined but never used.", 
                "line": 18
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 8, 
                "source": "import rate_limited_func from '../../../ratelimitedfunc';", 
                "message": "Identifier 'rate_limited_func' is not in camel case.", 
                "line": 24
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 52, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1912, 
                        1912
                    ]
                }, 
                "source": "        onFinished: React.PropTypes.func.isRequired", 
                "message": "Missing trailing comma.", 
                "line": 54
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 24, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2208, 
                        2208
                    ]
                }, 
                "source": "            focus: true", 
                "message": "Missing trailing comma.", 
                "line": 64
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3443, 
                        3446
                    ]
                }, 
                "source": "                var room = this._getDirectMessageRoom(inviteList[0]);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 103
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        } else if (this.state.queryList.length > 0 && (e.keyCode === 188 || e.keyCode === 13 || e.keyCode === 9)) { // comma or enter or tab", 
                "message": "Line 142 exceeds the maximum line length of 90.", 
                "line": 142
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        } else if (this.refs.textinput.value.length === 0 && this.state.inviteList.length && e.keyCode === 8) { // backspace", 
                "message": "Line 146 exceeds the maximum line length of 90.", 
                "line": 146
            }, 
            {
                "nodeType": "ReturnStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 18, 
                "fix": {
                    "text": ";", 
                    "range": [
                        6598, 
                        6598
                    ]
                }, 
                "source": "                }", 
                "message": "Missing semicolon.", 
                "line": 184
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7469, 
                        7472
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 212
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7526, 
                        7529
                    ]
                }, 
                "source": "            var inviteList = self.state.inviteList.slice();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 214
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 17, 
                "source": "            if (this._cancelThreepidLookup) this._cancelThreepidLookup();", 
                "message": "Unexpected 'this'.", 
                "line": 220
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 45, 
                "source": "            if (this._cancelThreepidLookup) this._cancelThreepidLookup();", 
                "message": "Unexpected 'this'.", 
                "line": 220
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7862, 
                        7865
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 225
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8004, 
                        8007
                    ]
                }, 
                "source": "        var inviteList = this.state.inviteList.slice();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 232
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8399, 
                        8402
                    ]
                }, 
                "source": "        var dmRooms = dmRoomMap.getDMRoomsForUserId(addr);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 243
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8649, 
                        8652
                    ]
                }, 
                "source": "                let room = MatrixClientPeg.get().getRoom(dmRooms[i]);", 
                "message": "'room' is never reassigned. Use 'const' instead.", 
                "line": 247
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9094, 
                        9097
                    ]
                }, 
                "source": "            var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 261
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 80, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9347, 
                        9347
                    ]
                }, 
                "source": "                description: \"Guest users can't invite users. Please register.\"", 
                "message": "Missing trailing comma.", 
                "line": 264
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 275
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9707, 
                        9710
                    ]
                }, 
                "source": "                var room = MatrixClientPeg.get().getRoom(self.props.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 278
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9939, 
                        9942
                    ]
                }, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 283
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10143, 
                        10143
                    ]
                }, 
                "source": "                    description: err.toString()", 
                "message": "Missing trailing comma.", 
                "line": 286
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10452, 
                        10455
                    ]
                }, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 296
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10661, 
                        10661
                    ]
                }, 
                "source": "                    description: err.toString()", 
                "message": "Missing trailing comma.", 
                "line": 299
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 306
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var self = this;", 
                "message": "'self' is already defined.", 
                "line": 306
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10842, 
                        10845
                    ]
                }, 
                "source": "            var room;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 307
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11249, 
                        11252
                    ]
                }, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 317
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        11453, 
                        11453
                    ]
                }, 
                "source": "                    description: err.toString()", 
                "message": "Missing trailing comma.", 
                "line": 320
            }, 
            {
                "nodeType": "NewExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 26, 
                "source": "    _updateUserList: new rate_limited_func(function() {", 
                "message": "A constructor name should not start with a lowercase letter.", 
                "line": 331
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this._userList = MatrixClientPeg.get().getUsers();", 
                "message": "Unexpected 'this'.", 
                "line": 333
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11936, 
                        11939
                    ]
                }, 
                "source": "        var name = user.displayName.toLowerCase();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 338
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11987, 
                        11990
                    ]
                }, 
                "source": "        var uid = user.userId.toLowerCase();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 339
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const expr = new RegExp(\"(?:^|[\\\\s\\\\(\\)'\\\",\\.-_@\\?;:{}\\\\[\\\\]\\\\#~`\\\\*\\\\&\\\\$])\" + escapeRegExp(query));", 
                "message": "Line 369 exceeds the maximum line length of 90.", 
                "line": 369
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (addrs.length === 1 && getAddressType(addrs[0]) === \"mx\" && !this.props.roomId) {", 
                "message": "Line 390 exceeds the maximum line length of 90.", 
                "line": 390
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13894, 
                        13897
                    ]
                }, 
                "source": "        var errorList = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 399
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13927, 
                        13930
                    ]
                }, 
                "source": "        for (var addr in addrs) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 400
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14132, 
                        14135
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 407
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                title: \"Failed to invite the following users to the \" + room.name + \" room:\",", 
                "message": "Line 409 exceeds the maximum line length of 90.", 
                "line": 409
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 10, 
                "fix": {
                    "text": ";", 
                    "range": [
                        15828, 
                        15828
                    ]
                }, 
                "source": "        }", 
                "message": "Missing semicolon.", 
                "line": 454
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 19, 
                "fix": {
                    "text": ",", 
                    "range": [
                        16669, 
                        16669
                    ]
                }, 
                "source": "                }]", 
                "message": "Missing trailing comma.", 
                "line": 476
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16923, 
                        16926
                    ]
                }, 
                "source": "        var query = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 486
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17033, 
                        17036
                    ]
                }, 
                "source": "            var AddressTile = sdk.getComponent(\"elements.AddressTile\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 489
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <AddressTile key={i} address={this.state.inviteList[i]} canDismiss={true} onDismissed={ this.onDismissed(i) } />", 
                "message": "Line 492 exceeds the maximum line length of 90.", 
                "line": 492
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 133, 
                "fix": {
                    "text": ",", 
                    "range": [
                        17322, 
                        17322
                    ]
                }, 
                "source": "                    <AddressTile key={i} address={this.state.inviteList[i]} canDismiss={true} onDismissed={ this.onDismissed(i) } />", 
                "message": "Missing trailing comma.", 
                "line": 492
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 24, 
                "fix": {
                    "text": ",", 
                    "range": [
                        17839, 
                        17839
                    ]
                }, 
                "source": "            </textarea>", 
                "message": "Missing trailing comma.", 
                "line": 508
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17860, 
                        17863
                    ]
                }, 
                "source": "        var error;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 511
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17879, 
                        17882
                    ]
                }, 
                "source": "        var addressSelector;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 512
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            error = <div className=\"mx_ChatInviteDialog_error\">You have entered an invalid contact. Try using their Matrix ID or email address.</div>;", 
                "message": "Line 514 exceeds the maximum line length of 90.", 
                "line": 514
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            const addressSelectorHeader = <div className=\"mx_ChatInviteDialog_addressSelectHeader\">", 
                "message": "Line 516 exceeds the maximum line length of 90.", 
                "line": 516
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <TintableSvg src=\"img/icons-close-button.svg\" width=\"35\" height=\"35\" />", 
                "message": "Line 536 exceeds the maximum line length of 90.", 
                "line": 536
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        19756, 
                        19756
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 553
            }
        ], 
        "errorCount": 17, 
        "warningCount": 35, 
        "filePath": "src/components/views/dialogs/ChatInviteDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 17, 
                "source": "                Velocity(this._passwordField, \"callout.shake\", 300);", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 63
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <p>This will make your account permanently unusable. You will not be able to re-register the same user ID.</p>", 
                "message": "Line 104 exceeds the maximum line length of 90.", 
                "line": 104
            }
        ], 
        "errorCount": 0, 
        "warningCount": 2, 
        "filePath": "src/components/views/dialogs/DeactivateAccountDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <button className=\"mx_Dialog_primary\" onClick={this.props.onFinished} autoFocus={this.props.focus}>", 
                "message": "Line 62 exceeds the maximum line length of 90.", 
                "line": 62
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "src/components/views/dialogs/ErrorDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2449, 
                        2449
                    ]
                }, 
                "source": "                errorText: msg", 
                "message": "Missing trailing comma.", 
                "line": 82
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4051, 
                        4054
                    ]
                }, 
                "source": "        var StageComponent = getEntryComponentForLoginType(stage);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 148
            }
        ], 
        "errorCount": 1, 
        "warningCount": 1, 
        "filePath": "src/components/views/dialogs/InteractiveAuthDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <button className=\"mx_Dialog_primary\" onClick={this.props.onFinished} autoFocus={true}>", 
                "message": "Line 68 exceeds the maximum line length of 90.", 
                "line": 68
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "src/components/views/dialogs/NeedToRegisterDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <button className=\"mx_Dialog_primary\" onClick={this.onOk} autoFocus={this.props.focus}>", 
                "message": "Line 61 exceeds the maximum line length of 90.", 
                "line": 61
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "src/components/views/dialogs/QuestionDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 22, 
                "fix": {
                    "text": "", 
                    "range": [
                        1224, 
                        1225
                    ]
                }, 
                "source": "            return { value : \"Guest \" + MatrixClientPeg.get().getUserIdLocalpart() };", 
                "message": "Extra space after key 'value'.", 
                "line": 39
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        1293, 
                        1302
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 40
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 22, 
                "fix": {
                    "text": "", 
                    "range": [
                        1335, 
                        1336
                    ]
                }, 
                "source": "            return { value : MatrixClientPeg.get().getUserIdLocalpart() };", 
                "message": "Extra space after key 'value'.", 
                "line": 42
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1578, 
                        1578
                    ]
                }, 
                "source": "            value: ev.target.value", 
                "message": "Missing trailing comma.", 
                "line": 52
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Your display name is how you'll appear to others when you speak in rooms.<br/>", 
                "message": "Line 70 exceeds the maximum line length of 90.", 
                "line": 70
            }
        ], 
        "errorCount": 1, 
        "warningCount": 4, 
        "filePath": "src/components/views/dialogs/SetDisplayNameDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <input id=\"textinput\" ref=\"textinput\" className=\"mx_TextInputDialog_input\" defaultValue={this.props.value} autoFocus={this.props.focus} size=\"64\" onKeyDown={this.onKeyDown}/>", 
                "message": "Line 71 exceeds the maximum line length of 90.", 
                "line": 71
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "src/components/views/dialogs/TextInputDialog.js"
    }, 
    {
        "messages": [], 
        "errorCount": 0, 
        "warningCount": 0, 
        "filePath": "src/components/views/elements/AccessibleButton.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1502, 
                        1505
                    ]
                }, 
                "source": "        var selected = this.state.selected;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 48
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1546, 
                        1549
                    ]
                }, 
                "source": "        var maxSelected = this._maxSelected(props.addressList);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.scrollElement && this.props.addressList.length > 0 && !this.state.hover) {", 
                "message": "Line 58 exceeds the maximum line length of 90.", 
                "line": 58
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1964, 
                        1967
                    ]
                }, 
                "source": "            var elementHeight = this.addressListElement.getBoundingClientRect().height;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 59
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            this.scrollElement.scrollTop = (this.state.selected * elementHeight) - elementHeight;", 
                "message": "Line 60 exceeds the maximum line length of 90.", 
                "line": 60
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 17, 
                "fix": {
                    "text": "", 
                    "range": [
                        2329, 
                        2330
                    ]
                }, 
                "source": "                hover : false,", 
                "message": "Extra space after key 'hover'.", 
                "line": 68
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 17, 
                "fix": {
                    "text": "", 
                    "range": [
                        2588, 
                        2589
                    ]
                }, 
                "source": "                hover : false,", 
                "message": "Extra space after key 'hover'.", 
                "line": 77
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 25, 
                "fix": {
                    "text": "", 
                    "range": [
                        2991, 
                        2992
                    ]
                }, 
                "source": "        this.setState({ hover : false });", 
                "message": "Extra space after key 'hover'.", 
                "line": 98
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3309, 
                        3312
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 110
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var self = this;", 
                "message": "'self' is assigned a value but never used.", 
                "line": 110
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3334, 
                        3337
                    ]
                }, 
                "source": "        var AddressTile = sdk.getComponent(\"elements.AddressTile\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 111
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3402, 
                        3405
                    ]
                }, 
                "source": "        var maxSelected = this._maxSelected(this.props.addressList);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 112
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3471, 
                        3474
                    ]
                }, 
                "source": "        var addressList = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 113
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var i = 0; i <= maxSelected; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 117
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3677, 
                        3680
                    ]
                }, 
                "source": "                var classes = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 118
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className={classes} onClick={this.onClick.bind(this, i)} onMouseEnter={this.onMouseEnter.bind(this, i)} onMouseLeave={this.onMouseLeave} key={i} ref={(ref) => { this.addressListElement = ref; }} >", 
                "message": "Line 127 exceeds the maximum line length of 90.", 
                "line": 127
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 46, 
                "source": "                    <div className={classes} onClick={this.onClick.bind(this, i)} onMouseEnter={this.onMouseEnter.bind(this, i)} onMouseLeave={this.onMouseLeave} key={i} ref={(ref) => { this.addressListElement = ref; }} >", 
                "message": "JSX props should not use .bind()", 
                "line": 127
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 83, 
                "source": "                    <div className={classes} onClick={this.onClick.bind(this, i)} onMouseEnter={this.onMouseEnter.bind(this, i)} onMouseLeave={this.onMouseLeave} key={i} ref={(ref) => { this.addressListElement = ref; }} >", 
                "message": "JSX props should not use .bind()", 
                "line": 127
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <AddressTile address={this.props.addressList[i]} justified={true} networkName=\"vector\" networkUrl=\"img/search-icon-vector.svg\" />", 
                "message": "Line 128 exceeds the maximum line length of 90.", 
                "line": 128
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 27, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4587, 
                        4587
                    ]
                }, 
                "source": "                    </div>", 
                "message": "Missing trailing comma.", 
                "line": 129
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4710, 
                        4713
                    ]
                }, 
                "source": "        var listSize = list.length === 0 ? 0 : list.length - 1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 137
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var maxSelected = listSize > (this.props.truncateAt - 1) ? (this.props.truncateAt - 1) : listSize;", 
                "message": "Line 138 exceeds the maximum line length of 90.", 
                "line": 138
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4774, 
                        4777
                    ]
                }, 
                "source": "        var maxSelected = listSize > (this.props.truncateAt - 1) ? (this.props.truncateAt - 1) : listSize;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 138
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4942, 
                        4945
                    ]
                }, 
                "source": "        var classes = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 143
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5320, 
                        5320
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 154
            }
        ], 
        "errorCount": 5, 
        "warningCount": 20, 
        "filePath": "src/components/views/elements/AddressSelector.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var classNames = require('classnames');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        653, 
                        656
                    ]
                }, 
                "source": "var sdk = require(\"../../../index\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        690, 
                        693
                    ]
                }, 
                "source": "var Invite = require(\"../../../Invite\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Invite = require(\"../../../Invite\");", 
                "message": "'Invite' is assigned a value but never used.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        731, 
                        734
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        790, 
                        793
                    ]
                }, 
                "source": "var Avatar = require('../../../Avatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Avatar = require('../../../Avatar');", 
                "message": "'Avatar' is assigned a value but never used.", 
                "line": 24
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1182, 
                        1182
                    ]
                }, 
                "source": "        'mx', 'email'", 
                "message": "Missing trailing comma.", 
                "line": 33
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2274, 
                        2274
                    ]
                }, 
                "source": "                address.avatarMxc, 25, 25, 'crop'", 
                "message": "Missing trailing comma.", 
                "line": 70
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 86, 
                "fix": {
                    "text": ";", 
                    "range": [
                        4582, 
                        4582
                    ]
                }, 
                "source": "                nameNode = <div className={nameClasses}>{ address.displayName }</div>", 
                "message": "Missing semicolon.", 
                "line": 133
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4871, 
                        4874
                    ]
                }, 
                "source": "            var unknownClasses = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 144
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <BaseAvatar width={25} height={25} name={name} title={name} url={imgUrl} />", 
                "message": "Line 171 exceeds the maximum line length of 90.", 
                "line": 171
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5913, 
                        5913
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 177
            }
        ], 
        "errorCount": 6, 
        "warningCount": 8, 
        "filePath": "src/components/views/elements/AddressTile.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        959, 
                        962
                    ]
                }, 
                "source": "        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <li><label>Device name:</label> <span>{ this.props.device.getDisplayName() }</span></li>", 
                "message": "Line 44 exceeds the maximum line length of 90.", 
                "line": 44
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <li><label>Device ID:</label>             <span><code>{ this.props.device.deviceId}</code></span></li>", 
                "message": "Line 45 exceeds the maximum line length of 90.", 
                "line": 45
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 2, 
                "ruleId": "no-multi-spaces", 
                "column": 71, 
                "fix": {
                    "text": " ", 
                    "range": [
                        1807, 
                        1807
                    ]
                }, 
                "source": "                            <li><label>Device ID:</label>             <span><code>{ this.props.device.deviceId}</code></span></li>", 
                "message": "Multiple spaces found before '<'.", 
                "line": 45
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <li><label>Device key:</label>            <span><code><b>{ this.props.device.getFingerprint() }</b></code></span></li>", 
                "message": "Line 46 exceeds the maximum line length of 90.", 
                "line": 46
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 2, 
                "ruleId": "no-multi-spaces", 
                "column": 71, 
                "fix": {
                    "text": " ", 
                    "range": [
                        1938, 
                        1938
                    ]
                }, 
                "source": "                            <li><label>Device key:</label>            <span><code><b>{ this.props.device.getFingerprint() }</b></code></span></li>", 
                "message": "Multiple spaces found before '<'.", 
                "line": 46
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 25, 
                "fix": {
                    "text": "(confirm)", 
                    "range": [
                        2611, 
                        2618
                    ]
                }, 
                "source": "            onFinished: confirm=>{", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 60
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 76, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2789, 
                        2789
                    ]
                }, 
                "source": "                        this.props.userId, this.props.device.deviceId, true", 
                "message": "Missing trailing comma.", 
                "line": 63
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 65, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3013, 
                        3013
                    ]
                }, 
                "source": "            this.props.userId, this.props.device.deviceId, false", 
                "message": "Missing trailing comma.", 
                "line": 72
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 64, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3179, 
                        3179
                    ]
                }, 
                "source": "            this.props.userId, this.props.device.deviceId, true", 
                "message": "Missing trailing comma.", 
                "line": 78
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 65, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3348, 
                        3348
                    ]
                }, 
                "source": "            this.props.userId, this.props.device.deviceId, false", 
                "message": "Missing trailing comma.", 
                "line": 84
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var blacklistButton = null, verifyButton = null;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 89
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3401, 
                        3404
                    ]
                }, 
                "source": "        var blacklistButton = null, verifyButton = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 89
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_unblacklist\"", 
                "message": "Line 93 exceeds the maximum line length of 90.", 
                "line": 93
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_blacklist\"", 
                "message": "Line 100 exceeds the maximum line length of 90.", 
                "line": 100
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_unverify\"", 
                "message": "Line 109 exceeds the maximum line length of 90.", 
                "line": 109
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <button className=\"mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_verify\"", 
                "message": "Line 116 exceeds the maximum line length of 90.", 
                "line": 116
            }
        ], 
        "errorCount": 6, 
        "warningCount": 11, 
        "filePath": "src/components/views/elements/DeviceVerifyButtons.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const searchbox_classes = {", 
                "message": "Identifier 'searchbox_classes' is not in camel case.", 
                "line": 76
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        let join_button;", 
                "message": "Identifier 'join_button' is not in camel case.", 
                "line": 81
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            join_button = <span className=\"mx_DirectorySearchBox_joinButton\"", 
                "message": "Identifier 'join_button' is not in camel case.", 
                "line": 83
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 18, 
                "source": "                {join_button}", 
                "message": "Identifier 'join_button' is not in camel case.", 
                "line": 98
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <span className=\"mx_DirectorySearchBox_clear\" onClick={this._onClearClick} />", 
                "message": "Line 100 exceeds the maximum line length of 90.", 
                "line": 100
            }
        ], 
        "errorCount": 0, 
        "warningCount": 5, 
        "filePath": "src/components/views/elements/DirectorySearchBox.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 7, 
                "source": "const KEY_TAB = 9;", 
                "message": "'KEY_TAB' is assigned a value but never used.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 7, 
                "source": "const KEY_SHIFT = 16;", 
                "message": "'KEY_SHIFT' is assigned a value but never used.", 
                "line": 22
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 7, 
                "source": "const KEY_WINDOWS = 91;", 
                "message": "'KEY_WINDOWS' is assigned a value but never used.", 
                "line": 23
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            this.refs.editable_div.setAttribute(\"class\", this.props.className + \" \" + this.props.placeholderClassName);", 
                "message": "Line 89 exceeds the maximum line length of 90.", 
                "line": 89
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2736, 
                        2745
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 92
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4337, 
                        4346
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 148
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4989, 
                        4992
                    ]
                }, 
                "source": "        var node = ev.target.childNodes[0];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 173
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5057, 
                        5060
                    ]
                }, 
                "source": "            var range = document.createRange();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 175
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5188, 
                        5191
                    ]
                }, 
                "source": "            var sel = window.getSelection();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 179
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5344, 
                        5347
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 186
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5369, 
                        5372
                    ]
                }, 
                "source": "        var submit = (ev.key === \"Enter\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 187
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5588, 
                        5591
                    ]
                }, 
                "source": "        var sel = window.getSelection();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 196
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        5689, 
                        5702
                    ]
                }, 
                "source": "            {this.cancelEdit();}", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 200
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 32, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5722, 
                        5731
                    ]
                }, 
                "source": "            {this.cancelEdit();}", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 200
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        5735, 
                        5748
                    ]
                }, 
                "source": "            {this.onFinish(ev);}", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 202
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5854, 
                        5857
                    ]
                }, 
                "source": "        var editable_el;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 208
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var editable_el;", 
                "message": "Identifier 'editable_el' is not in camel case.", 
                "line": 208
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (!this.props.editable || (this.state.phase == this.Phases.Display && (this.props.label || this.props.labelClassName) && !this.value)) {", 
                "message": "Line 210 exceeds the maximum line length of 90.", 
                "line": 210
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            editable_el = <div className={this.props.className + \" \" + this.props.labelClassName} onClick={this.onClickDiv}>{ this.props.label || this.props.initialValue }</div>;", 
                "message": "Line 212 exceeds the maximum line length of 90.", 
                "line": 212
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            editable_el = <div className={this.props.className + \" \" + this.props.labelClassName} onClick={this.onClickDiv}>{ this.props.label || this.props.initialValue }</div>;", 
                "message": "Identifier 'editable_el' is not in camel case.", 
                "line": 212
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            editable_el = <div ref=\"editable_div\" contentEditable=\"true\" className={this.props.className}", 
                "message": "Line 215 exceeds the maximum line length of 90.", 
                "line": 215
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            editable_el = <div ref=\"editable_div\" contentEditable=\"true\" className={this.props.className}", 
                "message": "Identifier 'editable_el' is not in camel case.", 
                "line": 215
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                               onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} onFocus={this.onFocus} onBlur={this.onBlur}></div>;", 
                "message": "Line 216 exceeds the maximum line length of 90.", 
                "line": 216
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 16, 
                "source": "        return editable_el;", 
                "message": "Identifier 'editable_el' is not in camel case.", 
                "line": 219
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6661, 
                        6661
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 220
            }
        ], 
        "errorCount": 4, 
        "warningCount": 22, 
        "filePath": "src/components/views/elements/EditableText.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2144, 
                        2144
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 67
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2893, 
                        2893
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 99
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2970, 
                        2973
                    ]
                }, 
                "source": "            var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 105
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3264, 
                        3267
                    ]
                }, 
                "source": "            var EditableText = sdk.getComponent('elements.EditableText');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 114
            }
        ], 
        "errorCount": 2, 
        "warningCount": 2, 
        "filePath": "src/components/views/elements/EditableTextContainer.js"
    }, 
    {
        "messages": [], 
        "errorCount": 0, 
        "warningCount": 0, 
        "filePath": "src/components/views/elements/EmojiText.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 37, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3700, 
                        3700
                    ]
                }, 
                "source": "                canonicalTransitions", 
                "message": "Missing trailing comma.", 
                "line": 92
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 56, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3890, 
                        3890
                    ]
                }, 
                "source": "                    t.transitionType, plural, t.repeats", 
                "message": "Missing trailing comma.", 
                "line": 97
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9085, 
                        9085
                    ]
                }, 
                "source": "            items.length - itemLimit, 0", 
                "message": "Missing trailing comma.", 
                "line": 244
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12711, 
                        12711
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 339
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 78, 
                "fix": {
                    "text": ",", 
                    "range": [
                        14563, 
                        14563
                    ]
                }, 
                "source": "            (seq1, seq2) => aggregate.indices[seq1] > aggregate.indices[seq2]", 
                "message": "Missing trailing comma.", 
                "line": 397
            }
        ], 
        "errorCount": 5, 
        "warningCount": 0, 
        "filePath": "src/components/views/elements/MemberEventListSummary.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var roles = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        686, 
                        689
                    ]
                }, 
                "source": "var reverseRoles = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2063, 
                        2066
                    ]
                }, 
                "source": "        var value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 74
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2372, 
                        2375
                    ]
                }, 
                "source": "        var customPicker;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 85
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2435, 
                        2438
                    ]
                }, 
                "source": "            var input;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 87
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        2557, 
                        2570
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 90
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                input = <input ref=\"custom\" type=\"text\" size=\"3\" defaultValue={ this.props.value } onBlur={ this.onCustomBlur } onKeyDown={ this.onCustomKeyDown }/>;", 
                "message": "Line 92 exceeds the maximum line length of 90.", 
                "line": 92
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2831, 
                        2834
                    ]
                }, 
                "source": "        var selectValue;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 97
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2926, 
                        2935
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 100
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3023, 
                        3026
                    ]
                }, 
                "source": "        var select;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 104
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        3130, 
                        3139
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 107
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3890, 
                        3890
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 127
            }
        ], 
        "errorCount": 1, 
        "warningCount": 12, 
        "filePath": "src/components/views/elements/PowerSelector.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 36, 
                "fix": {
                    "text": ",", 
                    "range": [
                        774, 
                        774
                    ]
                }, 
                "source": "        max: React.PropTypes.number", 
                "message": "Missing trailing comma.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        948, 
                        951
                    ]
                }, 
                "source": "        var progressStyle = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 67, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1036, 
                        1036
                    ]
                }, 
                "source": "            width: ((this.props.value / this.props.max) * 100)+\"%\"", 
                "message": "Missing trailing comma.", 
                "line": 32
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <div className=\"mx_ProgressBar\"><div className=\"mx_ProgressBar_fill\" style={progressStyle}></div></div>", 
                "message": "Line 35 exceeds the maximum line length of 90.", 
                "line": 35
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1197, 
                        1197
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 37
            }
        ], 
        "errorCount": 3, 
        "warningCount": 3, 
        "filePath": "src/components/views/elements/ProgressBar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        577, 
                        580
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        607, 
                        610
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "'ReactDOM' is assigned a value but never used.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        644, 
                        647
                    ]
                }, 
                "source": "var Tinter = require(\"../../../Tinter\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "source": "var TintableSvg = React.createClass({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <object className={ \"mx_TintableSvg \" + (this.props.className ? this.props.className : \"\") }", 
                "message": "Line 66 exceeds the maximum line length of 90.", 
                "line": 66
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2220, 
                        2220
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 75
            }
        ], 
        "errorCount": 2, 
        "warningCount": 5, 
        "filePath": "src/components/views/elements/TintableSvg.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        561, 
                        564
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 52, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1105, 
                        1105
                    ]
                }, 
                "source": "        createOverflowElement: React.PropTypes.func", 
                "message": "Missing trailing comma.", 
                "line": 28
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1381, 
                        1381
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 38
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1434, 
                        1437
                    ]
                }, 
                "source": "        var childsJsx = this.props.children;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 43
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1479, 
                        1482
                    ]
                }, 
                "source": "        var overflowJsx;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 44
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1504, 
                        1507
                    ]
                }, 
                "source": "        var childArray = React.Children.toArray(this.props.children).filter((c) => {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 45
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1632, 
                        1635
                    ]
                }, 
                "source": "        var childCount = childArray.length;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1723, 
                        1726
                    ]
                }, 
                "source": "            var overflowCount = childCount - this.props.truncateAt;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 52
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1926, 
                        1926
                    ]
                }, 
                "source": "                    overflowCount, childCount", 
                "message": "Missing trailing comma.", 
                "line": 56
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2320, 
                        2320
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 71
            }
        ], 
        "errorCount": 4, 
        "warningCount": 6, 
        "filePath": "src/components/views/elements/TruncatedList.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 23, 
                "source": "    addUser: function(user_id) {", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 36
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 47, 
                "source": "        if (this.props.selected_users.indexOf(user_id == -1)) {", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 37
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 67, 
                "source": "            this.props.onChange(this.props.selected_users.concat([user_id]));", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 38
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 26, 
                "source": "    removeUser: function(user_id) {", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 42
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 25, 
                "source": "            return e != user_id;", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 44
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1482, 
                        1485
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 61, 
                "source": "                    {this.props.selected_users.map(function(user_id, i) {", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 58
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        return <li key={user_id}>{user_id} - <span onClick={function() {self.removeUser(user_id);}}>X</span></li>;", 
                "message": "Line 59 exceeds the maximum line length of 90.", 
                "line": 59
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 41, 
                "source": "                        return <li key={user_id}>{user_id} - <span onClick={function() {self.removeUser(user_id);}}>X</span></li>;", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 59
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 51, 
                "source": "                        return <li key={user_id}>{user_id} - <span onClick={function() {self.removeUser(user_id);}}>X</span></li>;", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 59
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <input type=\"text\" ref=\"user_id_input\" defaultValue=\"\" className=\"mx_UserSelector_userIdInput\" placeholder=\"ex. @bob:example.com\"/>", 
                "message": "Line 62 exceeds the maximum line length of 90.", 
                "line": 62
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2184, 
                        2184
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 68
            }
        ], 
        "errorCount": 1, 
        "warningCount": 12, 
        "filePath": "src/components/views/elements/UserSelector.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var DIV_ID = 'mx_recaptcha';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1569, 
                        1572
                    ]
                }, 
                "source": "            var protocol = global.location.protocol;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 56
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1666, 
                        1669
                    ]
                }, 
                "source": "                var warning = document.createElement('div');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 58
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                warning.innerHTML = \"Robot check is currently unavailable on desktop - please use a <a href='https://riot.im/app'>web browser</a>.\";", 
                "message": "Line 63 exceeds the maximum line length of 90.", 
                "line": 63
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        2229, 
                        2242
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 65
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2265, 
                        2268
                    ]
                }, 
                "source": "                var scriptTag = document.createElement('script');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 67
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    'src', protocol+\"//www.google.com/recaptcha/api.js?onload=mx_on_recaptcha_loaded&render=explicit\"", 
                "message": "Line 69 exceeds the maximum line length of 90.", 
                "line": 69
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 118, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2472, 
                        2472
                    ]
                }, 
                "source": "                    'src', protocol+\"//www.google.com/recaptcha/api.js?onload=mx_on_recaptcha_loaded&render=explicit\"", 
                "message": "Missing trailing comma.", 
                "line": 69
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2807, 
                        2810
                    ]
                }, 
                "source": "        var publicKey = this.props.sitePublicKey;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 82
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4054, 
                        4054
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 126
            }
        ], 
        "errorCount": 2, 
        "warningCount": 9, 
        "filePath": "src/components/views/login/CaptchaForm.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        927, 
                        927
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 34
            }
        ], 
        "errorCount": 1, 
        "warningCount": 1, 
        "filePath": "src/components/views/login/CasLogin.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var React = require(\"react\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        You can also set a custom identity server but this will typically prevent", 
                "message": "Line 37 exceeds the maximum line length of 90.", 
                "line": 37
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1820, 
                        1820
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 48
            }
        ], 
        "errorCount": 1, 
        "warningCount": 2, 
        "filePath": "src/components/views/login/CustomServerDialog.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4219, 
                        4222
                    ]
                }, 
                "source": "        var sitePublicKey = this.props.stageParams.public_key;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 130
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5552, 
                        5555
                    ]
                }, 
                "source": "        var url = MatrixClientPeg.get().getFallbackAuthUrl(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 171
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 37, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5674, 
                        5674
                    ]
                }, 
                "source": "            this.props.authSessionId", 
                "message": "Missing trailing comma.", 
                "line": 173
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 10, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6432, 
                        6435
                    ]
                }, 
                "source": "    for (var c of AuthEntryComponents) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 206
            }
        ], 
        "errorCount": 1, 
        "warningCount": 3, 
        "filePath": "src/components/views/login/InteractiveAuthEntryComponents.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        873, 
                        873
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 30
            }
        ], 
        "errorCount": 1, 
        "warningCount": 1, 
        "filePath": "src/components/views/login/LoginFooter.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        828, 
                        828
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 30
            }
        ], 
        "errorCount": 1, 
        "warningCount": 1, 
        "filePath": "src/components/views/login/LoginHeader.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import ReactDOM from 'react-dom';", 
                "message": "'ReactDOM' is defined but never used.", 
                "line": 18
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 9, 
                "source": "import {field_input_incorrect} from '../../../UiEffects';", 
                "message": "Identifier 'field_input_incorrect' is not in camel case.", 
                "line": 20
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 9, 
                "source": "import {field_input_incorrect} from '../../../UiEffects';", 
                "message": "Identifier 'field_input_incorrect' is not in camel case.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2460, 
                        2463
                    ]
                }, 
                "source": "        var forgotPasswordJsx;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 80
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <a className=\"mx_Login_forgot\" onClick={this.props.onForgotPasswordClick} href=\"#\">", 
                "message": "Line 84 exceeds the maximum line length of 90.", 
                "line": 84
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <input className={pwFieldClass} ref={(e) => {this._passwordField = e;}} type=\"password\"", 
                "message": "Line 103 exceeds the maximum line length of 90.", 
                "line": 103
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3775, 
                        3775
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 113
            }
        ], 
        "errorCount": 2, 
        "warningCount": 5, 
        "filePath": "src/components/views/login/PasswordLogin.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var UiEffects = require('../../../UiEffects');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        660, 
                        663
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        697, 
                        700
                    ]
                }, 
                "source": "var Email = require('../../../email');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        736, 
                        739
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        776, 
                        779
                    ]
                }, 
                "source": "var FIELD_EMAIL = 'field_email';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        809, 
                        812
                    ]
                }, 
                "source": "var FIELD_USERNAME = 'field_username';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        848, 
                        851
                    ]
                }, 
                "source": "var FIELD_PASSWORD = 'field_password';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        887, 
                        890
                    ]
                }, 
                "source": "var FIELD_PASSWORD_CONFIRM = 'field_password_confirm';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2210, 
                        2210
                    ]
                }, 
                "source": "        onRegisterClick: React.PropTypes.func // onRegisterClick(Object) => ?Promise", 
                "message": "Missing trailing comma.", 
                "line": 60
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2455, 
                        2455
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 69
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3109, 
                        3112
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 93
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3226, 
                        3229
                    ]
                }, 
                "source": "                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 96
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            If you don't specify an email address, you won't be able to reset your password.<br/>", 
                "message": "Line 101 exceeds the maximum line length of 90.", 
                "line": 101
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        3896, 
                        3909
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 111
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        4018, 
                        4021
                    ]
                }, 
                "source": "        let email = this.refs.email.value.trim();", 
                "message": "'email' is never reassigned. Use 'const' instead.", 
                "line": 119
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4068, 
                        4071
                    ]
                }, 
                "source": "        var promise = this.props.onRegisterClick({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 120
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-undef", 
                "column": 13, 
                "source": "            ev.target.disabled = true;", 
                "message": "'ev' is not defined.", 
                "line": 127
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-undef", 
                "column": 17, 
                "source": "                ev.target.disabled = false;", 
                "message": "'ev' is not defined.", 
                "line": 129
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 134
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4609, 
                        4612
                    ]
                }, 
                "source": "        var keys = Object.keys(this.state.fieldValid);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 139
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < keys.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 140
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 29, 
                "source": "    validateField: function(field_id) {", 
                "message": "Identifier 'field_id' is not in camel case.", 
                "line": 152
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5004, 
                        5007
                    ]
                }, 
                "source": "        var pwd1 = this.refs.password.value.trim();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 153
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5056, 
                        5059
                    ]
                }, 
                "source": "        var pwd2 = this.refs.passwordConfirm.value.trim();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 154
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "        switch (field_id) {", 
                "message": "Identifier 'field_id' is not in camel case.", 
                "line": 156
            }, 
            {
                "nodeType": "SwitchCase", 
                "severity": 2, 
                "ruleId": "no-case-declarations", 
                "column": 13, 
                "source": "            case FIELD_EMAIL:", 
                "message": "Unexpected lexical declaration in case block.", 
                "line": 157
            }, 
            {
                "nodeType": "SwitchCase", 
                "severity": 2, 
                "ruleId": "no-case-declarations", 
                "column": 13, 
                "source": "            case FIELD_EMAIL:", 
                "message": "Unexpected lexical declaration in case block.", 
                "line": 157
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5504, 
                        5504
                    ]
                }, 
                "source": "                        }", 
                "message": "Missing trailing comma.", 
                "line": 163
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                this.markFieldValid(field_id, valid, \"RegistrationForm.ERR_EMAIL_INVALID\");", 
                "message": "Line 178 exceeds the maximum line length of 90.", 
                "line": 178
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                var username = this.refs.username.value.trim() || this.props.guestUsername;", 
                "message": "Line 182 exceeds the maximum line length of 90.", 
                "line": 182
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var username = this.refs.username.value.trim() || this.props.guestUsername;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 182
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 64, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6590, 
                        6590
                    ]
                }, 
                "source": "                        \"RegistrationForm.ERR_USERNAME_INVALID\"", 
                "message": "Missing trailing comma.", 
                "line": 187
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 62, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6826, 
                        6826
                    ]
                }, 
                "source": "                        \"RegistrationForm.ERR_USERNAME_BLANK\"", 
                "message": "Missing trailing comma.", 
                "line": 193
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 64, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7209, 
                        7209
                    ]
                }, 
                "source": "                        \"RegistrationForm.ERR_PASSWORD_MISSING\"", 
                "message": "Missing trailing comma.", 
                "line": 204
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 63, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7474, 
                        7474
                    ]
                }, 
                "source": "                        \"RegistrationForm.ERR_PASSWORD_LENGTH\"", 
                "message": "Missing trailing comma.", 
                "line": 210
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 61, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7803, 
                        7803
                    ]
                }, 
                "source": "                    \"RegistrationForm.ERR_PASSWORD_MISMATCH\"", 
                "message": "Missing trailing comma.", 
                "line": 219
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 30, 
                "source": "    markFieldValid: function(field_id, val, error_code) {", 
                "message": "Identifier 'field_id' is not in camel case.", 
                "line": 225
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 45, 
                "source": "    markFieldValid: function(field_id, val, error_code) {", 
                "message": "Identifier 'error_code' is not in camel case.", 
                "line": 225
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7930, 
                        7933
                    ]
                }, 
                "source": "        var fieldValid = this.state.fieldValid;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 226
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 22, 
                "source": "    fieldElementById(field_id) {", 
                "message": "Identifier 'field_id' is not in camel case.", 
                "line": 235
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "        switch (field_id) {", 
                "message": "Identifier 'field_id' is not in camel case.", 
                "line": 236
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 30, 
                "source": "    _classForField: function(field_id, baseClass) {", 
                "message": "Identifier 'field_id' is not in camel case.", 
                "line": 248
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8883, 
                        8886
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 258
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8908, 
                        8911
                    ]
                }, 
                "source": "        var emailSection, belowEmailSection, registerButton;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 259
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var emailSection, belowEmailSection, registerButton;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 259
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            Sorry, but your university is not registered with us just yet.&nbsp;", 
                "message": "Line 273 exceeds the maximum line length of 90.", 
                "line": 273
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            to get your university signed up. Or continue to register with Riot to enjoy our open source platform.", 
                "message": "Line 278 exceeds the maximum line length of 90.", 
                "line": 278
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10704, 
                        10707
                    ]
                }, 
                "source": "        var placeholderUserName = \"User name\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 296
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        placeholder={ placeholderUserName } defaultValue={this.props.defaultUsername}", 
                "message": "Line 307 exceeds the maximum line length of 90.", 
                "line": 307
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <div className=\"mx_Login_fieldLabel\">Setting a user name will create a fresh account</div> : null", 
                "message": "Line 312 exceeds the maximum line length of 90.", 
                "line": 312
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        placeholder=\"Password\" defaultValue={this.props.defaultPassword} />", 
                "message": "Line 317 exceeds the maximum line length of 90.", 
                "line": 317
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        className={this._classForField(FIELD_PASSWORD_CONFIRM, 'mx_Login_field')}", 
                "message": "Line 321 exceeds the maximum line length of 90.", 
                "line": 321
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12435, 
                        12435
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 329
            }
        ], 
        "errorCount": 13, 
        "warningCount": 41, 
        "filePath": "src/components/views/login/RegistrationForm.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var Modal = require('../../../Modal');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        652, 
                        655
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 44, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1890, 
                        1890
                    ]
                }, 
                "source": "        delayTimeMs: React.PropTypes.number // time to wait before invoking onChanged", 
                "message": "Missing trailing comma.", 
                "line": 48
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 27, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2199, 
                        2199
                    ]
                }, 
                "source": "            delayTimeMs: 0", 
                "message": "Missing trailing comma.", 
                "line": 58
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 80, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2710, 
                        2710
                    ]
                }, 
                "source": "                           (this.props.customIsUrl !== this.props.defaultIsUrl)", 
                "message": "Missing trailing comma.", 
                "line": 69
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 13, 
                "source": "            this._hsTimeoutId = this._waitThenInvoke(this._hsTimeoutId, function() {", 
                "message": "Unexpected 'this'.", 
                "line": 75
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 33, 
                "source": "            this._hsTimeoutId = this._waitThenInvoke(this._hsTimeoutId, function() {", 
                "message": "Unexpected 'this'.", 
                "line": 75
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 54, 
                "source": "            this._hsTimeoutId = this._waitThenInvoke(this._hsTimeoutId, function() {", 
                "message": "Unexpected 'this'.", 
                "line": 75
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2933, 
                        2936
                    ]
                }, 
                "source": "                var hsUrl = this.state.hs_url.trim().replace(/\\/$/, \"\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 76
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 29, 
                "source": "                var hsUrl = this.state.hs_url.trim().replace(/\\/$/, \"\");", 
                "message": "Unexpected 'this'.", 
                "line": 76
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 43, 
                "source": "                if (hsUrl === \"\") hsUrl = this.props.defaultHsUrl;", 
                "message": "Unexpected 'this'.", 
                "line": 77
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 17, 
                "source": "                this.props.onHsUrlChanged(hsUrl);", 
                "message": "Unexpected 'this'.", 
                "line": 78
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 13, 
                "source": "            this._isTimeoutId = this._waitThenInvoke(this._isTimeoutId, function() {", 
                "message": "Unexpected 'this'.", 
                "line": 85
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 33, 
                "source": "            this._isTimeoutId = this._waitThenInvoke(this._isTimeoutId, function() {", 
                "message": "Unexpected 'this'.", 
                "line": 85
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 54, 
                "source": "            this._isTimeoutId = this._waitThenInvoke(this._isTimeoutId, function() {", 
                "message": "Unexpected 'this'.", 
                "line": 85
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3350, 
                        3353
                    ]
                }, 
                "source": "                var isUrl = this.state.is_url.trim().replace(/\\/$/, \"\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 86
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 29, 
                "source": "                var isUrl = this.state.is_url.trim().replace(/\\/$/, \"\");", 
                "message": "Unexpected 'this'.", 
                "line": 86
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 43, 
                "source": "                if (isUrl === \"\") isUrl = this.props.defaultIsUrl;", 
                "message": "Unexpected 'this'.", 
                "line": 87
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 17, 
                "source": "                this.props.onIsUrlChanged(isUrl);", 
                "message": "Unexpected 'this'.", 
                "line": 88
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3892, 
                        3892
                    ]
                }, 
                "source": "            configVisible: visible", 
                "message": "Missing trailing comma.", 
                "line": 102
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4066, 
                        4075
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 107
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4256, 
                        4259
                    ]
                }, 
                "source": "        var CustomServerDialog = sdk.getComponent('login.CustomServerDialog');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 115
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4416, 
                        4419
                    ]
                }, 
                "source": "        var serverConfigStyle = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 120
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4534, 
                        4537
                    ]
                }, 
                "source": "        var toggleButton;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 123
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <input className=\"mx_Login_radio\" id=\"basic\" name=\"configVisible\" type=\"radio\"", 
                "message": "Line 127 exceeds the maximum line length of 90.", 
                "line": 127
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 25, 
                "source": "                        onChange={this.onServerConfigVisibleChange.bind(this, false)} />", 
                "message": "JSX props should not use .bind()", 
                "line": 129
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 35, 
                "source": "                        onChange={this.onServerConfigVisibleChange.bind(this, false)} />", 
                "message": "JSX props should not use .bind()", 
                "line": 129
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <input className=\"mx_Login_radio\" id=\"advanced\" name=\"configVisible\" type=\"radio\"", 
                "message": "Line 134 exceeds the maximum line length of 90.", 
                "line": 134
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 25, 
                "source": "                        onChange={this.onServerConfigVisibleChange.bind(this, true)} />", 
                "message": "JSX props should not use .bind()", 
                "line": 136
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 35, 
                "source": "                        onChange={this.onServerConfigVisibleChange.bind(this, true)} />", 
                "message": "JSX props should not use .bind()", 
                "line": 136
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <label className=\"mx_Login_label mx_ServerConfig_hslabel\" htmlFor=\"hsurl\">", 
                "message": "Line 149 exceeds the maximum line length of 90.", 
                "line": 149
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <label className=\"mx_Login_label mx_ServerConfig_islabel\" htmlFor=\"isurl\">", 
                "message": "Line 157 exceeds the maximum line length of 90.", 
                "line": 157
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <a className=\"mx_ServerConfig_help\" href=\"#\" onClick={this.showHelpPopup}>", 
                "message": "Line 165 exceeds the maximum line length of 90.", 
                "line": 165
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6895, 
                        6895
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 172
            }
        ], 
        "errorCount": 21, 
        "warningCount": 14, 
        "filePath": "src/components/views/login/ServerConfig.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import sdk from '../../../index';", 
                "message": "'sdk' is defined but never used.", 
                "line": 23
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1165, 
                        1165
                    ]
                }, 
                "source": "            playing: !this.state.playing", 
                "message": "Missing trailing comma.", 
                "line": 38
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1487, 
                        1490
                    ]
                }, 
                "source": "        var content = this.props.mxEvent.getContent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 52
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1624, 
                        1627
                    ]
                }, 
                "source": "            var decryptedBlob;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 14, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        2196, 
                        2198
                    ]
                }, 
                "source": "    render() {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 72
            }
        ], 
        "errorCount": 2, 
        "warningCount": 3, 
        "filePath": "src/components/views/messages/MAudioBody.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return this.refs.body && this.refs.body.getEventTileOps ? this.refs.body.getEventTileOps() : null;", 
                "message": "Line 46 exceeds the maximum line length of 90.", 
                "line": 46
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1501, 
                        1504
                    ]
                }, 
                "source": "        var UnknownBody = sdk.getComponent('messages.UnknownBody');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1570, 
                        1573
                    ]
                }, 
                "source": "        var bodyTypes = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 52
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 63, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2035, 
                        2035
                    ]
                }, 
                "source": "            'm.video': sdk.getComponent('messages.MVideoBody')", 
                "message": "Missing trailing comma.", 
                "line": 59
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2056, 
                        2059
                    ]
                }, 
                "source": "        var content = this.props.mxEvent.getContent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 62
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2111, 
                        2114
                    ]
                }, 
                "source": "        var msgtype = content.msgtype;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 63
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2150, 
                        2153
                    ]
                }, 
                "source": "        var BodyType = UnknownBody;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 64
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return <BodyType ref=\"body\" mxEvent={this.props.mxEvent} highlights={this.props.highlights}", 
                "message": "Line 72 exceeds the maximum line length of 90.", 
                "line": 72
            }
        ], 
        "errorCount": 1, 
        "warningCount": 9, 
        "filePath": "src/components/views/messages/MessageEvent.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import q from 'q';", 
                "message": "'q' is defined but never used.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        969, 
                        972
                    ]
                }, 
                "source": "var tintedDownloadImageURL;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1115, 
                        1118
                    ]
                }, 
                "source": "var nextMountId = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'event'.", 
                "line": 118
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'event'.", 
                "line": 146
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6453, 
                        6456
                    ]
                }, 
                "source": "    var cssText = style.cssText;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 172
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < style.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 176
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'content'.", 
                "line": 197
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7441, 
                        7444
                    ]
                }, 
                "source": "        var linkText = 'Attachment';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 205
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const fileName = content.body && content.body.length > 0 ? content.body : \"Attachment\";", 
                "message": "Line 264 exceeds the maximum line length of 90.", 
                "line": 264
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10185, 
                        10188
                    ]
                }, 
                "source": "                var decrypting = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 273
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 71, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10811, 
                        10811
                    ]
                }, 
                "source": "                            description: \"Error decrypting attachment\"", 
                "message": "Missing trailing comma.", 
                "line": 286
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            let renderer_url = DEFAULT_CROSS_ORIGIN_RENDERER;", 
                "message": "Identifier 'renderer_url' is not in camel case.", 
                "line": 322
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            if (this.context.appConfig && this.context.appConfig.cross_origin_renderer_url) {", 
                "message": "Line 323 exceeds the maximum line length of 90.", 
                "line": 323
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                renderer_url = this.context.appConfig.cross_origin_renderer_url;", 
                "message": "Identifier 'renderer_url' is not in camel case.", 
                "line": 324
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 38, 
                "source": "                        <iframe src={renderer_url} onLoad={onIframeLoad} ref=\"iframe\"/>", 
                "message": "Identifier 'renderer_url' is not in camel case.", 
                "line": 337
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <a className=\"mx_ImageBody_downloadLink\" href={contentUrl} target=\"_blank\">", 
                "message": "Line 349 exceeds the maximum line length of 90.", 
                "line": 349
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                { content.info && content.info.size ? filesize(content.info.size) : \"\" }", 
                "message": "Line 353 exceeds the maximum line length of 90.", 
                "line": 353
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        14179, 
                        14192
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 358
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                <img src={tintedDownloadImageURL} width=\"12\" height=\"14\" ref=\"downloadImage\"/>", 
                "message": "Line 364 exceeds the maximum line length of 90.", 
                "line": 364
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14735, 
                        14738
                    ]
                }, 
                "source": "            var extra = text ? (': ' + text) : '';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 372
            }
        ], 
        "errorCount": 2, 
        "warningCount": 19, 
        "filePath": "src/components/views/messages/MFileBody.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 24, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1422, 
                        1422
                    ]
                }, 
                "source": "            error: null", 
                "message": "Missing trailing comma.", 
                "line": 45
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 44, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1841, 
                        1841
                    ]
                }, 
                "source": "                mxEvent: this.props.mxEvent", 
                "message": "Missing trailing comma.", 
                "line": 58
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2417, 
                        2420
                    ]
                }, 
                "source": "        var imgElement = e.target;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 80
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2600, 
                        2603
                    ]
                }, 
                "source": "        var imgElement = e.target;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 88
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3639, 
                        3642
                    ]
                }, 
                "source": "            var thumbnailPromise = q(null);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 118
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3813, 
                        3813
                    ]
                }, 
                "source": "                    content.info.thumbnail_file", 
                "message": "Missing trailing comma.", 
                "line": 121
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3952, 
                        3955
                    ]
                }, 
                "source": "            var decryptedBlob;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5736, 
                        5739
                    ]
                }, 
                "source": "        var thumbHeight = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 171
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            thumbHeight = ImageUtils.thumbHeight(content.info.w, content.info.h, timelineWidth, maxHeight);", 
                "message": "Line 173 exceeds the maximum line length of 90.", 
                "line": 173
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 15, 
                "source": "        const TintableSvg = sdk.getComponent(\"elements.TintableSvg\");", 
                "message": "'TintableSvg' is assigned a value but never used.", 
                "line": 180
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 77, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        6547, 
                        6549
                    ]
                }, 
                "source": "        if (content.file !== undefined && this.state.decryptedUrl === null) {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 192
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <img src=\"img/spinner.gif\" alt={content.body} width=\"32\" height=\"32\" style={{", 
                "message": "Line 204 exceeds the maximum line length of 90.", 
                "line": 204
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <img className=\"mx_MImageBody_thumbnail\" src={thumbUrl} ref=\"image\"", 
                "message": "Line 219 exceeds the maximum line length of 90.", 
                "line": 219
            }
        ], 
        "errorCount": 4, 
        "warningCount": 9, 
        "filePath": "src/components/views/messages/MImageBody.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import Model from '../../../Modal';", 
                "message": "'Model' is defined but never used.", 
                "line": 22
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import sdk from '../../../index';", 
                "message": "'sdk' is defined but never used.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1809, 
                        1812
                    ]
                }, 
                "source": "        var widthMulti = thumbWidth / fullWidth;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 57
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1858, 
                        1861
                    ]
                }, 
                "source": "        var heightMulti = thumbHeight / fullHeight;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 58
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2062, 
                        2071
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 62
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3046, 
                        3049
                    ]
                }, 
                "source": "            var thumbnailPromise = q(null);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 92
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3220, 
                        3220
                    ]
                }, 
                "source": "                    content.info.thumbnail_file", 
                "message": "Missing trailing comma.", 
                "line": 95
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3359, 
                        3362
                    ]
                }, 
                "source": "            var decryptedBlob;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 100
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <img src=\"img/spinner.gif\" alt={content.body} width=\"16\" height=\"16\"/>", 
                "message": "Line 147 exceeds the maximum line length of 90.", 
                "line": 147
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5494, 
                        5497
                    ]
                }, 
                "source": "        var height = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 156
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5521, 
                        5524
                    ]
                }, 
                "source": "        var width = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 157
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5547, 
                        5550
                    ]
                }, 
                "source": "        var poster = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 158
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5574, 
                        5577
                    ]
                }, 
                "source": "        var preload = \"metadata\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 159
            }
        ], 
        "errorCount": 3, 
        "warningCount": 10, 
        "filePath": "src/components/views/messages/MVideoBody.js"
    }, 
    {
        "messages": [], 
        "errorCount": 0, 
        "warningCount": 0, 
        "filePath": "src/components/views/messages/SenderProfile.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var ReactDOM = require('react-dom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        650, 
                        653
                    ]
                }, 
                "source": "var highlight = require('highlight.js');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        691, 
                        694
                    ]
                }, 
                "source": "var HtmlUtils = require('../../../HtmlUtils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        738, 
                        741
                    ]
                }, 
                "source": "var linkify = require('linkifyjs');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        774, 
                        777
                    ]
                }, 
                "source": "var linkifyElement = require('linkifyjs/element');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        825, 
                        828
                    ]
                }, 
                "source": "var linkifyMatrix = require('../../../linkify-matrix');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        881, 
                        884
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        918, 
                        921
                    ]
                }, 
                "source": "var ScalarAuthClient = require(\"../../../ScalarAuthClient\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        979, 
                        982
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1018, 
                        1021
                    ]
                }, 
                "source": "var SdkConfig = require('../../../SdkConfig');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3821, 
                        3824
                    ]
                }, 
                "source": "            var links = this.findLinks(this.refs.content.children);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 109
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    var hidden = global.localStorage.getItem(\"hide_preview_\" + this.props.mxEvent.getId());", 
                "message": "Line 117 exceeds the maximum line length of 90.", 
                "line": 117
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4194, 
                        4197
                    ]
                }, 
                "source": "                    var hidden = global.localStorage.getItem(\"hide_preview_\" + this.props.mxEvent.getId());", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 117
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4434, 
                        4437
                    ]
                }, 
                "source": "        var links = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 125
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < nodes.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4511, 
                        4514
                    ]
                }, 
                "source": "            var node = nodes[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 127
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        4598, 
                        4611
                    ]
                }, 
                "source": "            {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 129
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        4734, 
                        4747
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 133
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        4848, 
                        4861
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 136
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5247, 
                        5256
                    ]
                }, 
                "source": "        {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 148
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5710, 
                        5719
                    ]
                }, 
                "source": "        {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 158
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5755, 
                        5764
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 160
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5783, 
                        5786
                    ]
                }, 
                "source": "            var url = node.getAttribute(\"href\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 162
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5832, 
                        5835
                    ]
                }, 
                "source": "            var host = url.match(/^https?:\\/\\/(.*?)(\\/|$)/)[1];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 163
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        6330, 
                        6343
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 173
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            global.localStorage.setItem(\"hide_preview_\" + this.props.mxEvent.getId(), \"1\");", 
                "message": "Line 185 exceeds the maximum line length of 90.", 
                "line": 185
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6841, 
                        6844
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 191
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    global.localStorage.removeItem(\"hide_preview_\" + self.props.mxEvent.getId());", 
                "message": "Line 200 exceeds the maximum line length of 90.", 
                "line": 200
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7910, 
                        7913
                    ]
                }, 
                "source": "        let scalarClient = new ScalarAuthClient();", 
                "message": "'scalarClient' is never reassigned. Use 'const' instead.", 
                "line": 216
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8009, 
                        8012
                    ]
                }, 
                "source": "            let completeUrl = scalarClient.getStarterLink(starterLink);", 
                "message": "'completeUrl' is never reassigned. Use 'const' instead.", 
                "line": 218
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8081, 
                        8084
                    ]
                }, 
                "source": "            let QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "'QuestionDialog' is never reassigned. Use 'const' instead.", 
                "line": 219
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8158, 
                        8161
                    ]
                }, 
                "source": "            let integrationsUrl = SdkConfig.get().integrations_ui_url;", 
                "message": "'integrationsUrl' is never reassigned. Use 'const' instead.", 
                "line": 220
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        You are about to taken to a third-party site so you can authenticate your account for use with {integrationsUrl}.<br/>", 
                "message": "Line 225 exceeds the maximum line length of 90.", 
                "line": 225
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 25, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8784, 
                        8787
                    ]
                }, 
                "source": "                    let width = window.screen.width > 1024 ? 1024 : window.screen.width;", 
                "message": "'width' is never reassigned. Use 'const' instead.", 
                "line": 233
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 25, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8873, 
                        8876
                    ]
                }, 
                "source": "                    let height = window.screen.height > 800 ? 800 : window.screen.height;", 
                "message": "'height' is never reassigned. Use 'const' instead.", 
                "line": 234
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 25, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8963, 
                        8966
                    ]
                }, 
                "source": "                    let left = (window.screen.width - width) / 2;", 
                "message": "'left' is never reassigned. Use 'const' instead.", 
                "line": 235
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 25, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9029, 
                        9032
                    ]
                }, 
                "source": "                    let top = (window.screen.height - height) / 2;", 
                "message": "'top' is never reassigned. Use 'const' instead.", 
                "line": 236
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    window.open(completeUrl, '_blank', `height=${height}, width=${width}, top=${top}, left=${left},`);", 
                "message": "Line 237 exceeds the maximum line length of 90.", 
                "line": 237
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9349, 
                        9352
                    ]
                }, 
                "source": "        var mxEvent = this.props.mxEvent;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 245
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9391, 
                        9394
                    ]
                }, 
                "source": "        var content = mxEvent.getContent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 246
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9436, 
                        9439
                    ]
                }, 
                "source": "        var body = HtmlUtils.bodyToHtml(content, this.props.highlights, {});", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 248
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        9625, 
                        9634
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 252
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        else if (content.data && typeof content.data[\"org.matrix.neb.starter_link\"] === \"string\") {", 
                "message": "Line 253 exceeds the maximum line length of 90.", 
                "line": 253
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            body = <a href=\"#\" onClick={ this.onStarterLinkClick.bind(this, content.data[\"org.matrix.neb.starter_link\"]) }>{ body }</a>;", 
                "message": "Line 254 exceeds the maximum line length of 90.", 
                "line": 254
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 32, 
                "source": "            body = <a href=\"#\" onClick={ this.onStarterLinkClick.bind(this, content.data[\"org.matrix.neb.starter_link\"]) }>{ body }</a>;", 
                "message": "JSX props should not use .bind()", 
                "line": 254
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9882, 
                        9885
                    ]
                }, 
                "source": "        var widgets;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 257
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.state.links.length && !this.state.widgetHidden && this.props.showUrlPreview) {", 
                "message": "Line 258 exceeds the maximum line length of 90.", 
                "line": 258
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10003, 
                        10006
                    ]
                }, 
                "source": "            var LinkPreviewWidget = sdk.getComponent('rooms.LinkPreviewWidget');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 259
            }, 
            {
                "nodeType": "SwitchCase", 
                "severity": 2, 
                "ruleId": "no-case-declarations", 
                "column": 13, 
                "source": "            case \"m.emote\":", 
                "message": "Unexpected lexical declaration in case block.", 
                "line": 271
            }
        ], 
        "errorCount": 2, 
        "warningCount": 48, 
        "filePath": "src/components/views/messages/TextualBody.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var TextForEvent = require('../../../TextForEvent');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        872, 
                        875
                    ]
                }, 
                "source": "        var text = TextForEvent.textForEvent(this.props.mxEvent);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }
        ], 
        "errorCount": 0, 
        "warningCount": 3, 
        "filePath": "src/components/views/messages/TextualEvent.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        717, 
                        720
                    ]
                }, 
                "source": "        var content = this.props.mxEvent.getContent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }
        ], 
        "errorCount": 0, 
        "warningCount": 2, 
        "filePath": "src/components/views/messages/UnknownBody.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        584, 
                        587
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var ObjectUtils = require(\"../../../ObjectUtils\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        665, 
                        668
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        724, 
                        727
                    ]
                }, 
                "source": "var sdk = require(\"../../../index\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        761, 
                        764
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 52, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1172, 
                        1172
                    ]
                }, 
                "source": "        canonicalAliasEvent: React.PropTypes.object // MatrixEvent", 
                "message": "Missing trailing comma.", 
                "line": 32
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1349, 
                        1349
                    ]
                }, 
                "source": "            aliasEvents: []", 
                "message": "Missing trailing comma.", 
                "line": 39
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return this.recalculateState(this.props.aliasEvents, this.props.canonicalAliasEvent);", 
                "message": "Line 44 exceeds the maximum line length of 90.", 
                "line": 44
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1622, 
                        1625
                    ]
                }, 
                "source": "        var state = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 50
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 33, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1824, 
                        1824
                    ]
                }, 
                "source": "            canonicalAlias: null // #canonical:domain.com", 
                "message": "Missing trailing comma.", 
                "line": 53
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1869, 
                        1872
                    ]
                }, 
                "source": "        var localDomain = MatrixClientPeg.get().getDomain();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 55
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2329, 
                        2332
                    ]
                }, 
                "source": "        var promises = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 71
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2404, 
                        2407
                    ]
                }, 
                "source": "        var aliasOperations = this.getAliasOperations();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 74
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < aliasOperations.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 75
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2524, 
                        2527
                    ]
                }, 
                "source": "            var alias_operation = aliasOperations[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 76
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var alias_operation = aliasOperations[i];", 
                "message": "Identifier 'alias_operation' is not in camel case.", 
                "line": 76
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 67, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2883, 
                        2883
                    ]
                }, 
                "source": "                            alias_operation.val, this.props.roomId", 
                "message": "Missing trailing comma.", 
                "line": 82
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2909, 
                        2909
                    ]
                }, 
                "source": "                        )", 
                "message": "Missing trailing comma.", 
                "line": 83
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3129, 
                        3129
                    ]
                }, 
                "source": "                            alias_operation.val", 
                "message": "Missing trailing comma.", 
                "line": 89
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3155, 
                        3155
                    ]
                }, 
                "source": "                        )", 
                "message": "Missing trailing comma.", 
                "line": 90
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    console.log(\"Unknown alias operation, ignoring: \" + alias_operation.place);", 
                "message": "Line 94 exceeds the maximum line length of 90.", 
                "line": 94
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3397, 
                        3400
                    ]
                }, 
                "source": "        var oldCanonicalAlias = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 100
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 57, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3920, 
                        3920
                    ]
                }, 
                "source": "                        alias: this.state.canonicalAlias", 
                "message": "Missing trailing comma.", 
                "line": 109
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3946, 
                        3946
                    ]
                }, 
                "source": "                    }, \"\"", 
                "message": "Missing trailing comma.", 
                "line": 110
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3964, 
                        3964
                    ]
                }, 
                "source": "                )", 
                "message": "Missing trailing comma.", 
                "line": 111
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4109, 
                        4112
                    ]
                }, 
                "source": "        var dict = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 119
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4539, 
                        4542
                    ]
                }, 
                "source": "        var oldAliases = this.aliasEventsToDictionary(this.props.aliasEvents);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 134
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4950, 
                        4953
                    ]
                }, 
                "source": "            var domain = alias.replace(/^.*?:/, '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 143
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 60, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5300, 
                        5300
                    ]
                }, 
                "source": "                domainToAliases: this.state.domainToAliases", 
                "message": "Missing trailing comma.", 
                "line": 148
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5417, 
                        5426
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 153
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5445, 
                        5448
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 155
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5851, 
                        5854
                    ]
                }, 
                "source": "        var oldAlias;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 165
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var oldAlias;", 
                "message": "'oldAlias' is assigned a value but never used.", 
                "line": 165
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        6043, 
                        6052
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 169
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6071, 
                        6074
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 171
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6785, 
                        6788
                    ]
                }, 
                "source": "        var alias = this.state.domainToAliases[domain].splice(index, 1);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 185
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var alias = this.state.domainToAliases[domain].splice(index, 1);", 
                "message": "'alias' is assigned a value but never used.", 
                "line": 185
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 56, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6929, 
                        6929
                    ]
                }, 
                "source": "            domainToAliases: this.state.domainToAliases", 
                "message": "Missing trailing comma.", 
                "line": 187
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7066, 
                        7066
                    ]
                }, 
                "source": "            canonicalAlias: event.target.value", 
                "message": "Missing trailing comma.", 
                "line": 193
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7120, 
                        7123
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 198
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7145, 
                        7148
                    ]
                }, 
                "source": "        var EditableText = sdk.getComponent(\"elements.EditableText\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 199
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7215, 
                        7218
                    ]
                }, 
                "source": "        var localDomain = MatrixClientPeg.get().getDomain();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 200
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7277, 
                        7280
                    ]
                }, 
                "source": "        var canonical_alias_section;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 202
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var canonical_alias_section;", 
                "message": "Identifier 'canonical_alias_section' is not in camel case.", 
                "line": 202
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            canonical_alias_section = (", 
                "message": "Identifier 'canonical_alias_section' is not in camel case.", 
                "line": 204
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <select onChange={this.onCanonicalAliasChange} defaultValue={ this.state.canonicalAlias }>", 
                "message": "Line 205 exceeds the maximum line length of 90.", 
                "line": 205
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            return self.state.domainToAliases[domain].map(function(alias, j) {", 
                "message": "Line 209 exceeds the maximum line length of 90.", 
                "line": 209
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        8163, 
                        8172
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 220
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            canonical_alias_section = (", 
                "message": "Identifier 'canonical_alias_section' is not in camel case.", 
                "line": 222
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8319, 
                        8322
                    ]
                }, 
                "source": "        var remote_aliases_section;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 227
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var remote_aliases_section;", 
                "message": "Identifier 'remote_aliases_section' is not in camel case.", 
                "line": 227
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            remote_aliases_section = (", 
                "message": "Identifier 'remote_aliases_section' is not in camel case.", 
                "line": 229
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            return this.state.domainToAliases[domain].map(function(alias, j) {", 
                "message": "Line 236 exceeds the maximum line length of 90.", 
                "line": 236
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    <div className=\"mx_RoomSettings_aliasesTableRow\" key={ i + \"_\" + j }>", 
                "message": "Line 238 exceeds the maximum line length of 90.", 
                "line": 238
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                             className=\"mx_RoomSettings_alias mx_RoomSettings_editable\"", 
                "message": "Line 240 exceeds the maximum line length of 90.", 
                "line": 240
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 58, 
                "source": "                    The main address for this room is: { canonical_alias_section }", 
                "message": "Identifier 'canonical_alias_section' is not in camel case.", 
                "line": 257
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 25, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10317, 
                        10320
                    ]
                }, 
                "source": "                        var deleteButton;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 267
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    alt=\"Delete\" onClick={ self.onAliasDeleted.bind(self, localDomain, i) } />", 
                "message": "Line 271 exceeds the maximum line length of 90.", 
                "line": 271
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 50, 
                "source": "                                    alt=\"Delete\" onClick={ self.onAliasDeleted.bind(self, localDomain, i) } />", 
                "message": "JSX props should not use .bind()", 
                "line": 271
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 60, 
                "source": "                                    alt=\"Delete\" onClick={ self.onAliasDeleted.bind(self, localDomain, i) } />", 
                "message": "JSX props should not use .bind()", 
                "line": 271
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    className=\"mx_RoomSettings_alias mx_RoomSettings_editable\"", 
                "message": "Line 277 exceeds the maximum line length of 90.", 
                "line": 277
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    placeholderClassName=\"mx_RoomSettings_aliasPlaceholder\"", 
                "message": "Line 278 exceeds the maximum line length of 90.", 
                "line": 278
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    placeholder={ \"New address (e.g. #foo:\" + localDomain + \")\" }", 
                "message": "Line 279 exceeds the maximum line length of 90.", 
                "line": 279
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    onValueChanged={ self.onAliasChanged.bind(self, localDomain, i) }", 
                "message": "Line 281 exceeds the maximum line length of 90.", 
                "line": 281
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 37, 
                "source": "                                    onValueChanged={ self.onAliasChanged.bind(self, localDomain, i) }", 
                "message": "JSX props should not use .bind()", 
                "line": 281
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 54, 
                "source": "                                    onValueChanged={ self.onAliasChanged.bind(self, localDomain, i) }", 
                "message": "JSX props should not use .bind()", 
                "line": 281
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                <div className=\"mx_RoomSettings_deleteAlias mx_filterFlipColor\">", 
                "message": "Line 284 exceeds the maximum line length of 90.", 
                "line": 284
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                placeholder={ \"New address (e.g. #foo:\" + localDomain + \")\" }", 
                "message": "Line 297 exceeds the maximum line length of 90.", 
                "line": 297
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                      onClick={ self.onAliasAdded.bind(self, undefined) }/>", 
                "message": "Line 302 exceeds the maximum line length of 90.", 
                "line": 302
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 39, 
                "source": "                                      onClick={ self.onAliasAdded.bind(self, undefined) }/>", 
                "message": "JSX props should not use .bind()", 
                "line": 302
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 49, 
                "source": "                                      onClick={ self.onAliasAdded.bind(self, undefined) }/>", 
                "message": "JSX props should not use .bind()", 
                "line": 302
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 19, 
                "source": "                { remote_aliases_section }", 
                "message": "Identifier 'remote_aliases_section' is not in camel case.", 
                "line": 308
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12808, 
                        12808
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 312
            }
        ], 
        "errorCount": 22, 
        "warningCount": 52, 
        "filePath": "src/components/views/room_settings/AliasSettings.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        561, 
                        564
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        651, 
                        654
                    ]
                }, 
                "source": "var Tinter = require('../../../Tinter');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        692, 
                        695
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        751, 
                        754
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        791, 
                        794
                    ]
                }, 
                "source": "var ROOM_COLORS = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1282, 
                        1282
                    ]
                }, 
                "source": "        room: React.PropTypes.object.isRequired", 
                "message": "Missing trailing comma.", 
                "line": 42
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1333, 
                        1336
                    ]
                }, 
                "source": "        var data = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 46
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 30, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1515, 
                        1515
                    ]
                }, 
                "source": "            hasChanged: false", 
                "message": "Missing trailing comma.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1535, 
                        1538
                    ]
                }, 
                "source": "        var event = this.props.room.getAccountData(\"org.matrix.room.color_scheme\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 52
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1676, 
                        1679
                    ]
                }, 
                "source": "        var scheme = event.getContent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 56
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 61, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2095, 
                        2095
                    ]
                }, 
                "source": "                scheme.primary_color, scheme.secondary_color", 
                "message": "Missing trailing comma.", 
                "line": 65
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2323, 
                        2326
                    ]
                }, 
                "source": "        var originalState = this.getInitialState();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 75
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 64, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3031, 
                        3031
                    ]
                }, 
                "source": "                    secondary_color: this.state.secondary_color", 
                "message": "Missing trailing comma.", 
                "line": 85
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3049, 
                        3049
                    ]
                }, 
                "source": "                }", 
                "message": "Missing trailing comma.", 
                "line": 86
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Line 89 exceeds the maximum line length of 90.", 
                "line": 89
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3171, 
                        3174
                    ]
                }, 
                "source": "                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 89
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        description: \"Saving room color settings is only available to registered users\"", 
                "message": "Line 92 exceeds the maximum line length of 90.", 
                "line": 92
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 104, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3464, 
                        3464
                    ]
                }, 
                "source": "                        description: \"Saving room color settings is only available to registered users\"", 
                "message": "Missing trailing comma.", 
                "line": 92
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < ROOM_COLORS.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 105
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3840, 
                        3843
                    ]
                }, 
                "source": "            var room_color = ROOM_COLORS[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 106
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var room_color = ROOM_COLORS[i];", 
                "message": "Identifier 'room_color' is not in camel case.", 
                "line": 106
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 29, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4469, 
                        4469
                    ]
                }, 
                "source": "            hasChanged: true", 
                "message": "Missing trailing comma.", 
                "line": 122
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 35, 
                "source": "                {ROOM_COLORS.map((room_color, i) => {", 
                "message": "Identifier 'room_color' is not in camel case.", 
                "line": 129
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4663, 
                        4666
                    ]
                }, 
                "source": "                    var selected;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 130
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5039, 
                        5042
                    ]
                }, 
                "source": "                    var boundClick = this._onColorSchemeChanged.bind(this, i);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 138
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 38, 
                "source": "                    var boundClick = this._onColorSchemeChanged.bind(this, i);", 
                "message": "JSX props should not use .bind()", 
                "line": 138
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <div className=\"mx_RoomSettings_roomColorPrimary\" style={{ backgroundColor: room_color[0] }}></div>", 
                "message": "Line 145 exceeds the maximum line length of 90.", 
                "line": 145
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5655, 
                        5655
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 151
            }
        ], 
        "errorCount": 9, 
        "warningCount": 21, 
        "filePath": "src/components/views/room_settings/ColorSettings.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var q = require(\"q\");", 
                "message": "'q' is assigned a value but never used.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        584, 
                        587
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        673, 
                        676
                    ]
                }, 
                "source": "var sdk = require(\"../../../index\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var sdk = require(\"../../../index\");", 
                "message": "'sdk' is assigned a value but never used.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        710, 
                        713
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "'Modal' is assigned a value but never used.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        749, 
                        752
                    ]
                }, 
                "source": "var UserSettingsStore = require('../../../UserSettingsStore');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        996, 
                        999
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "'cli' is assigned a value but never used.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1037, 
                        1040
                    ]
                }, 
                "source": "        var roomState = this.props.room.currentState;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var roomState = this.props.room.currentState;", 
                "message": "'roomState' is assigned a value but never used.", 
                "line": 34
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var roomPreviewUrls = this.props.room.currentState.getStateEvents('org.matrix.room.preview_urls', '');", 
                "message": "Line 36 exceeds the maximum line length of 90.", 
                "line": 36
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1092, 
                        1095
                    ]
                }, 
                "source": "        var roomPreviewUrls = this.props.room.currentState.getStateEvents('org.matrix.room.preview_urls', '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var userPreviewUrls = this.props.room.getAccountData(\"org.matrix.room.preview_urls\");", 
                "message": "Line 37 exceeds the maximum line length of 90.", 
                "line": 37
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1203, 
                        1206
                    ]
                }, 
                "source": "        var userPreviewUrls = this.props.room.getAccountData(\"org.matrix.room.preview_urls\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            globalDisableUrlPreview: (roomPreviewUrls && roomPreviewUrls.getContent().disable) || false,", 
                "message": "Line 40 exceeds the maximum line length of 90.", 
                "line": 40
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            userDisableUrlPreview: (userPreviewUrls && (userPreviewUrls.getContent().disable === true)) || false,", 
                "message": "Line 41 exceeds the maximum line length of 90.", 
                "line": 41
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            userEnableUrlPreview: (userPreviewUrls && (userPreviewUrls.getContent().disable === false)) || false,", 
                "message": "Line 42 exceeds the maximum line length of 90.", 
                "line": 42
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1802, 
                        1805
                    ]
                }, 
                "source": "        var promises = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 51
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.state.globalDisableUrlPreview !== this.originalState.globalDisableUrlPreview) {", 
                "message": "Line 53 exceeds the maximum line length of 90.", 
                "line": 53
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 68, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2234, 
                        2234
                    ]
                }, 
                "source": "                        disable: this.state.globalDisableUrlPreview", 
                "message": "Missing trailing comma.", 
                "line": 58
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2260, 
                        2260
                    ]
                }, 
                "source": "                    }, \"\"", 
                "message": "Missing trailing comma.", 
                "line": 59
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2278, 
                        2278
                    ]
                }, 
                "source": "                )", 
                "message": "Missing trailing comma.", 
                "line": 60
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2313, 
                        2316
                    ]
                }, 
                "source": "        var content = undefined;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 64
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.state.userDisableUrlPreview !== this.originalState.userDisableUrlPreview) {", 
                "message": "Line 65 exceeds the maximum line length of 90.", 
                "line": 65
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 60, 
                "fix": {
                    "text": "", 
                    "range": [
                        2584, 
                        2585
                    ]
                }, 
                "source": "            content = this.state.userDisableUrlPreview ? { disable : true } : {};", 
                "message": "Extra space after key 'disable'.", 
                "line": 67
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 63, 
                "fix": {
                    "text": "", 
                    "range": [
                        2918, 
                        2919
                    ]
                }, 
                "source": "                content = this.state.userEnableUrlPreview ? { disable : false } : {};", 
                "message": "Extra space after key 'disable'.", 
                "line": 73
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 84, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3151, 
                        3151
                    ]
                }, 
                "source": "                    this.props.room.roomId, \"org.matrix.room.preview_urls\", content", 
                "message": "Missing trailing comma.", 
                "line": 80
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3169, 
                        3169
                    ]
                }, 
                "source": "                )", 
                "message": "Missing trailing comma.", 
                "line": 81
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            globalDisableUrlPreview: this.refs.globalDisableUrlPreview.checked ? true : false,", 
                "message": "Line 92 exceeds the maximum line length of 90.", 
                "line": 92
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3984, 
                        3987
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 111
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var self = this;", 
                "message": "'self' is assigned a value but never used.", 
                "line": 111
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4009, 
                        4012
                    ]
                }, 
                "source": "        var roomState = this.props.room.currentState;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 112
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4063, 
                        4066
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 113
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var maySetRoomPreviewUrls = roomState.mayClientSendStateEvent('org.matrix.room.preview_urls', cli);", 
                "message": "Line 115 exceeds the maximum line length of 90.", 
                "line": 115
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4105, 
                        4108
                    ]
                }, 
                "source": "        var maySetRoomPreviewUrls = roomState.mayClientSendStateEvent('org.matrix.room.preview_urls', cli);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 115
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4213, 
                        4216
                    ]
                }, 
                "source": "        var disableRoomPreviewUrls;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 116
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4683, 
                        4692
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 125
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    URL previews are { this.state.globalDisableUrlPreview ? \"disabled\" : \"enabled\" } by default for participants in this room.", 
                "message": "Line 129 exceeds the maximum line length of 90.", 
                "line": 129
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    You have <a href=\"#/settings\">{ UserSettingsStore.getUrlPreviewsDisabled() ? 'disabled' : 'enabled' }</a> URL previews by default.", 
                "message": "Line 138 exceeds the maximum line length of 90.", 
                "line": 138
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 5, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        6006, 
                        6008
                    ]
                }, 
                "source": "    }", 
                "message": "Block must not be padded by blank lines.", 
                "line": 156
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6013, 
                        6013
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 156
            }
        ], 
        "errorCount": 12, 
        "warningCount": 32, 
        "filePath": "src/components/views/room_settings/UrlPreviewSettings.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 26, 
                "source": "import type {Completion, SelectionRange} from '../../../autocomplete/Autocompleter';", 
                "message": "'SelectionRange' is defined but never used.", 
                "line": 7
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 53, 
                "fix": {
                    "text": "(provider)", 
                    "range": [
                        1943, 
                        1951
                    ]
                }, 
                "source": "        const completionList = flatMap(completions, provider => provider.completions);", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 61
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 17, 
                "fix": {
                    "text": "(completion)", 
                    "range": [
                        2539, 
                        2549
                    ]
                }, 
                "source": "                completion => completion.completion === currentSelection);", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 72
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const oldMatches = this.state.completions.map(completion => !!completion.command.command),", 
                "message": "Line 85 exceeds the maximum line length of 90.", 
                "line": 85
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        const oldMatches = this.state.completions.map(completion => !!completion.command.command),", 
                "message": "Split 'const' declarations into multiple statements.", 
                "line": 85
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 55, 
                "fix": {
                    "text": "(completion)", 
                    "range": [
                        3153, 
                        3163
                    ]
                }, 
                "source": "        const oldMatches = this.state.completions.map(completion => !!completion.command.command),", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 85
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 42, 
                "fix": {
                    "text": "(completion)", 
                    "range": [
                        3239, 
                        3249
                    ]
                }, 
                "source": "            newMatches = completions.map(completion => !!completion.command.command);", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 86
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return selectionOffset === COMPOSER_SELECTED ? null : this.state.completionList[selectionOffset - 1];", 
                "message": "Line 116 exceeds the maximum line length of 90.", 
                "line": 116
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return selectionOffset === COMPOSER_SELECTED ? null : this.state.completionList[selectionOffset - 1];", 
                "message": "Line 128 exceeds the maximum line length of 90.", 
                "line": 128
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.countCompletions() === 0 || this.state.selectionOffset === COMPOSER_SELECTED) {", 
                "message": "Line 161 exceeds the maximum line length of 90.", 
                "line": 161
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        6712, 
                        6715
                    ]
                }, 
                "source": "        let renderedCompletions = this.state.completions.map((completionResult, i) => {", 
                "message": "'renderedCompletions' is never reassigned. Use 'const' instead.", 
                "line": 192
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        6804, 
                        6807
                    ]
                }, 
                "source": "            let completions = completionResult.completions.map((completion, i) => {", 
                "message": "'completions' is never reassigned. Use 'const' instead.", 
                "line": 193
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 83, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        6875, 
                        6877
                    ]
                }, 
                "source": "            let completions = completionResult.completions.map((completion, i) => {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 193
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7063, 
                        7066
                    ]
                }, 
                "source": "                let componentPosition = position;", 
                "message": "'componentPosition' is never reassigned. Use 'const' instead.", 
                "line": 198
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7142, 
                        7145
                    ]
                }, 
                "source": "                let onMouseOver = () => this.setSelection(componentPosition);", 
                "message": "'onMouseOver' is never reassigned. Use 'const' instead.", 
                "line": 201
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7220, 
                        7223
                    ]
                }, 
                "source": "                let onClick = () => {", 
                "message": "'onClick' is never reassigned. Use 'const' instead.", 
                "line": 202
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <EmojiText element=\"div\" className=\"mx_Autocomplete_provider_name\">{completionResult.provider.getName()}</EmojiText>", 
                "message": "Line 219 exceeds the maximum line length of 90.", 
                "line": 219
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 19, 
                "fix": {
                    "text": "(completion)", 
                    "range": [
                        8046, 
                        8056
                    ]
                }, 
                "source": "        }).filter(completion => !!completion);", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 223
            }
        ], 
        "errorCount": 1, 
        "warningCount": 17, 
        "filePath": "src/components/views/rooms/Autocomplete.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        598, 
                        601
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        657, 
                        660
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        694, 
                        697
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        736, 
                        739
                    ]
                }, 
                "source": "var ObjectUtils = require('../../../ObjectUtils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2283, 
                        2286
                    ]
                }, 
                "source": "        var CallView = sdk.getComponent(\"voip.CallView\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 71
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2341, 
                        2344
                    ]
                }, 
                "source": "        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 72
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2410, 
                        2413
                    ]
                }, 
                "source": "        var fileDropTarget = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 74
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2933, 
                        2936
                    ]
                }, 
                "source": "        var conferenceCallNotification = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 88
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3038, 
                        3041
                    ]
                }, 
                "source": "            var supportedText, joinText;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 90
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 13, 
                "source": "            var supportedText, joinText;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 90
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        3187, 
                        3200
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 93
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Join as <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'voice');}}", 
                "message": "Line 96 exceeds the maximum line length of 90.", 
                "line": 96
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 32, 
                "source": "                    Join as <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'voice');}}", 
                "message": "JSX props should not use arrow functions", 
                "line": 96
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                               href=\"#\">voice</a> or <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'video'); }}", 
                "message": "Line 97 exceeds the maximum line length of 90.", 
                "line": 97
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 57, 
                "source": "                               href=\"#\">voice</a> or <a onClick={(event)=>{ this.onConferenceNotificationClick(event, 'video'); }}", 
                "message": "JSX props should not use arrow functions", 
                "line": 97
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 13, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        3554, 
                        3556
                    ]
                }, 
                "source": "            }", 
                "message": "Block must not be padded by blank lines.", 
                "line": 101
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3819, 
                        3822
                    ]
                }, 
                "source": "        var callView = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 109
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <div className=\"mx_RoomView_auxPanel\" style={{maxHeight: this.props.maxHeight}} >", 
                "message": "Line 118 exceeds the maximum line length of 90.", 
                "line": 118
            }
        ], 
        "errorCount": 2, 
        "warningCount": 17, 
        "filePath": "src/components/views/rooms/AuxPanel.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "'MatrixClientPeg' is assigned a value but never used.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        673, 
                        676
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        773, 
                        776
                    ]
                }, 
                "source": "var PRESENCE_CLASS = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        920, 
                        920
                    ]
                }, 
                "source": "    \"unavailable\": \"mx_EntityTile_unavailable\"", 
                "message": "Missing trailing comma.", 
                "line": 29
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2130, 
                        2130
                    ]
                }, 
                "source": "        suppressOnHover: React.PropTypes.bool", 
                "message": "Missing trailing comma.", 
                "line": 64
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2488, 
                        2488
                    ]
                }, 
                "source": "            suppressOnHover: false", 
                "message": "Missing trailing comma.", 
                "line": 75
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2583, 
                        2583
                    ]
                }, 
                "source": "            hover: false", 
                "message": "Missing trailing comma.", 
                "line": 81
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 71, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3115, 
                        3115
                    ]
                }, 
                "source": "            this.props.presenceState, this.props.presenceLastActiveAgo", 
                "message": "Missing trailing comma.", 
                "line": 100
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3136, 
                        3139
                    ]
                }, 
                "source": "        var mainClassName = \"mx_EntityTile \";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 103
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        mainClassName += presenceClass + (this.props.className ? (\" \" + this.props.className) : \"\");", 
                "message": "Line 104 exceeds the maximum line length of 90.", 
                "line": 104
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3283, 
                        3286
                    ]
                }, 
                "source": "        var nameEl;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 105
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3472, 
                        3475
                    ]
                }, 
                "source": "            var activeAgo = this.props.presenceLastActiveAgo ?", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 110
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                (Date.now() - (this.props.presenceLastTs - this.props.presenceLastActiveAgo)) : -1;", 
                "message": "Line 111 exceeds the maximum line length of 90.", 
                "line": 111
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3689, 
                        3692
                    ]
                }, 
                "source": "            var PresenceLabel = sdk.getComponent(\"rooms.PresenceLabel\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 114
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img className=\"mx_EntityTile_chevron\" src=\"img/member_chevron.png\" width=\"8\" height=\"12\"/>", 
                "message": "Line 117 exceeds the maximum line length of 90.", 
                "line": 117
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <EmojiText element=\"div\" className=\"mx_EntityTile_name_hover\">{name}</EmojiText>", 
                "message": "Line 118 exceeds the maximum line length of 90.", 
                "line": 118
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4293, 
                        4302
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 124
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4457, 
                        4460
                    ]
                }, 
                "source": "        var inviteButton;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 131
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4729, 
                        4732
                    ]
                }, 
                "source": "        var power;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 140
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4748, 
                        4751
                    ]
                }, 
                "source": "        var powerLevel = this.props.powerLevel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 141
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            power = <img src=\"img/mod.svg\" className=\"mx_EntityTile_power\" width=\"16\" height=\"17\" alt=\"Mod\"/>;", 
                "message": "Line 143 exceeds the maximum line length of 90.", 
                "line": 143
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            power = <img src=\"img/admin.svg\" className=\"mx_EntityTile_power\" width=\"16\" height=\"17\" alt=\"Admin\"/>;", 
                "message": "Line 146 exceeds the maximum line length of 90.", 
                "line": 146
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5127, 
                        5130
                    ]
                }, 
                "source": "        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 150
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');", 
                "message": "'MemberAvatar' is assigned a value but never used.", 
                "line": 150
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5196, 
                        5199
                    ]
                }, 
                "source": "        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 151
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var av = this.props.avatarJsx || <BaseAvatar name={this.props.name} width={36} height={36} />;", 
                "message": "Line 153 exceeds the maximum line length of 90.", 
                "line": 153
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5262, 
                        5265
                    ]
                }, 
                "source": "        var av = this.props.avatarJsx || <BaseAvatar name={this.props.name} width={36} height={36} />;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 153
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5839, 
                        5839
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 167
            }
        ], 
        "errorCount": 8, 
        "warningCount": 22, 
        "filePath": "src/components/views/rooms/EntityTile.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var classNames = require(\"classnames\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        653, 
                        656
                    ]
                }, 
                "source": "var Modal = require('../../../Modal');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        693, 
                        696
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        730, 
                        733
                    ]
                }, 
                "source": "var TextForEvent = require('../../../TextForEvent');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        851, 
                        854
                    ]
                }, 
                "source": "var ContextualMenu = require('../../structures/ContextualMenu');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        916, 
                        919
                    ]
                }, 
                "source": "var dispatcher = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        966, 
                        969
                    ]
                }, 
                "source": "var ObjectUtils = require('../../../ObjectUtils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1018, 
                        1021
                    ]
                }, 
                "source": "var bounce = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 32
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var bounce = false;", 
                "message": "'bounce' is assigned a value but never used.", 
                "line": 32
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1171, 
                        1174
                    ]
                }, 
                "source": "var eventTileTypes = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 40
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        1260, 
                        1261
                    ]
                }, 
                "source": "    'm.room.member' : 'messages.TextualEvent',", 
                "message": "Extra space after key 'm.room.member'.", 
                "line": 42
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        1307, 
                        1308
                    ]
                }, 
                "source": "    'm.call.invite' : 'messages.TextualEvent',", 
                "message": "Extra space after key 'm.call.invite'.", 
                "line": 43
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        1354, 
                        1355
                    ]
                }, 
                "source": "    'm.call.answer' : 'messages.TextualEvent',", 
                "message": "Extra space after key 'm.call.answer'.", 
                "line": 44
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        1401, 
                        1402
                    ]
                }, 
                "source": "    'm.call.hangup' : 'messages.TextualEvent',", 
                "message": "Extra space after key 'm.call.hangup'.", 
                "line": 45
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        1446, 
                        1449
                    ]
                }, 
                "source": "    'm.room.name'   : 'messages.TextualEvent',", 
                "message": "Extra space after key 'm.room.name'.", 
                "line": 46
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        1494, 
                        1496
                    ]
                }, 
                "source": "    'm.room.topic'  : 'messages.TextualEvent',", 
                "message": "Extra space after key 'm.room.topic'.", 
                "line": 47
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        1554, 
                        1555
                    ]
                }, 
                "source": "    'm.room.third_party_invite' : 'messages.TextualEvent',", 
                "message": "Extra space after key 'm.room.third_party_invite'.", 
                "line": 48
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        1613, 
                        1614
                    ]
                }, 
                "source": "    'm.room.history_visibility' : 'messages.TextualEvent',", 
                "message": "Extra space after key 'm.room.history_visibility'.", 
                "line": 49
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        1664, 
                        1665
                    ]
                }, 
                "source": "    'm.room.encryption' : 'messages.TextualEvent',", 
                "message": "Extra space after key 'm.room.encryption'.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1696, 
                        1699
                    ]
                }, 
                "source": "var MAX_READ_AVATARS = 5;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 53
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 18, 
                "source": "module.exports = WithMatrixClient(React.createClass({", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 66
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6077, 
                        6080
                    ]
                }, 
                "source": "        var client = this.props.matrixClient;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 171
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6794, 
                        6797
                    ]
                }, 
                "source": "        var verified = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 192
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6997, 
                        6997
                    ]
                }, 
                "source": "            verified: verified", 
                "message": "Missing trailing comma.", 
                "line": 199
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7066, 
                        7069
                    ]
                }, 
                "source": "        var keysA = Object.keys(objA);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 204
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7105, 
                        7108
                    ]
                }, 
                "source": "        var keysB = Object.keys(objB);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 205
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < keysA.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 211
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7280, 
                        7283
                    ]
                }, 
                "source": "            var key = keysA[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 212
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7497, 
                        7500
                    ]
                }, 
                "source": "                var rA = objA[key];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 220
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7533, 
                        7536
                    ]
                }, 
                "source": "                var rB = objB[key];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 221
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 22, 
                "source": "                for (var j = 0; j < rA.length; j++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 233
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8247, 
                        8250
                    ]
                }, 
                "source": "        var actions = this.props.matrixClient.getPushActionsForEvent(this.props.mxEvent);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 248
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        8545, 
                        8554
                    ]
                }, 
                "source": "        {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 253
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8683, 
                        8686
                    ]
                }, 
                "source": "        var MessageContextMenu = sdk.getComponent('context_menus.MessageContextMenu');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 261
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8770, 
                        8773
                    ]
                }, 
                "source": "        var buttonRect = e.target.getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 262
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8914, 
                        8917
                    ]
                }, 
                "source": "        var x = buttonRect.right + window.pageXOffset;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 265
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8969, 
                        8972
                    ]
                }, 
                "source": "        var y = (buttonRect.top + (buttonRect.height / 2) + window.pageYOffset) - 19;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 266
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9055, 
                        9058
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 267
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            eventTileOps: this.refs.tile && this.refs.tile.getEventTileOps ? this.refs.tile.getEventTileOps() : undefined,", 
                "message": "Line 273 exceeds the maximum line length of 90.", 
                "line": 273
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9460, 
                        9460
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 276
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 55, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9635, 
                        9635
                    ]
                }, 
                "source": "            allReadAvatars: !this.state.allReadAvatars", 
                "message": "Missing trailing comma.", 
                "line": 283
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9697, 
                        9700
                    ]
                }, 
                "source": "        var ReadReceiptMarker = sdk.getComponent('rooms.ReadReceiptMarker');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 288
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9774, 
                        9777
                    ]
                }, 
                "source": "        var avatars = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 289
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9800, 
                        9803
                    ]
                }, 
                "source": "        var left = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 290
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10025, 
                        10028
                    ]
                }, 
                "source": "        let dayAfterEvent = new Date(this.props.mxEvent.getTs());", 
                "message": "'dayAfterEvent' is never reassigned. Use 'const' instead.", 
                "line": 295
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10260, 
                        10263
                    ]
                }, 
                "source": "        let dayAfterEventTime = dayAfterEvent.getTime();", 
                "message": "'dayAfterEventTime' is never reassigned. Use 'const' instead.", 
                "line": 300
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10318, 
                        10321
                    ]
                }, 
                "source": "        var receipts = this.props.readReceipts || [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 302
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < receipts.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 303
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10428, 
                        10431
                    ]
                }, 
                "source": "            var receipt = receipts[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 304
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10468, 
                        10471
                    ]
                }, 
                "source": "            var hidden = true;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 306
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10617, 
                        10620
                    ]
                }, 
                "source": "            var userId = receipt.roomMember.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 311
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var readReceiptInfo;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 312
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 19, 
                "fix": {
                    "text": ",", 
                    "range": [
                        11798, 
                        11798
                    ]
                }, 
                "source": "                />", 
                "message": "Missing trailing comma.", 
                "line": 333
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12053, 
                        12056
                    ]
                }, 
                "source": "        var remText;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 342
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12120, 
                        12123
                    ]
                }, 
                "source": "            var remainder = receipts.length - MAX_READ_AVATARS;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 344
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12658, 
                        12661
                    ]
                }, 
                "source": "        var mxEvent = this.props.mxEvent;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 361
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            displayname: (mxEvent.sender ? mxEvent.sender.name : mxEvent.getSender()).replace(' (IRC)', ''),", 
                "message": "Line 364 exceeds the maximum line length of 90.", 
                "line": 364
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12936, 
                        12939
                    ]
                }, 
                "source": "        var event = this.props.mxEvent;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 369
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13194, 
                        13197
                    ]
                }, 
                "source": "        var MessageTimestamp = sdk.getComponent('messages.MessageTimestamp');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 379
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13272, 
                        13275
                    ]
                }, 
                "source": "        var SenderProfile = sdk.getComponent('messages.SenderProfile');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 380
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13344, 
                        13347
                    ]
                }, 
                "source": "        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 381
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13534, 
                        13537
                    ]
                }, 
                "source": "        var content = this.props.mxEvent.getContent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 385
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13589, 
                        13592
                    ]
                }, 
                "source": "        var msgtype = content.msgtype;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 386
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13628, 
                        13631
                    ]
                }, 
                "source": "        var eventType = this.props.mxEvent.getType();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 387
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13799, 
                        13802
                    ]
                }, 
                "source": "        var isInfoMessage = (eventType !== 'm.room.message');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 391
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13862, 
                        13865
                    ]
                }, 
                "source": "        var EventTileType = sdk.getComponent(eventTileTypes[eventType]);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 393
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var e2eEnabled = this.props.matrixClient.isRoomEncrypted(this.props.mxEvent.getRoomId());", 
                "message": "Line 400 exceeds the maximum line length of 90.", 
                "line": 400
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14155, 
                        14158
                    ]
                }, 
                "source": "        var e2eEnabled = this.props.matrixClient.isRoomEncrypted(this.props.mxEvent.getRoomId());", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 400
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var isSending = (['sending', 'queued', 'encrypting'].indexOf(this.props.eventSendStatus) !== -1);", 
                "message": "Line 401 exceeds the maximum line length of 90.", 
                "line": 401
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14253, 
                        14256
                    ]
                }, 
                "source": "        var isSending = (['sending', 'queued', 'encrypting'].indexOf(this.props.eventSendStatus) !== -1);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 401
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14360, 
                        14363
                    ]
                }, 
                "source": "        var classes = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 403
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            mx_EventTile_highlight: this.props.tileShape == 'notif' ? false : this.shouldHighlight(),", 
                "message": "Line 409 exceeds the maximum line length of 90.", 
                "line": 409
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            mx_EventTile_continuation: this.props.tileShape ? '' : this.props.continuation,", 
                "message": "Line 411 exceeds the maximum line length of 90.", 
                "line": 411
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            mx_EventTile_bad: this.props.mxEvent.getContent().msgtype === 'm.bad.encrypted',", 
                "message": "Line 417 exceeds the maximum line length of 90.", 
                "line": 417
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var permalink = \"#/room/\" + this.props.mxEvent.getRoomId() +\"/\"+ this.props.mxEvent.getId();", 
                "message": "Line 419 exceeds the maximum line length of 90.", 
                "line": 419
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15311, 
                        15314
                    ]
                }, 
                "source": "        var permalink = \"#/room/\" + this.props.mxEvent.getRoomId() +\"/\"+ this.props.mxEvent.getId();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 419
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15413, 
                        15416
                    ]
                }, 
                "source": "        var readAvatars = this.getReadAvatars();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 421
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15463, 
                        15466
                    ]
                }, 
                "source": "        var avatar, sender;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 423
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var avatar, sender;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 423
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                sender = <SenderProfile onClick={ this.onSenderProfileClick } mxEvent={this.props.mxEvent} aux={aux} />;", 
                "message": "Line 461 exceeds the maximum line length of 90.", 
                "line": 461
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        17022, 
                        17035
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 462
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17148, 
                        17151
                    ]
                }, 
                "source": "        var editButton = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 468
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <span className=\"mx_EventTile_editButton\" title=\"Options\" onClick={this.onEditClicked} />", 
                "message": "Line 469 exceeds the maximum line length of 90.", 
                "line": 469
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17289, 
                        17292
                    ]
                }, 
                "source": "        var e2e;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 472
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if ((e2eEnabled && this.props.eventSendStatus) || this.props.mxEvent.getType() === 'm.room.encryption') {", 
                "message": "Line 474 exceeds the maximum line length of 90.", 
                "line": 474
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            e2e = <img style={{ cursor: 'initial', marginLeft: '-1px' }} className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\" />;", 
                "message": "Line 475 exceeds the maximum line length of 90.", 
                "line": 475
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 476
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        else if (this.props.mxEvent.isEncrypted() || (e2eEnabled && this.props.eventSendStatus)) {", 
                "message": "Line 478 exceeds the maximum line length of 90.", 
                "line": 478
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-blocked.svg\" width=\"12\" height=\"12\" style={{ marginLeft: \"-1px\" }} />;", 
                "message": "Line 480 exceeds the maximum line length of 90.", 
                "line": 480
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        18007, 
                        18020
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 481
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            else if (this.state.verified == true || (e2eEnabled && this.props.eventSendStatus)) {", 
                "message": "Line 482 exceeds the maximum line length of 90.", 
                "line": 482
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\"/>;", 
                "message": "Line 483 exceeds the maximum line length of 90.", 
                "line": 483
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        18265, 
                        18278
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 484
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-warning.svg\" width=\"15\" height=\"12\" style={{ marginLeft: \"-2px\" }}/>;", 
                "message": "Line 486 exceeds the maximum line length of 90.", 
                "line": 486
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        18484, 
                        18493
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 488
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            e2e = <img onClick={ this.onCryptoClicked } className=\"mx_EventTile_e2eIcon\" src=\"img/e2e-unencrypted.svg\" width=\"12\" height=\"12\"/>;", 
                "message": "Line 490 exceeds the maximum line length of 90.", 
                "line": 490
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18732, 
                        18735
                    ]
                }, 
                "source": "            var room = this.props.matrixClient.getRoom(this.props.mxEvent.getRoomId());", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 494
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        19923, 
                        19932
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 520
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        20955, 
                        20964
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 541
            }
        ], 
        "errorCount": 5, 
        "warningCount": 95, 
        "filePath": "src/components/views/rooms/EventTile.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        577, 
                        580
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        608, 
                        611
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        645, 
                        648
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        704, 
                        707
                    ]
                }, 
                "source": "var ImageUtils = require('../../../ImageUtils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        753, 
                        756
                    ]
                }, 
                "source": "var Modal = require('../../../Modal');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        793, 
                        796
                    ]
                }, 
                "source": "var linkify = require('linkifyjs');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        829, 
                        832
                    ]
                }, 
                "source": "var linkifyElement = require('linkifyjs/element');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        880, 
                        883
                    ]
                }, 
                "source": "var linkifyMatrix = require('../../../linkify-matrix');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1508, 
                        1508
                    ]
                }, 
                "source": "            preview: null", 
                "message": "Missing trailing comma.", 
                "line": 43
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        MatrixClientPeg.get().getUrlPreview(this.props.link, this.props.mxEvent.getTs()).then((res)=>{", 
                "message": "Line 49 exceeds the maximum line length of 90.", 
                "line": 49
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1872, 
                        1872
                    ]
                }, 
                "source": "                this.props.onWidgetLoad", 
                "message": "Missing trailing comma.", 
                "line": 55
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2476, 
                        2479
                    ]
                }, 
                "source": "        var p = this.state.preview;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 79
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2591, 
                        2594
                    ]
                }, 
                "source": "        var ImageView = sdk.getComponent(\"elements.ImageView\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 82
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2656, 
                        2659
                    ]
                }, 
                "source": "        var src = p[\"og:image\"];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 84
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2806, 
                        2809
                    ]
                }, 
                "source": "        var params = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 89
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3203, 
                        3206
                    ]
                }, 
                "source": "        var p = this.state.preview;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 102
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3393, 
                        3396
                    ]
                }, 
                "source": "        var image = p[\"og:image\"];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 106
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var imageMaxWidth = 100, imageMaxHeight = 100;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 107
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3428, 
                        3431
                    ]
                }, 
                "source": "        var imageMaxWidth = 100, imageMaxHeight = 100;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 107
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            image = MatrixClientPeg.get().mxcUrlToHttp(image, imageMaxWidth, imageMaxHeight);", 
                "message": "Line 109 exceeds the maximum line length of 90.", 
                "line": 109
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3639, 
                        3642
                    ]
                }, 
                "source": "        var thumbHeight = imageMaxHeight;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 112
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            thumbHeight = ImageUtils.thumbHeight(p[\"og:image:width\"], p[\"og:image:height\"], imageMaxWidth, imageMaxHeight);", 
                "message": "Line 114 exceeds the maximum line length of 90.", 
                "line": 114
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3875, 
                        3878
                    ]
                }, 
                "source": "        var img;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 117
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            img = <div className=\"mx_LinkPreviewWidget_image\" style={{ height: thumbHeight }}>", 
                "message": "Line 119 exceeds the maximum line length of 90.", 
                "line": 119
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img style={{ maxWidth: imageMaxWidth, maxHeight: imageMaxHeight }} src={ image } onClick={ this.onImageClick }/>", 
                "message": "Line 120 exceeds the maximum line length of 90.", 
                "line": 120
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_LinkPreviewWidget_title\"><a href={ this.props.link } target=\"_blank\" rel=\"noopener\">{ p[\"og:title\"] }</a></div>", 
                "message": "Line 128 exceeds the maximum line length of 90.", 
                "line": 128
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_LinkPreviewWidget_siteName\">{ p[\"og:site_name\"] ? (\" - \" + p[\"og:site_name\"]) : null }</div>", 
                "message": "Line 129 exceeds the maximum line length of 90.", 
                "line": 129
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <img className=\"mx_LinkPreviewWidget_cancel\" src=\"img/cancel.svg\" width=\"18\" height=\"18\"", 
                "message": "Line 134 exceeds the maximum line length of 90.", 
                "line": 134
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4997, 
                        4997
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 138
            }
        ], 
        "errorCount": 3, 
        "warningCount": 26, 
        "filePath": "src/components/views/rooms/LinkPreviewWidget.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        711, 
                        714
                    ]
                }, 
                "source": "        var indicator = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        741, 
                        744
                    ]
                }, 
                "source": "        var DeviceVerifyButtons = sdk.getComponent('elements.DeviceVerifyButtons');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img src=\"img/e2e-blocked.svg\" width=\"12\" height=\"12\" style={{ marginLeft: \"-1px\" }} alt=\"Blacklisted\"/>", 
                "message": "Line 28 exceeds the maximum line length of 90.", 
                "line": 28
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\" alt=\"Verified\"/>", 
                "message": "Line 34 exceeds the maximum line length of 90.", 
                "line": 34
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img src=\"img/e2e-warning.svg\" width=\"15\" height=\"12\" style={{ marginLeft: \"-2px\" }} alt=\"Unverified\"/>", 
                "message": "Line 40 exceeds the maximum line length of 90.", 
                "line": 40
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1703, 
                        1706
                    ]
                }, 
                "source": "        var deviceName = this.props.device.ambiguous ?", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 45
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            (this.props.device.getDisplayName() ? this.props.device.getDisplayName() : \"\") + \" (\" + this.props.device.deviceId + \")\" :", 
                "message": "Line 46 exceeds the maximum line length of 90.", 
                "line": 46
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <DeviceVerifyButtons userId={this.props.userId} device={this.props.device} />", 
                "message": "Line 59 exceeds the maximum line length of 90.", 
                "line": 59
            }
        ], 
        "errorCount": 0, 
        "warningCount": 8, 
        "filePath": "src/components/views/rooms/MemberDeviceInfo.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        740, 
                        743
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        770, 
                        773
                    ]
                }, 
                "source": "var classNames = require('classnames');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        810, 
                        813
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        852, 
                        855
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        891, 
                        894
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 32
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        928, 
                        931
                    ]
                }, 
                "source": "var createRoom = require('../../../createRoom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        977, 
                        980
                    ]
                }, 
                "source": "var DMRoomMap = require('../../../utils/DMRoomMap');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1030, 
                        1033
                    ]
                }, 
                "source": "var Unread = require('../../../Unread');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 35
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1071, 
                        1074
                    ]
                }, 
                "source": "var Receipt = require('../../../utils/Receipt');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1120, 
                        1123
                    ]
                }, 
                "source": "var WithMatrixClient = require('../../../wrappers/WithMatrixClient');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 18, 
                "source": "module.exports = WithMatrixClient(React.createClass({", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 40
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1601, 
                        1601
                    ]
                }, 
                "source": "            onFinished: function() {}", 
                "message": "Missing trailing comma.", 
                "line": 51
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1811, 
                        1811
                    ]
                }, 
                "source": "                modifyLevel: false", 
                "message": "Missing trailing comma.", 
                "line": 61
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3093, 
                        3096
                    ]
                }, 
                "source": "        var client = this.props.matrixClient;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 100
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            client.removeListener(\"deviceVerificationChanged\", this.onDeviceVerificationChanged);", 
                "message": "Line 102 exceeds the maximum line length of 90.", 
                "line": 102
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3968, 
                        3971
                    ]
                }, 
                "source": "        var names = Object.create(null);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 118
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < devices.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 119
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var name = devices[i].getDisplayName();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 120
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4116, 
                        4119
                    ]
                }, 
                "source": "            var indexList = names[name] || [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 121
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4738, 
                        4741
                    ]
                }, 
                "source": "            var devices = this.props.matrixClient.getStoredDevicesForUser(userId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 142
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (Receipt.findReadReceiptFromUserId(receiptEvent, this.props.matrixClient.credentials.userId)) {", 
                "message": "Line 167 exceeds the maximum line length of 90.", 
                "line": 167
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5909, 
                        5912
                    ]
                }, 
                "source": "        var newState = this._calculateOpsPermissions(member);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 187
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6369, 
                        6372
                    ]
                }, 
                "source": "        var cancelled = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 205
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6468, 
                        6471
                    ]
                }, 
                "source": "        var client = this.props.matrixClient;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 208
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6514, 
                        6517
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 209
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6824, 
                        6827
                    ]
                }, 
                "source": "            var devices = client.getStoredDevicesForUser(member.userId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 217
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7194, 
                        7197
                    ]
                }, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 227
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7261, 
                        7264
                    ]
                }, 
                "source": "        var roomId = this.props.member.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 228
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7308, 
                        7311
                    ]
                }, 
                "source": "        var target = this.props.member.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 229
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 45, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7837, 
                        7837
                    ]
                }, 
                "source": "                    description: err.message", 
                "message": "Missing trailing comma.", 
                "line": 238
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7871, 
                        7871
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 240
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8047, 
                        8050
                    ]
                }, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 248
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8114, 
                        8117
                    ]
                }, 
                "source": "        var roomId = this.props.member.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 249
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8161, 
                        8164
                    ]
                }, 
                "source": "        var target = this.props.member.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 250
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 45, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8700, 
                        8700
                    ]
                }, 
                "source": "                    description: err.message", 
                "message": "Missing trailing comma.", 
                "line": 260
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8734, 
                        8734
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 262
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8917, 
                        8920
                    ]
                }, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 270
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8984, 
                        8987
                    ]
                }, 
                "source": "        var roomId = this.props.member.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 271
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9031, 
                        9034
                    ]
                }, 
                "source": "        var target = this.props.member.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 272
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9078, 
                        9081
                    ]
                }, 
                "source": "        var room = this.props.matrixClient.getRoom(roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 273
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9226, 
                        9229
                    ]
                }, 
                "source": "        var powerLevelEvent = room.currentState.getStateEvents(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 278
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9319, 
                        9319
                    ]
                }, 
                "source": "            \"m.room.power_levels\", \"\"", 
                "message": "Missing trailing comma.", 
                "line": 279
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9438, 
                        9441
                    ]
                }, 
                "source": "        var isMuted = this.state.muted;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 285
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9478, 
                        9481
                    ]
                }, 
                "source": "        var powerLevels = powerLevelEvent.getContent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 286
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9534, 
                        9537
                    ]
                }, 
                "source": "        var levelToSend = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 287
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9694, 
                        9697
                    ]
                }, 
                "source": "        var level;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 291
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        9780, 
                        9789
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 294
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "use-isnan", 
                "column": 13, 
                "source": "        if (level !== NaN) {", 
                "message": "Use the isNaN function to compare with NaN.", 
                "line": 300
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            this.props.matrixClient.setPowerLevel(roomId, target, level, powerLevelEvent).then(", 
                "message": "Line 302 exceeds the maximum line length of 90.", 
                "line": 302
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10497, 
                        10497
                    ]
                }, 
                "source": "                        description: err.message", 
                "message": "Missing trailing comma.", 
                "line": 310
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10539, 
                        10539
                    ]
                }, 
                "source": "                }", 
                "message": "Missing trailing comma.", 
                "line": 312
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10743, 
                        10746
                    ]
                }, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 321
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10810, 
                        10813
                    ]
                }, 
                "source": "        var roomId = this.props.member.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 322
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10857, 
                        10860
                    ]
                }, 
                "source": "        var target = this.props.member.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 323
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10904, 
                        10907
                    ]
                }, 
                "source": "        var room = this.props.matrixClient.getRoom(roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 324
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11052, 
                        11055
                    ]
                }, 
                "source": "        var powerLevelEvent = room.currentState.getStateEvents(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 329
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        11145, 
                        11145
                    ]
                }, 
                "source": "            \"m.room.power_levels\", \"\"", 
                "message": "Missing trailing comma.", 
                "line": 330
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11264, 
                        11267
                    ]
                }, 
                "source": "        var me = room.getMember(this.props.matrixClient.credentials.userId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 336
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11427, 
                        11430
                    ]
                }, 
                "source": "        var defaultLevel = powerLevelEvent.getContent().users_default;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 341
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11498, 
                        11501
                    ]
                }, 
                "source": "        var modLevel = me.powerLevel - 1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 342
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11678, 
                        11681
                    ]
                }, 
                "source": "        var newLevel = this.state.isTargetMod ? defaultLevel : modLevel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 345
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        this.props.matrixClient.setPowerLevel(roomId, target, parseInt(newLevel), powerLevelEvent).then(", 
                "message": "Line 347 exceeds the maximum line length of 90.", 
                "line": 347
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Line 354 exceeds the maximum line length of 90.", 
                "line": 354
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12248, 
                        12251
                    ]
                }, 
                "source": "                    var NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 354
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        description: \"This action cannot be performed by a guest user. Please register to be able to do this.\"", 
                "message": "Line 357 exceeds the maximum line length of 90.", 
                "line": 357
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 127, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12564, 
                        12564
                    ]
                }, 
                "source": "                        description: \"This action cannot be performed by a guest user. Please register to be able to do this.\"", 
                "message": "Missing trailing comma.", 
                "line": 357
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12773, 
                        12773
                    ]
                }, 
                "source": "                        description: err.message", 
                "message": "Missing trailing comma.", 
                "line": 362
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12829, 
                        12829
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 365
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        this.props.matrixClient.setPowerLevel(roomId, target, parseInt(powerLevel), powerLevelEvent).then(", 
                "message": "Line 374 exceeds the maximum line length of 90.", 
                "line": 374
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 45, 
                "fix": {
                    "text": ",", 
                    "range": [
                        13707, 
                        13707
                    ]
                }, 
                "source": "                    description: err.message", 
                "message": "Missing trailing comma.", 
                "line": 383
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        13741, 
                        13741
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 385
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13942, 
                        13945
                    ]
                }, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 393
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "'ErrorDialog' is assigned a value but never used.", 
                "line": 393
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14009, 
                        14012
                    ]
                }, 
                "source": "        var roomId = this.props.member.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 394
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14056, 
                        14059
                    ]
                }, 
                "source": "        var target = this.props.member.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 395
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14103, 
                        14106
                    ]
                }, 
                "source": "        var room = this.props.matrixClient.getRoom(roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 396
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14163, 
                        14166
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 397
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14276, 
                        14279
                    ]
                }, 
                "source": "        var powerLevelEvent = room.currentState.getStateEvents(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 402
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        14369, 
                        14369
                    ]
                }, 
                "source": "            \"m.room.power_levels\", \"\"", 
                "message": "Missing trailing comma.", 
                "line": 403
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var myPower = powerLevelEvent.getContent().users[this.props.matrixClient.credentials.userId];", 
                "message": "Line 410 exceeds the maximum line length of 90.", 
                "line": 410
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14542, 
                        14545
                    ]
                }, 
                "source": "            var myPower = powerLevelEvent.getContent().users[this.props.matrixClient.credentials.userId];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 410
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14714, 
                        14717
                    ]
                }, 
                "source": "                var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 412
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            You will not be able to undo this change as you are promoting the user to have the same power level as yourself.<br/>", 
                "message": "Line 417 exceeds the maximum line length of 90.", 
                "line": 417
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            self._applyPowerChange(roomId, target, powerLevel, powerLevelEvent);", 
                "message": "Line 423 exceeds the maximum line length of 90.", 
                "line": 423
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 25, 
                "fix": {
                    "text": "                        ", 
                    "range": [
                        15410, 
                        15435
                    ]
                }, 
                "source": "                        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 424
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        15577, 
                        15590
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 430
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        15705, 
                        15714
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 434
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16361, 
                        16364
                    ]
                }, 
                "source": "        var defaultPerms = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 457
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        16459, 
                        16459
                    ]
                }, 
                "source": "            modifyLevel: false", 
                "message": "Missing trailing comma.", 
                "line": 460
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16479, 
                        16482
                    ]
                }, 
                "source": "        var room = this.props.matrixClient.getRoom(member.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 462
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16610, 
                        16613
                    ]
                }, 
                "source": "        var powerLevels = room.currentState.getStateEvents(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 466
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        16699, 
                        16699
                    ]
                }, 
                "source": "            \"m.room.power_levels\", \"\"", 
                "message": "Missing trailing comma.", 
                "line": 467
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16790, 
                        16793
                    ]
                }, 
                "source": "        var me = room.getMember(this.props.matrixClient.credentials.userId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 472
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16929, 
                        16932
                    ]
                }, 
                "source": "        var them = member;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 476
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 51, 
                "fix": {
                    "text": ",", 
                    "range": [
                        17063, 
                        17063
                    ]
                }, 
                "source": "                me, them, powerLevels.getContent()", 
                "message": "Missing trailing comma.", 
                "line": 479
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 82, 
                "fix": {
                    "text": ",", 
                    "range": [
                        17226, 
                        17226
                    ]
                }, 
                "source": "            isTargetMod: them.powerLevel > powerLevels.getContent().users_default", 
                "message": "Missing trailing comma.", 
                "line": 482
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17318, 
                        17321
                    ]
                }, 
                "source": "        var can = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 487
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        17434, 
                        17434
                    ]
                }, 
                "source": "            modifyLevel: false", 
                "message": "Missing trailing comma.", 
                "line": 491
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17454, 
                        17457
                    ]
                }, 
                "source": "        var canAffectUser = them.powerLevel < me.powerLevel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 493
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17670, 
                        17673
                    ]
                }, 
                "source": "        var editPowerLevel = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 498
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17837, 
                        17840
                    ]
                }, 
                "source": "        var levelToSend = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 502
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18467, 
                        18470
                    ]
                }, 
                "source": "        var levelToSend = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 519
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            (powerLevelContent.events ? powerLevelContent.events[\"m.room.message\"] : null) ||", 
                "message": "Line 520 exceeds the maximum line length of 90.", 
                "line": 520
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": ",", 
                    "range": [
                        18801, 
                        18801
                    ]
                }, 
                "source": "            member: null", 
                "message": "Missing trailing comma.", 
                "line": 529
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var avatarUrl = this.props.member.user ? this.props.member.user.avatarUrl : this.props.member.events.member.getContent().avatar_url;", 
                "message": "Line 534 exceeds the maximum line length of 90.", 
                "line": 534
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18868, 
                        18871
                    ]
                }, 
                "source": "        var avatarUrl = this.props.member.user ? this.props.member.user.avatarUrl : this.props.member.events.member.getContent().avatar_url;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 534
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19041, 
                        19044
                    ]
                }, 
                "source": "        var httpUrl = this.props.matrixClient.mxcUrlToHttp(avatarUrl);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 537
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19112, 
                        19115
                    ]
                }, 
                "source": "        var ImageView = sdk.getComponent(\"elements.ImageView\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 538
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19176, 
                        19179
                    ]
                }, 
                "source": "        var params = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 539
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        19257, 
                        19257
                    ]
                }, 
                "source": "            name: this.props.member.name", 
                "message": "Missing trailing comma.", 
                "line": 541
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19460, 
                        19463
                    ]
                }, 
                "source": "        var devices = this.state.devices;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 552
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19502, 
                        19505
                    ]
                }, 
                "source": "        var MemberDeviceInfo = sdk.getComponent('rooms.MemberDeviceInfo');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 553
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19577, 
                        19580
                    ]
                }, 
                "source": "        var Spinner = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 554
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19638, 
                        19641
                    ]
                }, 
                "source": "        var devComponents;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 556
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var i = 0; i < devices.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 566
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var startChat, kickButton, banButton, muteButton, giveModButton, spinner;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 584
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20541, 
                        20544
                    ]
                }, 
                "source": "        var startChat, kickButton, banButton, muteButton, giveModButton, spinner;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 584
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 27, 
                "fix": {
                    "text": ",", 
                    "range": [
                        21781, 
                        21781
                    ]
                }, 
                "source": "                        />", 
                "message": "Missing trailing comma.", 
                "line": 607
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22617, 
                        22620
                    ]
                }, 
                "source": "            var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 634
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var giveOpLabel = this.state.isTargetMod ? \"Revoke Moderator\" : \"Make Moderator\";", 
                "message": "Line 666 exceeds the maximum line length of 90.", 
                "line": 666
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        23811, 
                        23814
                    ]
                }, 
                "source": "            var giveOpLabel = this.state.isTargetMod ? \"Revoke Moderator\" : \"Make Moderator\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 666
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            giveModButton = <AccessibleButton className=\"mx_MemberInfo_field\" onClick={this.onModToggle}>", 
                "message": "Line 667 exceeds the maximum line length of 90.", 
                "line": 667
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24268, 
                        24271
                    ]
                }, 
                "source": "        var adminTools;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 675
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24775, 
                        24778
                    ]
                }, 
                "source": "        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 692
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24844, 
                        24847
                    ]
                }, 
                "source": "        var PowerSelector = sdk.getComponent('elements.PowerSelector');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 693
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <AccessibleButton className=\"mx_MemberInfo_cancel\" onClick={this.onCancel}> <img src=\"img/cancel.svg\" width=\"18\" height=\"18\"/></AccessibleButton>", 
                "message": "Line 697 exceeds the maximum line length of 90.", 
                "line": 697
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <MemberAvatar onClick={this.onMemberAvatarClick} member={this.props.member} width={48} height={48} />", 
                "message": "Line 699 exceeds the maximum line length of 90.", 
                "line": 699
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        Level: <b><PowerSelector controlled={true} value={ parseInt(this.props.member.powerLevel) } disabled={ !this.state.can.modifyLevel } onChange={ this.onPowerChange }/></b>", 
                "message": "Line 709 exceeds the maximum line length of 90.", 
                "line": 709
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        26145, 
                        26145
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 722
            }
        ], 
        "errorCount": 27, 
        "warningCount": 102, 
        "filePath": "src/components/views/rooms/MemberInfo.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        567, 
                        570
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        597, 
                        600
                    ]
                }, 
                "source": "var classNames = require('classnames');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var classNames = require('classnames');", 
                "message": "'classNames' is assigned a value but never used.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        637, 
                        640
                    ]
                }, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "'Matrix' is assigned a value but never used.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        676, 
                        679
                    ]
                }, 
                "source": "var q = require('q');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var q = require('q');", 
                "message": "'q' is assigned a value but never used.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        698, 
                        701
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        757, 
                        760
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "'Modal' is assigned a value but never used.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        796, 
                        799
                    ]
                }, 
                "source": "var Entities = require(\"../../../Entities\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Entities = require(\"../../../Entities\");", 
                "message": "'Entities' is assigned a value but never used.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        841, 
                        844
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        878, 
                        881
                    ]
                }, 
                "source": "var GeminiScrollbar = require('react-gemini-scrollbar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        935, 
                        938
                    ]
                }, 
                "source": "var rate_limited_func = require('../../../ratelimitedfunc');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 5, 
                "source": "var rate_limited_func = require('../../../ratelimitedfunc');", 
                "message": "Identifier 'rate_limited_func' is not in camel case.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        996, 
                        999
                    ]
                }, 
                "source": "var CallHandler = require(\"../../../CallHandler\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1047, 
                        1050
                    ]
                }, 
                "source": "var Invite = require(\"../../../Invite\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Invite = require(\"../../../Invite\");", 
                "message": "'Invite' is assigned a value but never used.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1089, 
                        1092
                    ]
                }, 
                "source": "var INITIAL_LOAD_NUM_MEMBERS = 30;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1124, 
                        1127
                    ]
                }, 
                "source": "var SHARE_HISTORY_WARNING =", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var SHARE_HISTORY_WARNING =", 
                "message": "'SHARE_HISTORY_WARNING' is assigned a value but never used.", 
                "line": 30
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        If you'd prefer invited users not to see messages that were sent before they joined, <br/>", 
                "message": "Line 33 exceeds the maximum line length of 90.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1544, 
                        1547
                    ]
                }, 
                "source": "        var state = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 41
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1850, 
                        1853
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1891, 
                        1894
                    ]
                }, 
                "source": "        var room = cli.getRoom(this.props.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2136, 
                        2139
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 60
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2783, 
                        2786
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 73
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4978, 
                        4981
                    ]
                }, 
                "source": "        var tile = this.refs[user.userId];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 120
            }, 
            {
                "nodeType": "NewExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 22, 
                "source": "    _updateList: new rate_limited_func(function() {", 
                "message": "A constructor name should not start with a lowercase letter.", 
                "line": 150
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this.memberDict = this.getMemberDict();", 
                "message": "Unexpected 'this'.", 
                "line": 152
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 27, 
                "source": "        this.memberDict = this.getMemberDict();", 
                "message": "Unexpected 'this'.", 
                "line": 152
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5956, 
                        5959
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 154
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 20, 
                "source": "        var self = this;", 
                "message": "Unexpected 'this'.", 
                "line": 154
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this.setState({", 
                "message": "Unexpected 'this'.", 
                "line": 155
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6036, 
                        6036
                    ]
                }, 
                "source": "            members: self.roomMembers()", 
                "message": "Missing trailing comma.", 
                "line": 156
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6146, 
                        6149
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 162
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6187, 
                        6190
                    ]
                }, 
                "source": "        var room = cli.getRoom(this.props.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 163
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6269, 
                        6272
                    ]
                }, 
                "source": "        var all_members = room.currentState.members;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 166
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var all_members = room.currentState.members;", 
                "message": "Identifier 'all_members' is not in camel case.", 
                "line": 166
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 16, 
                "source": "        return all_members;", 
                "message": "Identifier 'all_members' is not in camel case.", 
                "line": 180
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6971, 
                        6974
                    ]
                }, 
                "source": "        var all_members = this.memberDict || {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 184
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var all_members = this.memberDict || {};", 
                "message": "Identifier 'all_members' is not in camel case.", 
                "line": 184
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7020, 
                        7023
                    ]
                }, 
                "source": "        var all_user_ids = Object.keys(all_members);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 185
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var all_user_ids = Object.keys(all_members);", 
                "message": "Identifier 'all_user_ids' is not in camel case.", 
                "line": 185
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7073, 
                        7076
                    ]
                }, 
                "source": "        var ConferenceHandler = CallHandler.getConferenceHandler();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 186
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7187, 
                        7190
                    ]
                }, 
                "source": "        var to_display = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 190
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var to_display = [];", 
                "message": "Identifier 'to_display' is not in camel case.", 
                "line": 190
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7216, 
                        7219
                    ]
                }, 
                "source": "        var count = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 191
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var count = 0;", 
                "message": "'count' is assigned a value but never used.", 
                "line": 191
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < all_user_ids.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 192
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7299, 
                        7302
                    ]
                }, 
                "source": "            var user_id = all_user_ids[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 193
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var user_id = all_user_ids[i];", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 193
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7342, 
                        7345
                    ]
                }, 
                "source": "            var m = all_members[user_id];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 194
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if ((ConferenceHandler && !ConferenceHandler.isConferenceUser(user_id)) || !ConferenceHandler) {", 
                "message": "Line 197 exceeds the maximum line length of 90.", 
                "line": 197
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 16, 
                "source": "        return to_display;", 
                "message": "Identifier 'to_display' is not in camel case.", 
                "line": 203
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7871, 
                        7874
                    ]
                }, 
                "source": "        var EntityTile = sdk.getComponent(\"rooms.EntityTile\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 208
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7934, 
                        7937
                    ]
                }, 
                "source": "        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 209
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";", 
                "message": "Line 210 exceeds the maximum line length of 90.", 
                "line": 210
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7999, 
                        8002
                    ]
                }, 
                "source": "        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 210
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 27, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8491, 
                        8491
                    ]
                }, 
                "source": "            truncateAt: -1", 
                "message": "Missing trailing comma.", 
                "line": 221
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        8610, 
                        8619
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 228
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            return \"(\" + member.name + \", \" + member.powerLevel + \", \" + member.user.lastActiveAgo + \", \" + member.user.currentlyActive + \")\";", 
                "message": "Line 230 exceeds the maximum line length of 90.", 
                "line": 230
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9227, 
                        9230
                    ]
                }, 
                "source": "            var memberA = this.memberDict[userIdA];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 243
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9279, 
                        9282
                    ]
                }, 
                "source": "            var memberB = this.memberDict[userIdB];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 244
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9331, 
                        9334
                    ]
                }, 
                "source": "            var userA = memberA.user;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 245
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9369, 
                        9372
                    ]
                }, 
                "source": "            var userB = memberB.user;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 246
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        var nameA = memberA.name[0] === '@' ? memberA.name.substr(1) : memberA.name;", 
                "message": "Line 264 exceeds the maximum line length of 90.", 
                "line": 264
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 25, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10331, 
                        10334
                    ]
                }, 
                "source": "                        var nameA = memberA.name[0] === '@' ? memberA.name.substr(1) : memberA.name;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 264
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        var nameB = memberB.name[0] === '@' ? memberB.name.substr(1) : memberB.name;", 
                "message": "Line 265 exceeds the maximum line length of 90.", 
                "line": 265
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 25, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10432, 
                        10435
                    ]
                }, 
                "source": "                        var nameB = memberB.name[0] === '@' ? memberB.name.substr(1) : memberB.name;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 265
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 21, 
                "fix": {
                    "text": "                    ", 
                    "range": [
                        10589, 
                        10610
                    ]
                }, 
                "source": "                    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 267
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        10690, 
                        10707
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 271
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11492, 
                        11495
                    ]
                }, 
                "source": "        var MemberTile = sdk.getComponent(\"rooms.MemberTile\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 291
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11601, 
                        11604
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 294
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11627, 
                        11630
                    ]
                }, 
                "source": "        var memberList = self.state.members.filter(function(userId) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 296
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11701, 
                        11704
                    ]
                }, 
                "source": "            var m = self.memberDict[userId];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 297
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12131, 
                        12134
                    ]
                }, 
                "source": "            var m = self.memberDict[userId];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 310
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12716, 
                        12719
                    ]
                }, 
                "source": "            var room = MatrixClientPeg.get().getRoom(this.props.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 322
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12789, 
                        12792
                    ]
                }, 
                "source": "            var EntityTile = sdk.getComponent(\"rooms.EntityTile\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 323
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    var required_keys = ['key_validity_url', 'public_key', 'display_name'];", 
                "message": "Line 328 exceeds the maximum line length of 90.", 
                "line": 328
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13104, 
                        13107
                    ]
                }, 
                "source": "                    var required_keys = ['key_validity_url', 'public_key', 'display_name'];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 328
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 25, 
                "source": "                    var required_keys = ['key_validity_url', 'public_key', 'display_name'];", 
                "message": "Identifier 'required_keys' is not in camel case.", 
                "line": 328
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 26, 
                "source": "                    for (var i = 0; i < required_keys.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 329
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    var memberEvent = room.currentState.getInviteForThreePidToken(e.getStateKey());", 
                "message": "Line 335 exceeds the maximum line length of 90.", 
                "line": 335
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13503, 
                        13506
                    ]
                }, 
                "source": "                    var memberEvent = room.currentState.getInviteForThreePidToken(e.getStateKey());", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 335
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <EntityTile key={e.getStateKey()} name={e.getContent().display_name} />", 
                "message": "Line 340 exceeds the maximum line length of 90.", 
                "line": 340
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 96, 
                "fix": {
                    "text": ",", 
                    "range": [
                        13808, 
                        13808
                    ]
                }, 
                "source": "                        <EntityTile key={e.getStateKey()} name={e.getContent().display_name} />", 
                "message": "Missing trailing comma.", 
                "line": 340
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13945, 
                        13948
                    ]
                }, 
                "source": "        var invitedSection = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 350
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13980, 
                        13983
                    ]
                }, 
                "source": "        var invitedMemberTiles = this.makeMemberTiles('invite', this.state.searchQuery);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 351
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14419, 
                        14422
                    ]
                }, 
                "source": "        var inputBox = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 363
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <input className=\"mx_MemberList_query\" id=\"mx_MemberList_query\" type=\"text\"", 
                "message": "Line 365 exceeds the maximum line length of 90.", 
                "line": 365
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14751, 
                        14754
                    ]
                }, 
                "source": "        var TruncatedList = sdk.getComponent(\"elements.TruncatedList\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 371
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <GeminiScrollbar autoshow={true} className=\"mx_MemberList_joined mx_MemberList_outerWrapper\">", 
                "message": "Line 375 exceeds the maximum line length of 90.", 
                "line": 375
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <TruncatedList className=\"mx_MemberList_wrapper\" truncateAt={this.state.truncateAt}", 
                "message": "Line 376 exceeds the maximum line length of 90.", 
                "line": 376
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15420, 
                        15420
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 384
            }
        ], 
        "errorCount": 16, 
        "warningCount": 80, 
        "filePath": "src/components/views/rooms/MemberList.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "'MatrixClientPeg' is assigned a value but never used.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        673, 
                        676
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        710, 
                        713
                    ]
                }, 
                "source": "var dis = require('../../../dispatcher');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        752, 
                        755
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "'Modal' is assigned a value but never used.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1934, 
                        1937
                    ]
                }, 
                "source": "        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 70
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2003, 
                        2006
                    ]
                }, 
                "source": "        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 71
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');", 
                "message": "'BaseAvatar' is assigned a value but never used.", 
                "line": 71
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2068, 
                        2071
                    ]
                }, 
                "source": "        var EntityTile = sdk.getComponent('rooms.EntityTile');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 72
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2132, 
                        2135
                    ]
                }, 
                "source": "        var member = this.props.member;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 74
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2172, 
                        2175
                    ]
                }, 
                "source": "        var name = this._getDisplayName();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 75
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2215, 
                        2218
                    ]
                }, 
                "source": "        var active = -1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 76
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var active = -1;", 
                "message": "'active' is assigned a value but never used.", 
                "line": 76
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2240, 
                        2243
                    ]
                }, 
                "source": "        var presenceState = member.user ? member.user.presence : null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 77
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2312, 
                        2315
                    ]
                }, 
                "source": "        var av = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 79
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                presenceCurrentlyActive={ member.user ? member.user.currentlyActive : false }", 
                "message": "Line 92 exceeds the maximum line length of 90.", 
                "line": 92
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3109, 
                        3109
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 96
            }
        ], 
        "errorCount": 5, 
        "warningCount": 14, 
        "filePath": "src/components/views/rooms/MemberTile.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        567, 
                        570
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        598, 
                        601
                    ]
                }, 
                "source": "var CallHandler = require('../../../CallHandler');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        649, 
                        652
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        708, 
                        711
                    ]
                }, 
                "source": "var Modal = require('../../../Modal');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        747, 
                        750
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        784, 
                        787
                    ]
                }, 
                "source": "var dis = require('../../../dispatcher');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                isRichtextEnabled: UserSettingsStore.getSyncedSetting('MessageComposerInput.isRichTextEnabled', true),", 
                "message": "Line 53 exceeds the maximum line length of 90.", 
                "line": 53
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            showFormatting: UserSettingsStore.getSyncedSetting('MessageComposer.showFormatting', false),", 
                "message": "Line 56 exceeds the maximum line length of 90.", 
                "line": 56
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 5, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        2470, 
                        2472
                    ]
                }, 
                "source": "    }", 
                "message": "Block must not be padded by blank lines.", 
                "line": 59
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3304, 
                        3307
                    ]
                }, 
                "source": "            let NeedToRegisterDialog = sdk.getComponent(\"dialogs.NeedToRegisterDialog\");", 
                "message": "'NeedToRegisterDialog' is never reassigned. Use 'const' instead.", 
                "line": 83
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3701, 
                        3704
                    ]
                }, 
                "source": "        let files = ev.target.files;", 
                "message": "'files' is never reassigned. Use 'const' instead.", 
                "line": 95
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3739, 
                        3742
                    ]
                }, 
                "source": "        let QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "'QuestionDialog' is never reassigned. Use 'const' instead.", 
                "line": 97
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3812, 
                        3815
                    ]
                }, 
                "source": "        let TintableSvg = sdk.getComponent(\"elements.TintableSvg\");", 
                "message": "'TintableSvg' is never reassigned. Use 'const' instead.", 
                "line": 98
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3881, 
                        3884
                    ]
                }, 
                "source": "        let fileList = [];", 
                "message": "'fileList' is never reassigned. Use 'const' instead.", 
                "line": 100
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <TintableSvg key={i} src=\"img/files.svg\" width=\"16\" height=\"16\" /> {files[i].name}", 
                "message": "Line 103 exceeds the maximum line length of 90.", 
                "line": 103
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 29, 
                "source": "                        for(var i=0; i<files.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 121
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5022, 
                        5025
                    ]
                }, 
                "source": "        var call = CallHandler.getCallForRoom(this.props.room.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 133
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    onFormatButtonClicked(name: \"bold\" | \"italic\" | \"strike\" | \"code\" | \"underline\" | \"quote\" | \"bullet\" | \"numbullet\", event) {", 
                "message": "Line 194 exceeds the maximum line length of 90.", 
                "line": 194
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        UserSettingsStore.setSyncedSetting('MessageComposer.showFormatting', !this.state.showFormatting);", 
                "message": "Line 200 exceeds the maximum line length of 90.", 
                "line": 200
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        this.messageComposerInput.enableRichtext(!this.state.inputState.isRichtextEnabled);", 
                "message": "Line 206 exceeds the maximum line length of 90.", 
                "line": 206
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7289, 
                        7292
                    ]
                }, 
                "source": "        var me = this.props.room.getMember(MatrixClientPeg.get().credentials.userId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 210
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7375, 
                        7378
                    ]
                }, 
                "source": "        var uploadInputStyle = {display: 'none'};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 211
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7425, 
                        7428
                    ]
                }, 
                "source": "        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 212
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7494, 
                        7497
                    ]
                }, 
                "source": "        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 213
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7562, 
                        7565
                    ]
                }, 
                "source": "        var MessageComposerInput = sdk.getComponent(\"rooms.MessageComposerInput\" +", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 214
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7730, 
                        7733
                    ]
                }, 
                "source": "        var controls = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 217
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 19, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7937, 
                        7937
                    ]
                }, 
                "source": "            </div>", 
                "message": "Missing trailing comma.", 
                "line": 222
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        let e2eImg, e2eTitle, e2eClass;", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 225
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 15, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8650, 
                        8650
                    ]
                }, 
                "source": "            />", 
                "message": "Missing trailing comma.", 
                "line": 241
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8670, 
                        8673
                    ]
                }, 
                "source": "        var callButton, videoCallButton, hangupButton;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 243
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var callButton, videoCallButton, hangupButton;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 243
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <div key=\"controls_hangup\" className=\"mx_MessageComposer_hangup\" onClick={this.onHangupClick}>", 
                "message": "Line 246 exceeds the maximum line length of 90.", 
                "line": 246
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img src=\"img/hangup.svg\" alt=\"Hangup\" title=\"Hangup\" width=\"25\" height=\"26\"/>", 
                "message": "Line 247 exceeds the maximum line length of 90.", 
                "line": 247
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        9059, 
                        9068
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 249
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <div key=\"controls_call\" className=\"mx_MessageComposer_voicecall\" onClick={this.onVoiceCallClick} title=\"Voice call\">", 
                "message": "Line 252 exceeds the maximum line length of 90.", 
                "line": 252
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <div key=\"controls_videocall\" className=\"mx_MessageComposer_videocall\" onClick={this.onCallClick} title=\"Video call\">", 
                "message": "Line 256 exceeds the maximum line length of 90.", 
                "line": 256
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9631, 
                        9634
                    ]
                }, 
                "source": "        var canSendMessages = this.props.room.currentState.maySendMessage(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 261
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10006, 
                        10009
                    ]
                }, 
                "source": "            var uploadButton = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 268
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                       !UserSettingsStore.isFeatureEnabled('rich_text_editor') ? 'hidden' : 'visible'}}", 
                "message": "Line 285 exceeds the maximum line length of 90.", 
                "line": 285
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 26, 
                "fix": {
                    "text": "(c)", 
                    "range": [
                        11119, 
                        11120
                    ]
                }, 
                "source": "                    ref={c => this.messageComposerInput = c}", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 291
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 32, 
                "fix": {
                    "text": ",", 
                    "range": [
                        11836, 
                        11836
                    ]
                }, 
                "source": "                videoCallButton", 
                "message": "Missing trailing comma.", 
                "line": 305
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 23, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12073, 
                        12073
                    ]
                }, 
                "source": "                </div>", 
                "message": "Missing trailing comma.", 
                "line": 311
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        let autoComplete;", 
                "message": "'autoComplete' is assigned a value but never used.", 
                "line": 315
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const formatButtons = [\"bold\", \"italic\", \"strike\", \"underline\", \"code\", \"quote\", \"bullet\", \"numbullet\"].map(", 
                "message": "Line 328 exceeds the maximum line length of 90.", 
                "line": 328
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 13, 
                "fix": {
                    "text": "(name)", 
                    "range": [
                        12742, 
                        12746
                    ]
                }, 
                "source": "            name => {", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 329
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 47, 
                "source": "                const onFormatButtonClicked = this.onFormatButtonClicked.bind(this, name);", 
                "message": "JSX props should not use .bind()", 
                "line": 332
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                const disabled = !this.state.inputState.isRichtextEnabled && 'underline' === name;", 
                "message": "Line 333 exceeds the maximum line length of 90.", 
                "line": 333
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <div className=\"mx_MessageComposer mx_fadable\" style={{ opacity: this.props.opacity }}>", 
                "message": "Line 348 exceeds the maximum line length of 90.", 
                "line": 348
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <div className=\"mx_MessageComposer_formatbar\" style={this.state.showFormatting ? {} : {display: 'none'}}>", 
                "message": "Line 356 exceeds the maximum line length of 90.", 
                "line": 356
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <img title={`Turn Markdown ${this.state.inputState.isRichtextEnabled ? 'on' : 'off'}`}", 
                "message": "Line 359 exceeds the maximum line length of 90.", 
                "line": 359
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                className=\"mx_MessageComposer_formatbar_markdown mx_filterFlipColor\"", 
                "message": "Line 361 exceeds the maximum line length of 90.", 
                "line": 361
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                src={`img/button-md-${!this.state.inputState.isRichtextEnabled}.png`} />", 
                "message": "Line 362 exceeds the maximum line length of 90.", 
                "line": 362
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                 className=\"mx_MessageComposer_formatbar_cancel mx_filterFlipColor\"", 
                "message": "Line 365 exceeds the maximum line length of 90.", 
                "line": 365
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 36, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15745, 
                        15745
                    ]
                }, 
                "source": "    opacity: React.PropTypes.number", 
                "message": "Missing trailing comma.", 
                "line": 392
            }
        ], 
        "errorCount": 7, 
        "warningCount": 47, 
        "filePath": "src/components/views/rooms/MessageComposer.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 45, 
                "source": "    convertFromRaw, convertToRaw, Modifier, EditorChangeType,", 
                "message": "'EditorChangeType' is defined but never used.", 
                "line": 20
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    getDefaultKeyBinding, KeyBindingUtil, ContentState, ContentBlock, SelectionState} from 'draft-js';", 
                "message": "Line 21 exceeds the maximum line length of 90.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import KeyCode from '../../../KeyCode';", 
                "message": "'KeyCode' is defined but never used.", 
                "line": 35
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 1, 
                "source": "const TYPING_USER_TIMEOUT = 10000, TYPING_SERVER_TIMEOUT = 30000;", 
                "message": "Split 'const' declarations into multiple statements.", 
                "line": 44
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const isRichtextEnabled = UserSettingsStore.getSyncedSetting('MessageComposerInput.isRichTextEnabled', true);", 
                "message": "Line 95 exceeds the maximum line length of 90.", 
                "line": 95
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        let decorators = richText ? RichText.getScopedRTDecorators(this.props) :", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 121
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "source": "        let decorators = richText ? RichText.getScopedRTDecorators(this.props) :", 
                "message": "'decorators' is never reassigned. Use 'const' instead.", 
                "line": 121
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "source": "            compositeDecorator = new CompositeDecorator(decorators);", 
                "message": "'compositeDecorator' is never reassigned. Use 'const' instead.", 
                "line": 123
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5720, 
                        5723
                    ]
                }, 
                "source": "                var storedData = window.sessionStorage.getItem(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 153
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 59, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5826, 
                        5826
                    ]
                }, 
                "source": "                    \"mx_messagecomposer_history_\" + roomId", 
                "message": "Missing trailing comma.", 
                "line": 154
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6356, 
                        6356
                    ]
                }, 
                "source": "                    JSON.stringify(this.data)", 
                "message": "Missing trailing comma.", 
                "line": 169
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        6820, 
                        6837
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 181
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7263, 
                        7266
                    ]
                }, 
                "source": "                var newPosition = this.position + offset;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 193
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        7651, 
                        7668
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 201
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                let contentJSON = JSON.stringify(convertToRaw(component.state.editorState.getCurrentContent()));", 
                "message": "Line 214 exceeds the maximum line length of 90.", 
                "line": 214
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8166, 
                        8169
                    ]
                }, 
                "source": "                let contentJSON = JSON.stringify(convertToRaw(component.state.editorState.getCurrentContent()));", 
                "message": "'contentJSON' is never reassigned. Use 'const' instead.", 
                "line": 214
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                window.sessionStorage.setItem(\"mx_messagecomposer_input_\" + this.roomId, contentJSON);", 
                "message": "Line 215 exceeds the maximum line length of 90.", 
                "line": 215
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                let contentJSON = window.sessionStorage.getItem(\"mx_messagecomposer_input_\" + this.roomId);", 
                "message": "Line 219 exceeds the maximum line length of 90.", 
                "line": 219
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8441, 
                        8444
                    ]
                }, 
                "source": "                let contentJSON = window.sessionStorage.getItem(\"mx_messagecomposer_input_\" + this.roomId);", 
                "message": "'contentJSON' is never reassigned. Use 'const' instead.", 
                "line": 219
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 25, 
                "fix": {
                    "text": "const", 
                    "range": [
                        8588, 
                        8591
                    ]
                }, 
                "source": "                    let content = convertFromRaw(JSON.parse(contentJSON));", 
                "message": "'content' is never reassigned. Use 'const' instead.", 
                "line": 221
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    component.setEditorState(component.createEditorState(component.state.isRichtextEnabled, content));", 
                "message": "Line 222 exceeds the maximum line length of 90.", 
                "line": 222
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8992, 
                        8992
                    ]
                }, 
                "source": "            this.props.room.roomId", 
                "message": "Missing trailing comma.", 
                "line": 232
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9580, 
                        9583
                    ]
                }, 
                "source": "        let editor = this.refs.editor;", 
                "message": "'editor' is never reassigned. Use 'const' instead.", 
                "line": 251
            }, 
            {
                "nodeType": "TemplateLiteral", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10109, 
                        10109
                    ]
                }, 
                "source": "                    `${payload.displayname}: `", 
                "message": "Missing trailing comma.", 
                "line": 265
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                let editorState = EditorState.push(this.state.editorState, contentState, 'insert-characters');", 
                "message": "Line 267 exceeds the maximum line length of 90.", 
                "line": 267
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                editorState = EditorState.forceSelection(editorState, contentState.getSelectionAfter());", 
                "message": "Line 268 exceeds the maximum line length of 90.", 
                "line": 268
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 22, 
                "source": "                let {body, formatted_body} = payload.event.getContent();", 
                "message": "'body' is never reassigned. Use 'const' instead.", 
                "line": 275
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                formatted_body = formatted_body || escape(body);", 
                "message": "Identifier 'formatted_body' is not in camel case.", 
                "line": 276
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 34, 
                "source": "                formatted_body = formatted_body || escape(body);", 
                "message": "Identifier 'formatted_body' is not in camel case.", 
                "line": 276
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 21, 
                "source": "                if (formatted_body) {", 
                "message": "Identifier 'formatted_body' is not in camel case.", 
                "line": 277
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    let content = RichText.HTMLtoContentState(`<blockquote>${formatted_body}</blockquote>`);", 
                "message": "Line 278 exceeds the maximum line length of 90.", 
                "line": 278
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 44, 
                "source": "                    let content = RichText.HTMLtoContentState(`<blockquote>${formatted_body}</blockquote>`);", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 278
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 78, 
                "source": "                    let content = RichText.HTMLtoContentState(`<blockquote>${formatted_body}</blockquote>`);", 
                "message": "Identifier 'formatted_body' is not in camel case.", 
                "line": 278
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    let startSelection = SelectionState.createEmpty(contentState.getFirstBlock().getKey());", 
                "message": "Line 284 exceeds the maximum line length of 90.", 
                "line": 284
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    startSelection = SelectionState.createEmpty(contentState.getFirstBlock().getKey());", 
                "message": "Line 286 exceeds the maximum line length of 90.", 
                "line": 286
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    startSelection = SelectionState.createEmpty(contentState.getFirstBlock().getKey());", 
                "message": "Line 290 exceeds the maximum line length of 90.", 
                "line": 290
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        contentState = Modifier.setBlockType(contentState, startSelection, 'blockquote');", 
                "message": "Line 292 exceeds the maximum line length of 90.", 
                "line": 292
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    let editorState = EditorState.push(this.state.editorState, contentState, 'insert-characters');", 
                "message": "Line 294 exceeds the maximum line length of 90.", 
                "line": 294
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 25, 
                "fix": {
                    "text": "const", 
                    "range": [
                        11770, 
                        11773
                    ]
                }, 
                "source": "                    let editorState = EditorState.push(this.state.editorState, contentState, 'insert-characters');", 
                "message": "'editorState' is never reassigned. Use 'const' instead.", 
                "line": 294
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12493, 
                        12496
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 321
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12977, 
                        12980
                    ]
                }, 
                "source": "            var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 338
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        13603, 
                        13603
                    ]
                }, 
                "source": "            this.isTyping, TYPING_SERVER_TIMEOUT", 
                "message": "Missing trailing comma.", 
                "line": 358
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    onEditorContentChanged(editorState: EditorState, didRespondToUserInput: boolean = true) {", 
                "message": "Line 370 exceeds the maximum line length of 90.", 
                "line": 370
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            originalEditorState: didRespondToUserInput ? null : this.state.originalEditorState,", 
                "message": "Line 377 exceeds the maximum line length of 90.", 
                "line": 377
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            const selection = RichText.selectionStateToTextOffsets(editorState.getSelection(),", 
                "message": "Line 388 exceeds the maximum line length of 90.", 
                "line": 388
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            const md = new Markdown(this.state.editorState.getCurrentContent().getPlainText());", 
                "message": "Line 403 exceeds the maximum line length of 90.", 
                "line": 403
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 37, 
                "source": "            contentState = RichText.HTMLtoContentState(md.toHTML());", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 404
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            UserSettingsStore.setSyncedSetting('MessageComposerInput.isRichTextEnabled', enabled);", 
                "message": "Line 418 exceeds the maximum line length of 90.", 
                "line": 418
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            const blockCommands = ['code-block', 'blockquote', 'unordered-list-item', 'ordered-list-item'];", 
                "message": "Line 433 exceeds the maximum line length of 90.", 
                "line": 433
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                this.setEditorState(RichUtils.toggleBlockType(this.state.editorState, command));", 
                "message": "Line 436 exceeds the maximum line length of 90.", 
                "line": 436
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                this.setEditorState(RichUtils.toggleInlineStyle(this.state.editorState, 'STRIKETHROUGH'));", 
                "message": "Line 439 exceeds the maximum line length of 90.", 
                "line": 439
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 13, 
                "source": "            let contentState = this.state.editorState.getCurrentContent(),", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 442
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "source": "            let contentState = this.state.editorState.getCurrentContent(),", 
                "message": "'contentState' is never reassigned. Use 'const' instead.", 
                "line": 442
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "source": "                selection = this.state.editorState.getSelection();", 
                "message": "'selection' is never reassigned. Use 'const' instead.", 
                "line": 443
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        17125, 
                        17128
                    ]
                }, 
                "source": "            let modifyFn = {", 
                "message": "'modifyFn' is never reassigned. Use 'const' instead.", 
                "line": 445
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 25, 
                "fix": {
                    "text": "(text)", 
                    "range": [
                        17166, 
                        17170
                    ]
                }, 
                "source": "                'bold': text => `**${text}**`,", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 446
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 27, 
                "fix": {
                    "text": "(text)", 
                    "range": [
                        17215, 
                        17219
                    ]
                }, 
                "source": "                'italic': text => `*${text}*`,", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 447
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 30, 
                "fix": {
                    "text": "(text)", 
                    "range": [
                        17265, 
                        17269
                    ]
                }, 
                "source": "                'underline': text => `_${text}_`, // there's actually no valid underline in Markdown, but *shrug*", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 448
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 27, 
                "fix": {
                    "text": "(text)", 
                    "range": [
                        17376, 
                        17380
                    ]
                }, 
                "source": "                'strike': text => `~~${text}~~`,", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 449
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 25, 
                "fix": {
                    "text": "(text)", 
                    "range": [
                        17423, 
                        17427
                    ]
                }, 
                "source": "                'code': text => `\\`${text}\\``,", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 450
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                'blockquote': text => text.split('\\n').map(line => `> ${line}\\n`).join(''),", 
                "message": "Line 451 exceeds the maximum line length of 90.", 
                "line": 451
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 31, 
                "fix": {
                    "text": "(text)", 
                    "range": [
                        17476, 
                        17480
                    ]
                }, 
                "source": "                'blockquote': text => text.split('\\n').map(line => `> ${line}\\n`).join(''),", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 451
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 60, 
                "fix": {
                    "text": "(line)", 
                    "range": [
                        17505, 
                        17509
                    ]
                }, 
                "source": "                'blockquote': text => text.split('\\n').map(line => `> ${line}\\n`).join(''),", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 451
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                'unordered-list-item': text => text.split('\\n').map(line => `- ${line}\\n`).join(''),", 
                "message": "Line 452 exceeds the maximum line length of 90.", 
                "line": 452
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 40, 
                "fix": {
                    "text": "(text)", 
                    "range": [
                        17577, 
                        17581
                    ]
                }, 
                "source": "                'unordered-list-item': text => text.split('\\n').map(line => `- ${line}\\n`).join(''),", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 452
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 69, 
                "fix": {
                    "text": "(line)", 
                    "range": [
                        17606, 
                        17610
                    ]
                }, 
                "source": "                'unordered-list-item': text => text.split('\\n').map(line => `- ${line}\\n`).join(''),", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 452
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                'ordered-list-item': text => text.split('\\n').map((line, i) => `${i+1}. ${line}\\n`).join(''),", 
                "message": "Line 453 exceeds the maximum line length of 90.", 
                "line": 453
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 38, 
                "fix": {
                    "text": "(text)", 
                    "range": [
                        17676, 
                        17680
                    ]
                }, 
                "source": "                'ordered-list-item': text => text.split('\\n').map((line, i) => `${i+1}. ${line}\\n`).join(''),", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 453
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        18006, 
                        18006
                    ]
                }, 
                "source": "                    'insert-characters'", 
                "message": "Missing trailing comma.", 
                "line": 460
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            this.onEditorContentChanged(RichUtils.insertSoftNewline(this.state.editorState));", 
                "message": "Line 479 exceeds the maximum line length of 90.", 
                "line": 479
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        let contentText = contentState.getPlainText(), contentHTML;", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 489
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18724, 
                        18727
                    ]
                }, 
                "source": "        var cmd = SlashCommands.processInput(this.props.room.roomId, contentText);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 491
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        18937, 
                        18937
                    ]
                }, 
                "source": "                    editorState: this.createEditorState()", 
                "message": "Missing trailing comma.", 
                "line": 495
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19220, 
                        19223
                    ]
                }, 
                "source": "                    var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 503
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        19428, 
                        19428
                    ]
                }, 
                "source": "                        description: err.message", 
                "message": "Missing trailing comma.", 
                "line": 506
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        19486, 
                        19499
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 509
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19579, 
                        19582
                    ]
                }, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 512
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        19774, 
                        19774
                    ]
                }, 
                "source": "                    description: cmd.error", 
                "message": "Missing trailing comma.", 
                "line": 515
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        19999, 
                        19999
                    ]
                }, 
                "source": "                RichText.contentStateToHTML(contentState)", 
                "message": "Missing trailing comma.", 
                "line": 523
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 78, 
                "fix": {
                    "text": ",", 
                    "range": [
                        21042, 
                        21042
                    ]
                }, 
                "source": "                this.client, this.props.room.roomId, contentText, contentHTML", 
                "message": "Missing trailing comma.", 
                "line": 550
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            sendMessagePromise = sendTextFn.call(this.client, this.props.room.roomId, contentText);", 
                "message": "Line 553 exceeds the maximum line length of 90.", 
                "line": 553
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const activeEditorState = this.state.originalEditorState || this.state.editorState;", 
                "message": "Line 612 exceeds the maximum line length of 90.", 
                "line": 612
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        23336, 
                        23339
                    ]
                }, 
                "source": "        let contentState = Modifier.replaceText(", 
                "message": "'contentState' is never reassigned. Use 'const' instead.", 
                "line": 623
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            RichText.textOffsetsToSelectionState(range, activeEditorState.getCurrentContent().getBlocksAsArray()),", 
                "message": "Line 625 exceeds the maximum line length of 90.", 
                "line": 625
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 23, 
                "fix": {
                    "text": ",", 
                    "range": [
                        23565, 
                        23565
                    ]
                }, 
                "source": "            completion", 
                "message": "Missing trailing comma.", 
                "line": 626
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        let editorState = EditorState.push(activeEditorState, contentState, 'insert-characters');", 
                "message": "Line 629 exceeds the maximum line length of 90.", 
                "line": 629
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        editorState = EditorState.forceSelection(editorState, contentState.getSelectionAfter());", 
                "message": "Line 630 exceeds the maximum line length of 90.", 
                "line": 630
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    onFormatButtonClicked(name: \"bold\" | \"italic\" | \"strike\" | \"code\" | \"underline\" | \"quote\" | \"bullet\" | \"numbullet\", e) {", 
                "message": "Line 641 exceeds the maximum line length of 90.", 
                "line": 641
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 22, 
                "fix": {
                    "text": "(style)", 
                    "range": [
                        25007, 
                        25012
                    ]
                }, 
                "source": "                .map(style => styleName[style] || null)", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 664
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 25, 
                "fix": {
                    "text": "(styleName)", 
                    "range": [
                        25066, 
                        25075
                    ]
                }, 
                "source": "                .filter(styleName => !!styleName);", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 665
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const activeEditorState = this.state.originalEditorState || this.state.editorState;", 
                "message": "Line 690 exceeds the maximum line length of 90.", 
                "line": 690
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        const selection = RichText.selectionStateToTextOffsets(activeEditorState.getSelection(),", 
                "message": "Line 709 exceeds the maximum line length of 90.", 
                "line": 709
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img className=\"mx_MessageComposer_input_markdownIndicator mx_filterFlipColor\"", 
                "message": "Line 722 exceeds the maximum line length of 90.", 
                "line": 722
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                         title={`Markdown is ${this.state.isRichtextEnabled ? 'disabled' : 'enabled'}`}", 
                "message": "Line 724 exceeds the maximum line length of 90.", 
                "line": 724
            }
        ], 
        "errorCount": 14, 
        "warningCount": 80, 
        "filePath": "src/components/views/rooms/MessageComposerInput.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        574, 
                        577
                    ]
                }, 
                "source": "var React = require(\"react\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        605, 
                        608
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        664, 
                        667
                    ]
                }, 
                "source": "var SlashCommands = require(\"../../../SlashCommands\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        719, 
                        722
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        758, 
                        761
                    ]
                }, 
                "source": "var MemberEntry = require(\"../../../TabCompleteEntries\").MemberEntry;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var MemberEntry = require(\"../../../TabCompleteEntries\").MemberEntry;", 
                "message": "'MemberEntry' is assigned a value but never used.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        828, 
                        831
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        866, 
                        869
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        908, 
                        911
                    ]
                }, 
                "source": "var KeyCode = require(\"../../../KeyCode\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        951, 
                        954
                    ]
                }, 
                "source": "var Markdown = require(\"../../../Markdown\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        997, 
                        1000
                    ]
                }, 
                "source": "var TYPING_USER_TIMEOUT = 10000;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1030, 
                        1033
                    ]
                }, 
                "source": "var TYPING_SERVER_TIMEOUT = 30000;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1065, 
                        1068
                    ]
                }, 
                "source": "var MARKDOWN_ENABLED = true;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1757, 
                        1760
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 57
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2383, 
                        2386
                    ]
                }, 
                "source": "                var storedData = window.sessionStorage.getItem(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 74
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2470, 
                        2470
                    ]
                }, 
                "source": "                    \"history_\" + roomId", 
                "message": "Missing trailing comma.", 
                "line": 75
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2981, 
                        2981
                    ]
                }, 
                "source": "                    JSON.stringify(this.data)", 
                "message": "Missing trailing comma.", 
                "line": 90
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        3445, 
                        3462
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 102
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3888, 
                        3891
                    ]
                }, 
                "source": "                var newPosition = this.position + offset;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 114
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        4276, 
                        4293
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 122
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4827, 
                        4830
                    ]
                }, 
                "source": "                var text = this.element.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 136
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5010, 
                        5013
                    ]
                }, 
                "source": "                var text = window.sessionStorage.getItem(\"input_\" + this.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 141
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5222, 
                        5222
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 146
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5433, 
                        5433
                    ]
                }, 
                "source": "            this.props.room.roomId", 
                "message": "Missing trailing comma.", 
                "line": 154
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5776, 
                        5779
                    ]
                }, 
                "source": "        var textarea = this.refs.textarea;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 168
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6041, 
                        6044
                    ]
                }, 
                "source": "                    var left = textarea.value.substring(0, textarea.selectionStart);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 175
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6126, 
                        6129
                    ]
                }, 
                "source": "                    var right = textarea.value.substring(textarea.selectionEnd);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 176
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 21, 
                "fix": {
                    "text": "                    ", 
                    "range": [
                        6301, 
                        6322
                    ]
                }, 
                "source": "                    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 179
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        6612, 
                        6629
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 186
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6900, 
                        6903
                    ]
                }, 
                "source": "            var input = this.refs.textarea.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 197
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        7132, 
                        7141
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 204
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7222, 
                        7225
                    ]
                }, 
                "source": "            var oldSelectionStart = this.refs.textarea.selectionStart;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 206
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7376, 
                        7379
                    ]
                }, 
                "source": "            var keyCode = ev.keyCode;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 208
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7932, 
                        7935
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 223
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8525, 
                        8528
                    ]
                }, 
                "source": "        var newHeight = Math.min(this.refs.textarea.scrollHeight,", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 237
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        9089, 
                        9098
                    ]
                }, 
                "source": "        {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 252
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9186, 
                        9189
                    ]
                }, 
                "source": "        var contentText = this.refs.textarea.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 258
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        9635, 
                        9648
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 267
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        9762, 
                        9775
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 270
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 272
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 59, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10011, 
                        10011
                    ]
                }, 
                "source": "                    description: \"Usage: /markdown on|off\"", 
                "message": "Missing trailing comma.", 
                "line": 275
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10085, 
                        10088
                    ]
                }, 
                "source": "        var cmd = SlashCommands.processInput(this.props.room.roomId, contentText);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 281
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10551, 
                        10554
                    ]
                }, 
                "source": "                    var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 292
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10759, 
                        10759
                    ]
                }, 
                "source": "                        description: err.message", 
                "message": "Missing trailing comma.", 
                "line": 295
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        10817, 
                        10830
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 298
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 301
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 21, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "'ErrorDialog' is already defined.", 
                "line": 301
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        11105, 
                        11105
                    ]
                }, 
                "source": "                    description: cmd.error", 
                "message": "Missing trailing comma.", 
                "line": 304
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11179, 
                        11182
                    ]
                }, 
                "source": "        var isEmote = /^\\/me( |$)/i.test(contentText);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 310
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11234, 
                        11237
                    ]
                }, 
                "source": "        var sendMessagePromise;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 311
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        11343, 
                        11352
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 315
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        let send_markdown = false;", 
                "message": "Identifier 'send_markdown' is not in camel case.", 
                "line": 320
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            send_markdown = !mdown.isPlainText();", 
                "message": "Identifier 'send_markdown' is not in camel case.", 
                "line": 324
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        if (send_markdown) {", 
                "message": "Identifier 'send_markdown' is not in camel case.", 
                "line": 327
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                MatrixClientPeg.get().sendHtmlEmote(this.props.room.roomId, contentText, htmlText) :", 
                "message": "Line 330 exceeds the maximum line length of 90.", 
                "line": 330
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                MatrixClientPeg.get().sendHtmlMessage(this.props.room.roomId, contentText, htmlText);", 
                "message": "Line 331 exceeds the maximum line length of 90.", 
                "line": 331
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        11977, 
                        11986
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 332
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                MatrixClientPeg.get().sendEmoteMessage(this.props.room.roomId, contentText) :", 
                "message": "Line 336 exceeds the maximum line length of 90.", 
                "line": 336
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                MatrixClientPeg.get().sendTextMessage(this.props.room.roomId, contentText);", 
                "message": "Line 337 exceeds the maximum line length of 90.", 
                "line": 337
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 39, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12396, 
                        12396
                    ]
                }, 
                "source": "                action: 'message_sent'", 
                "message": "Missing trailing comma.", 
                "line": 342
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12509, 
                        12509
                    ]
                }, 
                "source": "                action: 'message_send_failed'", 
                "message": "Missing trailing comma.", 
                "line": 346
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13136, 
                        13139
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 372
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13642, 
                        13645
                    ]
                }, 
                "source": "            var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 389
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        14290, 
                        14290
                    ]
                }, 
                "source": "            this.isTyping, TYPING_SERVER_TIMEOUT", 
                "message": "Missing trailing comma.", 
                "line": 409
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <textarea autoFocus ref=\"textarea\" rows=\"1\" onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} placeholder=\"Type a message...\" />", 
                "message": "Line 427 exceeds the maximum line length of 90.", 
                "line": 427
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        14870, 
                        14870
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 430
            }
        ], 
        "errorCount": 13, 
        "warningCount": 53, 
        "filePath": "src/components/views/rooms/MessageComposerInputOld.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "'MatrixClientPeg' is assigned a value but never used.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        673, 
                        676
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var sdk = require('../../../index');", 
                "message": "'sdk' is assigned a value but never used.", 
                "line": 22
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1155, 
                        1155
                    ]
                }, 
                "source": "        presenceState: React.PropTypes.string", 
                "message": "Missing trailing comma.", 
                "line": 37
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 32, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1267, 
                        1267
                    ]
                }, 
                "source": "            presenceState: null", 
                "message": "Missing trailing comma.", 
                "line": 43
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1356, 
                        1359
                    ]
                }, 
                "source": "        var t = parseInt(time / 1000);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1395, 
                        1398
                    ]
                }, 
                "source": "        var s = t % 60;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1419, 
                        1422
                    ]
                }, 
                "source": "        var m = parseInt(t / 60) % 60;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 51
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1458, 
                        1461
                    ]
                }, 
                "source": "        var h = parseInt(t / (60 * 60)) % 24;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 52
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1504, 
                        1507
                    ]
                }, 
                "source": "        var d = parseInt(t / (60 * 60 * 24));", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 53
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var ago = this.props.currentlyActive ? \"now\" : (this.getDuration(this.props.activeAgo) + \" ago\");", 
                "message": "Line 78 exceeds the maximum line length of 90.", 
                "line": 78
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2187, 
                        2190
                    ]
                }, 
                "source": "            var ago = this.props.currentlyActive ? \"now\" : (this.getDuration(this.props.activeAgo) + \" ago\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 78
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2624, 
                        2633
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 86
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2838, 
                        2838
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 94
            }
        ], 
        "errorCount": 5, 
        "warningCount": 11, 
        "filePath": "src/components/views/rooms/PresenceLabel.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        577, 
                        580
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        607, 
                        610
                    ]
                }, 
                "source": "var ReactDOM = require('react-dom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        645, 
                        648
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        683, 
                        686
                    ]
                }, 
                "source": "var Velociraptor = require('../../../Velociraptor');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        773, 
                        776
                    ]
                }, 
                "source": "var bounce = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2819, 
                        2822
                    ]
                }, 
                "source": "        var rrInfo = this.props.readReceiptInfo;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 90
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3220, 
                        3223
                    ]
                }, 
                "source": "        var avatarNode = ReactDOM.findDOMNode(this);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 102
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3667, 
                        3670
                    ]
                }, 
                "source": "        var oldTop = -15;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 115
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3694, 
                        3697
                    ]
                }, 
                "source": "        var oldInfo = this.props.readReceiptInfo;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 117
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3875, 
                        3878
                    ]
                }, 
                "source": "        var newElement = ReactDOM.findDOMNode(this);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 122
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3928, 
                        3931
                    ]
                }, 
                "source": "        var startTopOffset = oldTop - newElement.offsetParent.getBoundingClientRect().top;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 123
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4020, 
                        4023
                    ]
                }, 
                "source": "        var startStyles = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 125
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4050, 
                        4053
                    ]
                }, 
                "source": "        var enterTransitionOpts = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4193, 
                        4196
                    ]
                }, 
                "source": "            var leftOffset = oldInfo.left;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 131
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 17, 
                "source": "            var leftOffset = oldInfo.left;", 
                "message": "'leftOffset' is assigned a value but never used.", 
                "line": 131
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4353, 
                        4356
                    ]
                }, 
                "source": "            var reorderTransitionOpts = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 135
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 34, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4447, 
                        4447
                    ]
                }, 
                "source": "                easing: 'easeOut'", 
                "message": "Missing trailing comma.", 
                "line": 137
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            duration: bounce ? Math.min(Math.log(Math.abs(startTopOffset)) * 200, 3000) : 300,", 
                "message": "Line 147 exceeds the maximum line length of 90.", 
                "line": 147
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5126, 
                        5129
                    ]
                }, 
                "source": "        var MemberAvatar = sdk.getComponent('avatars.MemberAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 160
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5275, 
                        5278
                    ]
                }, 
                "source": "        var style = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 165
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        5504, 
                        5507
                    ]
                }, 
                "source": "            let suffix = \" (\" + this.props.member.userId + \")\";", 
                "message": "'suffix' is never reassigned. Use 'const' instead.", 
                "line": 173
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        5568, 
                        5571
                    ]
                }, 
                "source": "            let ts = new Date(this.props.timestamp);", 
                "message": "'ts' is never reassigned. Use 'const' instead.", 
                "line": 174
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        5788, 
                        5801
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 178
            }
        ], 
        "errorCount": 2, 
        "warningCount": 21, 
        "filePath": "src/components/views/rooms/ReadReceiptMarker.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        650, 
                        653
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        709, 
                        712
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        748, 
                        751
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        790, 
                        793
                    ]
                }, 
                "source": "var rate_limited_func = require('../../../ratelimitedfunc');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 5, 
                "source": "var rate_limited_func = require('../../../ratelimitedfunc');", 
                "message": "Identifier 'rate_limited_func' is not in camel case.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        852, 
                        855
                    ]
                }, 
                "source": "var linkify = require('linkifyjs');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        888, 
                        891
                    ]
                }, 
                "source": "var linkifyElement = require('linkifyjs/element');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        939, 
                        942
                    ]
                }, 
                "source": "var linkifyMatrix = require('../../../linkify-matrix');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1830, 
                        1833
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 58
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2544, 
                        2547
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 79
            }, 
            {
                "nodeType": "NewExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 29, 
                "source": "    _rateLimitedUpdate: new rate_limited_func(function() {", 
                "message": "A constructor name should not start with a lowercase letter.", 
                "line": 94
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this.forceUpdate();", 
                "message": "Unexpected 'this'.", 
                "line": 95
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3299, 
                        3302
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 109
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var self = this;", 
                "message": "'self' is assigned a value but never used.", 
                "line": 109
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3324, 
                        3327
                    ]
                }, 
                "source": "        var changeAvatar = this.refs.changeAvatar;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 110
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3572, 
                        3575
                    ]
                }, 
                "source": "            var errMsg = (typeof err === \"string\") ? err : (err.error || \"\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 116
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3650, 
                        3653
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 117
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 63, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3849, 
                        3849
                    ]
                }, 
                "source": "                description: \"Failed to set avatar. \" + errMsg", 
                "message": "Missing trailing comma.", 
                "line": 120
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 129
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4188, 
                        4191
                    ]
                }, 
                "source": "        var newName;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 135
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 142
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4538, 
                        4541
                    ]
                }, 
                "source": "        var newTopic;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 148
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4722, 
                        4725
                    ]
                }, 
                "source": "        var RoomAvatar = sdk.getComponent(\"avatars.RoomAvatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 156
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4787, 
                        4790
                    ]
                }, 
                "source": "        var ChangeAvatar = sdk.getComponent(\"settings.ChangeAvatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 157
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4857, 
                        4860
                    ]
                }, 
                "source": "        var TintableSvg = sdk.getComponent(\"elements.TintableSvg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 158
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4992, 
                        4995
                    ]
                }, 
                "source": "        var header;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 161
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "source": "        var name = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 162
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "source": "        var searchStatus = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 163
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5070, 
                        5073
                    ]
                }, 
                "source": "        var topic_el = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 164
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var topic_el = null;", 
                "message": "Identifier 'topic_el' is not in camel case.", 
                "line": 164
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5099, 
                        5102
                    ]
                }, 
                "source": "        var cancel_button = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 165
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var cancel_button = null;", 
                "message": "Identifier 'cancel_button' is not in camel case.", 
                "line": 165
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5133, 
                        5136
                    ]
                }, 
                "source": "        var spinner = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 166
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5161, 
                        5164
                    ]
                }, 
                "source": "        var save_button = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 167
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var save_button = null;", 
                "message": "Identifier 'save_button' is not in camel case.", 
                "line": 167
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "source": "        var settings_button = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 168
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var settings_button = null;", 
                "message": "Identifier 'settings_button' is not in camel case.", 
                "line": 168
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 33, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        5254, 
                        5256
                    ]
                }, 
                "source": "        if (this.props.editing) {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 169
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5354, 
                        5357
                    ]
                }, 
                "source": "            var user_id = MatrixClientPeg.get().credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 172
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var user_id = MatrixClientPeg.get().credentials.userId;", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 172
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var can_set_room_name = this.props.room.currentState.maySendStateEvent(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 174
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var can_set_room_name = this.props.room.currentState.maySendStateEvent(", 
                "message": "Identifier 'can_set_room_name' is not in camel case.", 
                "line": 174
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 39, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5533, 
                        5533
                    ]
                }, 
                "source": "                'm.room.name', user_id", 
                "message": "Missing trailing comma.", 
                "line": 175
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var can_set_room_avatar = this.props.room.currentState.maySendStateEvent(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 177
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var can_set_room_avatar = this.props.room.currentState.maySendStateEvent(", 
                "message": "Identifier 'can_set_room_avatar' is not in camel case.", 
                "line": 177
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5675, 
                        5675
                    ]
                }, 
                "source": "                'm.room.avatar', user_id", 
                "message": "Missing trailing comma.", 
                "line": 178
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var can_set_room_topic = this.props.room.currentState.maySendStateEvent(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 180
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var can_set_room_topic = this.props.room.currentState.maySendStateEvent(", 
                "message": "Identifier 'can_set_room_topic' is not in camel case.", 
                "line": 180
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5815, 
                        5815
                    ]
                }, 
                "source": "                'm.room.topic', user_id", 
                "message": "Missing trailing comma.", 
                "line": 181
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var can_set_room_name = this.props.room.currentState.maySendStateEvent(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 183
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "            var can_set_room_name = this.props.room.currentState.maySendStateEvent(", 
                "message": "Identifier 'can_set_room_name' is not in camel case.", 
                "line": 183
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var can_set_room_name = this.props.room.currentState.maySendStateEvent(", 
                "message": "'can_set_room_name' is already defined.", 
                "line": 183
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 39, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5953, 
                        5953
                    ]
                }, 
                "source": "                'm.room.name', user_id", 
                "message": "Missing trailing comma.", 
                "line": 184
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            save_button = <AccessibleButton className=\"mx_RoomHeader_textButton\" onClick={this.props.onSaveClick}>Save</AccessibleButton>;", 
                "message": "Line 187 exceeds the maximum line length of 90.", 
                "line": 187
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            save_button = <AccessibleButton className=\"mx_RoomHeader_textButton\" onClick={this.props.onSaveClick}>Save</AccessibleButton>;", 
                "message": "Identifier 'save_button' is not in camel case.", 
                "line": 187
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            cancel_button = <CancelButton onClick={this.props.onCancelClick}/>;", 
                "message": "Identifier 'cancel_button' is not in camel case.", 
                "line": 188
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6245, 
                        6248
                    ]
                }, 
                "source": "            var Spinner = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 192
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        if (can_set_room_name) {", 
                "message": "Identifier 'can_set_room_name' is not in camel case.", 
                "line": 196
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6432, 
                        6435
                    ]
                }, 
                "source": "            var RoomNameEditor = sdk.getComponent(\"rooms.RoomNameEditor\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 197
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        6583, 
                        6592
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 199
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var searchStatus;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 201
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var searchStatus;", 
                "message": "'searchStatus' is already defined.", 
                "line": 201
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            if (this.props.searchInfo && this.props.searchInfo.searchCount !== undefined && this.props.searchInfo.searchCount !== null) {", 
                "message": "Line 204 exceeds the maximum line length of 90.", 
                "line": 204
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                searchStatus = <div className=\"mx_RoomHeader_searchStatus\">&nbsp;(~{ this.props.searchInfo.searchCount } results)</div>;", 
                "message": "Line 205 exceeds the maximum line length of 90.", 
                "line": 205
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7169, 
                        7172
                    ]
                }, 
                "source": "            var settingsHint = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 209
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var members = this.props.room ? this.props.room.getJoinedMembers() : undefined;", 
                "message": "Line 210 exceeds the maximum line length of 90.", 
                "line": 210
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7207, 
                        7210
                    ]
                }, 
                "source": "            var members = this.props.room ? this.props.room.getJoinedMembers() : undefined;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 210
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (members.length === 1 && members[0].userId === MatrixClientPeg.get().credentials.userId) {", 
                "message": "Line 212 exceeds the maximum line length of 90.", 
                "line": 212
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    var name = this.props.room.currentState.getStateEvents('m.room.name', '');", 
                "message": "Line 213 exceeds the maximum line length of 90.", 
                "line": 213
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "source": "                    var name = this.props.room.currentState.getStateEvents('m.room.name', '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 213
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 25, 
                "source": "                    var name = this.props.room.currentState.getStateEvents('m.room.name', '');", 
                "message": "'name' is already defined.", 
                "line": 213
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7691, 
                        7694
                    ]
                }, 
                "source": "            var roomName = 'Join Room';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 220
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <EmojiText element=\"div\" className={ \"mx_RoomHeader_nametext \" + (settingsHint ? \"mx_RoomHeader_settingsHint\" : \"\") } title={ roomName }>{roomName}</EmojiText>", 
                "message": "Line 230 exceeds the maximum line length of 90.", 
                "line": 230
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        if (can_set_room_topic) {", 
                "message": "Identifier 'can_set_room_topic' is not in camel case.", 
                "line": 235
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8350, 
                        8353
                    ]
                }, 
                "source": "            var RoomTopicEditor = sdk.getComponent(\"rooms.RoomTopicEditor\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 236
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            topic_el = <RoomTopicEditor ref=\"topicEditor\" room={this.props.room} />;", 
                "message": "Identifier 'topic_el' is not in camel case.", 
                "line": 237
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8529, 
                        8532
                    ]
                }, 
                "source": "            var topic;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 239
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8591, 
                        8594
                    ]
                }, 
                "source": "                var ev = this.props.room.currentState.getStateEvents('m.room.topic', '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 241
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                topic_el = <div className=\"mx_RoomHeader_topic\" ref=\"topic\" title={ topic }>{ topic }</div>;", 
                "message": "Line 247 exceeds the maximum line length of 90.", 
                "line": 247
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "                topic_el = <div className=\"mx_RoomHeader_topic\" ref=\"topic\" title={ topic }>{ topic }</div>;", 
                "message": "Identifier 'topic_el' is not in camel case.", 
                "line": 247
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8941, 
                        8944
                    ]
                }, 
                "source": "        var roomAvatar = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 251
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        if (can_set_room_avatar) {", 
                "message": "Identifier 'can_set_room_avatar' is not in camel case.", 
                "line": 252
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <ChangeAvatar ref=\"changeAvatar\" room={this.props.room} showUploadSection={false} width={48} height={48} />", 
                "message": "Line 256 exceeds the maximum line length of 90.", 
                "line": 256
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <input id=\"avatarInput\" type=\"file\" onChange={ this.onAvatarSelected }/>", 
                "message": "Line 264 exceeds the maximum line length of 90.", 
                "line": 264
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        9840, 
                        9849
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 268
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <RoomAvatar room={this.props.room} width={48} height={48} oobData={this.props.oobData} />", 
                "message": "Line 272 exceeds the maximum line length of 90.", 
                "line": 272
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "source": "        var settings_button;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 277
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var settings_button;", 
                "message": "Identifier 'settings_button' is not in camel case.", 
                "line": 277
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 13, 
                "source": "        var settings_button;", 
                "message": "'settings_button' is already defined.", 
                "line": 277
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            settings_button =", 
                "message": "Identifier 'settings_button' is not in camel case.", 
                "line": 279
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.props.onSettingsClick} title=\"Settings\">", 
                "message": "Line 280 exceeds the maximum line length of 90.", 
                "line": 280
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <TintableSvg src=\"img/icons-settings-room.svg\" width=\"16\" height=\"16\"/>", 
                "message": "Line 281 exceeds the maximum line length of 90.", 
                "line": 281
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10871, 
                        10874
                    ]
                }, 
                "source": "        var forget_button;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 293
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var forget_button;", 
                "message": "Identifier 'forget_button' is not in camel case.", 
                "line": 293
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            forget_button =", 
                "message": "Identifier 'forget_button' is not in camel case.", 
                "line": 295
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.props.onForgetClick} title=\"Forget room\">", 
                "message": "Line 296 exceeds the maximum line length of 90.", 
                "line": 296
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11215, 
                        11218
                    ]
                }, 
                "source": "        var rightPanel_buttons;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 301
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var rightPanel_buttons;", 
                "message": "Identifier 'rightPanel_buttons' is not in camel case.", 
                "line": 301
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            rightPanel_buttons =", 
                "message": "Identifier 'rightPanel_buttons' is not in camel case.", 
                "line": 303
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.onShowRhsClick} title=\"<\">", 
                "message": "Line 304 exceeds the maximum line length of 90.", 
                "line": 304
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11556, 
                        11559
                    ]
                }, 
                "source": "        var right_row;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 309
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var right_row;", 
                "message": "Identifier 'right_row' is not in camel case.", 
                "line": 309
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            right_row =", 
                "message": "Identifier 'right_row' is not in camel case.", 
                "line": 311
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 23, 
                "source": "                    { settings_button }", 
                "message": "Identifier 'settings_button' is not in camel case.", 
                "line": 313
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 23, 
                "source": "                    { forget_button }", 
                "message": "Identifier 'forget_button' is not in camel case.", 
                "line": 314
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <AccessibleButton className=\"mx_RoomHeader_button\" onClick={this.props.onSearchClick} title=\"Search\">", 
                "message": "Line 315 exceeds the maximum line length of 90.", 
                "line": 315
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 23, 
                "source": "                    { rightPanel_buttons }", 
                "message": "Identifier 'rightPanel_buttons' is not in camel case.", 
                "line": 318
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 27, 
                "source": "                        { topic_el }", 
                "message": "Identifier 'topic_el' is not in camel case.", 
                "line": 330
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 18, 
                "source": "                {save_button}", 
                "message": "Identifier 'save_button' is not in camel case.", 
                "line": 334
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 18, 
                "source": "                {cancel_button}", 
                "message": "Identifier 'cancel_button' is not in camel case.", 
                "line": 335
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 18, 
                "source": "                {right_row}", 
                "message": "Identifier 'right_row' is not in camel case.", 
                "line": 336
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <div className={ \"mx_RoomHeader \" + (this.props.editing ? \"mx_RoomHeader_editing\" : \"\") }>", 
                "message": "Line 340 exceeds the maximum line length of 90.", 
                "line": 340
            }
        ], 
        "errorCount": 11, 
        "warningCount": 103, 
        "filePath": "src/components/views/rooms/RoomHeader.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        582, 
                        585
                    ]
                }, 
                "source": "var React = require(\"react\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        612, 
                        615
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        649, 
                        652
                    ]
                }, 
                "source": "var GeminiScrollbar = require('react-gemini-scrollbar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        706, 
                        709
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        765, 
                        768
                    ]
                }, 
                "source": "var CallHandler = require('../../../CallHandler');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        816, 
                        819
                    ]
                }, 
                "source": "var RoomListSorter = require(\"../../../RoomListSorter\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var RoomListSorter = require(\"../../../RoomListSorter\");", 
                "message": "'RoomListSorter' is assigned a value but never used.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        873, 
                        876
                    ]
                }, 
                "source": "var Unread = require('../../../Unread');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Unread = require('../../../Unread');", 
                "message": "'Unread' is assigned a value but never used.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        914, 
                        917
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        956, 
                        959
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        993, 
                        996
                    ]
                }, 
                "source": "var rate_limited_func = require('../../../ratelimitedfunc');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 5, 
                "source": "var rate_limited_func = require('../../../ratelimitedfunc');", 
                "message": "Identifier 'rate_limited_func' is not in camel case.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1054, 
                        1057
                    ]
                }, 
                "source": "var Rooms = require('../../../Rooms');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1143, 
                        1146
                    ]
                }, 
                "source": "var Receipt = require('../../../utils/Receipt');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1193, 
                        1196
                    ]
                }, 
                "source": "var HIDE_CONFERENCE_CHANS = true;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 32
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1720, 
                        1723
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 53
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2215, 
                        2218
                    ]
                }, 
                "source": "        var s = this.getRoomLists();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 64
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var call = CallHandler.getCall(payload.room_id);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 86
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3115, 
                        3115
                    ]
                }, 
                "source": "                        incomingCall: call", 
                "message": "Missing trailing comma.", 
                "line": 89
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        3227, 
                        3244
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 92
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3329, 
                        3329
                    ]
                }, 
                "source": "                        incomingCall: null", 
                "message": "Missing trailing comma.", 
                "line": 95
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            MatrixClientPeg.get().removeListener(\"RoomState.events\", this.onRoomStateEvents);", 
                "message": "Line 111 exceeds the maximum line length of 90.", 
                "line": 111
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            MatrixClientPeg.get().removeListener(\"RoomMember.name\", this.onRoomMemberName);", 
                "message": "Line 112 exceeds the maximum line length of 90.", 
                "line": 112
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4695, 
                        4698
                    ]
                }, 
                "source": "            var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 129
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (Receipt.findReadReceiptFromUserId(receiptEvent, MatrixClientPeg.get().credentials.userId)) {", 
                "message": "Line 161 exceeds the maximum line length of 90.", 
                "line": 161
            }, 
            {
                "nodeType": "NewExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 34, 
                "source": "    _delayedRefreshRoomList: new rate_limited_func(function() {", 
                "message": "A constructor name should not start with a lowercase letter.", 
                "line": 188
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this.refreshRoomList();", 
                "message": "Unexpected 'this'.", 
                "line": 189
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7509, 
                        7512
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 208
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7534, 
                        7537
                    ]
                }, 
                "source": "        var s = { lists: {} };", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 209
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        8525, 
                        8538
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 231
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            else if (HIDE_CONFERENCE_CHANS && Rooms.isConfCallRoom(room, me, self.props.ConferenceHandler)) {", 
                "message": "Line 232 exceeds the maximum line length of 90.", 
                "line": 232
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        8716, 
                        8729
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 234
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                     (me.membership === \"leave\" && me.events.member.getSender() !== me.events.member.getStateKey()))", 
                "message": "Line 236 exceeds the maximum line length of 90.", 
                "line": 236
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        8908, 
                        8921
                    ]
                }, 
                "source": "            {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 237
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8987, 
                        8990
                    ]
                }, 
                "source": "                var tagNames = Object.keys(room.tags);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 239
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 26, 
                "source": "                    for (var i = 0; i < tagNames.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 242
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 25, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9154, 
                        9157
                    ]
                }, 
                "source": "                        var tagName = tagNames[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 243
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        9344, 
                        9361
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 247
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        9598, 
                        9615
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 251
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        9718, 
                        9731
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 255
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        9845, 
                        9858
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 258
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                console.error(\"unrecognised membership: \" + me.membership + \" - this should never happen\");", 
                "message": "Line 260 exceeds the maximum line length of 90.", 
                "line": 260
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        10183, 
                        10192
                    ]
                }, 
                "source": "        {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 267
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11868, 
                        11871
                    ]
                }, 
                "source": "        var panel = ReactDOM.findDOMNode(this);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 307
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12598, 
                        12601
                    ]
                }, 
                "source": "        var incomingCallBox = document.getElementById(\"incomingCallBox\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 331
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12740, 
                        12743
                    ]
                }, 
                "source": "            var scrollArea = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 333
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;", 
                "message": "Line 336 exceeds the maximum line length of 90.", 
                "line": 336
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12956, 
                        12959
                    ]
                }, 
                "source": "            var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 336
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var scrollAreaHeight = ReactDOM.findDOMNode(this).getBoundingClientRect().height;", 
                "message": "Line 339 exceeds the maximum line length of 90.", 
                "line": 339
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13213, 
                        13216
                    ]
                }, 
                "source": "            var scrollAreaHeight = ReactDOM.findDOMNode(this).getBoundingClientRect().height;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 339
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var top = (incomingCallBox.parentElement.getBoundingClientRect().top + window.pageYOffset);", 
                "message": "Line 341 exceeds the maximum line length of 90.", 
                "line": 341
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13308, 
                        13311
                    ]
                }, 
                "source": "            var top = (incomingCallBox.parentElement.getBoundingClientRect().top + window.pageYOffset);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 341
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13639, 
                        13642
                    ]
                }, 
                "source": "            var bottomMargin = scrollAreaOffset + (scrollAreaHeight - 45);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 345
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            incomingCallBox.style.left = scrollArea.offsetLeft + scrollArea.offsetWidth + 12 + \"px\";", 
                "message": "Line 349 exceeds the maximum line length of 90.", 
                "line": 349
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14137, 
                        14140
                    ]
                }, 
                "source": "        var scrollArea = this._getScrollNode();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 356
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;", 
                "message": "Line 359 exceeds the maximum line length of 90.", 
                "line": 359
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14341, 
                        14344
                    ]
                }, 
                "source": "        var scrollAreaOffset = scrollArea.getBoundingClientRect().top + window.pageYOffset;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 359
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14586, 
                        14589
                    ]
                }, 
                "source": "        var scrollAreaHeight = ReactDOM.findDOMNode(this).getBoundingClientRect().height;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 362
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            this.stickies = document.getElementsByClassName(\"mx_RoomSubList_labelContainer\");", 
                "message": "Line 366 exceeds the maximum line length of 90.", 
                "line": 366
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            this.scrollAreaSufficient = (120 + (this.stickies[0].getBoundingClientRect().height * this.stickies.length)) < scrollAreaHeight;", 
                "message": "Line 371 exceeds the maximum line length of 90.", 
                "line": 371
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    sticky.dataset.originalPosition = sticky.offsetTop - scrollArea.offsetTop;", 
                "message": "Line 379 exceeds the maximum line length of 90.", 
                "line": 379
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15741, 
                        15744
                    ]
                }, 
                "source": "                    var originalHeight = sticky.getBoundingClientRect().height;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 382
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16016, 
                        16019
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 391
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16041, 
                        16044
                    ]
                }, 
                "source": "        var scrollStuckOffset = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 392
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16531, 
                        16534
                    ]
                }, 
                "source": "            var stickyPosition = sticky.dataset.originalPosition;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 400
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16597, 
                        16600
                    ]
                }, 
                "source": "            var stickyHeight = sticky.dataset.originalHeight;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 401
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16659, 
                        16662
                    ]
                }, 
                "source": "            var stickyHeader = sticky.childNodes[0];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 402
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16712, 
                        16715
                    ]
                }, 
                "source": "            var topStuckHeight = stickyHeight * i;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 403
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16763, 
                        16766
                    ]
                }, 
                "source": "            var bottomStuckHeight = stickyHeight * (stickyWrappers.length - i);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 404
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            if (self.scrollAreaSufficient && stickyPosition < (scrollArea.scrollTop + topStuckHeight)) {", 
                "message": "Line 406 exceeds the maximum line length of 90.", 
                "line": 406
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (scrollToPosition !== undefined && stickyPosition === scrollToPosition) {", 
                "message": "Line 412 exceeds the maximum line length of 90.", 
                "line": 412
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            } else if (self.scrollAreaSufficient && stickyPosition > ((scrollArea.scrollTop + scrollAreaHeight) - bottomStuckHeight)) {", 
                "message": "Line 415 exceeds the maximum line length of 90.", 
                "line": 415
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                stickyHeader.style.top = (scrollAreaOffset + scrollAreaHeight) - bottomStuckHeight + \"px\";", 
                "message": "Line 419 exceeds the maximum line length of 90.", 
                "line": 419
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18335, 
                        18338
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 434
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19053, 
                        19056
                    ]
                }, 
                "source": "        var RoomSubList = sdk.getComponent('structures.RoomSubList');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 455
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19123, 
                        19126
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 456
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    if (!tagName.match(/^(m\\.(favourite|lowpriority)|im\\.vector\\.fake\\.(invite|recent|direct|archived))$/)) {", 
                "message": "Line 510 exceeds the maximum line length of 90.", 
                "line": 510
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 21, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        23014, 
                        23016
                    ]
                }, 
                "source": "                    }", 
                "message": "Block must not be padded by blank lines.", 
                "line": 525
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        24682, 
                        24682
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 557
            }
        ], 
        "errorCount": 6, 
        "warningCount": 74, 
        "filePath": "src/components/views/rooms/RoomList.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        577, 
                        580
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        607, 
                        610
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        644, 
                        647
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        896, 
                        899
                    ]
                }, 
                "source": "        var room = this.props.room;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        932, 
                        935
                    ]
                }, 
                "source": "        var name = room.currentState.getStateEvents('m.room.name', '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 32
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1004, 
                        1007
                    ]
                }, 
                "source": "        var myId = MatrixClientPeg.get().credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1065, 
                        1068
                    ]
                }, 
                "source": "        var defaultName = room.getDefaultRoomName(myId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1483, 
                        1486
                    ]
                }, 
                "source": "        var EditableText = sdk.getComponent(\"elements.EditableText\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }
        ], 
        "errorCount": 0, 
        "warningCount": 8, 
        "filePath": "src/components/views/rooms/RoomNameEditor.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        650, 
                        653
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 24, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1995, 
                        1995
                    ]
                }, 
                "source": "            busy: false", 
                "message": "Missing trailing comma.", 
                "line": 60
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2447, 
                        2447
                    ]
                }, 
                "source": "                'email', this.props.invitedEmail", 
                "message": "Missing trailing comma.", 
                "line": 71
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2773, 
                        2776
                    ]
                }, 
                "source": "        var joinBlock, previewBlock;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 83
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 9, 
                "source": "        var joinBlock, previewBlock;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 83
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2868, 
                        2871
                    ]
                }, 
                "source": "            var Spinner = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 86
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3086, 
                        3089
                    ]
                }, 
                "source": "            var emailMatchBlock;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 93
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                } else if (this.state.invitedEmailMxid != MatrixClientPeg.get().credentials.userId) {", 
                "message": "Line 100 exceeds the maximum line length of 90.", 
                "line": 100
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                <img src=\"img/warning.svg\" width=\"24\" height=\"23\" title= \"/!\\\\\" alt=\"/!\\\\\" />", 
                "message": "Line 104 exceeds the maximum line length of 90.", 
                "line": 104
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                This invitation was sent to <b><span className=\"email\">{this.props.invitedEmail}</span></b>, which is not associated with this account.<br/>", 
                "message": "Line 107 exceeds the maximum line length of 90.", 
                "line": 107
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                You may wish to login with a different account, or add this email to this account.", 
                "message": "Line 108 exceeds the maximum line length of 90.", 
                "line": 108
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        You have been invited to join this room by <b>{ this.props.inviterName }</b>", 
                "message": "Line 116 exceeds the maximum line length of 90.", 
                "line": 116
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        Would you like to <a onClick={ this.props.onJoinClick }>accept</a> or <a onClick={ this.props.onRejectClick }>decline</a> this invitation?", 
                "message": "Line 119 exceeds the maximum line length of 90.", 
                "line": 119
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4922, 
                        4931
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 125
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 9, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        4911, 
                        4913
                    ]
                }, 
                "source": "        }", 
                "message": "Block must not be padded by blank lines.", 
                "line": 125
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var name = this.props.roomAlias || \"This room\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 127
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5032, 
                        5035
                    ]
                }, 
                "source": "            var error;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 128
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        5477, 
                        5486
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 141
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var name = this.props.room ? this.props.room.name : (this.props.room_alias || \"\");", 
                "message": "Line 143 exceeds the maximum line length of 90.", 
                "line": 143
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var name = this.props.room ? this.props.room.name : (this.props.room_alias || \"\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 143
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var name = this.props.room ? this.props.room.name : (this.props.room_alias || \"\");", 
                "message": "'name' is already defined.", 
                "line": 143
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        Would you like to <a onClick={ this.props.onJoinClick }>join</a> in order to participate in the discussion?", 
                "message": "Line 149 exceeds the maximum line length of 90.", 
                "line": 149
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6552, 
                        6552
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 171
            }
        ], 
        "errorCount": 4, 
        "warningCount": 21, 
        "filePath": "src/components/views/rooms/RoomPreviewBar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        590, 
                        593
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        620, 
                        623
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        679, 
                        682
                    ]
                }, 
                "source": "var SdkConfig = require('../../../SdkConfig');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var SdkConfig = require('../../../SdkConfig');", 
                "message": "'SdkConfig' is assigned a value but never used.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        726, 
                        729
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        763, 
                        766
                    ]
                }, 
                "source": "var Modal = require('../../../Modal');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        802, 
                        805
                    ]
                }, 
                "source": "var ObjectUtils = require(\"../../../ObjectUtils\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        853, 
                        856
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        895, 
                        898
                    ]
                }, 
                "source": "var ScalarAuthClient = require(\"../../../ScalarAuthClient\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        956, 
                        959
                    ]
                }, 
                "source": "var ScalarMessaging = require('../../../ScalarMessaging');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1177, 
                        1180
                    ]
                }, 
                "source": "    var res = parseInt(val);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1515, 
                        1518
                    ]
                }, 
                "source": "        var tags = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 45
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            history_visibility: this._yankValueFromEvent(\"m.room.history_visibility\", \"history_visibility\"),", 
                "message": "Line 54 exceeds the maximum line length of 90.", 
                "line": 54
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3083, 
                        3083
                    ]
                }, 
                "source": "            this.props.room.roomId", 
                "message": "Missing trailing comma.", 
                "line": 75
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 34, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3588, 
                        3588
                    ]
                }, 
                "source": "                scalar_error: err", 
                "message": "Missing trailing comma.", 
                "line": 88
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 23, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4053, 
                        4053
                    ]
                }, 
                "source": "            name: name", 
                "message": "Missing trailing comma.", 
                "line": 111
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4154, 
                        4154
                    ]
                }, 
                "source": "            topic: topic", 
                "message": "Missing trailing comma.", 
                "line": 117
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4206, 
                        4209
                    ]
                }, 
                "source": "        var stateWasSetDefer = q.defer();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 122
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4915, 
                        4918
                    ]
                }, 
                "source": "        var promises = this.saveAliases(); // returns Promise[]", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 139
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4979, 
                        4982
                    ]
                }, 
                "source": "        var originalState = this.getInitialState();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 140
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 19, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5886, 
                        5886
                    ]
                }, 
                "source": "                \"\"", 
                "message": "Missing trailing comma.", 
                "line": 158
            }, 
            {
                "nodeType": "ConditionalExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 66, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6155, 
                        6155
                    ]
                }, 
                "source": "                this.state.isRoomPublished ? \"public\" : \"private\"", 
                "message": "Missing trailing comma.", 
                "line": 165
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 19, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6427, 
                        6427
                    ]
                }, 
                "source": "                \"\"", 
                "message": "Missing trailing comma.", 
                "line": 173
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 19, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6713, 
                        6713
                    ]
                }, 
                "source": "                \"\"", 
                "message": "Missing trailing comma.", 
                "line": 181
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6774, 
                        6777
                    ]
                }, 
                "source": "        var powerLevels = this._getPowerLevels();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 187
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 63, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6969, 
                        6969
                    ]
                }, 
                "source": "                roomId, \"m.room.power_levels\", powerLevels, \"\"", 
                "message": "Missing trailing comma.", 
                "line": 190
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var tagDiffs = ObjectUtils.getKeyValueArrayDiffs(originalState.tags, this.state.tags);", 
                "message": "Line 196 exceeds the maximum line length of 90.", 
                "line": 196
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7064, 
                        7067
                    ]
                }, 
                "source": "            var tagDiffs = ObjectUtils.getKeyValueArrayDiffs(originalState.tags, this.state.tags);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 196
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 83, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7454, 
                        7454
                    ]
                }, 
                "source": "                            MatrixClientPeg.get().setRoomTag(roomId, diff.key, {})", 
                "message": "Missing trailing comma.", 
                "line": 202
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 82, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7665, 
                        7665
                    ]
                }, 
                "source": "                            MatrixClientPeg.get().deleteRoomTag(roomId, diff.key)", 
                "message": "Missing trailing comma.", 
                "line": 207
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7941, 
                        7944
                    ]
                }, 
                "source": "        var p;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 218
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8092, 
                        8095
                    ]
                }, 
                "source": "        var ps = this.saveUrlPreviewSettings();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 225
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        console.log(\"Performing %s operations: %s\", promises.length, JSON.stringify(promises));", 
                "message": "Line 236 exceeds the maximum line length of 90.", 
                "line": 236
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9023, 
                        9026
                    ]
                }, 
                "source": "        var encrypt = this.refs.encrypt.checked;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 258
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9111, 
                        9114
                    ]
                }, 
                "source": "        var roomId = this.props.room.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 261
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9291, 
                        9291
                    ]
                }, 
                "source": "            { algorithm: \"m.megolm.v1.aes-sha2\" }", 
                "message": "Missing trailing comma.", 
                "line": 264
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var powerLevels = this.props.room.currentState.getStateEvents('m.room.power_levels', '');", 
                "message": "Line 279 exceeds the maximum line length of 90.", 
                "line": 279
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9704, 
                        9707
                    ]
                }, 
                "source": "        var powerLevels = this.props.room.currentState.getStateEvents('m.room.power_levels', '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 279
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9870, 
                        9873
                    ]
                }, 
                "source": "        var newPowerLevels = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 282
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 39, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10570, 
                        10570
                    ]
                }, 
                "source": "            power_levels_changed: true", 
                "message": "Missing trailing comma.", 
                "line": 299
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10765, 
                        10768
                    ]
                }, 
                "source": "        var event = this.props.room.currentState.getStateEvents(stateEventType, '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 305
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11025, 
                        11028
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 313
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11050, 
                        11053
                    ]
                }, 
                "source": "        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 314
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11209, 
                        11212
                    ]
                }, 
                "source": "        var value = ev.target.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 318
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Changes to who can read history will only apply to future messages in this room.<br/>", 
                "message": "Line 324 exceeds the maximum line length of 90.", 
                "line": 324
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        11769, 
                        11769
                    ]
                }, 
                "source": "                        history_visibility: value", 
                "message": "Missing trailing comma.", 
                "line": 331
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 44, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        11891, 
                        11893
                    ]
                }, 
                "source": "    _onRoomAccessRadioToggle: function(ev) {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 338
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13490, 
                        13493
                    ]
                }, 
                "source": "        var state = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 377
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        13816, 
                        13829
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 386
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        14024, 
                        14033
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 392
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        14185, 
                        14185
                    ]
                }, 
                "source": "            tags_changed: true", 
                "message": "Missing trailing comma.", 
                "line": 399
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14252, 
                        14255
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 404
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14293, 
                        14296
                    ]
                }, 
                "source": "        var roomState = this.props.room.currentState;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 405
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14574, 
                        14577
                    ]
                }, 
                "source": "        var IntegrationsManager = sdk.getComponent(\"views.settings.IntegrationsManager\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 412
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    this.scalarClient.getScalarInterfaceUrlForRoom(this.props.room.roomId) :", 
                "message": "Line 415 exceeds the maximum line length of 90.", 
                "line": 415
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15699, 
                        15702
                    ]
                }, 
                "source": "            var errCode = err.errcode || \"unknown error code\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 444
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15762, 
                        15765
                    ]
                }, 
                "source": "            var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 445
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 66, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15964, 
                        15964
                    ]
                }, 
                "source": "                description: `Failed to forget room (${errCode})`", 
                "message": "Missing trailing comma.", 
                "line": 448
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16090, 
                        16093
                    ]
                }, 
                "source": "        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 456
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <p>Devices will <b>not</b> yet be able to decrypt history from before they joined the room.</p>", 
                "message": "Line 463 exceeds the maximum line length of 90.", 
                "line": 463
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <p>Once encryption is enabled for a room it <b>cannot</b> be turned off again (for now).</p>", 
                "message": "Line 464 exceeds the maximum line length of 90.", 
                "line": 464
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <p>Encrypted messages will not be visible on clients that do not yet implement encryption.</p>", 
                "message": "Line 465 exceeds the maximum line length of 90.", 
                "line": 465
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 25, 
                "fix": {
                    "text": "(confirm)", 
                    "range": [
                        16849, 
                        16856
                    ]
                }, 
                "source": "            onFinished: confirm=>{", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 468
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17051, 
                        17054
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 477
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17092, 
                        17095
                    ]
                }, 
                "source": "        var roomState = this.props.room.currentState;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 478
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        17146, 
                        17149
                    ]
                }, 
                "source": "        var isEncrypted = cli.isRoomEncrypted(this.props.room.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 479
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <input type=\"checkbox\" ref=\"encrypt\" onClick={ this.onEnableEncryptionClick }/>", 
                "message": "Line 485 exceeds the maximum line length of 90.", 
                "line": 485
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <img className=\"mx_RoomSettings_e2eIcon\" src=\"img/e2e-unencrypted.svg\" width=\"12\" height=\"12\" />", 
                "message": "Line 486 exceeds the maximum line length of 90.", 
                "line": 486
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        17703, 
                        17712
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 490
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                  ? <img className=\"mx_RoomSettings_e2eIcon\" src=\"img/e2e-verified.svg\" width=\"10\" height=\"12\" />", 
                "message": "Line 495 exceeds the maximum line length of 90.", 
                "line": 495
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                  : <img className=\"mx_RoomSettings_e2eIcon\" src=\"img/e2e-unencrypted.svg\" width=\"12\" height=\"12\" />", 
                "message": "Line 496 exceeds the maximum line length of 90.", 
                "line": 496
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18352, 
                        18355
                    ]
                }, 
                "source": "        var AliasSettings = sdk.getComponent(\"room_settings.AliasSettings\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 508
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18429, 
                        18432
                    ]
                }, 
                "source": "        var ColorSettings = sdk.getComponent(\"room_settings.ColorSettings\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 509
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18506, 
                        18509
                    ]
                }, 
                "source": "        var UrlPreviewSettings = sdk.getComponent(\"room_settings.UrlPreviewSettings\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 510
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18593, 
                        18596
                    ]
                }, 
                "source": "        var EditableText = sdk.getComponent('elements.EditableText');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 511
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var EditableText = sdk.getComponent('elements.EditableText');", 
                "message": "'EditableText' is assigned a value but never used.", 
                "line": 511
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18663, 
                        18666
                    ]
                }, 
                "source": "        var PowerSelector = sdk.getComponent('elements.PowerSelector');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 512
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18735, 
                        18738
                    ]
                }, 
                "source": "        var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 513
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "'Loader' is assigned a value but never used.", 
                "line": 513
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18795, 
                        18798
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 515
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18836, 
                        18839
                    ]
                }, 
                "source": "        var roomState = this.props.room.currentState;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 516
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18890, 
                        18893
                    ]
                }, 
                "source": "        var user_id = cli.credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 517
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var user_id = cli.credentials.userId;", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 517
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        18937, 
                        18940
                    ]
                }, 
                "source": "        var power_level_event = roomState.getStateEvents('m.room.power_levels', '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 519
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var power_level_event = roomState.getStateEvents('m.room.power_levels', '');", 
                "message": "Identifier 'power_level_event' is not in camel case.", 
                "line": 519
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19022, 
                        19025
                    ]
                }, 
                "source": "        var power_levels = power_level_event ? power_level_event.getContent() : {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 520
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var power_levels = power_level_event ? power_level_event.getContent() : {};", 
                "message": "Identifier 'power_levels' is not in camel case.", 
                "line": 520
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 28, 
                "source": "        var power_levels = power_level_event ? power_level_event.getContent() : {};", 
                "message": "Identifier 'power_level_event' is not in camel case.", 
                "line": 520
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19106, 
                        19109
                    ]
                }, 
                "source": "        var events_levels = power_levels.events || {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 521
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var events_levels = power_levels.events || {};", 
                "message": "Identifier 'events_levels' is not in camel case.", 
                "line": 521
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19161, 
                        19164
                    ]
                }, 
                "source": "        var user_levels = power_levels.users || {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 522
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var user_levels = power_levels.users || {};", 
                "message": "Identifier 'user_levels' is not in camel case.", 
                "line": 522
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19214, 
                        19217
                    ]
                }, 
                "source": "        var ban_level = parseIntWithDefault(power_levels.ban, 50);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 524
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var ban_level = parseIntWithDefault(power_levels.ban, 50);", 
                "message": "Identifier 'ban_level' is not in camel case.", 
                "line": 524
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19281, 
                        19284
                    ]
                }, 
                "source": "        var kick_level = parseIntWithDefault(power_levels.kick, 50);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 525
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var kick_level = parseIntWithDefault(power_levels.kick, 50);", 
                "message": "Identifier 'kick_level' is not in camel case.", 
                "line": 525
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19350, 
                        19353
                    ]
                }, 
                "source": "        var redact_level = parseIntWithDefault(power_levels.redact, 50);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 526
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var redact_level = parseIntWithDefault(power_levels.redact, 50);", 
                "message": "Identifier 'redact_level' is not in camel case.", 
                "line": 526
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19423, 
                        19426
                    ]
                }, 
                "source": "        var invite_level = parseIntWithDefault(power_levels.invite, 50);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 527
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var invite_level = parseIntWithDefault(power_levels.invite, 50);", 
                "message": "Identifier 'invite_level' is not in camel case.", 
                "line": 527
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19496, 
                        19499
                    ]
                }, 
                "source": "        var send_level = parseIntWithDefault(power_levels.events_default, 0);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 528
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var send_level = parseIntWithDefault(power_levels.events_default, 0);", 
                "message": "Identifier 'send_level' is not in camel case.", 
                "line": 528
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var state_level = power_level_event ? parseIntWithDefault(power_levels.state_default, 50) : 0;", 
                "message": "Line 529 exceeds the maximum line length of 90.", 
                "line": 529
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19574, 
                        19577
                    ]
                }, 
                "source": "        var state_level = power_level_event ? parseIntWithDefault(power_levels.state_default, 50) : 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 529
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var state_level = power_level_event ? parseIntWithDefault(power_levels.state_default, 50) : 0;", 
                "message": "Identifier 'state_level' is not in camel case.", 
                "line": 529
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 27, 
                "source": "        var state_level = power_level_event ? parseIntWithDefault(power_levels.state_default, 50) : 0;", 
                "message": "Identifier 'power_level_event' is not in camel case.", 
                "line": 529
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19677, 
                        19680
                    ]
                }, 
                "source": "        var default_user_level = parseIntWithDefault(power_levels.users_default, 0);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 530
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var default_user_level = parseIntWithDefault(power_levels.users_default, 0);", 
                "message": "Identifier 'default_user_level' is not in camel case.", 
                "line": 530
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19763, 
                        19766
                    ]
                }, 
                "source": "        var current_user_level = user_levels[user_id];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 532
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var current_user_level = user_levels[user_id];", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 532
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        if (current_user_level === undefined) {", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 533
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            current_user_level = default_user_level;", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 534
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 34, 
                "source": "            current_user_level = default_user_level;", 
                "message": "Identifier 'default_user_level' is not in camel case.", 
                "line": 534
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var can_change_levels = roomState.mayClientSendStateEvent(\"m.room.power_levels\", cli);", 
                "message": "Line 537 exceeds the maximum line length of 90.", 
                "line": 537
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        19930, 
                        19933
                    ]
                }, 
                "source": "        var can_change_levels = roomState.mayClientSendStateEvent(\"m.room.power_levels\", cli);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 537
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var can_change_levels = roomState.mayClientSendStateEvent(\"m.room.power_levels\", cli);", 
                "message": "Identifier 'can_change_levels' is not in camel case.", 
                "line": 537
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20026, 
                        20029
                    ]
                }, 
                "source": "        var canSetTag = !cli.isGuest();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 539
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20067, 
                        20070
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 541
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20093, 
                        20096
                    ]
                }, 
                "source": "        var userLevelsSection;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 543
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    { user } is a <PowerSelector value={ user_levels[user] } disabled={true}/>", 
                "message": "Line 552 exceeds the maximum line length of 90.", 
                "line": 552
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        20791, 
                        20800
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 558
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            userLevelsSection = <div>No users have specific privileges in this room.</div>;", 
                "message": "Line 560 exceeds the maximum line length of 90.", 
                "line": 560
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20918, 
                        20921
                    ]
                }, 
                "source": "        var banned = this.props.room.getMembersWithMembership(\"ban\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 563
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        20988, 
                        20991
                    ]
                }, 
                "source": "        var bannedUsersSection;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 564
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21556, 
                        21559
                    ]
                }, 
                "source": "        var unfederatableSection;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 581
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21888, 
                        21891
                    ]
                }, 
                "source": "        var leaveButton = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 590
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        21920, 
                        21923
                    ]
                }, 
                "source": "        var myMember = this.props.room.getMember(user_id);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 591
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_RoomSettings_leaveButton\" onClick={ this.onLeaveClick }>", 
                "message": "Line 595 exceeds the maximum line length of 90.", 
                "line": 595
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        22267, 
                        22280
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 599
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_RoomSettings_leaveButton\" onClick={ this.onForgetClick }>", 
                "message": "Line 602 exceeds the maximum line length of 90.", 
                "line": 602
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        22675, 
                        22678
                    ]
                }, 
                "source": "        var tags = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 612
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "source": "        var tagsSection = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 623
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var tagsSection =", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 625
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 17, 
                "source": "            var tagsSection =", 
                "message": "'tagsSection' is already defined.", 
                "line": 625
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                               onChange={ self._onTagChange.bind(self, tag.name) }/>", 
                "message": "Line 633 exceeds the maximum line length of 90.", 
                "line": 633
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 48, 
                "source": "                                               onChange={ self._onTagChange.bind(self, tag.name) }/>", 
                "message": "JSX props should not use .bind()", 
                "line": 633
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 59, 
                "source": "                                               onChange={ self._onTagChange.bind(self, tag.name) }/>", 
                "message": "JSX props should not use .bind()", 
                "line": 633
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        })) : (self.state.tags && self.state.tags.join) ? self.state.tags.join(\", \") : \"\"", 
                "message": "Line 636 exceeds the maximum line length of 90.", 
                "line": 636
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24147, 
                        24150
                    ]
                }, 
                "source": "        var historyVisibility = this.state.history_visibility || \"shared\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 643
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24223, 
                        24226
                    ]
                }, 
                "source": "        var addressWarning;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 645
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var aliasEvents = this.props.room.currentState.getStateEvents('m.room.aliases') || [];", 
                "message": "Line 646 exceeds the maximum line length of 90.", 
                "line": 646
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24251, 
                        24254
                    ]
                }, 
                "source": "        var aliasEvents = this.props.room.currentState.getStateEvents('m.room.aliases') || [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 646
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24346, 
                        24349
                    ]
                }, 
                "source": "        var aliasCount = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 647
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        24767, 
                        24770
                    ]
                }, 
                "source": "        var inviteGuestWarning;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 659
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (this.state.join_rule !== \"public\" && this.state.guest_access === \"forbidden\") {", 
                "message": "Line 660 exceeds the maximum line length of 90.", 
                "line": 660
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Guests cannot join this room even if explicitly invited. <a href=\"#\" onClick={ (e) => {", 
                "message": "Line 663 exceeds the maximum line length of 90.", 
                "line": 663
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 90, 
                "source": "                    Guests cannot join this room even if explicitly invited. <a href=\"#\" onClick={ (e) => {", 
                "message": "JSX props should not use arrow functions", 
                "line": 663
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25305, 
                        25308
                    ]
                }, 
                "source": "        var integrationsButton;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 670
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        25337, 
                        25340
                    ]
                }, 
                "source": "        var integrationsError;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 671
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_RoomSettings_integrationsButton\" onClick={ this.onManageIntegrations }>", 
                "message": "Line 683 exceeds the maximum line length of 90.", 
                "line": 683
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_RoomSettings_integrationsButton_error\" onClick={ this.onShowIntegrationsError }>", 
                "message": "Line 689 exceeds the maximum line length of 90.", 
                "line": 689
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_RoomSettings_integrationsButton\" style={{ opacity: 0.5 }}>", 
                "message": "Line 696 exceeds the maximum line length of 90.", 
                "line": 696
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                checked={this.state.join_rule === \"public\" && this.state.guest_access !== \"can_join\"}/>", 
                "message": "Line 725 exceeds the maximum line length of 90.", 
                "line": 725
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                checked={this.state.join_rule === \"public\" && this.state.guest_access === \"can_join\"}/>", 
                "message": "Line 732 exceeds the maximum line length of 90.", 
                "line": 732
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            <input type=\"checkbox\" disabled={ !roomState.mayClientSendStateEvent(\"m.room.aliases\", cli) }", 
                "message": "Line 739 exceeds the maximum line length of 90.", 
                "line": 739
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                   onChange={ this._onToggle.bind(this, \"isRoomPublished\", true, false)}", 
                "message": "Line 740 exceeds the maximum line length of 90.", 
                "line": 740
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 36, 
                "source": "                                   onChange={ this._onToggle.bind(this, \"isRoomPublished\", true, false)}", 
                "message": "JSX props should not use .bind()", 
                "line": 740
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 47, 
                "source": "                                   onChange={ this._onToggle.bind(this, \"isRoomPublished\", true, false)}", 
                "message": "JSX props should not use .bind()", 
                "line": 740
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            List this room in { MatrixClientPeg.get().getDomain() }'s room directory?", 
                "message": "Line 742 exceeds the maximum line length of 90.", 
                "line": 742
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }", 
                "message": "Line 749 exceeds the maximum line length of 90.", 
                "line": 749
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }", 
                "message": "Line 756 exceeds the maximum line length of 90.", 
                "line": 756
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            Members only (since the point in time of selecting this option)", 
                "message": "Line 759 exceeds the maximum line length of 90.", 
                "line": 759
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }", 
                "message": "Line 763 exceeds the maximum line length of 90.", 
                "line": 763
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                    disabled={ !roomState.mayClientSendStateEvent(\"m.room.history_visibility\", cli) }", 
                "message": "Line 770 exceeds the maximum line length of 90.", 
                "line": 770
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    canSetCanonicalAlias={ roomState.mayClientSendStateEvent(\"m.room.canonical_alias\", cli) }", 
                "message": "Line 788 exceeds the maximum line length of 90.", 
                "line": 788
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    canonicalAliasEvent={this.props.room.currentState.getStateEvents('m.room.canonical_alias', '')}", 
                "message": "Line 793 exceeds the maximum line length of 90.", 
                "line": 793
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    aliasEvents={this.props.room.currentState.getStateEvents('m.room.aliases')} />", 
                "message": "Line 794 exceeds the maximum line length of 90.", 
                "line": 794
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <span className=\"mx_RoomSettings_powerLevelKey\">The default role for new room members is </span>", 
                "message": "Line 801 exceeds the maximum line length of 90.", 
                "line": 801
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Line 802 exceeds the maximum line length of 90.", 
                "line": 802
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 67, 
                "source": "                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'default_user_level' is not in camel case.", 
                "line": 802
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 117, 
                "source": "                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'can_change_levels' is not in camel case.", 
                "line": 802
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 138, 
                "source": "                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 802
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 159, 
                "source": "                        <PowerSelector ref=\"users_default\" value={default_user_level} controlled={false} disabled={!can_change_levels || current_user_level < default_user_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'default_user_level' is not in camel case.", 
                "line": 802
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <span className=\"mx_RoomSettings_powerLevelKey\">To send messages, you must be a </span>", 
                "message": "Line 805 exceeds the maximum line length of 90.", 
                "line": 805
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Line 806 exceeds the maximum line length of 90.", 
                "line": 806
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 68, 
                "source": "                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'send_level' is not in camel case.", 
                "line": 806
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 110, 
                "source": "                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'can_change_levels' is not in camel case.", 
                "line": 806
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 131, 
                "source": "                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 806
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 152, 
                "source": "                        <PowerSelector ref=\"events_default\" value={send_level} controlled={false} disabled={!can_change_levels || current_user_level < send_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'send_level' is not in camel case.", 
                "line": 806
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <span className=\"mx_RoomSettings_powerLevelKey\">To invite users into the room, you must be a </span>", 
                "message": "Line 809 exceeds the maximum line length of 90.", 
                "line": 809
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Line 810 exceeds the maximum line length of 90.", 
                "line": 810
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 60, 
                "source": "                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'invite_level' is not in camel case.", 
                "line": 810
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 104, 
                "source": "                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'can_change_levels' is not in camel case.", 
                "line": 810
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 125, 
                "source": "                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 810
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 146, 
                "source": "                        <PowerSelector ref=\"invite\" value={invite_level} controlled={false} disabled={!can_change_levels || current_user_level < invite_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'invite_level' is not in camel case.", 
                "line": 810
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <span className=\"mx_RoomSettings_powerLevelKey\">To configure the room, you must be a </span>", 
                "message": "Line 813 exceeds the maximum line length of 90.", 
                "line": 813
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Line 814 exceeds the maximum line length of 90.", 
                "line": 814
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 67, 
                "source": "                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'state_level' is not in camel case.", 
                "line": 814
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 110, 
                "source": "                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'can_change_levels' is not in camel case.", 
                "line": 814
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 131, 
                "source": "                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 814
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 152, 
                "source": "                        <PowerSelector ref=\"state_default\" value={state_level} controlled={false} disabled={!can_change_levels || current_user_level < state_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'state_level' is not in camel case.", 
                "line": 814
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <span className=\"mx_RoomSettings_powerLevelKey\">To kick users, you must be a </span>", 
                "message": "Line 817 exceeds the maximum line length of 90.", 
                "line": 817
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Line 818 exceeds the maximum line length of 90.", 
                "line": 818
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 58, 
                "source": "                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'kick_level' is not in camel case.", 
                "line": 818
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 100, 
                "source": "                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'can_change_levels' is not in camel case.", 
                "line": 818
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 121, 
                "source": "                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 818
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 142, 
                "source": "                        <PowerSelector ref=\"kick\" value={kick_level} controlled={false} disabled={!can_change_levels || current_user_level < kick_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'kick_level' is not in camel case.", 
                "line": 818
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <span className=\"mx_RoomSettings_powerLevelKey\">To ban users, you must be a </span>", 
                "message": "Line 821 exceeds the maximum line length of 90.", 
                "line": 821
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Line 822 exceeds the maximum line length of 90.", 
                "line": 822
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 57, 
                "source": "                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'ban_level' is not in camel case.", 
                "line": 822
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 98, 
                "source": "                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'can_change_levels' is not in camel case.", 
                "line": 822
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 119, 
                "source": "                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 822
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 140, 
                "source": "                        <PowerSelector ref=\"ban\" value={ban_level} controlled={false} disabled={!can_change_levels || current_user_level < ban_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'ban_level' is not in camel case.", 
                "line": 822
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <span className=\"mx_RoomSettings_powerLevelKey\">To redact messages, you must be a </span>", 
                "message": "Line 825 exceeds the maximum line length of 90.", 
                "line": 825
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Line 826 exceeds the maximum line length of 90.", 
                "line": 826
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 60, 
                "source": "                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'redact_level' is not in camel case.", 
                "line": 826
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 104, 
                "source": "                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'can_change_levels' is not in camel case.", 
                "line": 826
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 125, 
                "source": "                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'current_user_level' is not in camel case.", 
                "line": 826
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 146, 
                "source": "                        <PowerSelector ref=\"redact\" value={redact_level} controlled={false} disabled={!can_change_levels || current_user_level < redact_level} onChange={this.onPowerLevelsChanged}/>", 
                "message": "Identifier 'redact_level' is not in camel case.", 
                "line": 826
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 62, 
                "source": "                    {Object.keys(events_levels).map(function(event_type, i) {", 
                "message": "Identifier 'event_type' is not in camel case.", 
                "line": 829
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 78, 
                "source": "                            <div className=\"mx_RoomSettings_powerLevel\" key={event_type}>", 
                "message": "Identifier 'event_type' is not in camel case.", 
                "line": 831
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                <span className=\"mx_RoomSettings_powerLevelKey\">To send events of type <code>{ event_type }</code>, you must be a </span>", 
                "message": "Line 832 exceeds the maximum line length of 90.", 
                "line": 832
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 112, 
                "source": "                                <span className=\"mx_RoomSettings_powerLevelKey\">To send events of type <code>{ event_type }</code>, you must be a </span>", 
                "message": "Identifier 'event_type' is not in camel case.", 
                "line": 832
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                <PowerSelector value={ events_levels[event_type] } controlled={false} disabled={true} onChange={self.onPowerLevelsChanged}/>", 
                "message": "Line 833 exceeds the maximum line length of 90.", 
                "line": 833
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        36088, 
                        36088
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 851
            }
        ], 
        "errorCount": 26, 
        "warningCount": 190, 
        "filePath": "src/components/views/rooms/RoomSettings.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "'ReactDOM' is assigned a value but never used.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        650, 
                        653
                    ]
                }, 
                "source": "var classNames = require('classnames');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        690, 
                        693
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        732, 
                        735
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        841, 
                        844
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        878, 
                        881
                    ]
                }, 
                "source": "var ContextualMenu = require('../../structures/ContextualMenu');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        943, 
                        946
                    ]
                }, 
                "source": "var RoomNotifs = require('../../../RoomNotifs');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        992, 
                        995
                    ]
                }, 
                "source": "var FormattingUtils = require('../../../utils/FormattingUtils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1118, 
                        1121
                    ]
                }, 
                "source": "var UserSettingsStore = require('../../../UserSettingsStore');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 13, 
                "fix": {
                    "text": "", 
                    "range": [
                        1934, 
                        1935
                    ]
                }, 
                "source": "            hover : false,", 
                "message": "Extra space after key 'hover'.", 
                "line": 57
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 13, 
                "fix": {
                    "text": "", 
                    "range": [
                        1966, 
                        1967
                    ]
                }, 
                "source": "            badgeHover : false,", 
                "message": "Extra space after key 'badgeHover'.", 
                "line": 58
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2516, 
                        2519
                    ]
                }, 
                "source": "        var dmRooms = DMRoomMap.shared().getUserIdForRoomId(roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 75
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3100, 
                        3103
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 96
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 26, 
                "fix": {
                    "text": "", 
                    "range": [
                        3463, 
                        3464
                    ]
                }, 
                "source": "        this.setState( { hover : true });", 
                "message": "Extra space after key 'hover'.", 
                "line": 110
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 26, 
                "fix": {
                    "text": "", 
                    "range": [
                        3578, 
                        3579
                    ]
                }, 
                "source": "        this.setState( { hover : false });", 
                "message": "Extra space after key 'hover'.", 
                "line": 115
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 30, 
                "fix": {
                    "text": "", 
                    "range": [
                        3894, 
                        3895
                    ]
                }, 
                "source": "            this.setState( { badgeHover : true } );", 
                "message": "Extra space after key 'badgeHover'.", 
                "line": 123
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 26, 
                "fix": {
                    "text": "", 
                    "range": [
                        3996, 
                        3997
                    ]
                }, 
                "source": "        this.setState( { badgeHover : false } );", 
                "message": "Extra space after key 'badgeHover'.", 
                "line": 128
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 47, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        4160, 
                        4162
                    ]
                }, 
                "source": "        if (!MatrixClientPeg.get().isGuest()) {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 133
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var NotificationStateMenu = sdk.getComponent('context_menus.NotificationStateContextMenu');", 
                "message": "Line 140 exceeds the maximum line length of 90.", 
                "line": 140
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4346, 
                        4349
                    ]
                }, 
                "source": "            var NotificationStateMenu = sdk.getComponent('context_menus.NotificationStateContextMenu');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 140
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4450, 
                        4453
                    ]
                }, 
                "source": "            var elementRect = e.target.getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 141
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4602, 
                        4605
                    ]
                }, 
                "source": "            var x = elementRect.right + window.pageXOffset + 3;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 143
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 53;", 
                "message": "Line 144 exceeds the maximum line length of 90.", 
                "line": 144
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4666, 
                        4669
                    ]
                }, 
                "source": "            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 53;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 144
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4758, 
                        4761
                    ]
                }, 
                "source": "            var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 145
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5200, 
                        5200
                    ]
                }, 
                "source": "                }", 
                "message": "Missing trailing comma.", 
                "line": 156
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 72, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        5551, 
                        5553
                    ]
                }, 
                "source": "        if (!MatrixClientPeg.get().isGuest() && !this.props.collapsed) {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 166
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5737, 
                        5740
                    ]
                }, 
                "source": "            var RoomTagMenu = sdk.getComponent('context_menus.RoomTagContextMenu');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 173
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5821, 
                        5824
                    ]
                }, 
                "source": "            var elementRect = e.target.getBoundingClientRect();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 174
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5973, 
                        5976
                    ]
                }, 
                "source": "            var x = elementRect.right + window.pageXOffset + 3;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 176
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 19;", 
                "message": "Line 177 exceeds the maximum line length of 90.", 
                "line": 177
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6037, 
                        6040
                    ]
                }, 
                "source": "            var y = (elementRect.top + (elementRect.height / 2) + window.pageYOffset) - 19;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 177
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6129, 
                        6132
                    ]
                }, 
                "source": "            var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 178
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                menuColour: UserSettingsStore.getSyncedSettings().theme === 'dark' ? \"#2d2d2d\" : \"#FFFFFF\",", 
                "message": "Line 182 exceeds the maximum line length of 90.", 
                "line": 182
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6593, 
                        6593
                    ]
                }, 
                "source": "                }", 
                "message": "Missing trailing comma.", 
                "line": 188
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6809, 
                        6812
                    ]
                }, 
                "source": "        var myUserId = MatrixClientPeg.get().credentials.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 197
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6874, 
                        6877
                    ]
                }, 
                "source": "        var me = this.props.room.currentState.members[myUserId];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 198
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6940, 
                        6943
                    ]
                }, 
                "source": "        var notificationCount = this.props.room.getUnreadNotificationCount();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 200
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7331, 
                        7334
                    ]
                }, 
                "source": "        var classes = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 207
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7821, 
                        7824
                    ]
                }, 
                "source": "        var avatarClasses = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 218
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7915, 
                        7918
                    ]
                }, 
                "source": "        var avatarContainerClasses = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 222
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8098, 
                        8101
                    ]
                }, 
                "source": "        var badgeClasses = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 227
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            'mx_RoomTile_badgeButton': this.state.badgeHover || this.state.notificationTagMenu,", 
                "message": "Line 229 exceeds the maximum line length of 90.", 
                "line": 229
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8430, 
                        8433
                    ]
                }, 
                "source": "        var name = this.props.room.name || this.props.room.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 234
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8607, 
                        8610
                    ]
                }, 
                "source": "        var badge;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 237
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8626, 
                        8629
                    ]
                }, 
                "source": "        var badgeContent;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 238
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8806, 
                        8809
                    ]
                }, 
                "source": "            var limitedCount = FormattingUtils.formatCount(notificationCount);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 243
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        badge = <div className={ badgeClasses } onClick={this.onBadgeClicked}>{ badgeContent }</div>;", 
                "message": "Line 249 exceeds the maximum line length of 90.", 
                "line": 249
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9182, 
                        9185
                    ]
                }, 
                "source": "        var label;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 252
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9201, 
                        9204
                    ]
                }, 
                "source": "        var tooltip;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 253
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9263, 
                        9266
                    ]
                }, 
                "source": "            var nameClasses = classNames({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 255
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                'mx_RoomTile_badgeShown': badges || this.state.badgeHover || this.state.notificationTagMenu,", 
                "message": "Line 258 exceeds the maximum line length of 90.", 
                "line": 258
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9576, 
                        9579
                    ]
                }, 
                "source": "                let nameSelected = <EmojiText>{name}</EmojiText>;", 
                "message": "'nameSelected' is never reassigned. Use 'const' instead.", 
                "line": 262
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                label = <div title={ name } className={ nameClasses }>{ nameSelected }</div>;", 
                "message": "Line 264 exceeds the maximum line length of 90.", 
                "line": 264
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                label = <EmojiText element=\"div\" title={ name } className={ nameClasses }>{name}</EmojiText>;", 
                "message": "Line 266 exceeds the maximum line length of 90.", 
                "line": 266
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9917, 
                        9920
                    ]
                }, 
                "source": "            var RoomTooltip = sdk.getComponent(\"rooms.RoomTooltip\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 269
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            tooltip = <RoomTooltip className=\"mx_RoomTile_tooltip\" room={this.props.room} />;", 
                "message": "Line 270 exceeds the maximum line length of 90.", 
                "line": 270
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10343, 
                        10346
                    ]
                }, 
                "source": "        var RoomAvatar = sdk.getComponent('avatars.RoomAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 279
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10409, 
                        10412
                    ]
                }, 
                "source": "        var directMessageIndicator;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 281
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "         directMessageIndicator = <img src=\"img/icon_person.svg\" className=\"mx_RoomTile_dm\" width=\"11\" height=\"13\" alt=\"dm\"/>;", 
                "message": "Line 283 exceeds the maximum line length of 90.", 
                "line": 283
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10754, 
                        10757
                    ]
                }, 
                "source": "        var isDragging = this.props.isDragging;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 288
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var isDragging = this.props.isDragging;", 
                "message": "'isDragging' is assigned a value but never used.", 
                "line": 288
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10802, 
                        10805
                    ]
                }, 
                "source": "        var connectDragSource = this.props.connectDragSource;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 289
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10864, 
                        10867
                    ]
                }, 
                "source": "        var connectDropTarget = this.props.connectDropTarget;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 290
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <AccessibleButton className={classes} tabIndex=\"0\" onClick={this.onClick} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>", 
                "message": "Line 295 exceeds the maximum line length of 90.", 
                "line": 295
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <div className=\"mx_RoomTile_avatar_menu\" onClick={this.onAvatarClicked}>", 
                "message": "Line 297 exceeds the maximum line length of 90.", 
                "line": 297
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12028, 
                        12028
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 318
            }
        ], 
        "errorCount": 5, 
        "warningCount": 64, 
        "filePath": "src/components/views/rooms/RoomTile.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        577, 
                        580
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        607, 
                        610
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        838, 
                        841
                    ]
                }, 
                "source": "        var room = this.props.room;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        874, 
                        877
                    ]
                }, 
                "source": "        var topic = room.currentState.getStateEvents('m.room.topic', '');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1128, 
                        1131
                    ]
                }, 
                "source": "        var EditableText = sdk.getComponent(\"elements.EditableText\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 40
            }
        ], 
        "errorCount": 0, 
        "warningCount": 5, 
        "filePath": "src/components/views/rooms/RoomTopicEditor.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        567, 
                        570
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        597, 
                        600
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "'MatrixClientPeg' is assigned a value but never used.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        656, 
                        659
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "'Modal' is assigned a value but never used.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        695, 
                        698
                    ]
                }, 
                "source": "var sdk = require(\"../../../index\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        732, 
                        735
                    ]
                }, 
                "source": "var GeminiScrollbar = require('react-gemini-scrollbar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        962, 
                        965
                    ]
                }, 
                "source": "var SearchableEntityList = React.createClass({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1420, 
                        1420
                    ]
                }, 
                "source": "        truncateAt: React.PropTypes.number", 
                "message": "Missing trailing comma.", 
                "line": 34
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1705, 
                        1705
                    ]
                }, 
                "source": "            onQueryChanged: function(input) {}", 
                "message": "Missing trailing comma.", 
                "line": 44
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 68, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1941, 
                        1941
                    ]
                }, 
                "source": "            results: this.getSearchResults(\"\", this.props.entities)", 
                "message": "Missing trailing comma.", 
                "line": 53
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 80, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2186, 
                        2186
                    ]
                }, 
                "source": "            results: this.getSearchResults(this.state.query, newProps.entities)", 
                "message": "Missing trailing comma.", 
                "line": 60
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 71, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2712, 
                        2712
                    ]
                }, 
                "source": "            results: this.getSearchResults(input, this.props.entities)", 
                "message": "Missing trailing comma.", 
                "line": 77
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2776, 
                        2779
                    ]
                }, 
                "source": "        var q = ev.target.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 82
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 67, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3068, 
                        3068
                    ]
                }, 
                "source": "            results: this.getSearchResults(q, this.props.entities)", 
                "message": "Missing trailing comma.", 
                "line": 87
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 27, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3993, 
                        3993
                    ]
                }, 
                "source": "            truncateAt: -1", 
                "message": "Missing trailing comma.", 
                "line": 114
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4087, 
                        4090
                    ]
                }, 
                "source": "        var EntityTile = sdk.getComponent(\"rooms.EntityTile\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 119
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4150, 
                        4153
                    ]
                }, 
                "source": "        var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 120
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";", 
                "message": "Line 121 exceeds the maximum line length of 90.", 
                "line": 121
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4215, 
                        4218
                    ]
                }, 
                "source": "        var text = \"and \" + overflowCount + \" other\" + (overflowCount > 1 ? \"s\" : \"\") + \"...\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 121
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4641, 
                        4644
                    ]
                }, 
                "source": "        var inputBox;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 131
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    <input className=\"mx_SearchableEntityList_query\" id=\"mx_SearchableEntityList_query\" type=\"text\"", 
                "message": "Line 136 exceeds the maximum line length of 90.", 
                "line": 136
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 25, 
                "source": "                        onFocus= {() => { this.setState({ focused: true }); }}", 
                "message": "JSX props should not use arrow functions", 
                "line": 138
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 25, 
                "source": "                        onBlur= {() => { this.setState({ focused: false }); }}", 
                "message": "JSX props should not use arrow functions", 
                "line": 139
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5278, 
                        5281
                    ]
                }, 
                "source": "        var list;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 145
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5443, 
                        5446
                    ]
                }, 
                "source": "                var TruncatedList = sdk.getComponent(\"elements.TruncatedList\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 148
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        6008, 
                        6021
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 158
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <div className={ \"mx_SearchableEntityList \" + (list ? \"mx_SearchableEntityList_expanded\" : \"\") }>", 
                "message": "Line 177 exceeds the maximum line length of 90.", 
                "line": 177
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                { list ? <div className=\"mx_SearchableEntityList_hrWrapper\"><hr/></div> : '' }", 
                "message": "Line 180 exceeds the maximum line length of 90.", 
                "line": 180
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6875, 
                        6875
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 183
            }
        ], 
        "errorCount": 12, 
        "warningCount": 18, 
        "filePath": "src/components/views/rooms/SearchableEntityList.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        577, 
                        580
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        607, 
                        610
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1161, 
                        1164
                    ]
                }, 
                "source": "        var DateSeparator = sdk.getComponent('messages.DateSeparator');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 39
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1233, 
                        1236
                    ]
                }, 
                "source": "        var EventTile = sdk.getComponent('rooms.EventTile');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 40
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1294, 
                        1297
                    ]
                }, 
                "source": "        var result = this.props.searchResult;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 41
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1340, 
                        1343
                    ]
                }, 
                "source": "        var mxEv = result.context.getEvent();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 42
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1386, 
                        1389
                    ]
                }, 
                "source": "        var eventId = mxEv.getId();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 43
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1423, 
                        1426
                    ]
                }, 
                "source": "        var ts1 = mxEv.getTs();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 45
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1455, 
                        1458
                    ]
                }, 
                "source": "        var ret = [<DateSeparator key={ts1 + \"-search\"} ts={ts1}/>];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 46
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1525, 
                        1528
                    ]
                }, 
                "source": "        var timeline = result.context.getTimeline();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 48
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var j = 0; j < timeline.length; j++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1634, 
                        1637
                    ]
                }, 
                "source": "            var ev = timeline[j];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var highlights;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 51
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1696, 
                        1699
                    ]
                }, 
                "source": "            var contextual = (j != result.context.getOurEventIndex());", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 52
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                ret.push(<EventTile key={eventId+\"+\"+j} mxEvent={ev} contextual={contextual} highlights={highlights}", 
                "message": "Line 57 exceeds the maximum line length of 90.", 
                "line": 57
            }
        ], 
        "errorCount": 0, 
        "warningCount": 15, 
        "filePath": "src/components/views/rooms/SearchResultTile.js"
    }, 
    {
        "messages": [], 
        "errorCount": 0, 
        "warningCount": 0, 
        "filePath": "src/components/views/rooms/SimpleRoomHeader.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "'MatrixClientPeg' is assigned a value but never used.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        672, 
                        675
                    ]
                }, 
                "source": "var CommandEntry = require(\"../../../TabCompleteEntries\").CommandEntry;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 55, 
                "fix": {
                    "text": ",", 
                    "range": [
                        889, 
                        889
                    ]
                }, 
                "source": "        tabComplete: React.PropTypes.object.isRequired", 
                "message": "Missing trailing comma.", 
                "line": 27
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                         className={ \"mx_TabCompleteBar_item \" + (entry instanceof CommandEntry ? \"mx_TabCompleteBar_command\" : \"\") }", 
                "message": "Line 36 exceeds the maximum line length of 90.", 
                "line": 36
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                         onClick={this.props.tabComplete.onEntryClick.bind(this.props.tabComplete, entry)} >", 
                "message": "Line 37 exceeds the maximum line length of 90.", 
                "line": 37
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 26, 
                "source": "                         onClick={this.props.tabComplete.onEntryClick.bind(this.props.tabComplete, entry)} >", 
                "message": "JSX props should not use .bind()", 
                "line": 37
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 35, 
                "source": "                         onClick={this.props.tabComplete.onEntryClick.bind(this.props.tabComplete, entry)} >", 
                "message": "JSX props should not use .bind()", 
                "line": 37
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1663, 
                        1663
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 47
            }
        ], 
        "errorCount": 5, 
        "warningCount": 5, 
        "filePath": "src/components/views/rooms/TabCompleteBar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        577, 
                        580
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        607, 
                        610
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var sdk = require('../../../index');", 
                "message": "'sdk' is assigned a value but never used.", 
                "line": 20
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Unread messages. <span style={{ textDecoration: 'underline' }} onClick={this.props.onCloseClick}>Mark all read</span>", 
                "message": "Line 38 exceeds the maximum line length of 90.", 
                "line": 38
            }
        ], 
        "errorCount": 1, 
        "warningCount": 3, 
        "filePath": "src/components/views/rooms/TopUnreadMessagesBar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var Avatar = require(\"../../../Avatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        655, 
                        658
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "'MatrixClientPeg' is assigned a value but never used.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        714, 
                        717
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        751, 
                        754
                    ]
                }, 
                "source": "var dis = require('../../../dispatcher');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var dis = require('../../../dispatcher');", 
                "message": "'dis' is assigned a value but never used.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        793, 
                        796
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "'Modal' is assigned a value but never used.", 
                "line": 25
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 45, 
                "fix": {
                    "text": ",", 
                    "range": [
                        961, 
                        961
                    ]
                }, 
                "source": "        user: React.PropTypes.any.isRequired // User", 
                "message": "Missing trailing comma.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1011, 
                        1014
                    ]
                }, 
                "source": "        var EntityTile = sdk.getComponent(\"rooms.EntityTile\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 35
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1074, 
                        1077
                    ]
                }, 
                "source": "        var user = this.props.user;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1110, 
                        1113
                    ]
                }, 
                "source": "        var name = user.displayName || user.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1162, 
                        1165
                    ]
                }, 
                "source": "        var active = -1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 38
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1381, 
                        1384
                    ]
                }, 
                "source": "        var BaseAvatar = sdk.getComponent('avatars.BaseAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 44
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1446, 
                        1449
                    ]
                }, 
                "source": "        var avatarJsx = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 45
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <EntityTile {...this.props} presenceState={user.presence} presenceActiveAgo={active}", 
                "message": "Line 51 exceeds the maximum line length of 90.", 
                "line": 51
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1905, 
                        1905
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 55
            }
        ], 
        "errorCount": 5, 
        "warningCount": 13, 
        "filePath": "src/components/views/rooms/UserTile.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        598, 
                        601
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        657, 
                        660
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 42, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1115, 
                        1115
                    ]
                }, 
                "source": "        className: React.PropTypes.string", 
                "message": "Missing trailing comma.", 
                "line": 30
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1813, 
                        1813
                    ]
                }, 
                "source": "            avatarUrl: newProps.initialAvatarUrl", 
                "message": "Missing trailing comma.", 
                "line": 61
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1882, 
                        1885
                    ]
                }, 
                "source": "        var newUrl = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 66
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1966, 
                        1966
                    ]
                }, 
                "source": "            phase: this.Phases.Uploading", 
                "message": "Missing trailing comma.", 
                "line": 69
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1987, 
                        1990
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 71
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2012, 
                        2015
                    ]
                }, 
                "source": "        var httpPromise = MatrixClientPeg.get().uploadContent(file).then(function(url) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 72
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 23, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2350, 
                        2350
                    ]
                }, 
                "source": "                    ''", 
                "message": "Missing trailing comma.", 
                "line": 79
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 70, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2661, 
                        2661
                    ]
                }, 
                "source": "                avatarUrl: MatrixClientPeg.get().mxcUrlToHttp(newUrl)", 
                "message": "Missing trailing comma.", 
                "line": 89
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2775, 
                        2775
                    ]
                }, 
                "source": "                phase: self.Phases.Error", 
                "message": "Missing trailing comma.", 
                "line": 93
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 59, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3120, 
                        3120
                    ]
                }, 
                "source": "            errorText: \"Failed to upload profile picture!\"", 
                "message": "Missing trailing comma.", 
                "line": 108
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3174, 
                        3177
                    ]
                }, 
                "source": "        var avatarImg;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 113
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3393, 
                        3396
                    ]
                }, 
                "source": "            var RoomAvatar = sdk.getComponent('avatars.RoomAvatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 117
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            avatarImg = <RoomAvatar room={this.props.room} width={ this.props.width } height={ this.props.height } resizeMethod='crop' />;", 
                "message": "Line 118 exceeds the maximum line length of 90.", 
                "line": 118
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3618, 
                        3621
                    ]
                }, 
                "source": "            var BaseAvatar = sdk.getComponent(\"avatars.BaseAvatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 120
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            avatarImg = <BaseAvatar width={this.props.width} height={this.props.height} resizeMethod='crop'", 
                "message": "Line 122 exceeds the maximum line length of 90.", 
                "line": 122
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        name='?' idName={ MatrixClientPeg.get().getUserIdLocalpart() } url={this.state.avatarUrl} />;", 
                "message": "Line 123 exceeds the maximum line length of 90.", 
                "line": 123
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4033, 
                        4036
                    ]
                }, 
                "source": "        var uploadSection;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 149
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4955, 
                        4955
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 154
            }
        ], 
        "errorCount": 8, 
        "warningCount": 14, 
        "filePath": "src/components/views/settings/ChangeAvatar.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        582, 
                        585
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        612, 
                        615
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        649, 
                        652
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        827, 
                        830
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        954, 
                        957
                    ]
                }, 
                "source": "            var displayname = result.displayname;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        1185, 
                        1202
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 32
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 34, 
                "source": "    _changeDisplayName: function(new_displayname) {", 
                "message": "Identifier 'new_displayname' is not in camel case.", 
                "line": 43
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1521, 
                        1524
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 44
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1737, 
                        1740
                    ]
                }, 
                "source": "        var EditableTextContainer = sdk.getComponent('elements.EditableTextContainer');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 51
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2040, 
                        2040
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 58
            }
        ], 
        "errorCount": 1, 
        "warningCount": 9, 
        "filePath": "src/components/views/settings/ChangeDisplayName.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        672, 
                        675
                    ]
                }, 
                "source": "var Modal = require(\"../../../Modal\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        711, 
                        714
                    ]
                }, 
                "source": "var sdk = require(\"../../../index\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1222, 
                        1222
                    ]
                }, 
                "source": "        buttonClassName: React.PropTypes.string", 
                "message": "Missing trailing comma.", 
                "line": 34
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 23, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1321, 
                        1321
                    ]
                }, 
                "source": "        Error: \"error\"", 
                "message": "Missing trailing comma.", 
                "line": 40
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 60, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1662, 
                        1662
                    ]
                }, 
                "source": "                        error: \"New passwords don't match.\"", 
                "message": "Missing trailing comma.", 
                "line": 50
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1835, 
                        1835
                    ]
                }, 
                "source": "                        error: \"Passwords can't be empty\"", 
                "message": "Missing trailing comma.", 
                "line": 54
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1890, 
                        1890
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 57
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 36, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1996, 
                        1996
                    ]
                }, 
                "source": "            phase: this.Phases.Edit", 
                "message": "Missing trailing comma.", 
                "line": 63
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 30, 
                "source": "    changePassword: function(old_password, new_password) {", 
                "message": "Identifier 'old_password' is not in camel case.", 
                "line": 67
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 44, 
                "source": "    changePassword: function(old_password, new_password) {", 
                "message": "Identifier 'new_password' is not in camel case.", 
                "line": 67
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2083, 
                        2086
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 68
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2125, 
                        2128
                    ]
                }, 
                "source": "        var QuestionDialog = sdk.getComponent(\"dialogs.QuestionDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 70
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Changing password will currently reset any end-to-end encryption keys on all devices,", 
                "message": "Line 75 exceeds the maximum line length of 90.", 
                "line": 75
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    This will be <a href=\"https://github.com/vector-im/riot-web/issues/2671\">improved shortly</a>,", 
                "message": "Line 77 exceeds the maximum line length of 90.", 
                "line": 77
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2788, 
                        2791
                    ]
                }, 
                "source": "                    var authDict = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 83
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2955, 
                        2955
                    ]
                }, 
                "source": "                        password: old_password", 
                "message": "Missing trailing comma.", 
                "line": 86
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 53, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3068, 
                        3068
                    ]
                }, 
                "source": "                        phase: this.Phases.Uploading", 
                "message": "Missing trailing comma.", 
                "line": 90
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3114, 
                        3117
                    ]
                }, 
                "source": "                    var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 93
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 52, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3481, 
                        3481
                    ]
                }, 
                "source": "                            phase: self.Phases.Edit", 
                "message": "Missing trailing comma.", 
                "line": 100
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3634, 
                        3637
                    ]
                }, 
                "source": "        var old_password = this.refs.old_input.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 109
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var old_password = this.refs.old_input.value;", 
                "message": "Identifier 'old_password' is not in camel case.", 
                "line": 109
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3688, 
                        3691
                    ]
                }, 
                "source": "        var new_password = this.refs.new_input.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 110
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var new_password = this.refs.new_input.value;", 
                "message": "Identifier 'new_password' is not in camel case.", 
                "line": 110
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3742, 
                        3745
                    ]
                }, 
                "source": "        var confirm_password = this.refs.confirm_input.value;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 111
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var confirm_password = this.refs.confirm_input.value;", 
                "message": "Identifier 'confirm_password' is not in camel case.", 
                "line": 111
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3804, 
                        3807
                    ]
                }, 
                "source": "        var err = this.props.onCheckPassword(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 112
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 57, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3898, 
                        3898
                    ]
                }, 
                "source": "            old_password, new_password, confirm_password", 
                "message": "Missing trailing comma.", 
                "line": 113
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        3975, 
                        3984
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 117
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4103, 
                        4106
                    ]
                }, 
                "source": "        var rowClassName = this.props.rowClassName;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 124
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4155, 
                        4158
                    ]
                }, 
                "source": "        var rowLabelClassName = this.props.rowLabelClassName;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 125
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4217, 
                        4220
                    ]
                }, 
                "source": "        var rowInputClassName = this.props.rowInputClassName;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4279, 
                        4282
                    ]
                }, 
                "source": "        var buttonClassName = this.props.buttonClassName;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 127
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                <input id=\"password2\" type=\"password\" ref=\"confirm_input\" />", 
                "message": "Line 154 exceeds the maximum line length of 90.", 
                "line": 154
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var Loader = sdk.getComponent(\"elements.Spinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 164
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6410, 
                        6410
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 171
            }
        ], 
        "errorCount": 11, 
        "warningCount": 26, 
        "filePath": "src/components/views/settings/ChangePassword.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1493, 
                        1496
                    ]
                }, 
                "source": "                var errtxt;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1957, 
                        1957
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 63
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 68
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'a'.", 
                "line": 68
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'b'.", 
                "line": 68
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const removed_id = device.device_id;", 
                "message": "Identifier 'removed_id' is not in camel case.", 
                "line": 88
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 17, 
                "fix": {
                    "text": "(d)", 
                    "range": [
                        2778, 
                        2779
                    ]
                }, 
                "source": "                d => { return d.device_id != removed_id; }", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 91
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 46, 
                "source": "                d => { return d.device_id != removed_id; }", 
                "message": "Identifier 'removed_id' is not in camel case.", 
                "line": 91
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 59, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2820, 
                        2820
                    ]
                }, 
                "source": "                d => { return d.device_id != removed_id; }", 
                "message": "Missing trailing comma.", 
                "line": 91
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2935, 
                        2938
                    ]
                }, 
                "source": "        var DevicesPanelEntry = sdk.getComponent('settings.DevicesPanelEntry');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 98
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 16, 
                "source": "               onDeleted={()=>{this._onDeviceDeleted(device);}} />", 
                "message": "JSX props should not use arrow functions", 
                "line": 101
            }
        ], 
        "errorCount": 3, 
        "warningCount": 8, 
        "filePath": "src/components/views/settings/DevicesPanel.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2090, 
                        2093
                    ]
                }, 
                "source": "            var InteractiveAuthDialog = sdk.getComponent(\"dialogs.InteractiveAuthDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 65
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3024, 
                        3024
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 92
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4136, 
                        4139
                    ]
                }, 
                "source": "        var myDeviceClass = '';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 131
            }
        ], 
        "errorCount": 1, 
        "warningCount": 2, 
        "filePath": "src/components/views/settings/DevicesPanelEntry.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        582, 
                        585
                    ]
                }, 
                "source": "var React = require(\"react\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        612, 
                        615
                    ]
                }, 
                "source": "var Notifier = require(\"../../../Notifier\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        657, 
                        660
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1235, 
                        1238
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 45
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2053, 
                        2053
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 73
            }
        ], 
        "errorCount": 1, 
        "warningCount": 4, 
        "filePath": "src/components/views/settings/EnableNotificationsButton.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        567, 
                        570
                    ]
                }, 
                "source": "var React = require(\"react\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        597, 
                        600
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        639, 
                        642
                    ]
                }, 
                "source": "var CallHandler = require(\"../../../CallHandler\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        690, 
                        693
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        727, 
                        730
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"../../../MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2447, 
                        2450
                    ]
                }, 
                "source": "        var call;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 75
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2501, 
                        2504
                    ]
                }, 
                "source": "            var roomId = this.props.room.roomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 78
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 9, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        2855, 
                        2857
                    ]
                }, 
                "source": "        }", 
                "message": "Block must not be padded by blank lines.", 
                "line": 89
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2866, 
                        2875
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 89
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (call && call.type === \"video\" && call.call_state !== \"ended\" && call.call_state !== \"ringing\") {", 
                "message": "Line 104 exceeds the maximum line length of 90.", 
                "line": 104
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        4076, 
                        4085
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 111
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4529, 
                        4532
                    ]
                }, 
                "source": "        var VideoView = sdk.getComponent('voip.VideoView');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 128
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4590, 
                        4593
                    ]
                }, 
                "source": "        var voice;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 130
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4704, 
                        4707
                    ]
                }, 
                "source": "            var callRoom = MatrixClientPeg.get().getRoom(this.state.call.roomId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 132
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            voice = <div className=\"mx_CallView_voice\" onClick={ this.props.onClick }>Active call ({ callRoom.name })</div>;", 
                "message": "Line 133 exceeds the maximum line length of 90.", 
                "line": 133
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5208, 
                        5208
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 145
            }
        ], 
        "errorCount": 1, 
        "warningCount": 15, 
        "filePath": "src/components/views/voip/CallView.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        567, 
                        570
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        597, 
                        600
                    ]
                }, 
                "source": "var MatrixClientPeg = require('../../../MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        656, 
                        659
                    ]
                }, 
                "source": "var dis = require(\"../../../dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        698, 
                        701
                    ]
                }, 
                "source": "var CallHandler = require(\"../../../CallHandler\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var CallHandler = require(\"../../../CallHandler\");", 
                "message": "'CallHandler' is assigned a value but never used.", 
                "line": 19
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 52, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1031, 
                        1031
                    ]
                }, 
                "source": "            room_id: this.props.incomingCall.roomId", 
                "message": "Missing trailing comma.", 
                "line": 31
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 52, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1188, 
                        1188
                    ]
                }, 
                "source": "            room_id: this.props.incomingCall.roomId", 
                "message": "Missing trailing comma.", 
                "line": 38
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1242, 
                        1245
                    ]
                }, 
                "source": "        var room = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 43
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1399, 
                        1402
                    ]
                }, 
                "source": "        var caller = room ? room.name : \"unknown\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 48
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <img className=\"mx_IncomingCallBox_chevron\" src=\"img/chevron-left.png\" width=\"9\" height=\"16\" />", 
                "message": "Line 52 exceeds the maximum line length of 90.", 
                "line": 52
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Incoming { this.props.incomingCall ? this.props.incomingCall.type : '' } call from { caller }", 
                "message": "Line 54 exceeds the maximum line length of 90.", 
                "line": 54
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <div className=\"mx_IncomingCallBox_buttons_decline\" onClick={this.onRejectClick}>", 
                "message": "Line 58 exceeds the maximum line length of 90.", 
                "line": 58
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        <div className=\"mx_IncomingCallBox_buttons_accept\" onClick={this.onAnswerClick}>", 
                "message": "Line 63 exceeds the maximum line length of 90.", 
                "line": 63
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2495, 
                        2495
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 70
            }
        ], 
        "errorCount": 4, 
        "warningCount": 10, 
        "filePath": "src/components/views/voip/IncomingCallBox.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "src/components/views/voip/VideoFeed.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var ReactDOM = require('react-dom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        651, 
                        654
                    ]
                }, 
                "source": "var sdk = require('../../../index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        688, 
                        691
                    ]
                }, 
                "source": "var dis = require('../../../dispatcher');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1704, 
                        1707
                    ]
                }, 
                "source": "        var remoteAudioElement = document.getElementById(\"remoteAudio\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 56
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            console.error(\"Failed to find remoteAudio element - cannot play audio!  You need to add an <audio/> to the DOM.\");", 
                "message": "Line 58 exceeds the maximum line length of 90.", 
                "line": 58
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var element = this.container;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 77
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2451, 
                        2454
                    ]
                }, 
                "source": "                    var requestMethod = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 79
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        2782, 
                        2799
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 86
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2826, 
                        2829
                    ]
                }, 
                "source": "                    var exitMethod = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 88
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3285, 
                        3288
                    ]
                }, 
                "source": "        var VideoFeed = sdk.getComponent('voip.VideoFeed');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 103
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3433, 
                        3436
                    ]
                }, 
                "source": "        var fullscreenElement = (document.fullscreenElement ||", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 106
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3598, 
                        3601
                    ]
                }, 
                "source": "        var maxVideoHeight = fullscreenElement ? null : this.props.maxHeight;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 109
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <div className=\"mx_VideoView\" ref={this.setContainer} onClick={ this.props.onClick }>", 
                "message": "Line 112 exceeds the maximum line length of 90.", 
                "line": 112
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4164, 
                        4164
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 122
            }
        ], 
        "errorCount": 1, 
        "warningCount": 14, 
        "filePath": "src/components/views/voip/VideoView.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var q = require('q');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        605, 
                        608
                    ]
                }, 
                "source": "var extend = require('./extend');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        639, 
                        642
                    ]
                }, 
                "source": "var dis = require('./dispatcher');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        674, 
                        677
                    ]
                }, 
                "source": "var MatrixClientPeg = require('./MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        726, 
                        729
                    ]
                }, 
                "source": "var sdk = require('./index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        756, 
                        759
                    ]
                }, 
                "source": "var Modal = require('./Modal');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        789, 
                        792
                    ]
                }, 
                "source": "var encrypt = require(\"browser-encrypt-attachment\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1996, 
                        1999
                    ]
                }, 
                "source": "    var targetWidth = inputWidth;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 56
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2030, 
                        2033
                    ]
                }, 
                "source": "    var targetHeight = inputHeight;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 57
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 33, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2980, 
                        2980
                    ]
                }, 
                "source": "            thumbnail: thumbnail", 
                "message": "Missing trailing comma.", 
                "line": 83
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Expected JSDoc for 'imageFile' but found 'file'.", 
                "line": 90
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Expected JSDoc for 'imageFile' but found 'The'.", 
                "line": 122
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4300, 
                        4303
                    ]
                }, 
                "source": "    var thumbnailType = \"image/png\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 131
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4424, 
                        4427
                    ]
                }, 
                "source": "    var imageInfo;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 136
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Expected JSDoc for 'videoFile' but found 'file'.", 
                "line": 149
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Expected JSDoc for 'videoFile' but found 'The'.", 
                "line": 182
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6252, 
                        6255
                    ]
                }, 
                "source": "    var videoInfo;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 193
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'file'.", 
                "line": 206
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9523, 
                        9523
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 282
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 63, 
                "fix": {
                    "text": "(imageInfo)", 
                    "range": [
                        9880, 
                        9889
                    ]
                }, 
                "source": "            infoForImageFile(matrixClient, roomId, file).then(imageInfo=>{", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 293
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 16, 
                "fix": {
                    "text": "(error)", 
                    "range": [
                        9988, 
                        9993
                    ]
                }, 
                "source": "            }, error=>{", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 296
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 63, 
                "fix": {
                    "text": "(videoInfo)", 
                    "range": [
                        10407, 
                        10416
                    ]
                }, 
                "source": "            infoForVideoFile(matrixClient, roomId, file).then(videoInfo=>{", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 306
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 16, 
                "fix": {
                    "text": "(error)", 
                    "range": [
                        10515, 
                        10520
                    ]
                }, 
                "source": "            }, error=>{", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 309
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10949, 
                        10952
                    ]
                }, 
                "source": "        var error;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 327
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        11248, 
                        11248
                    ]
                }, 
                "source": "                matrixClient, roomId, file", 
                "message": "Missing trailing comma.", 
                "line": 333
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11852, 
                        11855
                    ]
                }, 
                "source": "                var desc = \"The file '\"+upload.fileName+\"' failed to upload.\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 350
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    desc = \"The file '\"+upload.fileName+\"' exceeds this home server's size limit for uploads\";", 
                "message": "Line 352 exceeds the maximum line length of 90.", 
                "line": 352
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12106, 
                        12109
                    ]
                }, 
                "source": "                var ErrorDialog = sdk.getComponent(\"dialogs.ErrorDialog\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 354
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12296, 
                        12296
                    ]
                }, 
                "source": "                    description: desc", 
                "message": "Missing trailing comma.", 
                "line": 357
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var i = 0; i < this.inprogress.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 362
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12502, 
                        12505
                    ]
                }, 
                "source": "                var k = inprogressKeys[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 363
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        12818, 
                        12831
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 371
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13108, 
                        13111
                    ]
                }, 
                "source": "        var upload;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 384
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < this.inprogress.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 385
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13191, 
                        13194
                    ]
                }, 
                "source": "            var k = inprogressKeys[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 386
            }
        ], 
        "errorCount": 4, 
        "warningCount": 31, 
        "filePath": "src/ContentMessages.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var MatrixClientPeg = require('./MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        620, 
                        623
                    ]
                }, 
                "source": "var Modal = require('./Modal');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        652, 
                        655
                    ]
                }, 
                "source": "var sdk = require('./index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        682, 
                        685
                    ]
                }, 
                "source": "var dis = require(\"./dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        717, 
                        720
                    ]
                }, 
                "source": "var Rooms = require(\"./Rooms\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        750, 
                        753
                    ]
                }, 
                "source": "var q = require('q');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 25
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                description: \"Guest users can't create new rooms. Please register to create room and start a chat.\"", 
                "message": "Line 47 exceeds the maximum line length of 90.", 
                "line": 47
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 116, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1727, 
                        1727
                    ]
                }, 
                "source": "                description: \"Guest users can't create new rooms. Please register to create room and start a chat.\"", 
                "message": "Missing trailing comma.", 
                "line": 47
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2621, 
                        2621
                    ]
                }, 
                "source": "                guest_access: 'can_join'", 
                "message": "Missing trailing comma.", 
                "line": 72
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 10, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2714, 
                        2714
                    ]
                }, 
                "source": "        }", 
                "message": "Missing trailing comma.", 
                "line": 76
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3527, 
                        3527
                    ]
                }, 
                "source": "            room_id: roomId", 
                "message": "Missing trailing comma.", 
                "line": 101
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3712, 
                        3712
                    ]
                }, 
                "source": "            description: err.toString()", 
                "message": "Missing trailing comma.", 
                "line": 107
            }
        ], 
        "errorCount": 5, 
        "warningCount": 8, 
        "filePath": "src/createRoom.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];", 
                "message": "Line 20 exceeds the maximum line length of 90.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        645, 
                        648
                    ]
                }, 
                "source": "var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        984, 
                        987
                    ]
                }, 
                "source": "        var now = new Date();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        1145, 
                        1154
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 33
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            return days[date.getDay()] + \" \" + pad(date.getHours()) + ':' + pad(date.getMinutes());", 
                "message": "Line 35 exceeds the maximum line length of 90.", 
                "line": 35
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        1332, 
                        1341
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 36
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            return days[date.getDay()] + \", \" + months[date.getMonth()] + \" \" + date.getDate() + \" \" + pad(date.getHours()) + ':' + pad(date.getMinutes());", 
                "message": "Line 38 exceeds the maximum line length of 90.", 
                "line": 38
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return ('00' + date.getHours()).slice(-2) + ':' + ('00' + date.getMinutes()).slice(-2);", 
                "message": "Line 49 exceeds the maximum line length of 90.", 
                "line": 49
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2008, 
                        2008
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 50
            }
        ], 
        "errorCount": 1, 
        "warningCount": 9, 
        "filePath": "src/DateUtils.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var flux = require(\"flux\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "src/dispatcher.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var EMAIL_ADDRESS_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        739, 
                        739
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 22
            }
        ], 
        "errorCount": 1, 
        "warningCount": 1, 
        "filePath": "src/email.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var React = require('react');", 
                "message": "'React' is assigned a value but never used.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        598, 
                        601
                    ]
                }, 
                "source": "var sdk = require('./index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1107, 
                        1110
                    ]
                }, 
                "source": "    var parts = name.split(\" \");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 10, 
                "source": "    for (var i = 0; i < parts.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1842, 
                        1845
                    ]
                }, 
                "source": "        var MemberTile = sdk.getComponent(\"rooms.MemberTile\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 70
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2453, 
                        2456
                    ]
                }, 
                "source": "        var UserTile = sdk.getComponent(\"rooms.UserTile\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 96
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                showInviteButton={this.showInviteButton} onClick={this.onClick.bind(this)} />", 
                "message": "Line 99 exceeds the maximum line length of 90.", 
                "line": 99
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 58, 
                "source": "                showInviteButton={this.showInviteButton} onClick={this.onClick.bind(this)} />", 
                "message": "JSX props should not use .bind()", 
                "line": 99
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2732, 
                        2735
                    ]
                }, 
                "source": "        var name = this.model.displayName || this.model.userId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 104
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2927, 
                        2930
                    ]
                }, 
                "source": "        var entity = new Entity();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 112
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3666, 
                        3666
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 140
            }
        ], 
        "errorCount": 3, 
        "warningCount": 9, 
        "filePath": "src/Entities.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 10, 
                "fix": {
                    "text": "let", 
                    "range": [
                        631, 
                        634
                    ]
                }, 
                "source": "    for (var i in src) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "src/extend.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var React = require('react');", 
                "message": "'React' is assigned a value but never used.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        613, 
                        616
                    ]
                }, 
                "source": "var sanitizeHtml = require('sanitize-html');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        658, 
                        661
                    ]
                }, 
                "source": "var highlight = require('highlight.js');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var highlight = require('highlight.js');", 
                "message": "'highlight' is assigned a value but never used.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        699, 
                        702
                    ]
                }, 
                "source": "var linkifyMatrix = require('./linkify-matrix');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 5, 
                "source": "    let replaceWith, unicode, alt;", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 36
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if ( (typeof unicodeChar === 'undefined') || (unicodeChar === '') || (!(unicodeChar in emojione.jsEscapeMap)) ) {", 
                "message": "Line 40 exceeds the maximum line length of 90.", 
                "line": 40
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        1575, 
                        1584
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 43
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            alt = (emojione.unicodeAlt) ? emojione.convert(unicode.toUpperCase()) : mappedUnicode[unicode];", 
                "message": "Line 49 exceeds the maximum line length of 90.", 
                "line": 49
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            replaceWith = `<img class=\"mx_emojione\" title=\"${title}\" alt=\"${alt}\" src=\"${emojione.imagePathSVG}${unicode}.svg${emojione.cacheBustParam}\"/>`;", 
                "message": "Line 52 exceeds the maximum line length of 90.", 
                "line": 52
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2901, 
                        2904
                    ]
                }, 
                "source": "var sanitizeHtmlParams = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 83
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 70, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3325, 
                        3325
                    ]
                }, 
                "source": "        'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre'", 
                "message": "Missing trailing comma.", 
                "line": 90
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4347, 
                        4350
                    ]
                }, 
                "source": "                var m;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 116
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4744, 
                        4747
                    ]
                }, 
                "source": "                    var entity = m[1];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 126
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 21, 
                "fix": {
                    "text": "                    ", 
                    "range": [
                        4888, 
                        4909
                    ]
                }, 
                "source": "                    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 129
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 40, 
                "fix": {
                    "text": "", 
                    "range": [
                        5249, 
                        5250
                    ]
                }, 
                "source": "            return { tagName: tagName, attribs : attribs };", 
                "message": "Extra space after key 'attribs'.", 
                "line": 137
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 148
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5905, 
                        5908
                    ]
                }, 
                "source": "        var lastOffset = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 160
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5933, 
                        5936
                    ]
                }, 
                "source": "        var offset;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 161
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5953, 
                        5956
                    ]
                }, 
                "source": "        var nodes = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 162
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5978, 
                        5981
                    ]
                }, 
                "source": "        var safeHighlight = safeHighlights[0];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 164
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        while ((offset = safeSnippet.toLowerCase().indexOf(safeHighlight.toLowerCase(), lastOffset)) >= 0) {", 
                "message": "Line 165 exceeds the maximum line length of 90.", 
                "line": 165
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var subSnippet = safeSnippet.substring(lastOffset, offset);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 168
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                nodes = nodes.concat(this._applySubHighlights(subSnippet, safeHighlights));", 
                "message": "Line 169 exceeds the maximum line length of 90.", 
                "line": 169
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6518, 
                        6521
                    ]
                }, 
                "source": "            var endOffset = offset + safeHighlight.length;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 174
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            nodes.push(this._processSnippet(safeSnippet.substring(offset, endOffset), true));", 
                "message": "Line 175 exceeds the maximum line length of 90.", 
                "line": 175
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        7244, 
                        7253
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 192
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7841, 
                        7844
                    ]
                }, 
                "source": "        var span = \"<span class=\\\"\"+this.highlightClass+\"\\\">\"", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 214
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 7, 
                "source": "class TextHighlighter extends BaseHighlighter {", 
                "message": "'TextHighlighter' is defined but never used.", 
                "line": 225
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8520, 
                        8523
                    ]
                }, 
                "source": "        var key = this._key++;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 239
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8552, 
                        8555
                    ]
                }, 
                "source": "        var node =", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 241
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9208, 
                        9211
                    ]
                }, 
                "source": "    var isHtml = (content.format === \"org.matrix.custom.html\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 266
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9272, 
                        9275
                    ]
                }, 
                "source": "    let body = isHtml ? content.formatted_body : escape(content.body);", 
                "message": "'body' is never reassigned. Use 'const' instead.", 
                "line": 267
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9344, 
                        9347
                    ]
                }, 
                "source": "    var safeBody;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 269
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var highlighter = new HtmlHighlighter(\"mx_EventTile_searchHighlight\", opts.highlightLink);", 
                "message": "Line 276 exceeds the maximum line length of 90.", 
                "line": 276
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9850, 
                        9853
                    ]
                }, 
                "source": "            var highlighter = new HtmlHighlighter(\"mx_EventTile_searchHighlight\", opts.highlightLink);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 276
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9953, 
                        9956
                    ]
                }, 
                "source": "            var safeHighlights = highlights.map(function(highlight) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 277
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 5, 
                "fix": {
                    "text": "    ", 
                    "range": [
                        10484, 
                        10489
                    ]
                }, 
                "source": "    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 287
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10587, 
                        10590
                    ]
                }, 
                "source": "    let contentBodyTrimmed = content.body.trim();", 
                "message": "'contentBodyTrimmed' is never reassigned. Use 'const' instead.", 
                "line": 293
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10637, 
                        10640
                    ]
                }, 
                "source": "    let match = EMOJI_REGEX.exec(contentBodyTrimmed);", 
                "message": "'match' is never reassigned. Use 'const' instead.", 
                "line": 294
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10691, 
                        10694
                    ]
                }, 
                "source": "    let emojiBody = match && match[0] && match[0].length === contentBodyTrimmed.length;", 
                "message": "'emojiBody' is never reassigned. Use 'const' instead.", 
                "line": 295
            }
        ], 
        "errorCount": 4, 
        "warningCount": 38, 
        "filePath": "src/HtmlUtils.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 21
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'fullWidth'.", 
                "line": 21
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'fullHeight'.", 
                "line": 21
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'thumbWidth'.", 
                "line": 21
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'thumbHeight'.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1793, 
                        1796
                    ]
                }, 
                "source": "        var widthMulti = thumbWidth / fullWidth;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 45
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1842, 
                        1845
                    ]
                }, 
                "source": "        var heightMulti = thumbHeight / fullHeight;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 46
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        2071, 
                        2080
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 50
            }
        ], 
        "errorCount": 0, 
        "warningCount": 8, 
        "filePath": "src/ImageUtils.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var Skinner = require('./Skinner');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "src/index.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 50, 
                "fix": {
                    "text": ";", 
                    "range": [
                        799, 
                        799
                    ]
                }, 
                "source": "const mxidRegex = /^@\\S+:(?:\\S+\\.\\S+|localhost)$/", 
                "message": "Missing semicolon.", 
                "line": 23
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc return type.", 
                "line": 51
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Expected JSDoc for 'roomId' but found 'The'.", 
                "line": 51
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Expected JSDoc for 'addrs' but found 'Array'.", 
                "line": 51
            }
        ], 
        "errorCount": 1, 
        "warningCount": 3, 
        "filePath": "src/Invite.js"
    }, 
    {
        "messages": [], 
        "errorCount": 0, 
        "warningCount": 0, 
        "filePath": "src/KeyCode.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 27
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'opts'.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4337, 
                        4340
                    ]
                }, 
                "source": "    var client = Matrix.createClient({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 125
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5406, 
                        5409
                    ]
                }, 
                "source": "    var client = Matrix.createClient({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 157
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 11, 
                "source": "    const hs_url = localStorage.getItem(\"mx_hs_url\");", 
                "message": "Identifier 'hs_url' is not in camel case.", 
                "line": 185
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 11, 
                "source": "    const is_url = localStorage.getItem(\"mx_is_url\") || 'https://matrix.org';", 
                "message": "Identifier 'is_url' is not in camel case.", 
                "line": 186
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 11, 
                "source": "    const access_token = localStorage.getItem(\"mx_access_token\");", 
                "message": "Identifier 'access_token' is not in camel case.", 
                "line": 187
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 11, 
                "source": "    const user_id = localStorage.getItem(\"mx_user_id\");", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 188
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 11, 
                "source": "    const device_id = localStorage.getItem(\"mx_device_id\");", 
                "message": "Identifier 'device_id' is not in camel case.", 
                "line": 189
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 9, 
                "source": "    let is_guest;", 
                "message": "Identifier 'is_guest' is not in camel case.", 
                "line": 191
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 9, 
                "source": "        is_guest = localStorage.getItem(\"mx_is_guest\") === \"true\";", 
                "message": "Identifier 'is_guest' is not in camel case.", 
                "line": 193
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 9, 
                "source": "        is_guest = localStorage.getItem(\"matrix-is-guest\") === \"true\";", 
                "message": "Identifier 'is_guest' is not in camel case.", 
                "line": 196
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 9, 
                "source": "    if (access_token && user_id && hs_url) {", 
                "message": "Identifier 'access_token' is not in camel case.", 
                "line": 199
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 25, 
                "source": "    if (access_token && user_id && hs_url) {", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 199
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 36, 
                "source": "    if (access_token && user_id && hs_url) {", 
                "message": "Identifier 'hs_url' is not in camel case.", 
                "line": 199
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7271, 
                        7274
                    ]
                }, 
                "source": "            var msg = e.message;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 214
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 275
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 10, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10724, 
                        10724
                    ]
                }, 
                "source": "        }", 
                "message": "Missing trailing comma.", 
                "line": 303
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12415, 
                        12418
                    ]
                }, 
                "source": "    var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 360
            }
        ], 
        "errorCount": 1, 
        "warningCount": 18, 
        "filePath": "src/Lifecycle.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        625, 
                        628
                    ]
                }, 
                "source": "    var TT = linkify.scanner.TOKENS;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        682, 
                        685
                    ]
                }, 
                "source": "    var MT = linkify.parser.TOKENS;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        718, 
                        721
                    ]
                }, 
                "source": "    var MultiToken = MT.Base;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        748, 
                        751
                    ]
                }, 
                "source": "    var S_START = linkify.parser.start;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        throw new Error(\"linkify-matrix requires linkifyjs 2.1.1: this version is too old.\");", 
                "message": "Line 26 exceeds the maximum line length of 90.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        929, 
                        932
                    ]
                }, 
                "source": "    var ROOMALIAS = function(value) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1118, 
                        1121
                    ]
                }, 
                "source": "    var S_HASH = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1163, 
                        1166
                    ]
                }, 
                "source": "    var S_HASH_NAME = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1213, 
                        1216
                    ]
                }, 
                "source": "    var S_HASH_NAME_COLON = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 38
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1269, 
                        1272
                    ]
                }, 
                "source": "    var S_HASH_NAME_COLON_DOMAIN = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 39
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1332, 
                        1335
                    ]
                }, 
                "source": "    var S_HASH_NAME_COLON_DOMAIN_DOT = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 40
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1399, 
                        1402
                    ]
                }, 
                "source": "    var S_ROOMALIAS = new linkify.parser.State(ROOMALIAS);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 41
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1459, 
                        1462
                    ]
                }, 
                "source": "    var roomname_tokens = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 43
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 9, 
                "source": "    var roomname_tokens = [", 
                "message": "Identifier 'roomname_tokens' is not in camel case.", 
                "line": 43
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2349, 
                        2352
                    ]
                }, 
                "source": "    var USERID = function(value) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 72
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2529, 
                        2532
                    ]
                }, 
                "source": "    var S_AT = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 79
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2572, 
                        2575
                    ]
                }, 
                "source": "    var S_AT_NAME = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 80
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2620, 
                        2623
                    ]
                }, 
                "source": "    var S_AT_NAME_COLON = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 81
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2674, 
                        2677
                    ]
                }, 
                "source": "    var S_AT_NAME_COLON_DOMAIN = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 82
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2735, 
                        2738
                    ]
                }, 
                "source": "    var S_AT_NAME_COLON_DOMAIN_DOT = new linkify.parser.State();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 83
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2800, 
                        2803
                    ]
                }, 
                "source": "    var S_USERID = new linkify.parser.State(USERID);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 84
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2854, 
                        2857
                    ]
                }, 
                "source": "    var username_tokens = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 86
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 9, 
                "source": "    var username_tokens = [", 
                "message": "Identifier 'username_tokens' is not in camel case.", 
                "line": 86
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3785, 
                        3788
                    ]
                }, 
                "source": "var escapeRegExp = function(string) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 117
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "matrixLinkify.MATRIXTO_URL_PATTERN = \"^(?:https?:\\/\\/)?(?:www\\\\.)?matrix\\\\.to/#/((#|@|!).*)\";", 
                "message": "Line 128 exceeds the maximum line length of 90.", 
                "line": 128
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4624, 
                        4624
                    ]
                }, 
                "source": "                    }", 
                "message": "Missing trailing comma.", 
                "line": 138
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4822, 
                        4822
                    ]
                }, 
                "source": "                    }", 
                "message": "Missing trailing comma.", 
                "line": 144
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var m;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 155
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5428, 
                        5431
                    ]
                }, 
                "source": "                    var entity = m[1];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 163
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 21, 
                "fix": {
                    "text": "                    ", 
                    "range": [
                        5564, 
                        5585
                    ]
                }, 
                "source": "                    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 166
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        6022, 
                        6035
                    ]
                }, 
                "source": "            {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 184
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        6079, 
                        6092
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 186
            }
        ], 
        "errorCount": 2, 
        "warningCount": 30, 
        "filePath": "src/linkify-matrix.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        let is_plain = true;", 
                "message": "Identifier 'is_plain' is not in camel case.", 
                "line": 41
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "            is_plain = false;", 
                "message": "Identifier 'is_plain' is not in camel case.", 
                "line": 44
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const dummy_renderer = new commonmark.HtmlRenderer();", 
                "message": "Identifier 'dummy_renderer' is not in camel case.", 
                "line": 47
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const dummy_parser = new commonmark.Parser();", 
                "message": "Identifier 'dummy_parser' is not in camel case.", 
                "line": 56
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 16, 
                "source": "        return is_plain;", 
                "message": "Identifier 'is_plain' is not in camel case.", 
                "line": 59
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const real_paragraph = this.renderer.paragraph;", 
                "message": "Identifier 'real_paragraph' is not in camel case.", 
                "line": 63
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2653, 
                        2656
                    ]
                }, 
                "source": "            var par = node;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 71
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2894, 
                        2897
                    ]
                }, 
                "source": "        var parsed = this.parser.parse(this.input);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 80
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2946, 
                        2949
                    ]
                }, 
                "source": "        var rendered = this.renderer.render(parsed);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 81
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 35, 
                "source": "        this.renderer.paragraph = real_paragraph;", 
                "message": "Identifier 'real_paragraph' is not in camel case.", 
                "line": 83
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const real_paragraph = this.renderer.paragraph;", 
                "message": "Identifier 'real_paragraph' is not in camel case.", 
                "line": 89
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3918, 
                        3921
                    ]
                }, 
                "source": "            var par = node;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 105
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4207, 
                        4210
                    ]
                }, 
                "source": "        var parsed = this.parser.parse(this.input);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 117
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4259, 
                        4262
                    ]
                }, 
                "source": "        var rendered = this.renderer.render(parsed);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 118
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 35, 
                "source": "        this.renderer.paragraph = real_paragraph;", 
                "message": "Identifier 'real_paragraph' is not in camel case.", 
                "line": 120
            }
        ], 
        "errorCount": 0, 
        "warningCount": 15, 
        "filePath": "src/Markdown.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-undef", 
                "column": 11, 
                "source": "interface MatrixClientCreds {", 
                "message": "'MatrixClientCreds' is not defined.", 
                "line": 26
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-undef", 
                "column": 12, 
                "source": "    get(): MatrixClient {", 
                "message": "'MatrixClient' is not defined.", 
                "line": 54
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'creds'.", 
                "line": 62
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-undef", 
                "column": 30, 
                "source": "    replaceUsingCreds(creds: MatrixClientCreds) {", 
                "message": "'MatrixClientCreds' is not defined.", 
                "line": 66
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-undef", 
                "column": 23, 
                "source": "    getCredentials(): MatrixClientCreds {", 
                "message": "'MatrixClientCreds' is not defined.", 
                "line": 77
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 88
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-undef", 
                "column": 26, 
                "source": "    _createClient(creds: MatrixClientCreds) {", 
                "message": "'MatrixClientCreds' is not defined.", 
                "line": 101
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3197, 
                        3200
                    ]
                }, 
                "source": "        var opts = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 102
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3897, 
                        3900
                    ]
                }, 
                "source": "        var notifTimelineSet = new EventTimelineSet(null, {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 123
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 34, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3982, 
                        3982
                    ]
                }, 
                "source": "            timelineSupport: true", 
                "message": "Missing trailing comma.", 
                "line": 124
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        notifTimelineSet.getLiveTimeline().setPaginationToken(\"\", EventTimeline.BACKWARDS);", 
                "message": "Line 127 exceeds the maximum line length of 90.", 
                "line": 127
            }
        ], 
        "errorCount": 6, 
        "warningCount": 5, 
        "filePath": "src/MatrixClientPeg.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        584, 
                        587
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        614, 
                        617
                    ]
                }, 
                "source": "var ReactDOM = require('react-dom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 16, 
                "source": "        const {loader, ...otherProps} = this.props;", 
                "message": "'loader' is assigned a value but never used.", 
                "line": 59
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 104
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3605, 
                        3608
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 124
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3817, 
                        3820
                    ]
                }, 
                "source": "        var closeDialog = function() {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 130
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 73, 
                "source": "            if (props && props.onFinished) props.onFinished.apply(null, arguments);", 
                "endLine": 131, 
                "endColumn": 82, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 131
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3944, 
                        3947
                    ]
                }, 
                "source": "            var i = self._modals.indexOf(modal);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 132
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5245, 
                        5248
                    ]
                }, 
                "source": "        var modal = this._modals[0];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 178
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5282, 
                        5285
                    ]
                }, 
                "source": "        var dialog = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 179
            }
        ], 
        "errorCount": 1, 
        "warningCount": 9, 
        "filePath": "src/Modal.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        583, 
                        586
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"./MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        635, 
                        638
                    ]
                }, 
                "source": "var PlatformPeg = require(\"./PlatformPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        679, 
                        682
                    ]
                }, 
                "source": "var TextForEvent = require('./TextForEvent');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        725, 
                        728
                    ]
                }, 
                "source": "var Avatar = require('./Avatar');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        759, 
                        762
                    ]
                }, 
                "source": "var dis = require(\"./dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        881, 
                        884
                    ]
                }, 
                "source": "var Notifier = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1354, 
                        1357
                    ]
                }, 
                "source": "        var msg = this.notificationMessageForEvent(ev);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 52
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1437, 
                        1440
                    ]
                }, 
                "source": "        var title;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 55
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2193, 
                        2196
                    ]
                }, 
                "source": "        var avatarUrl = ev.sender ? Avatar.avatarUrlForMember(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 72
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2285, 
                        2285
                    ]
                }, 
                "source": "            ev.sender, 40, 40, 'crop'", 
                "message": "Missing trailing comma.", 
                "line": 73
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            if (this.notifsByRoom[ev.getRoomId()] === undefined) this.notifsByRoom[ev.getRoomId()] = [];", 
                "message": "Line 81 exceeds the maximum line length of 90.", 
                "line": 81
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2782, 
                        2785
                    ]
                }, 
                "source": "        var e = document.getElementById(\"messageAudio\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 87
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            MatrixClientPeg.get().removeListener('Room.timeline', this.boundOnRoomTimeline);", 
                "message": "Line 107 exceeds the maximum line length of 90.", 
                "line": 107
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 32, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4995, 
                        4995
                    ]
                }, 
                "source": "                    value: true", 
                "message": "Missing trailing comma.", 
                "line": 145
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 29, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5468, 
                        5468
                    ]
                }, 
                "source": "                value: false", 
                "message": "Missing trailing comma.", 
                "line": 156
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5774, 
                        5777
                    ]
                }, 
                "source": "        var enabled = global.localStorage.getItem('notifications_enabled');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 169
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6243, 
                        6246
                    ]
                }, 
                "source": "        var enabled = global.localStorage.getItem(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 182
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 36, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6782, 
                        6782
                    ]
                }, 
                "source": "            value: this.isEnabled()", 
                "message": "Missing trailing comma.", 
                "line": 196
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        7449, 
                        7458
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 219
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if (ev.sender && ev.sender.userId == MatrixClientPeg.get().credentials.userId) return;", 
                "message": "Line 229 exceeds the maximum line length of 90.", 
                "line": 229
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7979, 
                        7982
                    ]
                }, 
                "source": "        var actions = MatrixClientPeg.get().getPushActionsForEvent(ev);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 232
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9184, 
                        9184
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 259
            }
        ], 
        "errorCount": 5, 
        "warningCount": 17, 
        "filePath": "src/Notifier.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        962, 
                        965
                    ]
                }, 
                "source": "    var results = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        984, 
                        987
                    ]
                }, 
                "source": "    var delta = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var itemDelta = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 51
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 81
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'objA'.", 
                "line": 81
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'objB'.", 
                "line": 81
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3565, 
                        3568
                    ]
                }, 
                "source": "    var keysA = Object.keys(objA);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 95
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3600, 
                        3603
                    ]
                }, 
                "source": "    var keysB = Object.keys(objB);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 96
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 10, 
                "source": "    for (var i = 0; i < keysA.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 102
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3755, 
                        3758
                    ]
                }, 
                "source": "        var key = keysA[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 103
            }
        ], 
        "errorCount": 0, 
        "warningCount": 10, 
        "filePath": "src/ObjectUtils.js"
    }, 
    {
        "messages": [], 
        "errorCount": 0, 
        "warningCount": 0, 
        "filePath": "src/PageTypes.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var Matrix = require(\"matrix-js-sdk\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1337, 
                        1337
                    ]
                }, 
                "source": "            idBaseUrl: identityUrl", 
                "message": "Missing trailing comma.", 
                "line": 36
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return this.client.requestPasswordEmailToken(emailAddress, this.clientSecret, 1).then((res) => {", 
                "message": "Line 51 exceeds the maximum line length of 90.", 
                "line": 51
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 53, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3126, 
                        3126
                    ]
                }, 
                "source": "                id_server: this.identityServerDomain", 
                "message": "Missing trailing comma.", 
                "line": 77
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3140, 
                        3140
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 78
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                err.message = \"Failed to verify email address: make sure you clicked the link in the email\";", 
                "message": "Line 81 exceeds the maximum line length of 90.", 
                "line": 81
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        3353, 
                        3366
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 82
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                err.message = \"Your email address does not appear to be associated with a Matrix ID on this Homeserver.\";", 
                "message": "Line 84 exceeds the maximum line length of 90.", 
                "line": 84
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        3536, 
                        3549
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 85
            }
        ], 
        "errorCount": 3, 
        "warningCount": 6, 
        "filePath": "src/PasswordReset.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 29
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'plaf'.", 
                "line": 37
            }
        ], 
        "errorCount": 0, 
        "warningCount": 2, 
        "filePath": "src/PlatformPeg.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"./MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        620, 
                        623
                    ]
                }, 
                "source": "var dis = require(\"./dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        723, 
                        726
                    ]
                }, 
                "source": "var UNAVAILABLE_TIME_MS = 3 * 60 * 1000; // 3 mins", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        774, 
                        777
                    ]
                }, 
                "source": "var PRESENCE_STATES = [\"online\", \"offline\", \"unavailable\"];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2153, 
                        2156
                    ]
                }, 
                "source": "        var old_state = this.state;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 74
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var old_state = this.state;", 
                "message": "Identifier 'old_state' is not in camel case.", 
                "line": 74
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2357, 
                        2360
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 81
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 26, 
                "source": "            self.state = old_state;", 
                "message": "Identifier 'old_state' is not in camel case.", 
                "line": 86
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3022, 
                        3025
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 107
            }
        ], 
        "errorCount": 0, 
        "warningCount": 9, 
        "filePath": "src/Presence.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'minIntervalMs'.", 
                "line": 17
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'f'.", 
                "line": 17
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1122, 
                        1125
                    ]
                }, 
                "source": "    var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 32
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1143, 
                        1146
                    ]
                }, 
                "source": "    var wrapper = function() {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1178, 
                        1181
                    ]
                }, 
                "source": "        var now = Date.now();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 21, 
                "source": "            f.apply(this);", 
                "message": "Unexpected 'this'.", 
                "line": 37
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 29, 
                "source": "                    f.apply(this);", 
                "message": "Unexpected 'this'.", 
                "line": 43
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 54, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1636, 
                        1636
                    ]
                }, 
                "source": "                (self.lastCall + minIntervalMs) - now", 
                "message": "Missing trailing comma.", 
                "line": 46
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1991, 
                        1994
                    ]
                }, 
                "source": "    var _bind = wrapper.bind;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 61
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2057, 
                        2060
                    ]
                }, 
                "source": "        var rebound = _bind.apply(this, arguments);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 63
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 41, 
                "source": "        var rebound = _bind.apply(this, arguments);", 
                "endLine": 63, 
                "endColumn": 50, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 63
            }
        ], 
        "errorCount": 3, 
        "warningCount": 9, 
        "filePath": "src/ratelimitedfunc.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var MatrixClientPeg = require('./MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        620, 
                        623
                    ]
                }, 
                "source": "var dis = require('./dispatcher');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 68, 
                "fix": {
                    "text": ",", 
                    "range": [
                        815, 
                        815
                    ]
                }, 
                "source": "            event, MatrixClientPeg.get().getRoom(event.getRoomId())", 
                "message": "Missing trailing comma.", 
                "line": 23
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 29, 
                "fix": {
                    "text": ",", 
                    "range": [
                        939, 
                        939
                    ]
                }, 
                "source": "                event: event", 
                "message": "Missing trailing comma.", 
                "line": 27
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 29, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1082, 
                        1082
                    ]
                }, 
                "source": "                event: event", 
                "message": "Missing trailing comma.", 
                "line": 32
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1308, 
                        1308
                    ]
                }, 
                "source": "            event: event", 
                "message": "Missing trailing comma.", 
                "line": 41
            }
        ], 
        "errorCount": 4, 
        "warningCount": 2, 
        "filePath": "src/Resend.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import React from 'react';", 
                "message": "'React' is defined but never used.", 
                "line": 1
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "    Editor,", 
                "message": "'Editor' is defined but never used.", 
                "line": 3
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "    DefaultDraftBlockRenderMap,", 
                "message": "'DefaultDraftBlockRenderMap' is defined but never used.", 
                "line": 9
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "    DefaultDraftInlineStyle,", 
                "message": "'DefaultDraftInlineStyle' is defined but never used.", 
                "line": 10
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 5, 
                "source": "    let replaceWith, unicode, alt;", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 40
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 9, 
                "source": "    let replaceWith, unicode, alt;", 
                "message": "'replaceWith' is defined but never used.", 
                "line": 40
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 31, 
                "source": "    let replaceWith, unicode, alt;", 
                "message": "'alt' is defined but never used.", 
                "line": 40
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        1295, 
                        1298
                    ]
                }, 
                "source": "        let mappedUnicode = emojione.mapUnicodeToShort();", 
                "message": "'mappedUnicode' is never reassigned. Use 'const' instead.", 
                "line": 43
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        let mappedUnicode = emojione.mapUnicodeToShort();", 
                "message": "'mappedUnicode' is assigned a value but never used.", 
                "line": 43
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        if ( (typeof unicodeChar === 'undefined') || (unicodeChar === '') || (!(unicodeChar in emojione.jsEscapeMap)) ) {", 
                "message": "Line 47 exceeds the maximum line length of 90.", 
                "line": 47
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'callback'.", 
                "line": 60
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'regex'.", 
                "line": 60
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'contentBlock'.", 
                "line": 60
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "function findWithRegex(regex, contentBlock: ContentBlock, callback: (start: number, end: number) => any) {", 
                "message": "Line 64 exceeds the maximum line length of 90.", 
                "line": 64
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 5, 
                "source": "    let matchArr, start;", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 66
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 5, 
                "fix": {
                    "text": "const", 
                    "range": [
                        2491, 
                        2494
                    ]
                }, 
                "source": "let emojiDecorator = {", 
                "message": "'emojiDecorator' is never reassigned. Use 'const' instead.", 
                "line": 74
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        2661, 
                        2664
                    ]
                }, 
                "source": "        let uri = unicodeToEmojiUri(props.children[0].props.text);", 
                "message": "'uri' is never reassigned. Use 'const' instead.", 
                "line": 79
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        2728, 
                        2731
                    ]
                }, 
                "source": "        let shortname = emojione.toShort(props.children[0].props.text);", 
                "message": "'shortname' is never reassigned. Use 'const' instead.", 
                "line": 80
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        2800, 
                        2803
                    ]
                }, 
                "source": "        let style = {", 
                "message": "'style' is never reassigned. Use 'const' instead.", 
                "line": 81
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return (<span title={shortname} style={style}><span style={{opacity: 0}}>{props.children}</span></span>);", 
                "message": "Line 90 exceeds the maximum line length of 90.", 
                "line": 90
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 94
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'scope'.", 
                "line": 94
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3355, 
                        3358
                    ]
                }, 
                "source": "    let MemberAvatar = sdk.getComponent('avatars.MemberAvatar');", 
                "message": "'MemberAvatar' is never reassigned. Use 'const' instead.", 
                "line": 98
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 9, 
                "source": "    let usernameDecorator = {", 
                "message": "'usernameDecorator' is assigned a value but never used.", 
                "line": 100
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3421, 
                        3424
                    ]
                }, 
                "source": "    let usernameDecorator = {", 
                "message": "'usernameDecorator' is never reassigned. Use 'const' instead.", 
                "line": 100
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3617, 
                        3620
                    ]
                }, 
                "source": "            let member = scope.room.getMember(props.children[0].props.text);", 
                "message": "'member' is never reassigned. Use 'const' instead.", 
                "line": 105
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 17, 
                "source": "            let name = member ? member.name : null;", 
                "message": "'name' is assigned a value but never used.", 
                "line": 107
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3779, 
                        3782
                    ]
                }, 
                "source": "            let name = member ? member.name : null;", 
                "message": "'name' is never reassigned. Use 'const' instead.", 
                "line": 107
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            let avatar = member ? <MemberAvatar member={member} width={16} height={16}/> : null;", 
                "message": "Line 108 exceeds the maximum line length of 90.", 
                "line": 108
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 17, 
                "fix": {
                    "text": "const", 
                    "range": [
                        3831, 
                        3834
                    ]
                }, 
                "source": "            let avatar = member ? <MemberAvatar member={member} width={16} height={16}/> : null;", 
                "message": "'avatar' is never reassigned. Use 'const' instead.", 
                "line": 108
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 10, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4007, 
                        4007
                    ]
                }, 
                "source": "        }", 
                "message": "Missing trailing comma.", 
                "line": 110
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 9, 
                "source": "    let roomDecorator = {", 
                "message": "'roomDecorator' is assigned a value but never used.", 
                "line": 113
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        4020, 
                        4023
                    ]
                }, 
                "source": "    let roomDecorator = {", 
                "message": "'roomDecorator' is never reassigned. Use 'const' instead.", 
                "line": 113
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 10, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4279, 
                        4279
                    ]
                }, 
                "source": "        }", 
                "message": "Missing trailing comma.", 
                "line": 119
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        4454, 
                        4457
                    ]
                }, 
                "source": "    let markdownDecorators = ['HR', 'BOLD', 'ITALIC', 'CODE', 'STRIKETHROUGH'].map(", 
                "message": "'markdownDecorators' is never reassigned. Use 'const' instead.", 
                "line": 127
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4895, 
                        4895
                    ]
                }, 
                "source": "            )", 
                "message": "Missing trailing comma.", 
                "line": 136
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 10, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5242, 
                        5242
                    ]
                }, 
                "source": "        )", 
                "message": "Missing trailing comma.", 
                "line": 147
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'entityKey'.", 
                "line": 154
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 154
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'contentState'.", 
                "line": 154
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'rangeToReplace'.", 
                "line": 154
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'modifyFn'.", 
                "line": 154
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'inlineStyle'.", 
                "line": 154
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                           modifyFn: (text: string) => string, inlineStyle, entityKey): ContentState {", 
                "message": "Line 158 exceeds the maximum line length of 90.", 
                "line": 158
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 5, 
                "source": "    let getText = (key) => contentState.getBlockForKey(key).getText(),", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 159
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "source": "    let getText = (key) => contentState.getBlockForKey(key).getText(),", 
                "message": "'getText' is never reassigned. Use 'const' instead.", 
                "line": 159
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "source": "        startKey = rangeToReplace.getStartKey(),", 
                "message": "'startKey' is never reassigned. Use 'const' instead.", 
                "line": 160
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "source": "        endKey = rangeToReplace.getEndKey(),", 
                "message": "'endKey' is never reassigned. Use 'const' instead.", 
                "line": 162
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "source": "        endOffset = rangeToReplace.getEndOffset(),", 
                "message": "'endOffset' is never reassigned. Use 'const' instead.", 
                "line": 163
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        6065, 
                        6068
                    ]
                }, 
                "source": "        let blockText = getText(currentKey);", 
                "message": "'blockText' is never reassigned. Use 'const' instead.", 
                "line": 170
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    return Modifier.replaceText(contentState, rangeToReplace, modifyFn(text), inlineStyle, entityKey);", 
                "message": "Line 180 exceeds the maximum line length of 90.", 
                "line": 180
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'contentBlocks'.", 
                "line": 183
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 183
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'selectionState'.", 
                "line": 183
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                            contentBlocks: Array<ContentBlock>): {start: number, end: number} {", 
                "message": "Line 189 exceeds the maximum line length of 90.", 
                "line": 189
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 5, 
                "source": "    let offset = 0, start = 0, end = 0;", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 190
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 14, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7002, 
                        7005
                    ]
                }, 
                "source": "    for (let block of contentBlocks) {", 
                "message": "'block' is never reassigned. Use 'const' instead.", 
                "line": 191
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                                            contentBlocks: Array<ContentBlock>): SelectionState {", 
                "message": "Line 209 exceeds the maximum line length of 90.", 
                "line": 209
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 14, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7647, 
                        7650
                    ]
                }, 
                "source": "    for (let block of contentBlocks) {", 
                "message": "'block' is never reassigned. Use 'const' instead.", 
                "line": 212
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        7685, 
                        7688
                    ]
                }, 
                "source": "        let blockLength = block.getLength();", 
                "message": "'blockLength' is never reassigned. Use 'const' instead.", 
                "line": 213
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            const entityKey = Entity.create('emoji', 'IMMUTABLE', { emojiUnicode: emojiText });", 
                "message": "Line 262 exceeds the maximum line length of 90.", 
                "line": 262
            }
        ], 
        "errorCount": 14, 
        "warningCount": 47, 
        "filePath": "src/RichText.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 5, 
                "fix": {
                    "text": "    ", 
                    "range": [
                        717, 
                        722
                    ]
                }, 
                "source": "    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 22
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 53, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1003, 
                        1003
                    ]
                }, 
                "source": "    mostRecentActivityFirst: mostRecentActivityFirst", 
                "message": "Missing trailing comma.", 
                "line": 35
            }
        ], 
        "errorCount": 1, 
        "warningCount": 1, 
        "filePath": "src/RoomListSorter.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2936, 
                        2936
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 83
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 10, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3003, 
                        3003
                    ]
                }, 
                "source": "        ]", 
                "message": "Missing trailing comma.", 
                "line": 87
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3748, 
                        3748
                    ]
                }, 
                "source": "            ]", 
                "message": "Missing trailing comma.", 
                "line": 111
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4158, 
                        4158
                    ]
                }, 
                "source": "                }", 
                "message": "Missing trailing comma.", 
                "line": 122
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4172, 
                        4172
                    ]
                }, 
                "source": "            ]", 
                "message": "Missing trailing comma.", 
                "line": 123
            }
        ], 
        "errorCount": 5, 
        "warningCount": 0, 
        "filePath": "src/RoomNotifs.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import DMRoomMap from './utils/DMRoomMap';", 
                "message": "'DMRoomMap' is defined but never used.", 
                "line": 18
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'room'.", 
                "line": 21
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 21
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 31
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'room'.", 
                "line": 31
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'me'.", 
                "line": 31
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        (me.membership === \"leave\" && me.events.member.getSender() !== me.events.member.getStateKey()))", 
                "message": "Line 66 exceeds the maximum line length of 90.", 
                "line": 66
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 5, 
                "fix": {
                    "text": "    ", 
                    "range": [
                        2039, 
                        2044
                    ]
                }, 
                "source": "    {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 67
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 126
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'room'.", 
                "line": 126
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'me'.", 
                "line": 126
            }
        ], 
        "errorCount": 1, 
        "warningCount": 10, 
        "filePath": "src/Rooms.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 29, 
                "source": "    trackReferral(referrer, user_id, user_email) {", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 27
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 38, 
                "source": "    trackReferral(referrer, user_id, user_email) {", 
                "message": "Identifier 'user_email' is not in camel case.", 
                "line": 27
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "    getTeam(team_token) {", 
                "message": "Identifier 'team_token' is not in camel case.", 
                "line": 36
            }
        ], 
        "errorCount": 0, 
        "warningCount": 3, 
        "filePath": "src/RtsClient.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        584, 
                        587
                    ]
                }, 
                "source": "var request = require('browser-request');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        627, 
                        630
                    ]
                }, 
                "source": "var SdkConfig = require('./SdkConfig');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        667, 
                        670
                    ]
                }, 
                "source": "var MatrixClientPeg = require('./MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1086, 
                        1089
                    ]
                }, 
                "source": "        var tok = window.localStorage.getItem(\"mx_scalar_token\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 41
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 61, 
                "source": "        return MatrixClientPeg.get().getOpenIdToken().then((token_object) => {", 
                "message": "Identifier 'token_object' is not in camel case.", 
                "line": 46
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 18, 
                "source": "        }).then((token_object) => {", 
                "message": "Identifier 'token_object' is not in camel case.", 
                "line": 49
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 20, 
                "source": "            return token_object;", 
                "message": "Identifier 'token_object' is not in camel case.", 
                "line": 51
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 28, 
                "source": "    exchangeForScalarToken(openid_token_object) {", 
                "message": "Identifier 'openid_token_object' is not in camel case.", 
                "line": 55
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1736, 
                        1739
                    ]
                }, 
                "source": "        var defer = q.defer();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 56
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1768, 
                        1771
                    ]
                }, 
                "source": "        var scalar_rest_url = SdkConfig.get().integrations_rest_url;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 58
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "        var scalar_rest_url = SdkConfig.get().integrations_rest_url;", 
                "message": "Identifier 'scalar_rest_url' is not in camel case.", 
                "line": 58
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 18, 
                "source": "            uri: scalar_rest_url+'/register',", 
                "message": "Identifier 'scalar_rest_url' is not in camel case.", 
                "line": 61
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2520, 
                        2523
                    ]
                }, 
                "source": "        var url = SdkConfig.get().integrations_ui_url;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 80
            }
        ], 
        "errorCount": 0, 
        "warningCount": 14, 
        "filePath": "src/ScalarAuthClient.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    console.log(`Received request to set plumbing state to status \"${status}\" in room ${roomId}`);", 
                "message": "Line 181 exceeds the maximum line length of 90.", 
                "line": 181
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 56, 
                "fix": {
                    "text": "", 
                    "range": [
                        5358, 
                        5359
                    ]
                }, 
                "source": "    client.sendStateEvent(roomId, \"m.room.plumbing\", { status : status }).done(() => {", 
                "message": "Extra space after key 'status'.", 
                "line": 187
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    client.sendStateEvent(roomId, \"m.room.bot.options\", event.data.content, \"_\" + userId).done(() => {", 
                "message": "Line 203 exceeds the maximum line length of 90.", 
                "line": 203
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    console.log(`Received request to set power level to ${level} for bot ${userId} in room ${roomId}.`);", 
                "message": "Line 218 exceeds the maximum line length of 90.", 
                "line": 218
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 13, 
                "fix": {
                    "text": "const", 
                    "range": [
                        6660, 
                        6663
                    ]
                }, 
                "source": "        let powerEvent = new MatrixEvent(", 
                "message": "'powerEvent' is never reassigned. Use 'const' instead.", 
                "line": 226
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6804, 
                        6804
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 230
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8212, 
                        8215
                    ]
                }, 
                "source": "var currentRoomId = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 277
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8238, 
                        8241
                    ]
                }, 
                "source": "var currentRoomAlias = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 278
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        9069, 
                        9072
                    ]
                }, 
                "source": "    let url = SdkConfig.get().integrations_ui_url;", 
                "message": "'url' is never reassigned. Use 'const' instead.", 
                "line": 302
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        promise = MatrixClientPeg.get().getRoomIdForAlias(currentRoomAlias).then((res) => {", 
                "message": "Line 327 exceeds the maximum line length of 90.", 
                "line": 327
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                console.warn(\"Unhandled postMessage event with action '\" + event.data.action +\"'\");", 
                "message": "Line 368 exceeds the maximum line length of 90.", 
                "line": 368
            }
        ], 
        "errorCount": 1, 
        "warningCount": 10, 
        "filePath": "src/ScalarMessaging.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var DEFAULTS = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1052, 
                        1055
                    ]
                }, 
                "source": "        var defaultKeys = Object.keys(DEFAULTS);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < defaultKeys.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }
        ], 
        "errorCount": 0, 
        "warningCount": 3, 
        "filePath": "src/SdkConfig.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        52, 
                        55
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"./MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 5
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var MatrixClientPeg = require(\"./MatrixClientPeg\");", 
                "message": "'MatrixClientPeg' is assigned a value but never used.", 
                "line": 5
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        104, 
                        107
                    ]
                }, 
                "source": "var SignupStages = require(\"./SignupStages\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 6
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        150, 
                        153
                    ]
                }, 
                "source": "var dis = require(\"./dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 7
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        185, 
                        188
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 8
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        207, 
                        210
                    ]
                }, 
                "source": "var url = require(\"url\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 9
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 40
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3246, 
                        3246
                    ]
                }, 
                "source": "            action: \"registration_step_update\"", 
                "message": "Missing trailing comma.", 
                "line": 122
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 126
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'formVals'.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3375, 
                        3378
                    ]
                }, 
                "source": "        var {username, password, email} = formVals;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 130
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 36, 
                "source": "    _tryRegister(client, authDict, poll_for_success) {", 
                "message": "Identifier 'poll_for_success' is not in camel case.", 
                "line": 151
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4303, 
                        4306
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 152
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4329, 
                        4332
                    ]
                }, 
                "source": "        var bindEmail;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 154
            }, 
            {
                "nodeType": "MemberExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 34, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4824, 
                        4824
                    ]
                }, 
                "source": "            this.guestAccessToken", 
                "message": "Missing trailing comma.", 
                "line": 165
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5654, 
                        5657
                    ]
                }, 
                "source": "                    var flow = self.chooseFlow(error.data.flows);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 180
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 25, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5837, 
                        5840
                    ]
                }, 
                "source": "                        var flowStage = self.firstUncompletedStage(flow);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 184
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                            return self._startStage(client, flowStage).catch(function(err) {", 
                "message": "Line 186 exceeds the maximum line length of 90.", 
                "line": 186
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 21, 
                "source": "                if (poll_for_success) {", 
                "message": "Identifier 'poll_for_success' is not in camel case.", 
                "line": 193
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    throw new Error(\"User names may only contain alphanumeric characters, underscores or dots!\");", 
                "message": "Line 204 exceeds the maximum line length of 90.", 
                "line": 204
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        throw new Error(`Registration failed! (${error.httpStatus}) - ${msg}`);", 
                "message": "Line 213 exceeds the maximum line length of 90.", 
                "line": 213
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        throw new Error(`Registration failed! (${error.httpStatus}) - That's all we know.`);", 
                "message": "Line 215 exceeds the maximum line length of 90.", 
                "line": 215
            }, 
            {
                "nodeType": "TemplateLiteral", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 82, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7695, 
                        7695
                    ]
                }, 
                "source": "                        `Server error during registration! (${error.httpStatus})`", 
                "message": "Missing trailing comma.", 
                "line": 219
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 83, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8038, 
                        8038
                    ]
                }, 
                "source": "                        \"This home server does not support resuming registration.\"", 
                "message": "Missing trailing comma.", 
                "line": 225
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < flow.stages.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 233
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8374, 
                        8377
                    ]
                }, 
                "source": "        var completed = (this.data || {}).completed || [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 241
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8529, 
                        8532
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 246
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8597, 
                        8600
                    ]
                }, 
                "source": "        var StageClass = SignupStages[stageName];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 248
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8788, 
                        8791
                    ]
                }, 
                "source": "        var stage = new StageClass(client, this);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 254
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        9134, 
                        9147
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 260
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9670, 
                        9673
                    ]
                }, 
                "source": "        var emailFlow = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 274
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9700, 
                        9703
                    ]
                }, 
                "source": "        var otherFlow = null;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 275
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9773, 
                        9776
                    ]
                }, 
                "source": "            var flowHasEmail = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 277
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var stageI = 0; stageI < flow.stages.length; ++stageI) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 278
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9889, 
                        9892
                    ]
                }, 
                "source": "                var stage = flow.stages[stageI];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 279
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11852, 
                        11855
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 341
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11877, 
                        11880
                    ]
                }, 
                "source": "        var client = this._createTemporaryClient();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 342
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12494, 
                        12497
                    ]
                }, 
                "source": "        var flowStep = this._flows[this._currentFlowIndex];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 359
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12630, 
                        12633
                    ]
                }, 
                "source": "        var client = this._createTemporaryClient();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 364
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 28, 
                "fix": {
                    "text": ",", 
                    "range": [
                        13124, 
                        13124
                    ]
                }, 
                "source": "                guest: true", 
                "message": "Missing trailing comma.", 
                "line": 376
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13503, 
                        13506
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 389
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13528, 
                        13531
                    ]
                }, 
                "source": "        var isEmail = username.indexOf(\"@\") > 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 390
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13577, 
                        13580
                    ]
                }, 
                "source": "        var loginParams = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 391
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13895, 
                        13898
                    ]
                }, 
                "source": "        var client = this._createTemporaryClient();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 402
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        14263, 
                        14263
                    ]
                }, 
                "source": "                accessToken: data.access_token", 
                "message": "Missing trailing comma.", 
                "line": 409
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        14528, 
                        14541
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 416
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14757, 
                        14760
                    ]
                }, 
                "source": "                    var fbClient = Matrix.createClient({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 422
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 36, 
                "source": "                        idBaseUrl: this._isUrl,", 
                "message": "Unexpected 'this'.", 
                "line": 424
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    return fbClient.login('m.login.password', loginParams).then(function(data) {", 
                "message": "Line 427 exceeds the maximum line length of 90.", 
                "line": 427
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 59, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15339, 
                        15339
                    ]
                }, 
                "source": "                            accessToken: data.access_token", 
                "message": "Missing trailing comma.", 
                "line": 433
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 33, 
                "source": "                    }, function(fallback_error) {", 
                "message": "Identifier 'fallback_error' is not in camel case.", 
                "line": 435
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        15562, 
                        15575
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 440
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 7, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15812, 
                        15815
                    ]
                }, 
                "source": "      var client = this._createTemporaryClient();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 451
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 7, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15862, 
                        15865
                    ]
                }, 
                "source": "      var parsedUrl = url.parse(window.location.href, true);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 452
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 7, 
                "fix": {
                    "text": "let", 
                    "range": [
                        16061, 
                        16064
                    ]
                }, 
                "source": "      var casUrl = client.getCasLoginUrl(url.format(parsedUrl));", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 455
            }
        ], 
        "errorCount": 9, 
        "warningCount": 46, 
        "filePath": "src/Signup.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        14, 
                        17
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 2
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 38, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1018, 
                        1018
                    ]
                }, 
                "source": "                type: DummyStage.TYPE", 
                "message": "Missing trailing comma.", 
                "line": 41
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1032, 
                        1032
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 42
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2494, 
                        2497
                    ]
                }, 
                "source": "        var isLocation = document.createElement('a');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 93
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2619, 
                        2622
                    ]
                }, 
                "source": "        var clientSecret = this.clientSecret || this.signupInstance.params.clientSecret;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 96
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2708, 
                        2711
                    ]
                }, 
                "source": "        var sid = this.sid || this.signupInstance.params.idSid;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 97
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3011, 
                        3011
                    ]
                }, 
                "source": "                    id_server: isLocation.host", 
                "message": "Missing trailing comma.", 
                "line": 105
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 18, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3029, 
                        3029
                    ]
                }, 
                "source": "                }", 
                "message": "Missing trailing comma.", 
                "line": 106
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3043, 
                        3043
                    ]
                }, 
                "source": "            }", 
                "message": "Missing trailing comma.", 
                "line": 107
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 111
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3722, 
                        3725
                    ]
                }, 
                "source": "        var nextLink = this.signupInstance.params.registrationUrl +", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 129
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4269, 
                        4272
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 139
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 21, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4478, 
                        4478
                    ]
                }, 
                "source": "            nextLink", 
                "message": "Missing trailing comma.", 
                "line": 144
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4779, 
                        4782
                    ]
                }, 
                "source": "            var e = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 153
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 30, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4818, 
                        4818
                    ]
                }, 
                "source": "                isFatal: true", 
                "message": "Missing trailing comma.", 
                "line": 154
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5312, 
                        5312
                    ]
                }, 
                "source": "    [EmailIdentityStage.TYPE]: EmailIdentityStage", 
                "message": "Missing trailing comma.", 
                "line": 170
            }
        ], 
        "errorCount": 8, 
        "warningCount": 8, 
        "filePath": "src/SignupStages.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 76, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1009, 
                        1009
                    ]
                }, 
                "source": "                \" b) A component has called getComponent at the root level\"", 
                "message": "Missing trailing comma.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "source": "        var comp = this.components[name];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "source": "        var comp = this.components['views.'+name];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 37
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-redeclare", 
                "column": 13, 
                "source": "        var comp = this.components['views.'+name];", 
                "message": "'comp' is already defined.", 
                "line": 37
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 78, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1650, 
                        1650
                    ]
                }, 
                "source": "                \"If you want to change the active skin, call resetSkin first\"", 
                "message": "Missing trailing comma.", 
                "line": 48
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1714, 
                        1717
                    ]
                }, 
                "source": "        var compKeys = Object.keys(skinObject.components);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 52
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < compKeys.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 53
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1829, 
                        1832
                    ]
                }, 
                "source": "            var comp = skinObject.components[compKeys[i]];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1982, 
                        1985
                    ]
                }, 
                "source": "        var slot = name;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 60
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                slot = name.substr(0, name.lastIndexOf('.') + 1) + comp.replaces.split('.').pop();", 
                "message": "Line 65 exceeds the maximum line length of 90.", 
                "line": 65
            }
        ], 
        "errorCount": 3, 
        "warningCount": 7, 
        "filePath": "src/Skinner.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"./MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        620, 
                        623
                    ]
                }, 
                "source": "var dis = require(\"./dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        655, 
                        658
                    ]
                }, 
                "source": "var Tinter = require(\"./Tinter\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1214, 
                        1217
                    ]
                }, 
                "source": "var reject = function(msg) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 48
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 19, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1274, 
                        1274
                    ]
                }, 
                "source": "        error: msg", 
                "message": "Missing trailing comma.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1286, 
                        1289
                    ]
                }, 
                "source": "var success = function(promise) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1357, 
                        1357
                    ]
                }, 
                "source": "        promise: promise", 
                "message": "Missing trailing comma.", 
                "line": 56
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1369, 
                        1372
                    ]
                }, 
                "source": "var commands = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 60
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            description: \"To use it, just wait for autocomplete results to load and tab through them.\",", 
                "message": "Line 66 exceeds the maximum line length of 90.", 
                "line": 66
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 58, 
                "source": "    nick: new Command(\"nick\", \"<display_name>\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 72
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 59, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2037, 
                        2037
                    ]
                }, 
                "source": "                MatrixClientPeg.get().setDisplayName(args)", 
                "message": "Missing trailing comma.", 
                "line": 75
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 78
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 63, 
                "source": "    tint: new Command(\"tint\", \"<color1> [<color2>]\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 82
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var matches = args.match(/^(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}))( +(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})))?$/);", 
                "message": "Line 84 exceeds the maximum line length of 90.", 
                "line": 84
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2275, 
                        2278
                    ]
                }, 
                "source": "            var matches = args.match(/^(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}))( +(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})))?$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 84
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2476, 
                        2479
                    ]
                }, 
                "source": "                var colorScheme = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 87
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 77, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2838, 
                        2838
                    ]
                }, 
                "source": "                        room_id, \"org.matrix.room.color_scheme\", colorScheme", 
                "message": "Missing trailing comma.", 
                "line": 94
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2860, 
                        2860
                    ]
                }, 
                "source": "                    )", 
                "message": "Missing trailing comma.", 
                "line": 95
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 99
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 53, 
                "source": "    topic: new Command(\"topic\", \"<topic>\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 103
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 66, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3164, 
                        3164
                    ]
                }, 
                "source": "                MatrixClientPeg.get().setRoomTopic(room_id, args)", 
                "message": "Missing trailing comma.", 
                "line": 106
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 109
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 56, 
                "source": "    invite: new Command(\"invite\", \"<userId>\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 113
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3364, 
                        3367
                    ]
                }, 
                "source": "            var matches = args.match(/^(\\S+)$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 115
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 70, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3529, 
                        3529
                    ]
                }, 
                "source": "                    MatrixClientPeg.get().invite(room_id, matches[1])", 
                "message": "Missing trailing comma.", 
                "line": 118
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 122
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 57, 
                "source": "    join: new Command(\"join\", \"#alias:domain\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 126
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3746, 
                        3749
                    ]
                }, 
                "source": "            var matches = args.match(/^(\\S+)$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 128
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3826, 
                        3829
                    ]
                }, 
                "source": "                var room_alias = matches[1];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 130
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 21, 
                "source": "                var room_alias = matches[1];", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 130
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 35, 
                "source": "                    return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 132
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 21, 
                "source": "                    room_alias += ':' + MatrixClientPeg.get().getDomain();", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 135
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 147
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 59, 
                "source": "    part: new Command(\"part\", \"[#alias:domain]\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 150
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4474, 
                        4477
                    ]
                }, 
                "source": "        var targetRoomId;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 151
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4524, 
                        4527
                    ]
                }, 
                "source": "            var matches = args.match(/^(\\S+)$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 153
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "source": "                var room_alias = matches[1];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 155
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 21, 
                "source": "                var room_alias = matches[1];", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 155
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 35, 
                "source": "                    return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 157
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 21, 
                "source": "                    room_alias += ':' + MatrixClientPeg.get().getDomain();", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 160
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4958, 
                        4961
                    ]
                }, 
                "source": "                var rooms = MatrixClientPeg.get().getRooms();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 164
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 22, 
                "source": "                for (var i = 0; i < rooms.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 165
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5081, 
                        5084
                    ]
                }, 
                "source": "                    var aliasEvents = rooms[i].currentState.getStateEvents(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 166
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5177, 
                        5177
                    ]
                }, 
                "source": "                        \"m.room.aliases\"", 
                "message": "Missing trailing comma.", 
                "line": 167
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 26, 
                "source": "                    for (var j = 0; j < aliasEvents.length; j++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 169
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 25, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5292, 
                        5295
                    ]
                }, 
                "source": "                        var aliases = aliasEvents[j].getContent().aliases || [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 170
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 30, 
                "source": "                        for (var k = 0; k < aliases.length; k++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 171
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 48, 
                "source": "                            if (aliases[k] === room_alias) {", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 172
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 61, 
                "source": "                return reject(\"Unrecognised room alias: \" + room_alias);", 
                "message": "Identifier 'room_alias' is not in camel case.", 
                "line": 183
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 43, 
                "source": "        if (!targetRoomId) targetRoomId = room_id;", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 186
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 15, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6154, 
                        6154
                    ]
                }, 
                "source": "            })", 
                "message": "Missing trailing comma.", 
                "line": 191
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 63, 
                "source": "    kick: new Command(\"kick\", \"<userId> [<reason>]\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 196
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6343, 
                        6346
                    ]
                }, 
                "source": "            var matches = args.match(/^(\\S+?)( +(.*))?$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 198
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 80, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6528, 
                        6528
                    ]
                }, 
                "source": "                    MatrixClientPeg.get().kick(room_id, matches[1], matches[3])", 
                "message": "Missing trailing comma.", 
                "line": 201
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 205
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 61, 
                "source": "    ban: new Command(\"ban\", \"<userId> [<reason>]\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 209
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6786, 
                        6789
                    ]
                }, 
                "source": "            var matches = args.match(/^(\\S+?)( +(.*))?$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 211
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 79, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6970, 
                        6970
                    ]
                }, 
                "source": "                    MatrixClientPeg.get().ban(room_id, matches[1], matches[3])", 
                "message": "Missing trailing comma.", 
                "line": 214
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 218
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 54, 
                "source": "    unban: new Command(\"unban\", \"<userId>\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 222
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7199, 
                        7202
                    ]
                }, 
                "source": "            var matches = args.match(/^(\\S+)$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 224
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 69, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7432, 
                        7432
                    ]
                }, 
                "source": "                    MatrixClientPeg.get().unban(room_id, matches[1])", 
                "message": "Missing trailing comma.", 
                "line": 228
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 232
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 64, 
                "source": "    op: new Command(\"op\", \"<userId> [<power level>]\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 236
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7677, 
                        7680
                    ]
                }, 
                "source": "            var matches = args.match(/^(\\S+?)( +(\\d+))?$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 238
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7737, 
                        7740
                    ]
                }, 
                "source": "            var powerLevel = 50; // default power level for op", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 239
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7831, 
                        7834
                    ]
                }, 
                "source": "                var user_id = matches[1];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 241
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 21, 
                "source": "                var user_id = matches[1];", 
                "message": "Identifier 'user_id' is not in camel case.", 
                "line": 241
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "use-isnan", 
                "column": 21, 
                "source": "                if (powerLevel !== NaN) {", 
                "message": "Use the isNaN function to compare with NaN.", 
                "line": 245
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8064, 
                        8067
                    ]
                }, 
                "source": "                    var room = MatrixClientPeg.get().getRoom(room_id);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 246
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 57, 
                "source": "                        return reject(\"Bad room ID: \" + room_id);", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 248
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8256, 
                        8259
                    ]
                }, 
                "source": "                    var powerLevelEvent = room.currentState.getStateEvents(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 250
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8361, 
                        8361
                    ]
                }, 
                "source": "                        \"m.room.power_levels\", \"\"", 
                "message": "Missing trailing comma.", 
                "line": 251
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 74, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8555, 
                        8555
                    ]
                }, 
                "source": "                            room_id, user_id, powerLevel, powerLevelEvent", 
                "message": "Missing trailing comma.", 
                "line": 255
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 26, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8581, 
                        8581
                    ]
                }, 
                "source": "                        )", 
                "message": "Missing trailing comma.", 
                "line": 256
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 261
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 52, 
                "source": "    deop: new Command(\"deop\", \"<userId>\", function(room_id, args) {", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 265
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8835, 
                        8838
                    ]
                }, 
                "source": "            var matches = args.match(/^(\\S+)$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 267
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8915, 
                        8918
                    ]
                }, 
                "source": "                var room = MatrixClientPeg.get().getRoom(room_id);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 269
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 53, 
                "source": "                    return reject(\"Bad room ID: \" + room_id);", 
                "message": "Identifier 'room_id' is not in camel case.", 
                "line": 271
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9092, 
                        9095
                    ]
                }, 
                "source": "                var powerLevelEvent = room.currentState.getStateEvents(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 274
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9193, 
                        9193
                    ]
                }, 
                "source": "                    \"m.room.power_levels\", \"\"", 
                "message": "Missing trailing comma.", 
                "line": 275
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 66, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9367, 
                        9367
                    ]
                }, 
                "source": "                        room_id, args, undefined, powerLevelEvent", 
                "message": "Missing trailing comma.", 
                "line": 279
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9389, 
                        9389
                    ]
                }, 
                "source": "                    )", 
                "message": "Missing trailing comma.", 
                "line": 280
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 23, 
                "source": "        return reject(this.getUsage());", 
                "message": "Unexpected 'this'.", 
                "line": 284
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 7, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9479, 
                        9479
                    ]
                }, 
                "source": "    })", 
                "message": "Missing trailing comma.", 
                "line": 285
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9503, 
                        9506
                    ]
                }, 
                "source": "var aliases = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 289
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 14, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9532, 
                        9532
                    ]
                }, 
                "source": "    j: \"join\"", 
                "message": "Missing trailing comma.", 
                "line": 290
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10240, 
                        10243
                    ]
                }, 
                "source": "            var bits = input.match(/^(\\S+?)( +((.|\\n)*))?$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 307
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 13, 
                "source": "            var cmd, args;", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 308
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10302, 
                        10305
                    ]
                }, 
                "source": "            var cmd, args;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 308
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        10444, 
                        10457
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 312
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        10734, 
                        10747
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 322
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11030, 
                        11033
                    ]
                }, 
                "source": "        var cmds = Object.keys(commands).sort().map(function(cmdKey) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 332
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        11305, 
                        11305
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 339
            }
        ], 
        "errorCount": 34, 
        "warningCount": 61, 
        "filePath": "src/SlashCommands.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Expected JSDoc for 'entry' but found 'The'.", 
                "line": 60
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Expected JSDoc for 'textArea' but found 'DOMElement'.", 
                "line": 84
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc parameter type for 'DOMElement'.", 
                "line": 84
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3519, 
                        3522
                    ]
                }, 
                "source": "        var res = MATCH_REGEX.exec(this.originalText);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 109
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3731, 
                        3734
                    ]
                }, 
                "source": "        var [, boundaryGroup, partialGroup] = res;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 115
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 16, 
                "source": "        var [, boundaryGroup, partialGroup] = res;", 
                "message": "'boundaryGroup' is assigned a value but never used.", 
                "line": 115
            }, 
            {
                "nodeType": "NewExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 36, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4064, 
                        4064
                    ]
                }, 
                "source": "            new Entry(partialGroup) // first entry is always the original partial", 
                "message": "Missing trailing comma.", 
                "line": 127
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 73, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4795, 
                        4795
                    ]
                }, 
                "source": "            entry.getFillText(), true, entry.getSuffix(this.isFirstWord)", 
                "message": "Missing trailing comma.", 
                "line": 146
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5145, 
                        5148
                    ]
                }, 
                "source": "        var peekList = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 161
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < numAheadToPeek; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 166
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var nextIndex;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 167
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        5579, 
                        5592
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 170
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6003, 
                        6006
                    ]
                }, 
                "source": "        var wasInPassiveMode = this.inPassiveMode && !passive;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 184
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        6258, 
                        6267
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 193
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Expected JSDoc for 'ev' but found 'e'.", 
                "line": 203
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    !ev.metaKey && !ev.ctrlKey && !ev.altKey && ev.keyCode !== KEY_WINDOWS) {", 
                "message": "Line 216 exceeds the maximum line length of 90.", 
                "line": 216
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        9727, 
                        9736
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 276
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9849, 
                        9852
                    ]
                }, 
                "source": "        var isTransitioningToOriginalText = (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 280
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 80, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10379, 
                        10379
                    ]
                }, 
                "source": "                this.matchedList[this.currentIndex].getSuffix(this.isFirstWord)", 
                "message": "Missing trailing comma.", 
                "line": 290
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        10853, 
                        10862
                    ]
                }, 
                "source": "        }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 304
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11368, 
                        11371
                    ]
                }, 
                "source": "        var boundaryChar;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 315
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11394, 
                        11397
                    ]
                }, 
                "source": "        var res = MATCH_REGEX.exec(this.originalText);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 316
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        11813, 
                        11816
                    ]
                }, 
                "source": "        var replacementText = boundaryChar + newVal + suffix;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 330
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 70, 
                "fix": {
                    "text": ",", 
                    "range": [
                        13332, 
                        13332
                    ]
                }, 
                "source": "            CommandEntry.fromCommands(SlashCommands.getCommandList())", 
                "message": "Missing trailing comma.", 
                "line": 377
            }
        ], 
        "errorCount": 5, 
        "warningCount": 19, 
        "filePath": "src/TabComplete.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        567, 
                        570
                    ]
                }, 
                "source": "var sdk = require(\"./index\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'isFirstWord'.", 
                "line": 52
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2245, 
                        2248
                    ]
                }, 
                "source": "        var MemberAvatar = sdk.getComponent(\"views.avatars.MemberAvatar\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 102
            }
        ], 
        "errorCount": 0, 
        "warningCount": 3, 
        "filePath": "src/TabCompleteEntries.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"./MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        620, 
                        623
                    ]
                }, 
                "source": "var CallHandler = require(\"./CallHandler\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        768, 
                        771
                    ]
                }, 
                "source": "    var senderName = ev.sender ? ev.sender.name : ev.getSender();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        834, 
                        837
                    ]
                }, 
                "source": "    var targetName = ev.target ? ev.target.name : ev.getStateKey();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        902, 
                        905
                    ]
                }, 
                "source": "    var ConferenceHandler = CallHandler.getConferenceHandler();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        966, 
                        969
                    ]
                }, 
                "source": "    var reason = ev.getContent().reason ? (", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var threePidContent = ev.getContent().third_party_invite;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 30
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        1543, 
                        1556
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 38
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (ConferenceHandler && ConferenceHandler.isConferenceUser(ev.getStateKey())) {", 
                "message": "Line 40 exceeds the maximum line length of 90.", 
                "line": 40
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        1749, 
                        1766
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 42
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (ev.getPrevContent().displayname && ev.getContent().displayname && ev.getPrevContent().displayname != ev.getContent().displayname) {", 
                "message": "Line 51 exceeds the maximum line length of 90.", 
                "line": 51
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                } else if (!ev.getPrevContent().displayname && ev.getContent().displayname) {", 
                "message": "Line 55 exceeds the maximum line length of 90.", 
                "line": 55
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    return ev.getSender() + \" set their display name to \" + ev.getContent().displayname;", 
                "message": "Line 56 exceeds the maximum line length of 90.", 
                "line": 56
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                } else if (ev.getPrevContent().displayname && !ev.getContent().displayname) {", 
                "message": "Line 57 exceeds the maximum line length of 90.", 
                "line": 57
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    return ev.getSender() + \" removed their display name (\" + ev.getPrevContent().displayname + \")\";", 
                "message": "Line 58 exceeds the maximum line length of 90.", 
                "line": 58
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                } else if (ev.getPrevContent().avatar_url && !ev.getContent().avatar_url) {", 
                "message": "Line 59 exceeds the maximum line length of 90.", 
                "line": 59
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                } else if (ev.getPrevContent().avatar_url && ev.getContent().avatar_url && ev.getPrevContent().avatar_url != ev.getContent().avatar_url) {", 
                "message": "Line 61 exceeds the maximum line length of 90.", 
                "line": 61
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                } else if (!ev.getPrevContent().avatar_url && ev.getContent().avatar_url) {", 
                "message": "Line 63 exceeds the maximum line length of 90.", 
                "line": 63
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (!ev.target) console.warn(\"Join message has no target! -- \" + ev.getContent().state_key);", 
                "message": "Line 70 exceeds the maximum line length of 90.", 
                "line": 70
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (ConferenceHandler && ConferenceHandler.isConferenceUser(ev.getStateKey())) {", 
                "message": "Line 71 exceeds the maximum line length of 90.", 
                "line": 71
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        3884, 
                        3901
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 73
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                if (ConferenceHandler && ConferenceHandler.isConferenceUser(ev.getStateKey())) {", 
                "message": "Line 80 exceeds the maximum line length of 90.", 
                "line": 80
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        4247, 
                        4264
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 82
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 17, 
                "fix": {
                    "text": "                ", 
                    "range": [
                        4406, 
                        4423
                    ]
                }, 
                "source": "                }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 85
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        4520, 
                        4533
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 89
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        4668, 
                        4681
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 92
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        4824, 
                        4837
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 95
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        4997, 
                        5010
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 98
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5132, 
                        5135
                    ]
                }, 
                "source": "    var senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 106
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5351, 
                        5354
                    ]
                }, 
                "source": "    var senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 112
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5572, 
                        5575
                    ]
                }, 
                "source": "    var senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 118
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5664, 
                        5667
                    ]
                }, 
                "source": "    var message = senderDisplayName + ': ' + ev.getContent().body;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 120
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6023, 
                        6026
                    ]
                }, 
                "source": "    var senderName = event.sender ? event.sender.name : \"Someone\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 130
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";", 
                "message": "Line 131 exceeds the maximum line length of 90.", 
                "line": 131
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6090, 
                        6093
                    ]
                }, 
                "source": "    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 131
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6293, 
                        6296
                    ]
                }, 
                "source": "    var senderName = event.sender ? event.sender.name : \"Someone\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 136
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";", 
                "message": "Line 137 exceeds the maximum line length of 90.", 
                "line": 137
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6360, 
                        6363
                    ]
                }, 
                "source": "    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 137
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6560, 
                        6563
                    ]
                }, 
                "source": "    var senderName = event.sender ? event.sender.name : \"Someone\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 142
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6693, 
                        6696
                    ]
                }, 
                "source": "    var type = \"voice\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 144
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";", 
                "message": "Line 149 exceeds the maximum line length of 90.", 
                "line": 149
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6885, 
                        6888
                    ]
                }, 
                "source": "    var supported = MatrixClientPeg.get().supportsVoip() ? \"\" : \" (not supported by this browser)\";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 149
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7101, 
                        7104
                    ]
                }, 
                "source": "    var senderName = event.sender ? event.sender.name : event.getSender();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 154
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7340, 
                        7343
                    ]
                }, 
                "source": "    var senderName = event.sender ? event.sender.name : event.getSender();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 160
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7415, 
                        7418
                    ]
                }, 
                "source": "    var vis = event.getContent().history_visibility;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 161
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7468, 
                        7471
                    ]
                }, 
                "source": "    var text = senderName + \" made future room history visible to \";", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 162
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 5, 
                "fix": {
                    "text": "    ", 
                    "range": [
                        7637, 
                        7642
                    ]
                }, 
                "source": "    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 165
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 5, 
                "fix": {
                    "text": "    ", 
                    "range": [
                        7741, 
                        7746
                    ]
                }, 
                "source": "    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 168
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 5, 
                "fix": {
                    "text": "    ", 
                    "range": [
                        7817, 
                        7822
                    ]
                }, 
                "source": "    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 171
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 5, 
                "fix": {
                    "text": "    ", 
                    "range": [
                        7891, 
                        7896
                    ]
                }, 
                "source": "    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 174
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8016, 
                        8019
                    ]
                }, 
                "source": "    var senderName = event.sender ? event.sender.name : event.getSender();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 182
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    return senderName + \" turned on end-to-end encryption (algorithm \" + event.getContent().algorithm + \")\";", 
                "message": "Line 183 exceeds the maximum line length of 90.", 
                "line": 183
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8199, 
                        8202
                    ]
                }, 
                "source": "var handlers = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 186
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 23, 
                "fix": {
                    "text": "", 
                    "range": [
                        8278, 
                        8281
                    ]
                }, 
                "source": "    'm.room.name':    textForRoomNameEvent,", 
                "message": "Extra space before value for key 'm.room.name'.", 
                "line": 188
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 23, 
                "fix": {
                    "text": "", 
                    "range": [
                        8323, 
                        8325
                    ]
                }, 
                "source": "    'm.room.topic':   textForTopicEvent,", 
                "message": "Extra space before value for key 'm.room.topic'.", 
                "line": 189
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 23, 
                "fix": {
                    "text": "", 
                    "range": [
                        8365, 
                        8366
                    ]
                }, 
                "source": "    'm.room.member':  textForMemberEvent,", 
                "message": "Extra space before value for key 'm.room.member'.", 
                "line": 190
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 23, 
                "fix": {
                    "text": "", 
                    "range": [
                        8407, 
                        8408
                    ]
                }, 
                "source": "    'm.call.invite':  textForCallInviteEvent,", 
                "message": "Extra space before value for key 'm.call.invite'.", 
                "line": 191
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 23, 
                "fix": {
                    "text": "", 
                    "range": [
                        8453, 
                        8454
                    ]
                }, 
                "source": "    'm.call.answer':  textForCallAnswerEvent,", 
                "message": "Extra space before value for key 'm.call.answer'.", 
                "line": 192
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 23, 
                "fix": {
                    "text": "", 
                    "range": [
                        8499, 
                        8500
                    ]
                }, 
                "source": "    'm.call.hangup':  textForCallHangupEvent,", 
                "message": "Extra space before value for key 'm.call.hangup'.", 
                "line": 193
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8762, 
                        8765
                    ]
                }, 
                "source": "        var hdlr = handlers[ev.getType()];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 201
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8857, 
                        8857
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 204
            }
        ], 
        "errorCount": 1, 
        "warningCount": 60, 
        "filePath": "src/TextForEvent.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        725, 
                        728
                    ]
                }, 
                "source": "var DEBUG = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        797, 
                        800
                    ]
                }, 
                "source": "var keyRgb = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1285, 
                        1288
                    ]
                }, 
                "source": "var keyHex = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 38
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1601, 
                        1604
                    ]
                }, 
                "source": "var colors = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 47
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1680, 
                        1683
                    ]
                }, 
                "source": "var cssFixups = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1963, 
                        1966
                    ]
                }, 
                "source": "var cssAttrs = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 63
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2109, 
                        2112
                    ]
                }, 
                "source": "var svgAttrs = [", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 72
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2156, 
                        2159
                    ]
                }, 
                "source": "var cached = false;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 77
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 10, 
                "source": "    for (var i = 0; i < document.styleSheets.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 81
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2323, 
                        2326
                    ]
                }, 
                "source": "        var ss = document.styleSheets[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 82
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var j = 0; j < ss.cssRules.length; j++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 107
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3634, 
                        3637
                    ]
                }, 
                "source": "            var rule = ss.cssRules[j];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 108
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var k = 0; k < cssAttrs.length; k++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 110
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3772, 
                        3775
                    ]
                }, 
                "source": "                var attr = cssAttrs[k];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 111
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 22, 
                "source": "                for (var l = 0; l < keyRgb.length; l++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 112
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 10, 
                "source": "    for (var i = 0; i < cssFixups.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 129
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4365, 
                        4368
                    ]
                }, 
                "source": "        var cssFixup = cssFixups[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 130
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4747, 
                        4750
                    ]
                }, 
                "source": "    var val = parseInt(color, 16);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 143
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4782, 
                        4785
                    ]
                }, 
                "source": "    var r = (val >> 16) & 255;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 144
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4813, 
                        4816
                    ]
                }, 
                "source": "    var g = (val >> 8) & 255;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 145
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4843, 
                        4846
                    ]
                }, 
                "source": "    var b = val & 255;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 146
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4916, 
                        4919
                    ]
                }, 
                "source": "    var val = (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 151
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 5, 
                "fix": {
                    "text": "", 
                    "range": [
                        5624, 
                        5625
                    ]
                }, 
                "source": "    registerTintable : function(tintable) {", 
                "message": "Extra space after key 'registerTintable'.", 
                "line": 170
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 65, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        5755, 
                        5757
                    ]
                }, 
                "source": "    tint: function(primaryColor, secondaryColor, tertiaryColor) {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 174
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6145, 
                        6148
                    ]
                }, 
                "source": "            var rgb = hexToRgb(primaryColor);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 188
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6451, 
                        6454
                    ]
                }, 
                "source": "            var rgb1 = hexToRgb(primaryColor);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 197
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6498, 
                        6501
                    ]
                }, 
                "source": "            var rgb2 = hexToRgb(secondaryColor);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 198
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 9, 
                "fix": {
                    "text": "        ", 
                    "range": [
                        6881, 
                        6890
                    ]
                }, 
                "source": "        {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 208
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8249, 
                        8252
                    ]
                }, 
                "source": "        var fixups = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 251
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < svgs.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 252
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "source": "            var svgDoc;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 253
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        8419, 
                        8432
                    ]
                }, 
                "source": "            }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 256
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8459, 
                        8462
                    ]
                }, 
                "source": "                var msg = 'Failed to get svg.contentDocument of ' + svgs[i].toString();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 258
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 21, 
                "source": "                var msg = 'Failed to get svg.contentDocument of ' + svgs[i].toString();", 
                "message": "'msg' is assigned a value but never used.", 
                "line": 258
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8815, 
                        8818
                    ]
                }, 
                "source": "            var tags = svgDoc.getElementsByTagName(\"*\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 268
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var j = 0; j < tags.length; j++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 269
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8928, 
                        8931
                    ]
                }, 
                "source": "                var tag = tags[j];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 270
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 22, 
                "source": "                for (var k = 0; k < svgAttrs.length; k++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 271
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9027, 
                        9030
                    ]
                }, 
                "source": "                    var attr = svgAttrs[k];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 272
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 26, 
                "source": "                    for (var l = 0; l < keyHex.length; l++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 273
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        if (tag.getAttribute(attr) && tag.getAttribute(attr).toUpperCase() === keyHex[l]) {", 
                "message": "Line 274 exceeds the maximum line length of 90.", 
                "line": 274
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < fixups.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 292
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9770, 
                        9773
                    ]
                }, 
                "source": "            var svgFixup = fixups[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 293
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9944, 
                        9944
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 297
            }
        ], 
        "errorCount": 2, 
        "warningCount": 42, 
        "filePath": "src/Tinter.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 17, 
                "source": "export function field_input_incorrect(element) {", 
                "message": "Identifier 'field_input_incorrect' is not in camel case.", 
                "line": 25
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 5, 
                "source": "    Velocity(element, \"callout.shake\", 300);", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 26
            }
        ], 
        "errorCount": 0, 
        "warningCount": 2, 
        "filePath": "src/UiEffects.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var MatrixClientPeg = require('./MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        620, 
                        623
                    ]
                }, 
                "source": "var sdk = require('./index');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 21
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'ev'.", 
                "line": 21
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        } else if (ev.getType == 'm.room.message' && ev.getContent().msgtype == 'm.notify') {", 
                "message": "Line 30 exceeds the maximum line length of 90.", 
                "line": 30
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1175, 
                        1178
                    ]
                }, 
                "source": "        var EventTile = sdk.getComponent('rooms.EventTile');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1340, 
                        1343
                    ]
                }, 
                "source": "        var readUpToId = room.getEventReadUpTo(MatrixClientPeg.get().credentials.userId);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 38
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = room.timeline.length - 1; i >= 0; --i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 46
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1960, 
                        1963
                    ]
                }, 
                "source": "            var ev = room.timeline[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 47
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2800, 
                        2800
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 65
            }
        ], 
        "errorCount": 1, 
        "warningCount": 9, 
        "filePath": "src/Unread.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        568, 
                        571
                    ]
                }, 
                "source": "var dis = require(\"./dispatcher\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        604, 
                        607
                    ]
                }, 
                "source": "var MIN_DISPATCH_INTERVAL_MS = 500;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        640, 
                        643
                    ]
                }, 
                "source": "var CURRENTLY_ACTIVE_THRESHOLD_MS = 2000;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 58
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        return this.lastActivityAtTs > new Date().getTime() - CURRENTLY_ACTIVE_THRESHOLD_MS;", 
                "message": "Line 63 exceeds the maximum line length of 90.", 
                "line": 63
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 13, 
                "fix": {
                    "text": "            ", 
                    "range": [
                        2551, 
                        2564
                    ]
                }, 
                "source": "            {", 
                "message": "Opening curly brace does not appear on the same line as controlling statement.", 
                "line": 70
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 40, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3021, 
                        3021
                    ]
                }, 
                "source": "                action: 'user_activity'", 
                "message": "Missing trailing comma.", 
                "line": 82
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 82, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3213, 
                        3213
                    ]
                }, 
                "source": "                    this._onActivityEndTimer.bind(this), MIN_DISPATCH_INTERVAL_MS", 
                "message": "Missing trailing comma.", 
                "line": 86
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3300, 
                        3303
                    ]
                }, 
                "source": "        var now = new Date().getTime();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 93
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3340, 
                        3343
                    ]
                }, 
                "source": "        var targetTime = this.lastActivityAtTs + MIN_DISPATCH_INTERVAL_MS;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 94
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 44, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3510, 
                        3510
                    ]
                }, 
                "source": "                action: 'user_activity_end'", 
                "message": "Missing trailing comma.", 
                "line": 97
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 70, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3708, 
                        3708
                    ]
                }, 
                "source": "                this._onActivityEndTimer.bind(this), targetTime - now", 
                "message": "Missing trailing comma.", 
                "line": 102
            }
        ], 
        "errorCount": 4, 
        "warningCount": 8, 
        "filePath": "src/UserActivity.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        582, 
                        585
                    ]
                }, 
                "source": "var q = require(\"q\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        604, 
                        607
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"./MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        656, 
                        659
                    ]
                }, 
                "source": "var Notifier = require(\"./Notifier\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        996, 
                        999
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 30, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1352, 
                        1352
                    ]
                }, 
                "source": "                threepids: []", 
                "message": "Missing trailing comma.", 
                "line": 47
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 30, 
                "source": "    changePassword: function(old_password, new_password) {", 
                "message": "Identifier 'old_password' is not in camel case.", 
                "line": 76
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 44, 
                "source": "    changePassword: function(old_password, new_password) {", 
                "message": "Identifier 'new_password' is not in camel case.", 
                "line": 76
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2069, 
                        2072
                    ]
                }, 
                "source": "        var cli = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 77
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2111, 
                        2114
                    ]
                }, 
                "source": "        var authDict = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 79
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2242, 
                        2242
                    ]
                }, 
                "source": "            password: old_password", 
                "message": "Missing trailing comma.", 
                "line": 82
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'address'.", 
                "line": 88
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 88
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'pushers'.", 
                "line": 88
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < pushers.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 98
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3598, 
                        3601
                    ]
                }, 
                "source": "        var event = MatrixClientPeg.get().getAccountData(\"org.matrix.preview_urls\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 124
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 30, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3928, 
                        3928
                    ]
                }, 
                "source": "            disable: disabled", 
                "message": "Missing trailing comma.", 
                "line": 131
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3993, 
                        3996
                    ]
                }, 
                "source": "        var event = MatrixClientPeg.get().getAccountData(\"im.vector.web.settings\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 136
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4193, 
                        4196
                    ]
                }, 
                "source": "        var settings = this.getSyncedSettings();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 141
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4366, 
                        4369
                    ]
                }, 
                "source": "        var settings = this.getSyncedSettings();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 146
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var i = 0; i < this.LABS_FEATURES.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 157
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4880, 
                        4883
                    ]
                }, 
                "source": "                var f = this.LABS_FEATURES[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 158
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5260, 
                        5260
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 169
            }
        ], 
        "errorCount": 4, 
        "warningCount": 18, 
        "filePath": "src/UserSettingsStore.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'file'.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1069, 
                        1072
                    ]
                }, 
                "source": "    var deferred = q.defer();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1099, 
                        1102
                    ]
                }, 
                "source": "    var reader = new FileReader();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 32
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc parameter type for 'file'.", 
                "line": 44
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc parameter type for 'file.url'.", 
                "line": 44
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc parameter type for 'file.mimetype'.", 
                "line": 44
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 44
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2354, 
                        2357
                    ]
                }, 
                "source": "        var blob = new Blob([dataArray], {type: file.mimetype});", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 64
            }
        ], 
        "errorCount": 0, 
        "warningCount": 8, 
        "filePath": "src/utils/DecryptFile.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 44
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 53
            }
        ], 
        "errorCount": 0, 
        "warningCount": 2, 
        "filePath": "src/utils/DMRoomMap.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 17
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'count'.", 
                "line": 17
            }
        ], 
        "errorCount": 0, 
        "warningCount": 2, 
        "filePath": "src/utils/FormattingUtils.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Expected JSDoc for 'data' but found 'file'.", 
                "line": 32
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 16, 
                "source": "        const [aes_key, hmac_key] = keys;", 
                "message": "Identifier 'aes_key' is not in camel case.", 
                "line": 64
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 25, 
                "source": "        const [aes_key, hmac_key] = keys;", 
                "message": "Identifier 'hmac_key' is not in camel case.", 
                "line": 64
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 11, 
                "source": "    const kdf_rounds = options.kdf_rounds || 100000;", 
                "message": "Identifier 'kdf_rounds' is not in camel case.", 
                "line": 105
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 16, 
                "source": "        const [aes_key, hmac_key] = keys;", 
                "message": "Identifier 'aes_key' is not in camel case.", 
                "line": 119
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 25, 
                "source": "        const [aes_key, hmac_key] = keys;", 
                "message": "Identifier 'hmac_key' is not in camel case.", 
                "line": 119
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 35, 
                "source": "            resultBuffer[idx++] = kdf_rounds >> 24;", 
                "message": "Identifier 'kdf_rounds' is not in camel case.", 
                "line": 137
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 36, 
                "source": "            resultBuffer[idx++] = (kdf_rounds >> 16) & 0xff;", 
                "message": "Identifier 'kdf_rounds' is not in camel case.", 
                "line": 138
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 36, 
                "source": "            resultBuffer[idx++] = (kdf_rounds >> 8) & 0xff;", 
                "message": "Identifier 'kdf_rounds' is not in camel case.", 
                "line": 139
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 35, 
                "source": "            resultBuffer[idx++] = kdf_rounds & 0xff;", 
                "message": "Identifier 'kdf_rounds' is not in camel case.", 
                "line": 140
            }, 
            {
                "nodeType": "ArrayExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 23, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5446, 
                        5446
                    ]
                }, 
                "source": "        ['deriveBits']", 
                "message": "Missing trailing comma.", 
                "line": 172
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 16, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5703, 
                        5703
                    ]
                }, 
                "source": "            512", 
                "message": "Missing trailing comma.", 
                "line": 182
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const aes_key = keybits.slice(0, 32);", 
                "message": "Identifier 'aes_key' is not in camel case.", 
                "line": 185
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const hmac_key = keybits.slice(32);", 
                "message": "Identifier 'hmac_key' is not in camel case.", 
                "line": 186
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const aes_prom = subtleCrypto.importKey(", 
                "message": "Identifier 'aes_prom' is not in camel case.", 
                "line": 188
            }, 
            {
                "nodeType": "ArrayExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 35, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6006, 
                        6006
                    ]
                }, 
                "source": "            ['encrypt', 'decrypt']", 
                "message": "Missing trailing comma.", 
                "line": 193
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 15, 
                "source": "        const hmac_prom = subtleCrypto.importKey(", 
                "message": "Identifier 'hmac_prom' is not in camel case.", 
                "line": 195
            }, 
            {
                "nodeType": "ArrayExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6258, 
                        6258
                    ]
                }, 
                "source": "            ['sign', 'verify']", 
                "message": "Missing trailing comma.", 
                "line": 203
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 29, 
                "source": "        return Promise.all([aes_prom, hmac_prom]);", 
                "message": "Identifier 'aes_prom' is not in camel case.", 
                "line": 205
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 39, 
                "source": "        return Promise.all([aes_prom, hmac_prom]);", 
                "message": "Identifier 'hmac_prom' is not in camel case.", 
                "line": 205
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9104, 
                        9107
                    ]
                }, 
                "source": "    var latin1String = String.fromCharCode.apply(null, uint8Array);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 300
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9515, 
                        9518
                    ]
                }, 
                "source": "    var latin1String = window.atob(base64);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 312
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9600, 
                        9603
                    ]
                }, 
                "source": "    var uint8Array = new Uint8Array(latin1String.length);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 314
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 10, 
                "source": "    for (var i = 0; i < latin1String.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 315
            }
        ], 
        "errorCount": 4, 
        "warningCount": 20, 
        "filePath": "src/utils/MegolmExportEncryption.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Expected JSDoc for 'addrs' but found 'addresses'.", 
                "line": 35
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "src/utils/MultiInviter.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 17
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'receiptEvent'.", 
                "line": 17
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'userId'.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        777, 
                        780
                    ]
                }, 
                "source": "    var receiptKeys = Object.keys(receiptEvent.getContent());", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 10, 
                "source": "    for (var i = 0; i < receiptKeys.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        894, 
                        897
                    ]
                }, 
                "source": "        var rcpt = receiptEvent.getContent()[receiptKeys[i]];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }
        ], 
        "errorCount": 0, 
        "warningCount": 6, 
        "filePath": "src/utils/Receipt.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        0, 
                        3
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        30, 
                        33
                    ]
                }, 
                "source": "var ReactDom = require('react-dom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 2
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        67, 
                        70
                    ]
                }, 
                "source": "var Velocity = require('velocity-vector');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 3
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'newChildren'.", 
                "line": 45
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1586, 
                        1589
                    ]
                }, 
                "source": "        var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1611, 
                        1614
                    ]
                }, 
                "source": "        var oldChildren = this.children || {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1798, 
                        1801
                    ]
                }, 
                "source": "                var old = oldChildren[c.key];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 54
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1844, 
                        1847
                    ]
                }, 
                "source": "                var oldNode = ReactDom.findDOMNode(self.nodes[old.key]);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 55
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    Velocity(oldNode, { left: c.props.style.left }, self.props.transition).then(function() {", 
                "message": "Line 58 exceeds the maximum line length of 90.", 
                "line": 58
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 21, 
                "source": "                    Velocity(oldNode, { left: c.props.style.left }, self.props.transition).then(function() {", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 58
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                        if (oldNode.style.visibility == 'visible' && c.props.style.visibility == 'hidden') {", 
                "message": "Line 61 exceeds the maximum line length of 90.", 
                "line": 61
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                    if (oldNode.style.visibility == 'hidden' && c.props.style.visibility == 'visible') {", 
                "message": "Line 65 exceeds the maximum line length of 90.", 
                "line": 65
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3065, 
                        3068
                    ]
                }, 
                "source": "                var newProps = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 74
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3100, 
                        3103
                    ]
                }, 
                "source": "                var restingStyle = c.props.style;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 75
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3151, 
                        3154
                    ]
                }, 
                "source": "                var startStyles = self.props.startStyles;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 77
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 21, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3259, 
                        3262
                    ]
                }, 
                "source": "                    var startStyle = startStyles[0];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 79
            }, 
            {
                "nodeType": "ArrowFunctionExpression", 
                "severity": 1, 
                "ruleId": "arrow-parens", 
                "column": 33, 
                "fix": {
                    "text": "(n)", 
                    "range": [
                        3480, 
                        3481
                    ]
                }, 
                "source": "                newProps.ref = (n => self._collectNode(", 
                "message": "Expected parentheses around arrow function argument.", 
                "line": 84
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 43, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3546, 
                        3546
                    ]
                }, 
                "source": "                    c.key, n, restingStyle", 
                "message": "Missing trailing comma.", 
                "line": 85
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4145, 
                        4148
                    ]
                }, 
                "source": "            var startStyles = this.props.startStyles;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 106
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4199, 
                        4202
                    ]
                }, 
                "source": "            var transitionOpts = this.props.enterTransitionOpts;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 107
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var i = 1; i < startStyles.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 111
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 17, 
                "source": "                Velocity(domNode, startStyles[i], transitionOpts[i-1]);", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 112
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "new-cap", 
                "column": 13, 
                "source": "            Velocity(domNode, restingStyle,", 
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.", 
                "line": 123
            }
        ], 
        "errorCount": 1, 
        "warningCount": 22, 
        "filePath": "src/Velociraptor.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        0, 
                        3
                    ]
                }, 
                "source": "var Velocity = require('velocity-vector');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 5, 
                "source": "    var pow2,", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 6
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        211, 
                        214
                    ]
                }, 
                "source": "    var pow2,", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 6
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );", 
                "message": "Line 12 exceeds the maximum line length of 90.", 
                "line": 12
            }
        ], 
        "errorCount": 0, 
        "warningCount": 4, 
        "filePath": "src/VelocityBounce.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        0, 
                        3
                    ]
                }, 
                "source": "var MatrixClientPeg = require(\"./MatrixClientPeg\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1
            }, 
            {
                "nodeType": "ArrayExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 61, 
                "fix": {
                    "text": ",", 
                    "range": [
                        210, 
                        210
                    ]
                }, 
                "source": "            room, [MatrixClientPeg.get().credentials.userId]", 
                "message": "Missing trailing comma.", 
                "line": 6
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 10
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'room'.", 
                "line": 10
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 5, 
                "source": "    /**", 
                "message": "Missing JSDoc for parameter 'exclude'.", 
                "line": 10
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        431, 
                        434
                    ]
                }, 
                "source": "        var whoIsTyping = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 15
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        536, 
                        539
                    ]
                }, 
                "source": "        var memberKeys = Object.keys(room.currentState.members);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < memberKeys.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        659, 
                        662
                    ]
                }, 
                "source": "            var userId = memberKeys[i];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1797, 
                        1797
                    ]
                }, 
                "source": "    }", 
                "message": "Missing trailing comma.", 
                "line": 55
            }
        ], 
        "errorCount": 2, 
        "warningCount": 8, 
        "filePath": "src/WhoIsTyping.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc @returns for function.", 
                "line": 20
            }, 
            {
                "nodeType": "Block", 
                "severity": 1, 
                "ruleId": "valid-jsdoc", 
                "column": 1, 
                "source": "/**", 
                "message": "Missing JSDoc for parameter 'WrappedComponent'.", 
                "line": 20
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            return <WrappedComponent {...this.props} matrixClient={this.context.matrixClient} />;", 
                "message": "Line 36 exceeds the maximum line length of 90.", 
                "line": 36
            }
        ], 
        "errorCount": 0, 
        "warningCount": 3, 
        "filePath": "src/wrappers/WithMatrixClient.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        113, 
                        116
                    ]
                }, 
                "source": "var context = require.context('.', true, /-test\\.jsx?$/);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 6
            }
        ], 
        "errorCount": 0, 
        "warningCount": 1, 
        "filePath": "test/all-tests.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        592, 
                        595
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        629, 
                        632
                    ]
                }, 
                "source": "var TestUtils = require('react-addons-test-utils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        681, 
                        684
                    ]
                }, 
                "source": "var expect = require('expect');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        714, 
                        717
                    ]
                }, 
                "source": "var sdk = require('matrix-react-sdk');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        754, 
                        757
                    ]
                }, 
                "source": "var MessagePanel = sdk.getComponent('structures.MessagePanel');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        819, 
                        822
                    ]
                }, 
                "source": "var test_utils = require('test-utils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 5, 
                "source": "var test_utils = require('test-utils');", 
                "message": "Identifier 'test_utils' is not in camel case.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        859, 
                        862
                    ]
                }, 
                "source": "var mockclock = require('mock-clock');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        899, 
                        902
                    ]
                }, 
                "source": "var client;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 34, 
                "fix": {
                    "text": "", 
                    "range": [
                        1348, 
                        1349
                    ]
                }, 
                "source": "describe('MessagePanel', function () {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 48
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1358, 
                        1361
                    ]
                }, 
                "source": "    var clock = mockclock.clock();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 49
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1393, 
                        1396
                    ]
                }, 
                "source": "    var realSetTimeout = window.setTimeout;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1437, 
                        1440
                    ]
                }, 
                "source": "    var events = mkEvents();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 51
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 31, 
                "source": "        test_utils.beforeEach(this);", 
                "message": "Unexpected 'this'.", 
                "line": 54
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 23, 
                "fix": {
                    "text": "", 
                    "range": [
                        1658, 
                        1659
                    ]
                }, 
                "source": "    afterEach(function () {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 59
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1734, 
                        1737
                    ]
                }, 
                "source": "        var events = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 64
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1759, 
                        1762
                    ]
                }, 
                "source": "        var ts0 = Date.now();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 65
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < 10; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 66
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2106, 
                        2109
                    ]
                }, 
                "source": "        var res = TestUtils.renderIntoDocument(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 77
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 72, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2217, 
                        2217
                    ]
                }, 
                "source": "                <WrappedMessagePanel className=\"cls\" events={events} />", 
                "message": "Missing trailing comma.", 
                "line": 78
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2302, 
                        2305
                    ]
                }, 
                "source": "        var tiles = TestUtils.scryRenderedComponentsWithType(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 82
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2540, 
                        2543
                    ]
                }, 
                "source": "        var res = TestUtils.renderIntoDocument(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 88
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[4].getId()}", 
                "message": "Line 89 exceeds the maximum line length of 90.", 
                "line": 89
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2734, 
                        2734
                    ]
                }, 
                "source": "                    readMarkerVisible={true} />", 
                "message": "Missing trailing comma.", 
                "line": 90
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2755, 
                        2758
                    ]
                }, 
                "source": "        var tiles = TestUtils.scryRenderedComponentsWithType(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 93
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var rm = TestUtils.findRenderedDOMComponentWithClass(res, 'mx_RoomView_myReadMarker_container');", 
                "message": "Line 97 exceeds the maximum line length of 90.", 
                "line": 97
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2926, 
                        2929
                    ]
                }, 
                "source": "        var rm = TestUtils.findRenderedDOMComponentWithClass(res, 'mx_RoomView_myReadMarker_container');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 97
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3108, 
                        3111
                    ]
                }, 
                "source": "        var eventContainer = ReactDOM.findDOMNode(tiles[4]).parentNode;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 100
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3451, 
                        3454
                    ]
                }, 
                "source": "        var parentDiv = document.createElement('div');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 109
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3556, 
                        3559
                    ]
                }, 
                "source": "        var mp = ReactDOM.render(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 112
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[4].getId()}", 
                "message": "Line 113 exceeds the maximum line length of 90.", 
                "line": 113
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3775, 
                        3778
                    ]
                }, 
                "source": "        var tiles = TestUtils.scryRenderedComponentsWithType(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 117
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3891, 
                        3894
                    ]
                }, 
                "source": "        var tileContainers = tiles.map(function (t) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 119
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 48, 
                "fix": {
                    "text": "", 
                    "range": [
                        3930, 
                        3931
                    ]
                }, 
                "source": "        var tileContainers = tiles.map(function (t) {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 119
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var rm = TestUtils.findRenderedDOMComponentWithClass(mp, 'mx_RoomView_myReadMarker_container');", 
                "message": "Line 124 exceeds the maximum line length of 90.", 
                "line": 124
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4066, 
                        4069
                    ]
                }, 
                "source": "        var rm = TestUtils.findRenderedDOMComponentWithClass(mp, 'mx_RoomView_myReadMarker_container');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 124
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[6].getId()}", 
                "message": "Line 129 exceeds the maximum line length of 90.", 
                "line": 129
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');", 
                "message": "Line 134 exceeds the maximum line length of 90.", 
                "line": 134
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4525, 
                        4528
                    ]
                }, 
                "source": "        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 134
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4785, 
                        4788
                    ]
                }, 
                "source": "        var hr = found[0].children[0];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 139
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5486, 
                        5489
                    ]
                }, 
                "source": "        var parentDiv = document.createElement('div');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 160
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5591, 
                        5594
                    ]
                }, 
                "source": "        var mp = ReactDOM.render(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 163
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[4].getId()}", 
                "message": "Line 164 exceeds the maximum line length of 90.", 
                "line": 164
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5810, 
                        5813
                    ]
                }, 
                "source": "        var tiles = TestUtils.scryRenderedComponentsWithType(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 168
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5926, 
                        5929
                    ]
                }, 
                "source": "        var tileContainers = tiles.map(function (t) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 170
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 48, 
                "fix": {
                    "text": "", 
                    "range": [
                        5965, 
                        5966
                    ]
                }, 
                "source": "        var tileContainers = tiles.map(function (t) {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 170
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[6].getId()}", 
                "message": "Line 176 exceeds the maximum line length of 90.", 
                "line": 176
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');", 
                "message": "Line 181 exceeds the maximum line length of 90.", 
                "line": 181
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6339, 
                        6342
                    ]
                }, 
                "source": "        var found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 181
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <WrappedMessagePanel className=\"cls\" events={events} readMarkerEventId={events[8].getId()}", 
                "message": "Line 192 exceeds the maximum line length of 90.", 
                "line": 192
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        found = TestUtils.scryRenderedDOMComponentsWithClass(mp, 'mx_RoomView_myReadMarker_container');", 
                "message": "Line 197 exceeds the maximum line length of 90.", 
                "line": 197
            }
        ], 
        "errorCount": 7, 
        "warningCount": 45, 
        "filePath": "test/components/structures/MessagePanel-test.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        0, 
                        3
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 1
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 5, 
                "source": "var React = require('react');", 
                "message": "'React' is assigned a value but never used.", 
                "line": 1
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        30, 
                        33
                    ]
                }, 
                "source": "var expect = require('expect');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 2
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        62, 
                        65
                    ]
                }, 
                "source": "var sinon = require('sinon');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 3
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        92, 
                        95
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 4
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        130, 
                        133
                    ]
                }, 
                "source": "var sdk = require('matrix-react-sdk');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 6
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        169, 
                        172
                    ]
                }, 
                "source": "var RoomView = sdk.getComponent('structures.RoomView');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 7
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        225, 
                        228
                    ]
                }, 
                "source": "var peg = require('../../../src/MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 8
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        277, 
                        280
                    ]
                }, 
                "source": "var test_utils = require('../../test-utils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 10
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 5, 
                "source": "var test_utils = require('../../test-utils');", 
                "message": "Identifier 'test_utils' is not in camel case.", 
                "line": 10
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        323, 
                        326
                    ]
                }, 
                "source": "var q = require('q');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 11
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        346, 
                        349
                    ]
                }, 
                "source": "var Skinner = require(\"../../../src/Skinner\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 13
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        393, 
                        396
                    ]
                }, 
                "source": "var stubComponent = require('../../components/stub-component.js');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 14
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 30, 
                "fix": {
                    "text": "", 
                    "range": [
                        490, 
                        491
                    ]
                }, 
                "source": "describe('RoomView', function () {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        500, 
                        503
                    ]
                }, 
                "source": "    var sandbox;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        517, 
                        520
                    ]
                }, 
                "source": "    var parentDiv;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 31, 
                "source": "        test_utils.beforeEach(this);", 
                "message": "Unexpected 'this'.", 
                "line": 21
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this.oldTimelinePanel = Skinner.getComponent('structures.TimelinePanel');", 
                "message": "Unexpected 'this'.", 
                "line": 25
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this.oldRoomHeader = Skinner.getComponent('views.rooms.RoomHeader');", 
                "message": "Unexpected 'this'.", 
                "line": 26
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 58, 
                "source": "        Skinner.addComponent('structures.TimelinePanel', this.oldTimelinePanel);", 
                "message": "Unexpected 'this'.", 
                "line": 38
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 56, 
                "source": "        Skinner.addComponent('views.rooms.RoomHeader', this.oldRoomHeader);", 
                "message": "Unexpected 'this'.", 
                "line": 39
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 54, 
                "fix": {
                    "text": "", 
                    "range": [
                        1402, 
                        1403
                    ]
                }, 
                "source": "    it('resolves a room alias to a room id', function (done) {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 42
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1510, 
                        1513
                    ]
                }, 
                "source": "        var onRoomIdResolved = sinon.spy();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 45
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        ReactDOM.render(<RoomView roomAddress=\"#alias:ser.ver\" onRoomIdResolved={onRoomIdResolved} />, parentDiv);", 
                "message": "Line 47 exceeds the maximum line length of 90.", 
                "line": 47
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 52, 
                "fix": {
                    "text": "", 
                    "range": [
                        2060, 
                        2061
                    ]
                }, 
                "source": "    it('joins by alias if given an alias', function (done) {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 58
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        var roomView = ReactDOM.render(<RoomView roomAddress=\"#alias:ser.ver\" />, parentDiv);", 
                "message": "Line 61 exceeds the maximum line length of 90.", 
                "line": 61
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2234, 
                        2237
                    ]
                }, 
                "source": "        var roomView = ReactDOM.render(<RoomView roomAddress=\"#alias:ser.ver\" />, parentDiv);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 61
            }
        ], 
        "errorCount": 9, 
        "warningCount": 18, 
        "filePath": "test/components/structures/RoomView-test.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        592, 
                        595
                    ]
                }, 
                "source": "var ReactDOM = require(\"react-dom\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        629, 
                        632
                    ]
                }, 
                "source": "var ReactTestUtils = require('react-addons-test-utils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        686, 
                        689
                    ]
                }, 
                "source": "var expect = require('expect');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        718, 
                        721
                    ]
                }, 
                "source": "var q = require('q');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        741, 
                        744
                    ]
                }, 
                "source": "var sdk = require('matrix-react-sdk');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 23
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        781, 
                        784
                    ]
                }, 
                "source": "var ScrollPanel = sdk.getComponent('structures.ScrollPanel');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        843, 
                        846
                    ]
                }, 
                "source": "var test_utils = require('test-utils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 26
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 5, 
                "source": "var test_utils = require('test-utils');", 
                "message": "Identifier 'test_utils' is not in camel case.", 
                "line": 26
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        884, 
                        887
                    ]
                }, 
                "source": "var Tester = React.createClass({", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1369, 
                        1372
                    ]
                }, 
                "source": "        var dir = back ? 'b': 'f';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 46
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1481, 
                        1484
                    ]
                }, 
                "source": "        var handler = this._fillHandlers[dir];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1528, 
                        1531
                    ]
                }, 
                "source": "        var defer = this._fillDefers[dir];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 51
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1695, 
                        1698
                    ]
                }, 
                "source": "        var res;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 57
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2104, 
                        2107
                    ]
                }, 
                "source": "        var defer = q.defer();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 76
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2242, 
                        2245
                    ]
                }, 
                "source": "        var st = ev.target.scrollTop;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 82
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        2371, 
                        2374
                    ]
                }, 
                "source": "        var d = this._scrollDefer;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 86
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3517, 
                        3520
                    ]
                }, 
                "source": "        var tiles = this.state.tileKeys.map(this._mkTile);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 127
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3903, 
                        3906
                    ]
                }, 
                "source": "    var parentDiv;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 140
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3922, 
                        3925
                    ]
                }, 
                "source": "    var tester;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 141
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3938, 
                        3941
                    ]
                }, 
                "source": "    var scrollingDiv;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 142
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 31, 
                "source": "        test_utils.beforeEach(this);", 
                "message": "Unexpected 'this'.", 
                "line": 145
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5037, 
                        5040
                    ]
                }, 
                "source": "        var events = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 176
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var i = 0; i < 10; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 180
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 60, 
                "fix": {
                    "text": ";", 
                    "range": [
                        5419, 
                        5419
                    ]
                }, 
                "source": "            expect(scrollingDiv.scrollHeight).toEqual(1550) // 10*150 + 50", 
                "message": "Missing semicolon.", 
                "line": 186
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 17, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5751, 
                        5754
                    ]
                }, 
                "source": "                var newEvents = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 194
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 22, 
                "source": "                for (var i = 0; i < 10; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 195
            }, 
            {
                "nodeType": "CallExpression", 
                "severity": 1, 
                "ruleId": "prefer-spread", 
                "column": 17, 
                "fix": {
                    "text": "(...newEvents)", 
                    "range": [
                        5908, 
                        5933
                    ]
                }, 
                "source": "                events.unshift.apply(events, newEvents);", 
                "message": "Use the spread operator instead of '.apply()'.", 
                "line": 198
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6851, 
                        6854
                    ]
                }, 
                "source": "        var events = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 224
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var i = 0; i < 40; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 227
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 60, 
                "fix": {
                    "text": ";", 
                    "range": [
                        7234, 
                        7234
                    ]
                }, 
                "source": "            expect(scrollingDiv.scrollHeight).toEqual(6050) // 40*150 + 50", 
                "message": "Missing semicolon.", 
                "line": 233
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 18, 
                "source": "            for (var i = 100; i < 120; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 257
            }
        ], 
        "errorCount": 3, 
        "warningCount": 29, 
        "filePath": "test/components/structures/ScrollPanel-test.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        562, 
                        565
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 17
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        592, 
                        595
                    ]
                }, 
                "source": "var ReactDOM = require('react-dom');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        629, 
                        632
                    ]
                }, 
                "source": "var ReactTestUtils = require('react-addons-test-utils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        686, 
                        689
                    ]
                }, 
                "source": "var expect = require('expect');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        718, 
                        721
                    ]
                }, 
                "source": "var q = require('q');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        740, 
                        743
                    ]
                }, 
                "source": "var sinon = require('sinon');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 22
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        771, 
                        774
                    ]
                }, 
                "source": "var jssdk = require('matrix-js-sdk');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 24
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        809, 
                        812
                    ]
                }, 
                "source": "var EventTimeline = jssdk.EventTimeline;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 25
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        851, 
                        854
                    ]
                }, 
                "source": "var sdk = require('matrix-react-sdk');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 27
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        890, 
                        893
                    ]
                }, 
                "source": "var TimelinePanel = sdk.getComponent('structures.TimelinePanel');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 28
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        956, 
                        959
                    ]
                }, 
                "source": "var peg = require('../../../src/MatrixClientPeg');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 29
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1008, 
                        1011
                    ]
                }, 
                "source": "var test_utils = require('test-utils');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 31
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 5, 
                "source": "var test_utils = require('test-utils');", 
                "message": "Identifier 'test_utils' is not in camel case.", 
                "line": 31
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1049, 
                        1052
                    ]
                }, 
                "source": "var ROOM_ID = '!room:localhost';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1082, 
                        1085
                    ]
                }, 
                "source": "var USER_ID = '@me:localhost';", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1579, 
                        1582
                    ]
                }, 
                "source": "    var sandbox;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 55
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1596, 
                        1599
                    ]
                }, 
                "source": "    var timelineSet;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 56
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1617, 
                        1620
                    ]
                }, 
                "source": "    var room;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 57
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1631, 
                        1634
                    ]
                }, 
                "source": "    var client;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 58
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1647, 
                        1650
                    ]
                }, 
                "source": "    var timeline;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 59
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1665, 
                        1668
                    ]
                }, 
                "source": "    var parentDiv;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 60
            }, 
            {
                "nodeType": "ExperimentalSpreadProperty", 
                "severity": 2, 
                "ruleId": "rest-spread-spacing", 
                "column": 20, 
                "fix": {
                    "text": "", 
                    "range": [
                        2143, 
                        2144
                    ]
                }, 
                "source": "                ... opts,", 
                "message": "Unexpected whitespace after spread property operator.", 
                "line": 71
            }, 
            {
                "nodeType": "EmptyStatement", 
                "severity": 2, 
                "ruleId": "no-extra-semi", 
                "column": 6, 
                "fix": {
                    "text": "", 
                    "range": [
                        2334, 
                        2335
                    ]
                }, 
                "source": "    };", 
                "message": "Unnecessary semicolon.", 
                "line": 78
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 31, 
                "source": "        test_utils.beforeEach(this);", 
                "message": "Unexpected 'this'.", 
                "line": 81
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3690, 
                        3693
                    ]
                }, 
                "source": "        var N_EVENTS = 30;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 120
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < N_EVENTS; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 121
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3818, 
                        3821
                    ]
                }, 
                "source": "        var scrollDefer;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 125
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3843, 
                        3846
                    ]
                }, 
                "source": "        var rendered = ReactDOM.render(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 126
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "                <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}", 
                "message": "Line 127 exceeds the maximum line length of 90.", 
                "line": 127
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 65, 
                "source": "                <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}", 
                "message": "JSX props should not use arrow functions", 
                "line": 127
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 103, 
                "fix": {
                    "text": ";", 
                    "range": [
                        3977, 
                        3977
                    ]
                }, 
                "source": "                <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}", 
                "message": "Missing semicolon.", 
                "line": 127
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4046, 
                        4049
                    ]
                }, 
                "source": "        var panel = rendered.refs.panel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 131
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4087, 
                        4090
                    ]
                }, 
                "source": "        var scrollingDiv = ReactTestUtils.findRenderedDOMComponentWithClass(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 132
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "source": "        var awaitPaginationCompletion = function() {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 137
            }, 
            {
                "nodeType": "IfStatement", 
                "severity": 2, 
                "ruleId": "curly", 
                "column": 13, 
                "fix": {
                    "text": "{return q();}", 
                    "range": [
                        4424, 
                        4435
                    ]
                }, 
                "source": "            if(!panel.state.forwardPaginating)", 
                "message": "Expected { after 'if' condition.", 
                "line": 138
            }, 
            {
                "nodeType": "IfStatement", 
                "severity": 2, 
                "ruleId": "curly", 
                "column": 13, 
                "fix": {
                    "text": "{return q.delay(0).then(awaitPaginationCompletion);}", 
                    "range": [
                        4469, 
                        4519
                    ]
                }, 
                "source": "            else", 
                "message": "Expected { after 'else'.", 
                "line": 140
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4665, 
                        4668
                    ]
                }, 
                "source": "        var awaitScroll = function() {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 146
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5756, 
                        5759
                    ]
                }, 
                "source": "            var ev = mkMessage(N_EVENTS+1);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 174
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6678, 
                        6681
                    ]
                }, 
                "source": "        var d = Date.now();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 197
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 13, 
                "source": "        var d = Date.now();", 
                "message": "'d' is assigned a value but never used.", 
                "line": 197
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < 3; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 198
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7140, 
                        7143
                    ]
                }, 
                "source": "        var rendered = ReactDOM.render(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 210
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7256, 
                        7256
                    ]
                }, 
                "source": "            parentDiv", 
                "message": "Missing trailing comma.", 
                "line": 212
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7276, 
                        7279
                    ]
                }, 
                "source": "        var panel = rendered.refs.panel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 214
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7318, 
                        7321
                    ]
                }, 
                "source": "        var messagePanel = ReactTestUtils.findRenderedComponentWithType(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 216
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    it(\"should let you scroll down to the bottom after you've scrolled up\", function(done) {", 
                "message": "Line 241 exceeds the maximum line length of 90.", 
                "line": 241
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8478, 
                        8481
                    ]
                }, 
                "source": "        var N_EVENTS = 120; // the number of events to simulate being added to the timeline", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 242
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 9, 
                "source": "        this.timeout(N_EVENTS * 50);", 
                "message": "Unexpected 'this'.", 
                "line": 245
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 14, 
                "source": "        for (var i = 0; i < N_EVENTS; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 252
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9032, 
                        9035
                    ]
                }, 
                "source": "        var scrollDefer;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 257
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9057, 
                        9060
                    ]
                }, 
                "source": "        var rendered = ReactDOM.render(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 258
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}/>,", 
                "message": "Line 259 exceeds the maximum line length of 90.", 
                "line": 259
            }, 
            {
                "nodeType": "JSXAttribute", 
                "severity": 2, 
                "ruleId": "react/jsx-no-bind", 
                "column": 61, 
                "source": "            <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}/>,", 
                "message": "JSX props should not use arrow functions", 
                "line": 259
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 99, 
                "fix": {
                    "text": ";", 
                    "range": [
                        9187, 
                        9187
                    ]
                }, 
                "source": "            <WrappedTimelinePanel timelineSet={timelineSet} onScroll={() => {scrollDefer.resolve()}}/>,", 
                "message": "Missing semicolon.", 
                "line": 259
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        9214, 
                        9214
                    ]
                }, 
                "source": "            parentDiv", 
                "message": "Missing trailing comma.", 
                "line": 260
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9281, 
                        9284
                    ]
                }, 
                "source": "        var panel = rendered.refs.panel;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 263
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9322, 
                        9325
                    ]
                }, 
                "source": "        var messagePanel = ReactTestUtils.findRenderedComponentWithType(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 264
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9460, 
                        9463
                    ]
                }, 
                "source": "        var scrollingDiv = ReactTestUtils.findRenderedDOMComponentWithClass(", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 266
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9701, 
                        9704
                    ]
                }, 
                "source": "        var awaitScroll = function() {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 271
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10483, 
                        10486
                    ]
                }, 
                "source": "                let eventTiles = scryEventTiles(panel);", 
                "message": "'eventTiles' is never reassigned. Use 'const' instead.", 
                "line": 292
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        10539, 
                        10542
                    ]
                }, 
                "source": "                let firstEvent = eventTiles[0].props.mxEvent;", 
                "message": "'firstEvent' is never reassigned. Use 'const' instead.", 
                "line": 293
            }, 
            {
                "nodeType": "BlockStatement", 
                "severity": 1, 
                "ruleId": "padded-blocks", 
                "column": 54, 
                "fix": {
                    "text": "\n", 
                    "range": [
                        11319, 
                        11321
                    ]
                }, 
                "source": "            return awaitScroll().delay(0).then(() => {", 
                "message": "Block must not be padded by blank lines.", 
                "line": 311
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        11337, 
                        11340
                    ]
                }, 
                "source": "                let eventTiles = scryEventTiles(panel);", 
                "message": "'eventTiles' is never reassigned. Use 'const' instead.", 
                "line": 313
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        11393, 
                        11396
                    ]
                }, 
                "source": "                let events = timeline.getEvents();", 
                "message": "'events' is never reassigned. Use 'const' instead.", 
                "line": 314
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        11445, 
                        11448
                    ]
                }, 
                "source": "                let lastEventInPanel = eventTiles[eventTiles.length - 1].props.mxEvent;", 
                "message": "'lastEventInPanel' is never reassigned. Use 'const' instead.", 
                "line": 316
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 21, 
                "fix": {
                    "text": "const", 
                    "range": [
                        11533, 
                        11536
                    ]
                }, 
                "source": "                let lastEventInTimeline = events[events.length - 1];", 
                "message": "'lastEventInTimeline' is never reassigned. Use 'const' instead.", 
                "line": 317
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12568, 
                        12571
                    ]
                }, 
                "source": "            var events = scryEventTiles(panel);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 341
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13181, 
                        13184
                    ]
                }, 
                "source": "            var events = scryEventTiles(panel);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 354
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13292, 
                        13295
                    ]
                }, 
                "source": "            var lastEventInPanel = events[events.length - 1].props.mxEvent;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 357
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            var lastEventInTimeline = timeline.getEvents()[timeline.getEvents().length - 1];", 
                "message": "Line 358 exceeds the maximum line length of 90.", 
                "line": 358
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 13, 
                "fix": {
                    "text": "let", 
                    "range": [
                        13368, 
                        13371
                    ]
                }, 
                "source": "            var lastEventInTimeline = timeline.getEvents()[timeline.getEvents().length - 1];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 358
            }
        ], 
        "errorCount": 13, 
        "warningCount": 58, 
        "filePath": "test/components/structures/TimelinePanel-test.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        97, 
                        100
                    ]
                }, 
                "source": "var React = require('react');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 5
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 10, 
                "fix": {
                    "text": ";", 
                    "range": [
                        383, 
                        383
                    ]
                }, 
                "source": "        }", 
                "message": "Missing semicolon.", 
                "line": 16
            }
        ], 
        "errorCount": 1, 
        "warningCount": 1, 
        "filePath": "test/components/stub-component.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import React from 'react';", 
                "message": "'React' is defined but never used.", 
                "line": 19
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "camelcase", 
                "column": 13, 
                "source": "import * as test_utils from '../../../test-utils';", 
                "message": "Identifier 'test_utils' is not in camel case.", 
                "line": 27
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 42, 
                "fix": {
                    "text": ",", 
                    "range": [
                        978, 
                        978
                    ]
                }, 
                "source": "    'views.dialogs.InteractiveAuthDialog'", 
                "message": "Missing trailing comma.", 
                "line": 30
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 43, 
                "fix": {
                    "text": "", 
                    "range": [
                        1025, 
                        1026
                    ]
                }, 
                "source": "describe('InteractiveAuthDialog', function () {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 33
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1035, 
                        1038
                    ]
                }, 
                "source": "    var parentDiv;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1054, 
                        1057
                    ]
                }, 
                "source": "    var sandbox;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 35
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 31, 
                "source": "        test_utils.beforeEach(this);", 
                "message": "Unexpected 'this'.", 
                "line": 38
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 53, 
                "fix": {
                    "text": " ", 
                    "range": [
                        1596, 
                        1596
                    ]
                }, 
                "source": "        const doRequest = sinon.stub().returns(q({a:1}));", 
                "message": "Missing space before value for key 'a'.", 
                "line": 52
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1673, 
                        1676
                    ]
                }, 
                "source": "        var client = MatrixClientPeg.get();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 55
            }, 
            {
                "nodeType": "ArrayExpression", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 35, 
                "fix": {
                    "text": " ", 
                    "range": [
                        1961, 
                        1961
                    ]
                }, 
                "source": "                        {\"stages\":[\"m.login.password\"]}", 
                "message": "Missing space before value for key 'stages'.", 
                "line": 63
            }, 
            {
                "nodeType": "ObjectExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 56, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1982, 
                        1982
                    ]
                }, 
                "source": "                        {\"stages\":[\"m.login.password\"]}", 
                "message": "Missing trailing comma.", 
                "line": 63
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 22, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2004, 
                        2004
                    ]
                }, 
                "source": "                    ]", 
                "message": "Missing trailing comma.", 
                "line": 64
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 25, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2290, 
                        2290
                    ]
                }, 
                "source": "            dlg, \"input\"", 
                "message": "Missing trailing comma.", 
                "line": 72
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 37, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2508, 
                        2508
                    ]
                }, 
                "source": "            dlg, \"mx_Dialog_primary\"", 
                "message": "Missing trailing comma.", 
                "line": 78
            }, 
            {
                "nodeType": "Literal", 
                "severity": 1, 
                "ruleId": "key-spacing", 
                "column": 58, 
                "fix": {
                    "text": " ", 
                    "range": [
                        3477, 
                        3477
                    ]
                }, 
                "source": "            expect(onFinished.calledWithExactly(true, {a:1})).toBe(true);", 
                "message": "Missing space before value for key 'a'.", 
                "line": 105
            }
        ], 
        "errorCount": 8, 
        "warningCount": 7, 
        "filePath": "test/components/views/dialogs/InteractiveAuthDialog-test.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 7, 
                "source": "const React = require('react');", 
                "message": "'React' is assigned a value but never used.", 
                "line": 2
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 7, 
                "source": "const ReactDOM = require(\"react-dom\");", 
                "message": "'ReactDOM' is assigned a value but never used.", 
                "line": 3
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 30, 
                "source": "        testUtils.beforeEach(this);", 
                "message": "Unexpected 'this'.", 
                "line": 86
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5916, 
                        5916
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 155
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6059, 
                        6059
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 158
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        7879, 
                        7879
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 191
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        8022, 
                        8022
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 194
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10283, 
                        10283
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 239
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10426, 
                        10426
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 242
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 75, 
                "fix": {
                    "text": ",", 
                    "range": [
                        10594, 
                        10594
                    ]
                }, 
                "source": "            \"user_1 was unbanned, joined and left 7 times and was invited\"", 
                "message": "Missing trailing comma.", 
                "line": 247
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12602, 
                        12602
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 292
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12745, 
                        12745
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 295
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 54, 
                "fix": {
                    "text": ",", 
                    "range": [
                        12967, 
                        12967
                    ]
                }, 
                "source": "            \"joined and left 3 times and was invited\"", 
                "message": "Missing trailing comma.", 
                "line": 301
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15040, 
                        15040
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 351
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15183, 
                        15183
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 354
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 88, 
                "fix": {
                    "text": ",", 
                    "range": [
                        15364, 
                        15364
                    ]
                }, 
                "source": "            \"user_1 and 1 other were unbanned, joined and left 2 times and were banned\"", 
                "message": "Missing trailing comma.", 
                "line": 359
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        16426, 
                        16426
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 389
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        16569, 
                        16569
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 392
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 90, 
                "fix": {
                    "text": ",", 
                    "range": [
                        16752, 
                        16752
                    ]
                }, 
                "source": "            \"user_0 and 19 others were unbanned, joined and left 2 times and were banned\"", 
                "message": "Missing trailing comma.", 
                "line": 397
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        18585, 
                        18585
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 440
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        18728, 
                        18728
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 443
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 53, 
                "fix": {
                    "text": ",", 
                    "range": [
                        18961, 
                        18961
                    ]
                }, 
                "source": "            \"joined and left 2 times and was banned\"", 
                "message": "Missing trailing comma.", 
                "line": 449
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        20908, 
                        20908
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 507
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        21051, 
                        21051
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 510
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 80, 
                "fix": {
                    "text": ",", 
                    "range": [
                        21314, 
                        21314
                    ]
                }, 
                "source": "            \"had their invitation withdrawn, was unbanned, was kicked and left\"", 
                "message": "Missing trailing comma.", 
                "line": 516
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        22520, 
                        22520
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 554
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        22663, 
                        22663
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 557
            }, 
            {
                "nodeType": "BinaryExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 46, 
                "fix": {
                    "text": ",", 
                    "range": [
                        22869, 
                        22869
                    ]
                }, 
                "source": "            \"had their invitations withdrawn\"", 
                "message": "Missing trailing comma.", 
                "line": 563
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        23690, 
                        23690
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 590
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        23833, 
                        23833
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 593
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 56, 
                "fix": {
                    "text": ",", 
                    "range": [
                        23982, 
                        23982
                    ]
                }, 
                "source": "            \"user_1 rejected their invitations 2 times\"", 
                "message": "Missing trailing comma.", 
                "line": 598
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        24692, 
                        24692
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 618
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        24835, 
                        24835
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 621
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 47, 
                "fix": {
                    "text": ",", 
                    "range": [
                        24975, 
                        24975
                    ]
                }, 
                "source": "            \"user_1 and user_2 joined 2 times\"", 
                "message": "Missing trailing comma.", 
                "line": 626
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        25618, 
                        25618
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 645
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        25761, 
                        25761
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 648
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 48, 
                "fix": {
                    "text": ",", 
                    "range": [
                        25902, 
                        25902
                    ]
                }, 
                "source": "            \"user_1, user_2 and 1 other joined\"", 
                "message": "Missing trailing comma.", 
                "line": 653
            }, 
            {
                "nodeType": "JSXElement", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        26423, 
                        26423
                    ]
                }, 
                "source": "            <MemberEventListSummary {...props} />", 
                "message": "Missing trailing comma.", 
                "line": 670
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 58, 
                "fix": {
                    "text": ",", 
                    "range": [
                        26566, 
                        26566
                    ]
                }, 
                "source": "            instance, \"mx_MemberEventListSummary_summary\"", 
                "message": "Missing trailing comma.", 
                "line": 673
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 50, 
                "fix": {
                    "text": ",", 
                    "range": [
                        26709, 
                        26709
                    ]
                }, 
                "source": "            \"user_0, user_1 and 18 others joined\"", 
                "message": "Missing trailing comma.", 
                "line": 678
            }
        ], 
        "errorCount": 40, 
        "warningCount": 0, 
        "filePath": "test/components/views/elements/MemberEventListSummary-test.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 8, 
                "source": "import React from 'react';", 
                "message": "'React' is defined but never used.", 
                "line": 1
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "no-unused-vars", 
                "column": 17, 
                "source": "import expect, {createSpy} from 'expect';", 
                "message": "'createSpy' is defined but never used.", 
                "line": 4
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 5, 
                "source": "    let parentDiv = null,", 
                "message": "Split 'let' declarations into multiple statements.", 
                "line": 24
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "source": "        room = testUtils.mkStubRoom('!DdJkzRliezrwpNebLk:matrix.org');", 
                "message": "'room' is never reassigned. Use 'const' instead.", 
                "line": 28
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 30, 
                "source": "        testUtils.beforeEach(this);", 
                "message": "Unexpected 'this'.", 
                "line": 33
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 11, 
                "fix": {
                    "text": ";", 
                    "range": [
                        2153, 
                        2153
                    ]
                }, 
                "source": "        })", 
                "message": "Missing semicolon.", 
                "line": 62
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "            expect(mci.state.isRichtextEnabled).toEqual(false, 'should have changed mode');", 
                "message": "Line 75 exceeds the maximum line length of 90.", 
                "line": 75
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        expect(spy.args[0][1]).toEqual('Lorem ipsum dolor sit amet, consectetur adipiscing elit.');", 
                "message": "Line 230 exceeds the maximum line length of 90.", 
                "line": 230
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        addTextToDraft('Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n\\nFusce congue sapien sed neque molestie volutpat.');", 
                "message": "Line 236 exceeds the maximum line length of 90.", 
                "line": 236
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        expect(spy.args[0][1]).toEqual('Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n\\nFusce congue sapien sed neque molestie volutpat.');", 
                "message": "Line 240 exceeds the maximum line length of 90.", 
                "line": 240
            }
        ], 
        "errorCount": 4, 
        "warningCount": 6, 
        "filePath": "test/components/views/rooms/MessageComposerInput-test.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Program", 
                "severity": 2, 
                "ruleId": "no-trailing-spaces", 
                "column": 3, 
                "fix": {
                    "text": "", 
                    "range": [
                        1598, 
                        1600
                    ]
                }, 
                "source": " *  ", 
                "message": "Trailing spaces not allowed.", 
                "line": 40
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1825, 
                        1828
                    ]
                }, 
                "source": "var j$ = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 46
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 20, 
                "fix": {
                    "text": "", 
                    "range": [
                        1858, 
                        1859
                    ]
                }, 
                "source": "j$.Clock = function () {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 48
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1938, 
                        1941
                    ]
                }, 
                "source": "    var self = this,", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 50
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "one-var", 
                "column": 5, 
                "source": "    var self = this,", 
                "message": "Split 'var' declarations into multiple statements.", 
                "line": 50
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 44, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2151, 
                        2151
                    ]
                }, 
                "source": "        clearInterval: global.clearInterval", 
                "message": "Missing trailing comma.", 
                "line": 55
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 37, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2329, 
                        2329
                    ]
                }, 
                "source": "        clearInterval: clearInterval", 
                "message": "Missing trailing comma.", 
                "line": 61
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        throw new Error('Jasmine Clock was unable to install over custom global timer functions. Is the clock already installed?');", 
                "message": "Line 70 exceeds the maximum line length of 90.", 
                "line": 70
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "          throw new Error('IE < 9 cannot support extra params to setTimeout without a polyfill');", 
                "message": "Line 105 exceeds the maximum line length of 90.", 
                "line": 105
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 72, 
                "source": "      return Function.prototype.apply.apply(timer.setTimeout, [global, arguments]);", 
                "endLine": 109, 
                "endColumn": 81, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 109
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "          throw new Error('IE < 9 cannot support extra params to setInterval without a polyfill');", 
                "message": "Line 115 exceeds the maximum line length of 90.", 
                "line": 115
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 73, 
                "source": "      return Function.prototype.apply.apply(timer.setInterval, [global, arguments]);", 
                "endLine": 119, 
                "endColumn": 82, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 119
            }, 
            {
                "nodeType": "ForInStatement", 
                "severity": 2, 
                "ruleId": "guard-for-in", 
                "column": 7, 
                "source": "      for (var prop in source) {", 
                "message": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.", 
                "line": 154
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 12, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5097, 
                        5100
                    ]
                }, 
                "source": "      for (var prop in source) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 154
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 76, 
                "source": "      return delayedFunctionScheduler.scheduleFunction(fn, delay, argSlice(arguments, 2));", 
                "endLine": 160, 
                "endColumn": 85, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 160
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "      return delayedFunctionScheduler.scheduleFunction(fn, interval, argSlice(arguments, 2), true);", 
                "message": "Line 168 exceeds the maximum line length of 90.", 
                "line": 168
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 79, 
                "source": "      return delayedFunctionScheduler.scheduleFunction(fn, interval, argSlice(arguments, 2), true);", 
                "endLine": 168, 
                "endColumn": 88, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 168
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5869, 
                        5872
                    ]
                }, 
                "source": "    var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 186
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5890, 
                        5893
                    ]
                }, 
                "source": "    var scheduledLookup = [];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 187
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5920, 
                        5923
                    ]
                }, 
                "source": "    var scheduledFunctions = {};", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 188
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5953, 
                        5956
                    ]
                }, 
                "source": "    var currentTime = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 189
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        5978, 
                        5981
                    ]
                }, 
                "source": "    var delayedFnCount = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 190
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 7, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6072, 
                        6075
                    ]
                }, 
                "source": "      var endTime = currentTime + millis;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 194
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "    self.scheduleFunction = function(funcToCall, millis, params, recurring, timeoutKey, runAtMillis) {", 
                "message": "Line 200 exceeds the maximum line length of 90.", 
                "line": 200
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 7, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6293, 
                        6296
                    ]
                }, 
                "source": "      var f;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 201
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 7, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6656, 
                        6659
                    ]
                }, 
                "source": "      var funcToSchedule = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 214
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 23, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6844, 
                        6844
                    ]
                }, 
                "source": "        millis: millis", 
                "message": "Missing trailing comma.", 
                "line": 220
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 38, 
                "fix": {
                    "text": "", 
                    "range": [
                        7119, 
                        7120
                    ]
                }, 
                "source": "        scheduledLookup.sort(function (a, b) {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 228
            }, 
            {
                "nodeType": "ForInStatement", 
                "severity": 2, 
                "ruleId": "guard-for-in", 
                "column": 7, 
                "source": "      for (var runAtMillis in scheduledFunctions) {", 
                "message": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.", 
                "line": 237
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 12, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7273, 
                        7276
                    ]
                }, 
                "source": "      for (var runAtMillis in scheduledFunctions) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 237
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7322, 
                        7325
                    ]
                }, 
                "source": "        var funcs = scheduledFunctions[runAtMillis];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 238
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7375, 
                        7378
                    ]
                }, 
                "source": "        var i = indexOfFirstToPass(funcs, function (func) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 239
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 51, 
                "fix": {
                    "text": "", 
                    "range": [
                        7417, 
                        7418
                    ]
                }, 
                "source": "        var i = indexOfFirstToPass(funcs, function (func) {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 239
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 7, 
                "fix": {
                    "text": "let", 
                    "range": [
                        7968, 
                        7971
                    ]
                }, 
                "source": "      var index = -1;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 261
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 12, 
                "source": "      for (var i = 0; i < array.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 263
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 7, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8191, 
                        8194
                    ]
                }, 
                "source": "      var value = Number(key);", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 274
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 7, 
                "fix": {
                    "text": "let", 
                    "range": [
                        8222, 
                        8225
                    ]
                }, 
                "source": "      var i = indexOfFirstToPass(scheduledLookup, function (millis) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 275
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 59, 
                "fix": {
                    "text": "", 
                    "range": [
                        8274, 
                        8275
                    ]
                }, 
                "source": "      var i = indexOfFirstToPass(scheduledLookup, function (millis) {", 
                "message": "Unexpected space before function parentheses.", 
                "line": 275
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 12, 
                "source": "      for (var i = 0; i < funcsToRun.length; ++i) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 294
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 9, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9023, 
                        9026
                    ]
                }, 
                "source": "        var funcsToRun = scheduledFunctions[currentTime];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 307
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 2, 
                "ruleId": "no-multi-spaces", 
                "column": 43, 
                "fix": {
                    "text": " ", 
                    "range": [
                        9650, 
                        9652
                    ]
                }, 
                "source": "                 currentTime !== endTime  &&", 
                "message": "Multiple spaces found before '&&'.", 
                "line": 322
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9818, 
                        9821
                    ]
                }, 
                "source": "    var self = this;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 333
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        9839, 
                        9842
                    ]
                }, 
                "source": "    var currentTime = 0;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 334
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        10033, 
                        10036
                    ]
                }, 
                "source": "    var GlobalDate = global.Date;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 343
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "          return new GlobalDate(arguments[0]);", 
                "endLine": 374, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 374
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "          return new GlobalDate(arguments[0], arguments[1]);", 
                "endLine": 376, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 376
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 47, 
                "source": "          return new GlobalDate(arguments[0], arguments[1]);", 
                "endLine": 376, 
                "endColumn": 56, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 376
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2]);", 
                "endLine": 378, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 378
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 47, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2]);", 
                "endLine": 378, 
                "endColumn": 56, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 378
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 61, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2]);", 
                "endLine": 378, 
                "endColumn": 70, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 378
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);", 
                "endLine": 380, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 380
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 47, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);", 
                "endLine": 380, 
                "endColumn": 56, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 380
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 61, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);", 
                "endLine": 380, 
                "endColumn": 70, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 380
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 75, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);", 
                "endLine": 380, 
                "endColumn": 84, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 380
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 382, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 382
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 47, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 382, 
                "endColumn": 56, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 382
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 61, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 382, 
                "endColumn": 70, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 382
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 75, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 382, 
                "endColumn": 84, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 382
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "                                arguments[4]);", 
                "endLine": 383, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 383
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 385, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 385
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 47, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 385, 
                "endColumn": 56, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 385
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 61, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 385, 
                "endColumn": 70, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 385
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 75, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 385, 
                "endColumn": 84, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 385
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "                                arguments[4], arguments[5]);", 
                "endLine": 386, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 386
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 47, 
                "source": "                                arguments[4], arguments[5]);", 
                "endLine": 386, 
                "endColumn": 56, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 386
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 388, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 388
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 47, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 388, 
                "endColumn": 56, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 388
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 61, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 388, 
                "endColumn": 70, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 388
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 75, 
                "source": "          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],", 
                "endLine": 388, 
                "endColumn": 84, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 388
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 33, 
                "source": "                                arguments[4], arguments[5], arguments[6]);", 
                "endLine": 389, 
                "endColumn": 42, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 389
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 47, 
                "source": "                                arguments[4], arguments[5], arguments[6]);", 
                "endLine": 389, 
                "endColumn": 56, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 389
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-rest-params", 
                "column": 61, 
                "source": "                                arguments[4], arguments[5], arguments[6]);", 
                "endLine": 389, 
                "endColumn": 70, 
                "message": "Use the rest parameters instead of 'arguments'.", 
                "line": 389
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "var clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));", 
                "message": "Line 414 exceeds the maximum line length of 90.", 
                "line": 414
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        12019, 
                        12022
                    ]
                }, 
                "source": "var clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 414
            }, 
            {
                "nodeType": "FunctionExpression", 
                "severity": 2, 
                "ruleId": "space-before-function-paren", 
                "column": 42, 
                "fix": {
                    "text": "", 
                    "range": [
                        12060, 
                        12061
                    ]
                }, 
                "source": "var clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));", 
                "message": "Unexpected space before function parentheses.", 
                "line": 414
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 2, 
                "fix": {
                    "text": ";", 
                    "range": [
                        12193, 
                        12193
                    ]
                }, 
                "source": "}", 
                "message": "Missing semicolon.", 
                "line": 418
            }
        ], 
        "errorCount": 13, 
        "warningCount": 63, 
        "filePath": "test/mock-clock.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        357, 
                        360
                    ]
                }, 
                "source": "var sdk = require(\"../src/index\");", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        393, 
                        396
                    ]
                }, 
                "source": "var skin = require('../src/component-index.js');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 18
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        442, 
                        445
                    ]
                }, 
                "source": "var stubComponent = require('./components/stub-component.js');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 19
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        506, 
                        509
                    ]
                }, 
                "source": "var components = skin.components;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 21
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "components['views.messages.DateSeparator'] = stubComponent({displayName: 'DateSeparator'});", 
                "message": "Line 29 exceeds the maximum line length of 90.", 
                "line": 29
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "components['views.messages.MessageTimestamp'] = stubComponent({displayName: 'MessageTimestamp'});", 
                "message": "Line 30 exceeds the maximum line length of 90.", 
                "line": 30
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "components['views.messages.SenderProfile'] = stubComponent({displayName: 'SenderProfile'});", 
                "message": "Line 31 exceeds the maximum line length of 90.", 
                "line": 31
            }
        ], 
        "errorCount": 0, 
        "warningCount": 7, 
        "filePath": "test/skinned-sdk.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        15, 
                        18
                    ]
                }, 
                "source": "var sinon = require('sinon');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 3
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        45, 
                        48
                    ]
                }, 
                "source": "var q = require('q');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 4
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        68, 
                        71
                    ]
                }, 
                "source": "var peg = require('../src/MatrixClientPeg.js');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 6
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        116, 
                        119
                    ]
                }, 
                "source": "var jssdk = require('matrix-js-sdk');", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 7
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 1, 
                "fix": {
                    "text": "let", 
                    "range": [
                        154, 
                        157
                    ]
                }, 
                "source": "var MatrixEvent = jssdk.MatrixEvent;", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 8
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        390, 
                        393
                    ]
                }, 
                "source": "    var desc = context.currentTest.fullTitle();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 16
            }, 
            {
                "nodeType": "EmptyStatement", 
                "severity": 2, 
                "ruleId": "no-extra-semi", 
                "column": 2, 
                "fix": {
                    "text": "", 
                    "range": [
                        532, 
                        533
                    ]
                }, 
                "source": "};", 
                "message": "Unnecessary semicolon.", 
                "line": 20
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        944, 
                        947
                    ]
                }, 
                "source": "    var sandbox = sinon.sandbox.create();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 34
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        987, 
                        990
                    ]
                }, 
                "source": "    var client = createTestClient();", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 36
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        1188, 
                        1191
                    ]
                }, 
                "source": "    var methods = ['get', 'unset', 'replaceUsingCreds'];", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 42
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 10, 
                "source": "    for (var i = 0; i < methods.length; i++) {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 43
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        3392, 
                        3395
                    ]
                }, 
                "source": "    var event = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 106
            }, 
            {
                "nodeType": "Punctuator", 
                "severity": 1, 
                "ruleId": "brace-style", 
                "column": 5, 
                "fix": {
                    "text": "    ", 
                    "range": [
                        3724, 
                        3729
                    ]
                }, 
                "source": "    }", 
                "message": "Closing curly brace does not appear on the same line as the subsequent block.", 
                "line": 117
            }, 
            {
                "nodeType": "EmptyStatement", 
                "severity": 2, 
                "ruleId": "no-extra-semi", 
                "column": 2, 
                "fix": {
                    "text": "", 
                    "range": [
                        4008, 
                        4009
                    ]
                }, 
                "source": "};", 
                "message": "Unnecessary semicolon.", 
                "line": 124
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        4249, 
                        4252
                    ]
                }, 
                "source": "    var event = {", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 135
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 49, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4555, 
                        4555
                    ]
                }, 
                "source": "            presence: opts.presence || \"offline\"", 
                "message": "Missing trailing comma.", 
                "line": 143
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 10, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4565, 
                        4565
                    ]
                }, 
                "source": "        }", 
                "message": "Missing trailing comma.", 
                "line": 144
            }, 
            {
                "nodeType": "EmptyStatement", 
                "severity": 2, 
                "ruleId": "no-extra-semi", 
                "column": 2, 
                "fix": {
                    "text": "", 
                    "range": [
                        4630, 
                        4631
                    ]
                }, 
                "source": "};", 
                "message": "Unnecessary semicolon.", 
                "line": 147
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 31, 
                "fix": {
                    "text": ",", 
                    "range": [
                        5658, 
                        5658
                    ]
                }, 
                "source": "        membership: opts.mship", 
                "message": "Missing trailing comma.", 
                "line": 173
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 1, 
                "ruleId": "prefer-const", 
                "column": 9, 
                "fix": {
                    "text": "const", 
                    "range": [
                        5881, 
                        5884
                    ]
                }, 
                "source": "    let e = mkEvent(opts);", 
                "message": "'e' is never reassigned. Use 'const' instead.", 
                "line": 180
            }, 
            {
                "nodeType": "EmptyStatement", 
                "severity": 2, 
                "ruleId": "no-extra-semi", 
                "column": 2, 
                "fix": {
                    "text": "", 
                    "range": [
                        5980, 
                        5981
                    ]
                }, 
                "source": "};", 
                "message": "Unnecessary semicolon.", 
                "line": 185
            }, 
            {
                "nodeType": "Property", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 23, 
                "fix": {
                    "text": ",", 
                    "range": [
                        6672, 
                        6672
                    ]
                }, 
                "source": "        body: opts.msg", 
                "message": "Missing trailing comma.", 
                "line": 206
            }, 
            {
                "nodeType": "VariableDeclaration", 
                "severity": 1, 
                "ruleId": "no-var", 
                "column": 5, 
                "fix": {
                    "text": "let", 
                    "range": [
                        6757, 
                        6760
                    ]
                }, 
                "source": "    var stubTimeline = { getEvents: () => [] };", 
                "message": "Unexpected var, use let or const instead.", 
                "line": 212
            }
        ], 
        "errorCount": 8, 
        "warningCount": 15, 
        "filePath": "test/test-utils.js"
    }, 
    {
        "messages": [
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXNhbHRzYWx0c2FsdHNhbHSIiIiIiIiIiIiIiIiIiIiIAAAACmIRUW2OjZ3L2l6j9h0lHlV3M2dx\\ncissyYBxjsfsAndErh065A8=\\n-----END MEGOLM SESSION DATA-----\"", 
                "message": "Line 28 exceeds the maximum line length of 90.", 
                "line": 28
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 185, 
                "fix": {
                    "text": ",", 
                    "range": [
                        978, 
                        978
                    ]
                }, 
                "source": "        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXNhbHRzYWx0c2FsdHNhbHSIiIiIiIiIiIiIiIiIiIiIAAAACmIRUW2OjZ3L2l6j9h0lHlV3M2dx\\ncissyYBxjsfsAndErh065A8=\\n-----END MEGOLM SESSION DATA-----\"", 
                "message": "Missing trailing comma.", 
                "line": 28
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        \"-----BEGIN MEGOLM SESSION DATA-----\\nAW1vcmVzYWx0bW9yZXNhbHT//////////wAAAAAAAAAAAAAD6KyBpe1Niv5M5NPm4ZATsJo5nghk\\nKYu63a0YQ5DRhUWEKk7CcMkrKnAUiZny\\n-----END MEGOLM SESSION DATA-----\"", 
                "message": "Line 33 exceeds the maximum line length of 90.", 
                "line": 33
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 193, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1234, 
                        1234
                    ]
                }, 
                "source": "        \"-----BEGIN MEGOLM SESSION DATA-----\\nAW1vcmVzYWx0bW9yZXNhbHT//////////wAAAAAAAAAAAAAD6KyBpe1Niv5M5NPm4ZATsJo5nghk\\nKYu63a0YQ5DRhUWEKk7CcMkrKnAUiZny\\n-----END MEGOLM SESSION DATA-----\"", 
                "message": "Missing trailing comma.", 
                "line": 33
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXllc3NhbHR5Z29vZG5lc3P//////////wAAAAAAAAAAAAAD6OIW+Je7gwvjd4kYrb+49gKCfExw\\nMgJBMD4mrhLkmgAngwR1pHjbWXaoGybtiAYr0moQ93GrBQsCzPbvl82rZhaXO3iH5uHo/RCEpOqp\\nPgg29363BGR+/Ripq/VCLKGNbw==\\n-----END MEGOLM SESSION DATA-----\"", 
                "message": "Line 38 exceeds the maximum line length of 90.", 
                "line": 38
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 267, 
                "fix": {
                    "text": ",", 
                    "range": [
                        1611, 
                        1611
                    ]
                }, 
                "source": "        \"-----BEGIN MEGOLM SESSION DATA-----\\nAXllc3NhbHR5Z29vZG5lc3P//////////wAAAAAAAAAAAAAD6OIW+Je7gwvjd4kYrb+49gKCfExw\\nMgJBMD4mrhLkmgAngwR1pHjbWXaoGybtiAYr0moQ93GrBQsCzPbvl82rZhaXO3iH5uHo/RCEpOqp\\nPgg29363BGR+/Ripq/VCLKGNbw==\\n-----END MEGOLM SESSION DATA-----\"", 
                "message": "Missing trailing comma.", 
                "line": 38
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        \"passwordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpasswordpassword\",", 
                "message": "Line 42 exceeds the maximum line length of 90.", 
                "line": 42
            }, 
            {
                "nodeType": "Program", 
                "severity": 1, 
                "ruleId": "max-len", 
                "column": 1, 
                "source": "        \"-----BEGIN MEGOLM SESSION DATA-----\\nAf//////////////////////////////////////////AAAD6IAZJy7IQ7Y0idqSw/bmpngEEVVh\\ngsH+8ptgqxw6ZVWQnohr8JsuwH9SwGtiebZuBu5smPCO+RFVWH2cQYslZijXv/BEH/txvhUrrtCd\\nbWnSXS9oymiqwUIGs08sXI33ZA==\\n-----END MEGOLM SESSION DATA-----\"", 
                "message": "Line 43 exceeds the maximum line length of 90.", 
                "line": 43
            }, 
            {
                "nodeType": "Literal", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 267, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2235, 
                        2235
                    ]
                }, 
                "source": "        \"-----BEGIN MEGOLM SESSION DATA-----\\nAf//////////////////////////////////////////AAAD6IAZJy7IQ7Y0idqSw/bmpngEEVVh\\ngsH+8ptgqxw6ZVWQnohr8JsuwH9SwGtiebZuBu5smPCO+RFVWH2cQYslZijXv/BEH/txvhUrrtCd\\nbWnSXS9oymiqwUIGs08sXI33ZA==\\n-----END MEGOLM SESSION DATA-----\"", 
                "message": "Missing trailing comma.", 
                "line": 43
            }, 
            {
                "nodeType": "ArrayExpression", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 6, 
                "fix": {
                    "text": ",", 
                    "range": [
                        2241, 
                        2241
                    ]
                }, 
                "source": "    ]", 
                "message": "Missing trailing comma.", 
                "line": 44
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 13, 
                "source": "            this.skip();", 
                "message": "Unexpected 'this'.", 
                "line": 56
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 7, 
                "fix": {
                    "text": ";", 
                    "range": [
                        2560, 
                        2560
                    ]
                }, 
                "source": "    })", 
                "message": "Missing semicolon.", 
                "line": 58
            }, 
            {
                "nodeType": "ThisExpression", 
                "severity": 2, 
                "ruleId": "no-invalid-this", 
                "column": 30, 
                "source": "        testUtils.beforeEach(this);", 
                "message": "Unexpected 'this'.", 
                "line": 61
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 79, 
                "fix": {
                    "text": ";", 
                    "range": [
                        2854, 
                        2854
                    ]
                }, 
                "source": "            expect(()=>{MegolmExportEncryption.decryptMegolmKeyFile(input, '')})", 
                "message": "Missing semicolon.", 
                "line": 67
            }, 
            {
                "nodeType": "ExpressionStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 79, 
                "fix": {
                    "text": ";", 
                    "range": [
                        3140, 
                        3140
                    ]
                }, 
                "source": "            expect(()=>{MegolmExportEncryption.decryptMegolmKeyFile(input, '')})", 
                "message": "Missing semicolon.", 
                "line": 74
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 51, 
                "fix": {
                    "text": ",", 
                    "range": [
                        3610, 
                        3610
                    ]
                }, 
                "source": "                    stringToArray(input), password", 
                "message": "Missing trailing comma.", 
                "line": 87
            }, 
            {
                "nodeType": "ReturnStatement", 
                "severity": 2, 
                "ruleId": "semi", 
                "column": 19, 
                "fix": {
                    "text": ";", 
                    "range": [
                        3761, 
                        3761
                    ]
                }, 
                "source": "                })", 
                "message": "Missing semicolon.", 
                "line": 91
            }, 
            {
                "nodeType": "EmptyStatement", 
                "severity": 2, 
                "ruleId": "no-extra-semi", 
                "column": 14, 
                "fix": {
                    "text": "", 
                    "range": [
                        3775, 
                        3776
                    ]
                }, 
                "source": "            };", 
                "message": "Unnecessary semicolon.", 
                "line": 92
            }, 
            {
                "nodeType": "Identifier", 
                "severity": 2, 
                "ruleId": "comma-dangle", 
                "column": 41, 
                "fix": {
                    "text": ",", 
                    "range": [
                        4348, 
                        4348
                    ]
                }, 
                "source": "                    ciphertext, password", 
                "message": "Missing trailing comma.", 
                "line": 108
            }
        ], 
        "errorCount": 14, 
        "warningCount": 5, 
        "filePath": "test/utils/MegolmExportEncryption-test.js"
    }
]